{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0864be3d-7502-4e79-9ec5-c2738f6de966",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a06ced1c-d190-4488-89b6-1e740acc6708",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "596f1570-027c-4642-992b-47e8cd299662",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b6e4b4c5-9363-425d-9658-1ea934d1c6df"
                }
              }
            ]
          },
          {
            "id": "34ab2e20-6a0a-48b4-a148-97db00e0ceea",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64237318-9e26-46da-a9d2-ee5545838fa7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "57172ae1-e393-4643-a28f-61ed70e57c5b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "14fc4173-52c3-49e4-ba18-eac052eafb41",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bd7df7f0-eb61-45fb-b53b-aea3036f7635",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a6ed8370-9afb-4c11-a805-22347b39c805",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c8671cf-8396-4fe6-ad49-5c7a006333c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4076708b-b4f6-47d3-838e-133cdc1f5cfe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6fbbe1a0-7ee2-4f19-9c16-cde431ed2dbe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dee99365-9aa7-4db9-92e8-b53d9bb952fe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e27235f-a822-4dec-88be-d714aa0d32c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "56d1564c-61eb-469a-a644-d806dd614871"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fbeb744-879b-4647-be16-2f64b7397c1a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2236a5e6-e27f-41b4-9990-5c20316bd713"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9e1a9d8-8849-47ce-89d2-da03e6128ab0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "667c7a71-6983-4466-9f5c-0a240b795845"
            }
          }
        ]
      },
      {
        "id": "54254e66-7f47-4e67-b1d8-971d97883531",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "99940413-c43f-403b-bfb0-0374de8d85c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "644fe1c6-6ef7-42a6-9c0c-21a4ce6e3b65",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bcb7ba99-37ca-4f79-9e2f-27f1009a29e2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881de4db-7a5c-4861-8400-7539e83fd07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aaebcb7d-34cf-4523-b6f5-f7b960b25e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17916517-6503-4689-902c-d47e43108604",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa966e7f-5c87-45cb-ba08-3d02efabe604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70d31e52-1b2c-4af0-9f0c-672950355c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a1d390-5471-44bd-900f-a8f336ef4f2f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef2e4c3-82de-4cfb-ab64-60645f2da4fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1905da10-2fdd-468a-b800-04e01d91a4ab"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "13eaa675-fa2c-461e-8731-a1b4c2a2f289",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ca0319d-0dac-47a2-8dbf-3d7e73aed471",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc5c4e2f-ff84-4577-90d0-61e2ca65e792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fa58b657-21af-4318-8839-fb3d6d55c4f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e6672b-ac20-416a-83ed-5c1aaeaf74e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baab5e50-e81d-448f-991d-9d44a907cd4d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7e0087be-f647-441c-8069-48bbbe62f399",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ea8dc500-a14d-4be6-ad0f-ae54a03123a0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91c05cbe-89c5-4f6c-a10f-8b40864b002d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5a08ad2d-a890-4d51-be58-b99db9973bdd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67964e63-d988-412a-9a3c-ba685835ac71",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "d5226b54-16dd-474f-91ca-02b207af4d9d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7caf8f94-a08d-4d4b-9151-d667c8e8f499",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e71c8c86-ca93-4adb-915f-0c0f28f5cfc9"
            }
          }
        ]
      },
      {
        "id": "13644ce1-1e6b-4f92-b563-3dcb517ae323",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3e728c40-66d7-4194-8aff-fd7940149ccc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d96f0c7d-d391-45d7-9ad2-52fa05036bf5",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "fb7c5ca7-fbc6-46b2-b3cb-673b678ba483",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aab9518-af9b-48a2-9703-d35216bf730b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be91dc8e-8f27-4ae4-899f-78b1e0862f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead0d3ae-ed0c-4931-8500-8fe900adfcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c99dbf66-74f0-4cc9-a0a7-2c59f95fa219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7d8a821-8534-4a09-9c52-9eaac6ed4b0b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60e010c-4a1e-40c1-b506-73d95d0c1a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f37412-c328-48f1-9179-a111135b92e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b790e683-5879-443a-a142-d67456ff7723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77aca4b1-d139-4b7e-8c74-423372890eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b1ddbf-0dea-4024-a240-497f00875523",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28db147-900b-4ae2-9a49-9a047243c240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51233068-2cdf-4016-b924-ea22d8cdb605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9323458-24c5-46c7-8999-6e60181a4b70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1225bfb4-f60a-498e-97bb-2148e40c1734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb4cae1-84dd-40bf-a383-06587e94565f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eba00de-29dd-4cbc-9753-6c00eaa710ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f80168cc-c165-486c-89bf-bf9ca4d97dbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfc55f18-b951-4b4a-8e28-095afb474c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "110bf0fb-0ab5-4ed8-bdf5-8624a951d93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d086d698-27a8-4ea9-9520-b01e3a842fde",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64010093-5e98-4d1d-8886-fd314ac9a089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5293c92-f1e7-4e3c-aba8-72e288460422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60cb333-e9d7-4795-a8ca-13cb9691b7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a83b62a-7f7d-45f7-9b5e-4044e80187d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebc9829-6ef2-43f1-a482-f119d454fac6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b24248-d167-4bfe-bc4c-43ac623e3c25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aac2c20d-8dac-427a-a4f6-13f7d46d5007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b7dc799-d4f0-4cbb-897a-d5d845aa939b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fde80b13-4ee4-482d-b850-c47eca503bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26ad44b-6688-49be-93b0-62db2d19b614",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3579abe9-dbd9-4830-950a-9beaf64cfd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4406d615-a938-44e0-879a-81b55331a675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9a550f2-4dd4-4913-8656-a1906076ea4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61d905b8-7a20-4b27-a950-4b440b8aad20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1716ab-ae8a-43bf-8b47-b96b12869f0b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3619eeaa-befc-40fa-9db6-ceeb044788ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507b6152-61d1-4957-808b-6468789b1298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ae9c98-077a-4cc3-ae93-e868e368bee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c70c4030-3301-4ede-8abd-109b919b040f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f1861d-b746-4df4-9cb9-e820caca6496",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8e1c8d-1da5-4029-b9c6-701fbf099b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d709380a-9087-43e7-8f08-739f59fdd9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23165578-f79a-4778-977f-eb15b7c656ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "187e83b7-266e-41d7-bf53-0364475b6cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabae217-3d2e-46a2-8146-b2a125701f00",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eace92fb-61e1-4b8e-87ee-21afb98c2376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1193a1b7-f3e2-4c23-9311-538d44361fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6952edbc-d9f9-44b0-82c9-dfd1093f3719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e0e62795-65f9-4df8-8e8b-25c9776f0792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a867ca-2753-4ee7-bfda-f6786a22d77f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5d2b59-a3b1-42a3-a30a-c39fcf15773a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d84027-a6dc-43e7-b29e-4d8a7de56240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d738ffe-3e14-48ce-bef7-15e75c8fd207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e948e7d-a8ca-4d1e-aa54-90db0f6c14a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cda5ff1-bdbd-4bfd-9f6a-4521ebb7c7f3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0feba4-cf53-4af0-be00-f2081cc7d5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4114f775-c3e0-475f-967f-fcff787b5f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5ed962-4518-41c3-b88d-d083f6f49de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "399b8d80-7ada-48db-acf1-8717c507ed41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27418e7a-cb15-42fb-87e4-4f7d2cbc9bf6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f6b8de-d972-4dfa-96fd-e62a273fc4f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1fdb733-220f-4ff8-904f-ba789a100ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c78ee69-be96-4374-856c-88e2ee3762da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d50ab331-8218-487d-8e3f-cbdc0dbdc7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7626185f-8769-4f9c-bea3-4d2e6e7b77fd",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c4d925-5d06-4ec7-a0ac-bc760bdbf668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bb192c7-7673-481a-8a87-25e739faca8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd44889-566d-481b-b48b-4bd59e8a2462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7800b218-d9c0-4e81-8110-31e130608fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19700601-07b4-4cf6-9295-374d0abc0ee3",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c34857-ebc4-44b1-8586-9427427fef3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43571e3-a3e4-43de-89b1-ea37e52f7df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ef0879-9b3a-4f86-8b60-fbcce07e797c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "473f0482-05ab-4c5e-8d7c-89847b974946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554031dc-c002-4f2b-8e24-9ea41cb3e6e8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091b6937-c027-4f04-af9d-149d3763bb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9b235ec-b578-4136-9551-08139fa89b9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da110fa-e3b0-40c8-960e-f29d51533582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33113146-ad38-4d78-a667-3a019aa1a0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f78eafe-c275-499b-8667-9fd74406996a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4db1892-506e-4f16-86ab-7081bed46dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af5317b3-2dee-4f26-8e97-d932c347a93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69cfabde-302c-4dbd-bf8f-9a48a3022f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d65b2c25-b32a-4071-8faa-1bd0c59c36de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d743a2-fceb-474e-a365-641074266480",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f43fdc4-e1a3-49f6-aca5-e339d3fba018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1803fe-3eb6-4e00-b443-b7ad580eb1b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89033fd2-8ce1-4285-bf72-ed3b5007b8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cec21a8-bd03-41f8-85c5-0de91f1db9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52eec725-7142-41c4-9f44-a6923226a13c",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0666e5a7-8641-4ea6-9d58-02be14b67bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3388f93-f946-466e-b611-2906af5f7552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbae766a-d9f6-4301-bfe3-5cc178a2663e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7abe3155-246a-4677-a026-d3195bc75d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a2fae3-d2f4-46c8-b37b-ba4af75f9419",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb77390-aa39-4c38-946c-35d615a3787f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e387f79d-a70a-4a07-bc29-5a43075ba440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90975e6d-7bc7-4620-a1c0-f7eeb0c749bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac81ea7-eedb-4ee7-8dac-474907079e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1214b608-d5ec-4105-adcf-1b072136ea21",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b458951-e65b-4bb8-8f5b-5e262ed30e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85304fad-4086-4ede-a4e5-458c1f1365f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db548b66-fdb0-4e40-9bd7-77ae85c37903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b38df489-0d7a-4e2d-876d-8e70f7185c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de036cf-84bd-474f-872b-b2fdd3e5dafa",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f90d9e-7488-459e-8366-94311a6364ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "791b66f2-f2c9-4059-8868-ce439d11e47d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9665142c-3914-4dfb-a8ae-ba866e94d91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "47d834d9-b2b0-44cb-a12f-338017f420a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7fbbe1-e3e9-4b8a-8bdd-1eb43a35aa71",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "012c861b-1803-4c71-b8a9-592df2a46f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b2b23aa-c03e-4ff1-ad96-84cd8b909583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7e6b96-e75a-4b7c-8c28-d1d3a45bc707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "219803ae-b554-49c7-b20a-4732555cf3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb21b92e-5e1e-4478-be40-febcca26177a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b88a46-08f7-4ee1-b561-7c2c581cd64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7a4271f-8a02-46e1-bf96-abd348c17af6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51f07ed-f26c-4e43-a3e2-15df3ef6f340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "466dc4a3-18a2-46af-8697-693aa4554e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788dbb3b-df95-4511-b8d1-791dd8d0389a",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1dbc254-a01e-4977-9abd-1f0b3adba6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9095b90-470b-494f-a3b8-9147d53f20e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be10e6ea-5bf7-49bd-a9ec-177d75afba4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e4d2b70-3c83-4e1a-831a-80e230aa7a11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75010e02-0a53-4c3f-ba5e-188c680b49dc",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f463252-2d92-4f8d-a2c7-90c8774b193c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4bd1972-813b-4b41-9ee8-5e7648956261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e655778-e74c-47c3-a514-7fecf0869e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "76ae531e-ed2f-45e8-8738-39f50bf809c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4b2b12-0767-4d25-952e-d1a7be6ec437",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7b918f-cdcf-4e94-9c76-9af8cb2295f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aaff99a-0c56-4619-a967-5f0865963a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "252122f2-0d6d-4128-b24e-52fdd84ea5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "effaf130-bf4a-4c36-a3c1-5c1fc791b4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08398eea-2e6f-4da9-ae49-7351d5fb7ad4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5760bf-985d-43ce-91bc-52b5ed52ab42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e76de8f-4ca8-4fc2-9617-ba35ee71fe0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f7ad42-950e-4115-ac98-ac6732b858ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0771d5a7-f0a8-4181-9d3c-d0e03f908400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab2da22-6236-4eed-a721-84d098c233c4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769cb50d-b711-436e-ba06-8935e6fe3d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f7d520-7eab-4768-a7b4-db33a1549119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219b64b7-ee6c-4757-8020-bcb56d23f674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e77ced1-9d18-4ea9-8c25-c9df82307d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38c0e165-d14e-407c-a3f4-fa4bcbe414a6",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bb590e-08ce-406b-901f-dc3bbbc707bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874b698c-61f4-4369-9489-152facfc5169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2c0914-6636-4a0b-8e0b-0a83159979bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5cc98f3-b84b-4636-b8d3-cdc509bf817d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23267e0-df0b-4a5f-a054-7b2548881537",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67c1417-b8b8-4cfb-8681-120e4fd4f130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0165c0d2-746f-4857-aef7-e95865bee0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6076e332-c8f2-446b-948b-8bd733b74cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "588f3eeb-9528-4e27-8d67-e50e51394921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f05e97-fa23-4410-8d3b-5aca1a62a9b6",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12616ed3-7595-4f1d-9522-3bba155e7dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc31d982-33c8-463b-beec-4b27f47ecf83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d023d0-65c8-43ba-8809-b44ff415de23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dff33594-3fae-4af5-8ef4-e0e094ee2212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa427af-e052-4476-8302-c8779249e84a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24833d5-ba65-4c37-8c45-5af8cbe9f1ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aabd1ff1-179c-444a-be7b-a1bc86c2b9b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b306eb-c12c-4f90-abe4-79356d43f319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b8129db-7a73-4073-be3e-9087552bb115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c03bba-48d1-41db-bcd7-a6120bee3c7b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b708261c-a419-4cb7-8937-bcc3fa3be9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83431dc-ec8c-4864-90e2-6ddc20ef186a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f190223-c774-48a3-8791-cea44d6d6200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6f285a8-e85c-4792-9384-ba945fa796f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef4906c-0271-4f5d-818b-7c354d309980",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "140afed6-507f-455e-aec6-6dbc799443b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44743a20-b7b7-4a5b-9ba9-16d99092d58c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7c2563-30cc-4b0c-a3bc-2325888472e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "46345287-c13a-4768-977c-013beb94d654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18dbb914-bc18-4ea2-be3a-927c07a323a9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a245d9e7-141e-4a2f-9612-2c74acfd14dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b025d0c-5c29-4cdf-98c3-ec4c3983983c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129f5796-9ccf-4b00-a15a-510bdf38b142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d1341b-fc23-45e5-9ba0-8a0747d1b400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2955da05-4451-43ce-b616-af2999b7da2a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d700097-31d5-4010-aa01-b16a343ff380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a7e980-7f1c-4344-ba9a-12552c9be42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7682505c-764a-44ff-8d0f-36af8b84a8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c25152-ef60-43f7-8546-2f77758e6958"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ed852f-f6da-429e-acc4-ff186260f4a7",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e901a20e-1b06-433f-9e02-88463854bd7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e97550b9-5e75-4f5c-8a26-d7d1a30547b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e275c6d-2113-453c-9e9f-304a38ef2c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9237bd-92f0-4dd4-83ed-36360aa21de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142ddf00-3b2f-4403-a56b-ed4ded6a9391",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823dc2e4-658e-4ba9-9784-bcc35e5ba73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90867ae5-a412-4fb8-8ed7-dec276936ef6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a78a79a1-efac-4d68-89e1-f7be17582a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8fd6c5c8-04d0-4ef4-90af-84862422dec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79802c38-1eef-4dac-a9c2-c45a304eb609",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ba6750-8102-4fa4-b7f3-6a48fa808338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fd43cf-a7c2-42da-b258-9917ae1c4bf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ce97a1-b8e3-48ab-b0c2-06135fd3a2c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab2b9c78-7509-4182-bf56-bc85db53b1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5838cca0-1b33-4848-9cea-fc70b5595e4a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd6b572-f170-4159-8bf7-03ab81450166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c855ed7c-33ec-442a-8b43-d56f74ddd322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f727d4a-9f94-4611-aa31-64f147f0cfbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "09e941d1-c1b7-4668-baa6-9a4eede9c548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a195870-e762-4b04-b21b-bc327753bad0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a544c5-64c9-45a4-a960-4dbc669473e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0836c924-c4d7-4c24-995c-2c3c7dd45dcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c7c68e-79d9-42e2-8973-0bca553be35d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "68e8b338-55dc-444a-b291-1afbf923274f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d8420c-e60e-4186-b8a5-527aa4b40e4f",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6963b76e-3c10-4a7b-9fc7-23be7dbc369b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a51f5c1-51b4-4957-aa73-f1a63ef5140c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11299641-efdb-418c-8e05-a08815e6ff7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1cdb197-c108-464e-ab19-5b40cd2f4c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f1623a-26ec-4e25-99df-671141a2643a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad376b1d-874d-4661-88ed-64ac51d0176c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b66998-99d7-4ad9-8a20-bc28be2b3d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3607a61f-5f76-43bc-b82e-5d76a6c67968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "a693030b-21e2-4cf5-9009-5a2efb2d0719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d8573e-c0e8-4e8d-9f50-15e6766b6973",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd861cc-7993-4542-83eb-d058aea0aa16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a563d26b-201d-4301-97c5-6419822d6d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d79e492-8973-40bb-ad9c-11f1186e8282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "33596fd4-f084-4869-885a-73580123abbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f3ed77-5782-4c66-9dea-34573c12e6e9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3efb785-f7bc-4a46-ac83-aa0f9f8c63eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d3babd-0a41-4f7e-91c5-de08a73a3099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cacb9f8-11dc-4e5f-bb4d-eaf9cf906e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0685f466-112b-43e5-af60-c956d06f19ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593784ce-4de9-4b5b-adb9-a16b1a641490",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221a7310-262a-413b-9464-c430a84a93fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47054315-e464-437d-94c6-a20d24e469b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce1add7c-faa4-45d2-8d56-44c3a55cb2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "335f6ad5-37c7-4b4b-8583-147746b11454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb65f929-a21f-4fac-84d1-7550e941de86",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c181b252-9a14-44e6-984e-8041c7132016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753bce4d-500c-4b4b-a98d-3185fdade4e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51140fff-9fcd-4ef2-87ae-986e65f76e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2df1b813-349f-4828-b451-8054e0cd4d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f93c9f-bbe6-4af3-80c5-972d86de5fff",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "049baa7f-df72-4f07-acb9-f41d0ffaceba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d2a5c55-4c09-4b5e-95cb-08e645acaca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f063d8e-782e-4105-ae78-c0dfd540098e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d273fd69-4146-4b33-b4f0-4270a5f34180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0062117-bc48-4638-b686-769305e9f6c2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b62e10-7697-4135-ae78-aeb334971daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a620f6fe-d1f6-48e2-94c5-7401b98f8aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221024ab-69ef-4956-9b4b-32d2cea1def0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "aa0f3bab-95d4-4213-9c38-80185f77e08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af80e27-c459-4468-92f0-b4a007470c77",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eab33b5-3ab6-424f-b555-4e391e232c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70d5235-0d67-4a4e-a448-2bdc2df24c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86881e9f-1e5f-41cc-929e-6294fdfa3c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7eea4ef-841a-4cc6-9c44-feedae6a1f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73dc9293-9b4a-4511-8d2e-0bc1eea48e6b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb88f723-bcf4-4e28-a6ad-0cf0cc76177b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1197a28-4bd1-45fa-8b11-8f3b52cf2fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e5cb53-ec4f-41dd-9441-206a6cbc5693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "af4dce66-2c5d-4a7b-b331-f227a4ed95a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7059f22e-ba29-4876-8d67-b91331b0282d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4706396b-b60f-41cc-9b94-33517599acf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eca77b2b-3c65-4f76-be16-8b689a86641a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e378aab-5d2d-470b-a631-6f99f40d3e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a117c6d3-639b-4908-843d-7c7e00ea1306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45449b4-7b75-46f6-ad01-acfa7bad7da9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e75397b-3fcd-4835-a4a8-d757cc66613b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e61c4a-ec73-4cd0-bed6-03605dcd3b6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c916651a-42a3-4640-b199-f75da054c857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c665aa25-9444-4965-8a6a-0b15c90655b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acf594a5-5c95-4a8b-a0ad-96457664b1c3",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1573b5e6-86ff-4691-84ab-928ebe460c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9e3b9a-5d9d-4ee7-b828-8add25d7a761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91db8fa9-3c8f-4a0c-9645-216363ebdab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "274f9bf6-5883-44a5-8b20-6cda4edac471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f433823-0992-4a88-b463-20e2490c5941",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb7a6f9-82a2-43bf-bf52-e7f5b220e631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24ee357a-f728-4b85-856b-df4f509e33c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b9975a-b81d-414f-a919-ce6a6e8fa660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3f055a4b-9e67-4602-b5cc-a7d00162746d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4d0ce35-73c8-4e1a-a0c2-77759ded30f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e5a1f8-cc8e-456b-b699-ad0dc263a9e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2ef7a6-7e2c-43fb-af80-ebb1c395a29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c170c9-9a3e-4fb0-9b30-1168bbd3d6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f347672-f60f-4a55-9ddd-eefae2a89a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d45a615-098e-4a4d-829f-e6f67ec3250d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1e1379-e180-42e1-85c3-66ae38a3cd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87f9278-5c3f-432d-b9eb-4384367340ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36216200-f426-49d2-bc73-deaf203e4c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f5c1649-411e-4800-92c4-31aea2d7fb26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b53306a-7d39-4aa6-b5a8-ef2b67e231d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2626e589-63f2-4e1f-a732-b2b9fa99c8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc11085-3088-4e52-a5f3-d5268bfe0a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e96e5a6-a55f-4ea2-9de0-d66b1b0862f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a90b1578-3a83-458d-9607-da75e60775b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3bec71-a9c5-4da0-ba57-04cf533ded0e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dc0bea3-a5ec-4b11-8b8a-bcba866decc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46bb105a-f985-4a5d-9ff9-ce9c2d412819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91680833-0775-409b-bc14-0dbdf97ece26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4a548d4-42e4-4448-8792-3d9a727f5cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197ef78d-0c9d-459e-a82e-ed8c39bb8dc4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e69f97-2940-485a-aae7-840974b0f65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80da62c4-13d2-4ce1-badb-de068c57bd2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7971f002-4582-45e7-bcec-29e785588e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc8b2a82-4508-4d70-aabf-ca480d82bb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfae02fc-22c1-4d88-9a4d-2f9c1427d885",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ba9e4e-e1fb-4832-aec1-67b41a8393b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d63c85-f17c-4687-aac6-b4067559fa31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "194d6a70-615d-4b99-8cb3-fa35ceedf9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c7a7ce6-3832-44d0-83f2-2bea92269ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8538a1-bd93-41c7-ad86-a016dc5d410f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75cc27d-9522-4123-a699-abbc02bd012c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a7b7a2d-a7cd-4374-b340-bf18097edec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3716b8ca-ccdc-4f38-8de9-f997c7940c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c016b6ce-b8e5-46ce-a76e-2ca7877dce24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48afe53c-b3ad-40b7-8979-ad81114b0ac5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57dc7764-184e-4840-a6ae-db0b194f32f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98da874-fa6f-440f-8352-c416da87e4bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac6939f-f847-4dd5-ba98-cb30245dabac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b9931b-6c97-40ba-a995-e6b056abfa0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea41145d-ebc1-4038-a744-47deaf5c011b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4286b5bf-2775-421e-a568-817422599f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef192c7-4efe-452d-bc92-6bf81ea82136"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1290a73c-3866-4511-99a8-2d7f3ac3ae77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94dea081-d578-4508-98e3-ced1f8b89601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417f344b-230d-482e-ba80-ac89910fc280",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c3a9b4-48b0-4cf0-8de0-fbdce9b8edcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a61176-a543-40e0-bf81-982ce3a3e78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f57cbc-b365-4045-a360-9ef6cef245e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6599ab79-3269-4d93-9ed3-00920c88b890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9110818-740e-4a9d-8454-ae1e767bb036",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6664a318-49c6-418b-9790-9f656085fae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d8726a-99d4-4cef-a9a9-c87746a5099d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c9de06-f1be-443a-86fd-2aa73ff5f7af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "50abd7cd-feb9-4aa6-b96e-5c7c001f334a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d1d9f47-12f1-45f9-9c63-49293eae147e",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a42b6160-cccc-48cb-9813-17787bc0bd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2abfa5fa-8956-4d54-ab8d-79b9fa74826b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0d8439-91c7-4160-8813-956e427934d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "80ee134a-8882-4da8-bf3f-77a8692c6406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ca73da3-a6bb-497b-8fb9-61b64c64eaf8",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543434c1-a13e-4462-9605-9119941e8f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15dce7bc-4219-4c6b-ae7c-2474ec748b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0b4384-d041-4587-91ff-b6e379b5f54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2b7bac-8f68-427a-8c9e-10b59dcae78e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af4c021-439f-4069-9375-7e5ac45d9058",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ebfb69-a070-45ad-b723-e94d67182625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd203f70-e1d5-418a-b794-b7f40b6eaf62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b14aa2-9184-4c85-a8be-b152c2683bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "856c6c4e-d817-4d4b-b850-994a588e5d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "527c2c2f-a876-40f2-a8f7-8e4ea21ab52e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf16c6e-9feb-44ba-bc7b-0128c5e4a823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d5fadcd-6888-4936-ac8d-832e433d407a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7c8e1a-7684-4fd5-976d-b71a5c18e6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "518d5255-9977-4f90-86e6-7a44a3270cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ed42be-f6fe-43a5-99d9-7ccdc6e0a9b7",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef90e0d-1ef8-4123-adde-3d09fe0aab70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef238bc8-f61e-45f4-84a1-0dbd937b7424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e224b78-0d78-4a8c-8753-59b96049fdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d23d26c-52d9-4008-8b30-3b11108d307f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1759775-4d33-4f8a-bfc6-2c874cc02b71",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dd15b61-bccc-408b-a3e0-b5261fb6f93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "706bec60-a944-489c-a7ed-9c0eeacfebf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800e749b-1500-452a-8338-7710b62a89e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b75c735-f62d-46a8-8f4d-f28fdb8ec264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "584ddcfb-f6ff-41b3-aeb9-661e4875d7b4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5362fff7-0866-4d2e-b404-14f5abbcfc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4cb0f93-4c36-4dba-9240-9f8fdaecf079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0796389-37ca-469a-8c0e-4e99cf16836d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba0416a-8616-4733-8d9a-73e75d618463"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521b47df-d198-42f7-8940-1ad992b6dd17",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de310193-7750-4f39-b846-55f45835a99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1084c06b-160a-4a9e-aa4b-d9f974700d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f219db6-bdbf-4c0a-9cf2-183fe9cd91b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "add3a3d7-1df4-4d57-829e-d77dffd84bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5873c8-987b-4626-8192-4de25429ee01",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "472b53e4-2ae2-4753-b9da-bf2a92086b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efffe71c-6b98-46f8-baac-3d7fffcd600d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a2d995-3214-4815-9d65-a42673d39afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c19f4b6-ed08-4c64-90ac-1c2516d0ff72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c968591e-c6d5-423f-88d9-9adcdf219d5e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b59899a7-f649-4d62-b024-c6f17a0a0783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736fa550-3534-43e8-859c-69ce4731ec50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5743b40-4f79-4578-be6b-b842594dfa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9bc8d3-8ab7-4689-b336-7854515c9f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4974c05-c9d0-4840-bf69-b49ad4e8046b",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4106a10f-5d1c-4257-a5d5-7256a422e439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846d51a6-1d3f-4503-94b9-12ad3ae5ac81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2571fbd-f9e7-4ffe-bf55-d382fc74e7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "284695fd-dfc1-4291-a353-1263e67f1ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd5776fd-97aa-46ca-9049-55d981dd7da4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5023507e-9fa8-42f0-bdf0-71c6b8fae64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ffe1911-34d6-4b66-9cb9-ed9accda4441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45059789-5e3f-41cd-bd3a-1aa16c2240ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d42e6b64-d1e9-44e6-a419-068ca574c032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6de333-7cb2-4835-af89-c54d654b96a7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d045e215-1d8c-4456-8cad-f284a8364989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ddd85e-442e-4c36-9d57-a4485b0e01f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5d9f2b-bf30-451a-becb-f22b2d0f380f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0642ee8-751f-4a16-9863-2286fa977ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddb9a1c-a6ae-4fed-b3fe-74696d46a737",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7025a44-b862-4e3d-a232-81dc155ed401",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a4ddee-334a-4ca9-9644-767e92819f78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca5a90c-1369-4163-bfac-aa9936f775a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eb3b46b-cb10-4c2d-8ca7-f62b9f43b7a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee1415c-e28c-42f8-b27c-476e35794efa",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e8eaf85-5f75-483e-b1d4-149baf9d286a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8185a15c-1cb3-4c74-bfb4-949851539758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4552d38a-df29-4596-bd77-f0e0b811268b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3094f796-bf5b-4b3a-9c8f-7b5597506cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a27efe-109b-4f43-9214-4a51af994dc5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa2294f-817d-468b-a930-5070984fe37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c82641-c7d6-4068-9c55-313a760a0326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657e6114-2882-4afd-9730-87642881ae34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65b6519d-3790-4d98-8a94-6ee1fbb931fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21652eed-9884-4f02-baa8-187f92e07adc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50157493-9873-4e85-b72d-981d5bcf0fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373ea309-a705-4037-a8e0-cad5bdf9cbb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1932991c-a101-432b-b2d7-5a055dc60437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b72c4a86-0f44-4345-b8e2-f68edaf17f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ce1e9f-00de-437e-be25-bb1f1a4ad714",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d6fd18-faa8-4fb9-bdc0-3547850b3576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3eb48b-a7fc-4e8d-a182-e2fb341d70e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b7d4e3-dedf-4dbd-8b81-19b5c02b3089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93f41591-d203-4698-89a3-dba84f1f19a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6947e1ad-a4e8-488b-a09e-cf0b6245e394",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f36fa70-25f3-499a-ac39-95ca397d811a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326e9b4f-2e54-499e-afa1-b4f0169db101"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adef904a-72be-4493-ad5e-90b6529a52c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9261641f-ce50-4740-9dbf-6e687dda2a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99644bb-a7c7-4d37-b12e-6ba6c1be9de6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e66c50-1bd1-46e6-8a4e-6e442f254290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2955eb6-c222-4743-9d5b-8164c482c8ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d90542-4907-49b2-a0db-95238dd11868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6af2cea4-349b-43d0-a32e-7a8b1603ad4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4521fa-4ca4-4545-ad15-885bb582c3fc",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562885d7-29f4-4a73-ba44-811106bf5f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc3e58c6-d025-414f-86c5-513163668971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1039e82-2a9f-4d1d-81ea-89c15f8a6d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "da4d8f20-e96c-4862-9d0b-9cbf441639f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a6ba6a-94ac-4815-897e-e297646633d7",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea1b41a-fbe5-4c11-9f2b-7cb458f851d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32446168-52ab-4c85-8a9b-cb6ebda4bd65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5a9804-a34e-40d8-8720-a5484e697598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7416251-f1ab-4b38-b46f-2adf80f60d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93573bc-a56f-4eb6-a047-2c14a3e0cbc2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aed5b57-fd69-4138-8368-624c0c857fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2373bc2-408c-44da-be14-e02494a23ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e852808a-b282-4100-8888-8b5c27434ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "664e2580-4a1a-45f7-8599-c9d7d9f4697a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa95f7da-48bc-4f91-9776-088b2428c4c7",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3dce2a-2f0f-4812-9a9b-3a0b10c36d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36acea1e-636e-42c2-ba02-25ca581ea875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f31fa7-93e4-455c-ad5b-d2f503eaff68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4961ff9a-7251-479d-8235-3b5121d0ec69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befbd46a-0b8e-4b3b-8a97-87f03b42fbbd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d48c0b-13b0-4a74-9373-da3d746f8aaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "133eac69-1bb7-47a5-ac40-047138b2e3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cf69e32-3869-4d7f-92df-9d07ec1bc88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "46a72e91-d286-44c0-9e6e-e280b9df022e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "faf7e488-c606-4038-9cbd-4cf568bdd88f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "daa31905-8b7d-4abb-82bd-3f5e3e264ba4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6dd8c1-541a-43e7-abd6-86187217916e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "69a3e76d-5a43-4eb9-b4ef-bfd41836769d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fd7666-7ad0-42f7-8ffe-3aa23c8b18f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9666e871-2303-4dcd-9de6-e7162529b200"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "43dfd30f-9645-4c41-981f-9f3002d26872",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8aa2d8e7-1df1-4505-85d7-8f48047f0d91"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87891f2d-af4e-406b-91b7-6b053fa4e3c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1d34dd4-71c6-4ddd-b479-cfcadb7440b9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "80e77b3f-1865-4dad-a898-a125bc7089ab",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dea9b748-6425-4cd4-85b2-0d37544181ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "427c9425-0b00-43e7-8166-4417b2ab4978",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0bbb67c0-3215-4a05-b404-127167daf718"
                }
              }
            ]
          },
          {
            "id": "bd0b7064-a359-487e-83fe-c85875844956",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62d55929-8369-4301-bc28-57ecb9d58ff1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3643e9b-53ed-4d05-b68a-6f3a2de8fd96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7b664926-3bc5-4ffe-a995-dca65f8d470c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cf8fc8f-5d41-4bdb-b1af-f77a9f2dd894",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3a37005d-a901-4f6e-b1e6-0cfbece436ee"
                    }
                  }
                ]
              },
              {
                "id": "1f7e927b-f9bd-4435-a0f3-322405cd93fe",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc9660fe-ea5f-447a-a257-029703bbff5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b309746d-8ba9-42ee-b374-462f25d6a98b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b7af72b-68a3-4eb3-8672-f613be72f790",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c53b2c33-cb0d-41b0-88a8-9f7e0445b251"
                    }
                  }
                ]
              },
              {
                "id": "c90191b0-13a4-47df-a8b8-836f4f7470f1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a26e9d40-0984-4336-aae8-ed7390ee2318",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0644cb1-97b6-47e0-a2cb-55f26d89b3e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "515c3c2e-8f0d-4dde-8ee5-3f815d6640e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e0218a8c-5abd-470a-abcd-d86a7ea0346c"
                    }
                  }
                ]
              },
              {
                "id": "39b99712-829f-44b6-8a4f-e8dc40b60d0f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe9347de-561f-4864-9839-4a2e9279bb3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee342507-fc9c-4374-ab8e-daeaa28b62ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d8c04021-dcd4-4016-b7be-4defbcd0c61f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e391b8d1-8e4f-4caf-a537-becd0676b8b1"
                    }
                  }
                ]
              },
              {
                "id": "f71ed2b3-2970-40f9-acc1-4ffc72e09808",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "27afd9b8-93b2-4224-ae44-7ca94d52fc1a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad3a7733-5c00-42ad-937b-2181b311f4a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f41fb4c-a63a-4b49-82b2-057b597795d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "3b2873c0-56c4-4c2d-9fb7-90bb7b465202"
                    }
                  }
                ]
              },
              {
                "id": "2a99f6cf-d434-4718-a37d-ea79d6712c1d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "622dd59d-c388-4845-a333-a008e076c3cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d19ad932-6fe7-4a2e-9dd8-d0adb676f3e7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c48d23b-4680-4e3a-a0cb-6c5a88a8d523",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6078e205-477d-4e04-bc09-8b2d131dc52b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c5c7cedc-0564-42dd-a79e-07cea226ec87",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0829b3e7-2a5f-46e4-8965-1117ccd58b75"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5480e65b-779c-4d2e-a6c4-46b2fc46e24e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b2578e37-a08d-4337-8ad6-5c73637485b7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce5ab88d-b5f0-4b12-8229-1e2561b52100",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c2ce7fd1-f784-4c45-9ff3-24ed0270b1c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc2238cb-24db-4eea-8e84-ae104ca74c6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e0d6ace-453d-4cd9-bb62-91470ec5faeb"
            }
          }
        ]
      },
      {
        "id": "1b42b21b-44a6-483d-a4ce-a2c20f6132e0",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a7f65883-0799-4f07-b5e3-451d1446d3a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1671bc29-9984-40a0-97be-ccac5fdec191",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c0725364-1d00-4e7b-a677-a53d6575250f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82a7172b-2622-4860-ab09-f27d50ad58e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517d4fb5-e29d-40cd-8368-ee608bd12c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1311f9bd-e933-401d-aa6e-1fafe4d414b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b82aca92-68c3-4eb5-be05-4e5857cfd90e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c36c788c-b497-4df0-a4f0-e02d50114ff3",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee80e42-85e5-4177-84de-461e010f2147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea995c97-33a7-42f1-ad3d-b30e05647a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4eb9f0-af3a-4169-97c3-73f5d8b478a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a2e7853-4dfb-4207-bdd8-bd4f624dd329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe05c880-53d4-4d4f-9964-1f2dd4304cb6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d124c8-4761-444e-b212-531a1a594000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05d400c-3c37-46ff-a5a9-4906d0a1385b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dcfe8a4-d97c-41ad-a158-9f903085cb66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "06b84bba-ab83-4168-81f4-d3510f571abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edd958a-f5a7-4327-a155-83670724ef60",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68d30df-98de-4679-a05e-e3806ee8fbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81292ee2-c74f-4263-9169-47ce80efce36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "376dc184-4ba0-4e5d-9f62-15c620fcb048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88302174-72ec-4716-8e18-a5d759f80020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ee4108-2a37-41cc-9e56-6be7721c4564",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8969d3f-b3f7-4fa5-b54e-1474d7e050fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193a6859-aefe-4cf9-b4b1-76c6d4408bc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3ba470-fafd-4991-9b7b-de165dbf48df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "103d45a5-ec24-4fb5-b590-e61220cfb24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01929577-b199-4680-9b0b-bc83d92c09a5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1816fb77-765f-49d8-98f5-daff5b5a3b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d87b7b23-1c81-4499-a521-dca65fc567ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb3e6e56-cc31-4b07-9de7-f75ed3e89e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0aa3e0-3088-400a-997b-16c48246b730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ba5427-2c83-40a1-b413-ec57bf4032e7",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af814559-da1f-4119-b5d6-228c1642418d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90acb6cf-59a0-4945-af7c-8579db7f27f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b892aae-257f-4686-9898-1fde3963191b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "404f1d5d-ac92-4138-8d1f-f06678a86cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0152d95-e8df-4496-b293-8d4637be90f3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a208ba2-8dfe-4d21-9576-79dbbc7f8122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2cbead-0c1d-4b6c-bcfc-74ea8856337c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d346dc76-7dc9-4819-853e-877dd1faf745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab8018b-7f0f-4d73-b78d-63cf6eb033e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b3d83b-b498-4720-8a6b-ae38144d6fad",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6939f42d-23f1-422c-a6c7-e47946f3e843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54e37fd-ffd7-435d-80e3-d68ffcbf708f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f01aa9d-beb2-4026-8ac4-3d435ce32035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5513363-24ca-4199-8cd0-2481f3298f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f56d299b-31b9-43cb-b637-790971db68a2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73721a9a-bf28-40b8-9b93-eb0c5e5aa14f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1191fb5-5784-49ee-a562-3d1352819b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9e54a3-126c-4042-bcf0-3ffa3c15e6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8d9ed9-eda5-406f-bd89-2603d83e4c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d216b680-b3fc-4598-9ce9-508bfd6ed5e9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd9d8913-b0da-47eb-b3eb-fd3a84bc6b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c7946a-ad81-4254-a82c-850e21a4e08c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d7a373-a872-4186-b5c8-fe78894f6fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "cbc5591e-24d2-445c-90cf-9322ab841642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e7d40d-47df-46c7-9304-8bfe2cf04909",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c7bcfc-eeb7-4440-8ba1-8f7535c58e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faea992a-f237-4f1e-9acd-bc4b2ccba49f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a708a4f2-58b6-4e35-9c22-b4a1ec818c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65dcb79f-efa7-49f5-b52c-b9745a8524e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9277dce-2a68-49f7-8bdf-b84069d5f75f",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5440180e-de87-4deb-88db-613924b40b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bda728-f0c0-43b4-bb6d-515382e4d713"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2a405f-7612-4e4f-a627-ab18bcdc53a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa2cb59-7ccb-4a4b-8d46-78684c43939f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b74fa90-aa1c-45bc-b7ba-a8fa777036c3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10d7cd9b-43d6-4169-b2d4-c0842add51ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81396781-00f1-4a92-808f-aa730cf3f3cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39b0506-b8e8-4908-9254-f517c5107c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c075cec-9853-4881-a0a7-0dc8402773e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70c702b-58bf-42ce-a8f8-b9e2f52a9bd7",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0400d1c8-4c22-4a17-82c2-0e6d84b6fca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daa475cd-194a-4eef-bd13-712cec5b4deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b3a04d-72f5-43db-8da1-99553fdcbfcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eed7ec5-3689-4e0e-adf5-a1380db16759"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910e03c0-fe40-42e5-984c-a31eec8e129b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ba45108-569f-4316-ab8b-a2f710ddc787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e175996-9126-4634-b963-e0112963883e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de015b13-8f5b-46af-a110-a2f04461c899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc55c831-a76f-46c0-b391-6565b2475b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92af5a25-7592-4770-a7e5-11b739bebbf8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "662aeb0d-8aa9-4bae-a1f7-a9bf0e4532e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e44e1cd-946d-4744-a221-7f0b5dc4e612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ead1394c-4fb3-45ff-b5e8-403385d572f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "68b08977-c8bb-4acb-99f8-866b85eab9e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3ba439-d08c-412e-8290-8b2e567bc9d2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b34f216-fc44-4c56-ba19-b6fd5535777a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e55db1-2e47-4ceb-ba0d-b77f59121cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3da30d99-dfb6-4e7e-a94d-2478fd55655c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "340d2a2d-e657-4d79-bb48-a637bde08cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b1d385-d909-4481-90db-c4d2cf3bf5d0",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70df59b1-7079-4820-8972-d317fd6c1d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb82c68e-6165-4805-9af7-1a4098b4b357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb162f34-3b0d-49ed-87d0-34920cd630e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ba7767-acbc-4044-bd36-79f1fbce5b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab3fdd9-40b0-46ad-b26b-07bb8051cb04",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa080219-fd96-4eb3-891d-77d8a3c948c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1c30be-bb16-460e-a32f-db03f9440223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db9c14e-5a62-4b21-bc73-806e4f8c9abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ed4c25f-a8f8-44d8-82f7-31f26d762517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0032dad7-fd49-45c1-b016-72bf3fec10fc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e998fc-aee0-4cac-89b7-48031108e5ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "788a7ce1-89d0-4997-82aa-a4c9076d706c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0016a5df-57dd-449b-839f-a9a8b7c1fd20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f4705b2-1a2e-4b37-b9ef-5107364f99dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edc5479-6c4d-44d0-a1d2-85640022c517",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08deae3-3f75-4eeb-bb3a-7399c19d10ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94c389cd-6632-4026-b069-6db8dc2a4ad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5399f0-1696-4fee-83ad-1a982243c505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd3737e7-6f53-4c3d-a043-abc70dab675f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa25349-01df-46cc-9ed4-1fb3ec282fa1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56899b87-28dc-4dc5-b3e3-eaef1431ed6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dda8182-debb-4e20-b004-84a1d3ba5795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edfd84cd-427e-4ff9-91c6-83c239a0dbe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f96b2de8-6ebb-4f48-9852-5a14ae14bf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abd2be0-6da1-4e1d-a94f-37ad7564d6fd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a57011-2da6-4850-9f05-0b7069d4d8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02bc2c9a-b247-491f-b773-05706150c80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace6cb03-cfd7-47d3-9b67-e6a4635b098d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ad8946-a874-443a-a584-a08eaada2eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352ae438-3eff-4ec4-8d82-0bbc7879a928",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a30964da-55b4-43a9-8cab-6c1e60aa7624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c8827a-6a75-4e6a-9503-5f0202d5f4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69537561-3111-4483-b316-af40e13d0b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bdb025b-1d90-4d29-bf1d-bbb1133dc1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38263259-511c-41da-8705-1914ccbf9aa6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b07b94-982f-4891-aedd-fd071c950e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ce9696-d71d-41df-a880-1e0b47e71cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e273b56-db7b-4c27-8c9d-d31a0097254b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3337d8da-8853-4685-ac82-31baa7feec9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964ccbcc-8465-4167-abd1-68b36a92abe6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bfa387c-828c-487d-8936-d416076ebed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af74ff0a-4002-4934-8331-7e1eabeb3af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bafe40a-8f43-43d6-a6b1-cacf282adadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "481f946d-016c-4430-96c3-35452789adf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358d5f1d-0a88-4933-98ab-3042d93d180b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6e5a01-d6b0-4677-9083-ed047d65c169",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1fe07e9-812d-4c0f-9af0-792a18b4f52f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4593dee4-b2be-435a-86af-fac14bdeaf34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3ceee57-a0f2-48e6-85ef-47f6f15c866d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aeb0d09-ee13-4288-bb49-504d9a0e9e91",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "debc01e9-62c6-4bd6-ac38-9f6467540897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "415b8adb-3a62-4a4b-a0ac-d23b47bab6ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5feebd1-be94-44a8-a3c0-ff761cd5c6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe30a28-454b-4a2e-8308-8c2fd3dc6067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd376db-476e-4902-8a37-80464e2f96fc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfa71264-ac86-4913-96b9-aa712b2706d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8e6447-7879-45ff-ab85-f9a6e8580e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "424abf71-491d-4302-80e9-6ec5697adb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7bfac89-6ba7-4724-a892-b2e2d5234d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7cb2a25-4d53-4825-a208-e8ffe4e236fa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f36879c-c345-4913-808b-143ccd54a3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b8dd8a-6ab1-4b39-a395-e90e4232f7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6619d4cf-92b6-4534-be7d-d26dc6045ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddcb38d3-131b-492d-83c4-d47f9bf1caa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d373df94-fbf2-41ca-afca-c12162c7ea73",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629ca696-4144-4d0b-a519-4aecfe793994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c109c611-3be8-49b0-8859-4e132d072924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf1eb8f-1faa-43a5-a572-64ccaddb184c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e678d2d-d00b-45e3-82b8-420d5bff41c3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "286de4c0-61f8-4a5a-9e93-27f860c3f5e2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bb787a85-4c64-4316-a23f-16d06e99ce15",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d53667-74bc-4c15-a64b-6f4beaf32837",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "66752aae-5c45-487f-89ec-0475d8589486"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc9ec3e-f9aa-4960-b007-5e35b8774b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "556eed24-f34b-4e35-ab22-95a06425ad8e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae30e471-78c6-4979-bc5f-c7a74a8b434d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "418cf474-a32e-45cc-9909-b634707588d4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79624e11-caa9-4185-99c7-71c50390a51f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22c16409-c1f2-4f0f-a25d-5cfff332009c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "972e8449-b28b-4dbe-b93a-a6e448c9ac2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c692e59-fcf4-4f69-aaa4-9fcffb145995"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bffbe3be-8546-48f2-a569-a8535ae20ce4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a0c570d-687e-4f4f-af42-87c95e939b79"
            }
          }
        ]
      },
      {
        "id": "12da48e3-0225-4c4f-8b2b-60267577b7e5",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "7e4a6139-1725-4b7d-967e-d6664226f5ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72f6452d-dd8d-42cf-8886-028c31a8dc1a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8698dae7-5c5c-466a-91b5-9e7f75c42a8e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f78c4e1-1fcf-4127-b12d-86b987a46ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be43944-3451-4f2b-b5bb-0df688a7d51e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "404ec47f-1003-4d62-a4d6-ab3f4887ff4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e32cdac7-decf-4758-95a5-cebac50f52fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d096eb6-eb44-49ab-a3e0-441f7f6658f7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088d9cd6-4d67-45ce-8eee-54de7f4c1884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863ab416-6873-46a5-9fc4-be07ad025d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c996adee-8d2b-4545-ba3f-b54b30f7815d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb2c213-cdca-4e45-b9c8-c646e3ebe096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b2bb22-8b9f-43c2-a740-c81aea10db1a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e006479-f294-49bf-b9ba-b8f366fc301a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1bcbec-ad07-4a8f-b67a-1bdf1c0b1545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c3c2dd9-658e-4508-b7e6-364367750ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bad2eb94-b20f-4934-92d6-1eb63ff8aae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cfd94f-453f-457c-bdb8-6936e751d937",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04df8bf1-5af8-4147-8fbd-6a504166590e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc89b613-ce39-4f8d-84fd-c9e112506fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42faac05-963c-4c6c-8594-03b34b31ed33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b9e41e6-64cb-44d8-999b-f0e3ffde3422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae32803f-c70d-4813-9239-a59d3b9738d5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd8f5fe-d780-4fd2-bc07-178bf4a4055c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf0e8a5-99ea-4020-9ed4-7fa4c7214240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bf1dc6-dd1d-4d7d-9d25-138dccbe7833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0215e8-29d4-4628-ba18-6f1bb0e8cbb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c1d038-75f1-45c8-8070-b8a01e4028fe",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ca9f5a-2c3d-4298-919e-2b53fb9b98ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f01232-cdb5-4afe-8e0e-09a879abca38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b859d3ed-6a6b-4f9a-9b1a-1b419e467bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d98a32ad-cba7-4e2a-99b6-811905d679f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5574b53-be05-4902-9984-5d9d0ddb2f89",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5df5d57-b382-461b-b935-0cdac015ac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45162027-d85b-45ed-8cbc-817f7be72698"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75a3ca18-c0fa-43c8-88f0-ae70f62896d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc3fb73b-9272-4e7d-8996-484e3567f77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c872e144-9c59-498f-8d33-f20e10a6def8",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595d8b3a-2639-4761-afc5-67201c450bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434d7a1f-ae6f-424f-89a8-3d42f84004d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c9cef6d-622d-4e85-a05e-45f497f81d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72dfd2b0-3f8c-494f-80c4-c90febd6a399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "badebf2c-7d20-4108-884e-e540bf3d30cc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68ce7ea-53d2-4718-a877-df7ffb85d2fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2735e2-c3e9-441c-bcff-91fdebb31968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87f92e6-bc97-4dc4-a0ba-027baf184b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "489863a1-31e0-4351-ac47-b502b6b10275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3940c1d9-bbd4-43ed-9440-9590dfc5748d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e70a41-58d5-48ce-a523-e5c4a652359c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d3a30a-1d1a-46a4-9121-ec5c6be5d968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf740a7-1aff-43e1-85cb-11afa35d6706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "755bda10-4284-4c81-b5ad-b91e55bc1748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa31eaf-0765-485c-99ee-29837c27e8a0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a0b885-d598-4733-b2ee-d8f7a89f61eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4feccc9-7f1c-472c-a0f3-edd91f91222d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763ec710-a2c6-4835-9ce5-61a799ba3927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "644b57fa-e3e7-46a9-b85b-5d9f1e131334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e75313-408e-443e-9d4a-d29aa4c93d3b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609e2568-574f-4e71-88e7-4da90ae1f3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5de35da-ec55-4a5d-a16f-b73a77ca49df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fcf82e-55a4-4985-9040-31faa0696d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ae429392-c713-4e4e-b026-74035c9a218a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b485f3-2159-4c58-bf6e-cd928c10f523",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8ed296-7125-47e1-b500-0fbcf0c2099c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c73128e6-c169-458f-a17a-2a6a7c2ffb20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b3a46c-d33e-4e3d-9ecb-78cb67bfe7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "284f63fb-f4a5-4fd7-a1b0-92a950691e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b3cb0f-0f5e-45ac-8759-3b7975df5071",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3270e359-3cf9-4a5c-94cd-abfc906ed297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ad53cc4-319f-4def-a3bb-c0ff450454a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5deff3f-f58a-43e6-8590-501c81e4b84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7901d8-8e5d-4469-a1dd-cf05f0b72c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0551caa4-c330-424b-b04e-3f3c7852a9b1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f69c5e-833d-47aa-a0f3-ec28533696b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac3ac942-adc5-4984-a513-3d31e6ba1037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de478f8-a637-4c8d-afd5-b4cf83cb5617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "42e9f7df-f975-4be3-9586-5ab58f4f4a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "107576e7-af45-4f76-970c-0e85003574d7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "735e4b58-768a-4f28-ba94-7e707ddd34cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "422b6e36-9ec3-4109-8500-674f6857a3c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf154e8-5b6e-408e-ae4c-75ffe56707d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8dc2f388-f74c-450d-b180-a976990f641e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f1ae88-6ef2-473a-be2e-56eb2e78f671",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7957c62b-4dc8-4151-b34b-82cb09f175db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af0a96b4-8451-43ac-afae-a4ef6d6da912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8079637-4c24-4580-94a5-b96703fbcdc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4e8da2-79ad-418a-99a5-6f6690b306ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0057e9ca-4f30-4636-a8bc-549e26cf2628",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00984095-5d76-4436-869f-6a1ace463b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c93e036-1a3e-4af3-8398-46358fbe002e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950a9a00-903c-4186-a1d8-328d1299d920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "56e02cb9-110d-43c2-b99a-ac71c91a3189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994a3bea-79cf-46e4-9705-620de23cb96c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0359fe6-68bc-4d0a-aefc-aa68f39ef1b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c585d4-01b2-4c7b-a44b-8d6dfc380955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2321f5-395b-491f-8e6d-bb5c03c0bcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5622be5-8acb-4df3-ab21-9a2f67b6d503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47bd45b2-75ad-4720-8200-eeef9bb5eb81",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d13e6e8-b3fa-4521-82af-9f71a7e7cd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1fee128-94ef-4ed9-9da2-a15743ba45b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12235fa9-cff3-4249-b8d9-b49193dcbf40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7bcf039-bd1b-4943-a25d-822bcb92163f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f24ba3-ab64-4580-8347-a81842af998a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeade941-49b2-428f-a010-bba8e07ac172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd8b4a3e-97f9-4a95-915b-6bdba829f2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affb8c72-c615-4d19-b102-e77c42346da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07660e61-f5fe-47bb-9ed5-373247912cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba375e07-4cb0-463f-a95f-c11eb7974288",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf31f33-fbc0-4570-862a-9301936af177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88fd282c-d4f8-4f2a-93c0-05348d6071c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40aa61e3-0f5c-41cf-8e51-8a5dbc53c3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18436890-02dc-495a-888a-d68b6e2ad160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842bd455-e7ee-4afa-92ec-cb4b706129ba",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e902249d-2316-428d-8b7b-a79ceee00fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1417a1fe-79b2-46fd-8686-784046ca9fc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d2ac84a-a503-4a4f-b4f0-b1a155b34a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "151901e6-58bf-4b1a-bbbf-e72a4bb3e7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410aaea2-84d2-41e8-8110-2f28404fc0cf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99efab0-33c9-4859-a989-27e24c6a8e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c2e960-a58e-4ab4-a51a-79d9d84e3d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a8e9496-4962-4b19-a7a0-98f2bab7cdbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d953e64d-da39-4385-be21-65cf8f60f0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86b25bf-cd70-40e6-bf6b-ec764ecb568f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a18d4c-5c9e-4e42-95a6-0c744b4cdaca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9c1131-dd03-4698-bc9a-e4ca985f5982"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c8a82b-f3ee-499f-b310-18049e208113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3c0851-1633-4d09-9300-d0ba84ebf478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e278a8c-2d28-46eb-b254-4f817e22428f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16b7e5a-102f-4629-a36d-59e44c8b6043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611cf0dc-77ff-4662-9e10-c324897ccb9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efae66b-7157-4d8c-8c5d-8a631b22aeea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f281e079-f02b-4804-ad2a-ddb83042896f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "940257f3-dc52-4e05-9789-a73631ac9360",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d6fd1c-8564-4046-ab8c-8138222a614f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "717523ce-d5dd-4395-a1f0-deb9b198142b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63098a5-7731-4879-83cb-57a772c29242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcd38eac-f0ee-457d-bcc8-4cb7e5b2c346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cf3ccc-02fd-458f-874e-f0cb14b14a80",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3231c22d-eb37-413c-8813-26cb6e190805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9c88a6-0734-45e8-9f90-62070e8ac6db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4c47b6-87c7-49a2-bdf3-992775589729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e746dd9d-2126-4fde-b351-07bacd9ce80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a361396a-f13b-4633-981b-10937b295dff",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f5f10d-b628-453a-a5dd-cde59fe73c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b216087e-b463-4b61-8fa5-e246b77887af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c7803f-7f6e-458f-925b-b7f5ae08ce44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a91038d9-8c4b-44b4-8582-af9ac7676d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f83cc6-eaa6-4b29-8ae4-ce4e4ca4dfe6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3eba1f7-d505-4390-a3d9-01eb910abf8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca8ef087-a537-4b56-8c95-044493defd47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd59f656-9c23-46ab-b0bb-5340f67918d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f727662-1258-4e12-af85-cd8797f8ef2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6afc1146-9a4b-4bf6-99dc-5812c6123ddd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fd0baf5-79c8-4997-b70a-3de6e20ef70d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6287a773-01f2-4d0f-ab89-ab308e33e336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a309d57-7458-41bf-ac78-41409122f7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c10cb47-e83f-4fcf-83c4-0390235defbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4e997f-1959-4cef-a369-0f2482d57d85",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caae545d-78ea-4f90-9b83-5e444b769112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "751bfac9-474d-4d52-b4f8-7a39479ea299"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a227c055-bbbf-4ba4-9e2e-bbbabe272a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1db4114-bd51-4c8e-aed3-1263e88c9809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2281d0-02f8-4a1e-9186-30ce4d10f430",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84cfd8c-6545-4869-abcd-a8bbe16b178c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbf53487-1049-4a4f-a698-246b79839815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebbcdfed-992f-40d0-900f-83a3de985462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45323e4c-406d-4e13-9e6a-b4ce1e0e5fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba295ae6-325b-4b45-8ca3-50779831fc80",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddf5f6e-673a-4c3b-857b-4b1e2542620d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a6219b1-71f3-4004-9ee7-29e10b62fd29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48d604d-bb05-4879-8a1d-0f478f984ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78003fb0-5869-45d3-a149-ae101f29755e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814ab44a-f4b8-42aa-855b-5b3187e21ae1",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6066dc-de87-4bd7-81e8-ac25421fa3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe364564-733e-4578-b7d2-2bf7f4ba4c8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1636fa84-e3a9-49af-9a56-e0eef66f46e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bddbaea5-7b05-443b-80c4-b904b701fa26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe6bca2-f602-4633-bc45-8760805b992c",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4530a43-3d60-4cbf-8858-40032ea96d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5ba55d-fdf4-4aa9-b7c9-19cc0933ebaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc97fb2-7e03-4646-a33b-d4a3a29ea642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43700fdb-3019-4b87-9fbb-c0c1f08118d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831c37ed-afb0-4783-863e-d229509593af",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b2bd32-39ec-4ec5-85a8-7f5c61b21174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b95ec95-cc66-47af-9e8e-f0c69cfc2386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23d857d-9d85-4737-805e-e61df188ea73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2d4f55-b410-49bf-a8cd-d2dfb8d6ef92"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eab41484-729b-4cf6-bd9e-3e734b895176",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "58346984-c4fb-4496-a95d-40e199a7be7f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750d72a4-ec05-4752-a895-779635033b78",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d1dec5-6447-4c0c-9df8-e2015318330b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "596224a2-3281-4f4d-8841-71136cc7482e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3ec0452-7b9a-468e-b77c-e75e1e57e2db"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98d0deb7-5cd7-4ce4-8ccf-602d90dad618",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67e84786-b970-4531-8bc0-502f6b8b19fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa95a99c-64dd-4b1a-99b1-ca23c6246773",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6f1ac18-789e-4169-b089-fb6d310bbd45"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dc3e1f20-f2df-4f8c-8ba2-aa9a0c4bc768",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e2162436-5fea-4fdf-bb17-59be74601897"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "174a75c6-b98d-458e-99d1-32b327313be0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a65062b6-f5d0-4a28-9c9d-771f0f799c41"
            }
          }
        ]
      },
      {
        "id": "f2a46a31-5981-474b-a0b5-b0d1596b3d4f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8d1ce2e0-9f43-4ca7-a8e4-66acfc34cc02",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5b078ceb-2c2c-45e2-af53-475414017cf6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "bb7fd5ec-88f0-4684-bb28-4846697982c5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4ef854-4cbc-4c9a-b3f4-83f2c7a4e9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cc37d54-33e9-4332-83b6-bbd174e6c90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98a6ad8-1b06-45b2-9246-5bc7ff631ebf",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73b4a93-eecd-45fd-9877-8b1a0fdccc66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9887fc2b-6057-41b3-95b0-0b47a838c35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f98147f-b49d-4b3e-8460-497ac7a5c688",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0309f621-54ee-494e-b34e-f180bb62f4af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4962d93c-4ba4-4ef3-b7bd-33f1045f117f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151976a9-66f1-4a2b-b128-9e11efb3e6a3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8b3538-8378-4a07-922d-d1eeeebc800e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fb84c6-5708-4fd5-b483-2443cbbadae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6656de-9a1b-4582-89c3-61e38d2a63a0",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccc88f87-ac13-470a-bb1b-81c1e6235b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46aec72-b626-4879-8f3e-94d70df2b8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a73474-6e6e-40f3-86aa-95160ac65fdb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7c94bf-eb5f-4e14-91b6-522330c290c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5cba5c-54cc-4b9a-8099-c1c03e54f8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276b37bd-d1bd-45bc-b2ea-34d953ce552d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed4ada4a-2d57-4f9e-bc6d-c0f2a38059f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d36fbc-8040-434f-b34d-dace4132b5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22d51c35-5b64-4b04-9bb5-3e5154f3ac77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "765b9a49-fff6-4284-ab94-a876cf38ef26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da73a346-49ae-40d8-a6f2-4a13983e354f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2a337c9-38dc-46dc-aa39-d1be79d51bb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45591f57-993c-4b17-b71c-85a20c3d05d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a5e95c-417a-4d8e-a96d-bdc73dcf20b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5f51e8-77b6-48bd-9225-dada2aec7595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0043824-e6e3-49e1-ad02-a7476eda427e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d72e19b-8498-4b63-8356-a9433f192e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97951407-5c85-4714-8af5-0a5ca5b07ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55cf201d-05d5-41d8-ba36-433daeb07526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df2a86a-4340-4ee7-98c4-d5820d28d1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67599b17-2bc4-4e89-b25d-5563918feae1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d110c43-db6e-40d9-a441-a0266fb67526",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07220f62-d41b-4892-8cd5-f11aa5e93efa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c583bb6-e2e4-48d6-a591-879faf4f9a7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d049f5d-15ea-445a-99e0-7968413116b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed049876-c969-48e5-809b-96ad43f3ec5a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd4439f-79ad-4178-9786-3ed4b6e7b424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3758b9a-6c33-492a-b2fa-6b35ded55890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "419239a1-93b2-4761-8805-38d8ca53d78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeb5e4a8-d7a5-43bf-bbc3-ebc0d8c7c3e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ffc50b2-7ebf-47f0-9a51-a4905e44cd4b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d8de1d-a7f4-4aea-833f-6adf0d3e8aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835d4942-7ca7-47e6-95d4-c8e87856b438"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a84afb47-2d6d-4946-a7c1-a7445bf99674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "002fd367-2875-4b8b-a04b-c3e7d8c5d3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8277e386-b915-44ba-b2b7-a4eff3fd0678",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85d263e-3c12-4776-86ff-fbe3eb1349e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec36db82-c81d-4fa8-9735-5dc0b2999ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b618d37-dc12-402b-9df2-e94b9656cf77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b057260a-277f-414c-a185-d7546e70c46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25497dbc-313b-47a2-b5e8-f9b92f0a5c3f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85514123-9464-4cc7-9ba3-83e6b508b41f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3b1f596-eb3e-4796-92ba-807a2d27325f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b53391-24cc-47de-9983-89387a62a37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65cc3ff0-9ba7-4f11-b262-c3dd80a34f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d970bd1-c2ab-47e5-8c4a-8a62d40b5e0a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8740f13a-d496-479d-8c0a-375e353a1c26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c20db18-90b0-4064-a57a-01d536b411b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8f6458-2727-4b70-9ede-0f50410715b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3451bf-6964-471f-96d7-7d525e6cadf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745c80f8-4d38-4f13-9729-7b3646a767f5",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06ff427-f012-4828-b860-f7e4c5be97fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3b0e8ae-3477-4297-884b-a5e245c210f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c95496-31d0-4767-8f1d-6ef9a4350899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160d8a61-d79d-4da7-a85f-84d1a07254d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d4a623-3515-48cc-8960-51d409bd1af7",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b49e12-c8d4-4c64-b9a7-56516b20742c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66aa925-d0ea-49d3-8026-c2abef500c2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e5278d-b74d-44f8-a2ea-04866fda8645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "479e29cf-7a4f-4403-a8d2-ffa2ba5290c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e0bd48-f2e0-4d10-b38c-a7253e67fc7a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3eb88e-d454-429d-a42d-c67c244581bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd1a555-54dc-4273-82c0-951b92a33b87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcda579-985f-4006-82ca-4afa7229eeed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36cc94cd-f9dd-4eb2-8470-ab3414d897ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31e7bac5-8505-4149-a8f2-c2c0dc7d24de",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da703004-4c35-4b28-9b06-64ae39d15ec9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe05e20-54cf-4520-9659-d7818a1e47ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f6b7d3-4daf-4777-b8e9-939b730c4e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c6d9570-d6ad-414d-a413-02fb62cd0c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6945ef07-829a-4630-b351-60a9f22ec8aa",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93d0a6c-6e4c-46e7-9b56-358e4b49fcdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e639e8-525b-4762-a9fe-e7a561c51240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43aafc0f-28bf-40a0-b2b5-f0495d7a6ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43094de9-8bbe-4739-8248-853206c70829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f475f7b4-921f-4a12-9947-bc5c09ec690e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7200f53d-24de-4fc4-8bb4-c1fad62f41e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9618a03-8ad9-4026-b2e4-71430eb058d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6d0ad6e-fd01-4c3a-80b3-96a516cc9a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318eaadb-1a2c-4fdd-b409-7b10adaabc60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14540cf5-f69d-45ac-b9e6-fb1f01584948",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e8c7431-e717-4673-a6e9-7d279e11ae50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d230bd-22ec-4fbb-b100-c37da6fb73c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47651369-a244-443d-a680-b12eb7799595",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5796007-2014-4f3e-a9b6-fd1460cc5f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8369ed4-3a62-4b51-a0bf-b7c1026e7590",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d02e8e4-f9e0-4d64-8780-56aa57c71a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42a2b0e-b194-41a0-8738-7eb8f5f4e463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9124c384-e7da-4a76-a176-8eaa6508ec80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "233f46c8-352c-4ecc-be34-a32d023d2cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2939cbc6-1acc-4734-b965-0121b68962b1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac1eecb-a128-4d67-9eac-970de6262ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29d346bc-858f-4e57-9529-d72518623bae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbeacd3-dd1c-4944-ac15-aa14acd9bf6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e72ec527-5d8d-4cee-a318-e59fabe3511c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9dc6492-525f-490a-bcfe-1d4c7155a220",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd459f6-3ac6-411b-9649-141e71d338cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b767575e-3dc5-465a-bfc7-1a605f9a867c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c52a045-9c30-4c04-9cb3-6ba1bb30c81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eaf3753-9fc6-485b-b647-a0f93afbd706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01c8380-fd2c-4c35-8ea0-8d80cbacdb10",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e91cd4-763c-4309-b44d-ad79003096d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b3051f4-5aac-4fdf-ae75-96a0ae2d45c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f07a5a-36a2-49f8-982a-77ca7043fb50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ea407c1-eae4-4ba9-9695-dee43bf1eefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2497e067-90a0-4e0f-b047-0cdce22d5b47",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196961aa-7361-4ee0-b512-3ff1e72872c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beba02b0-61e1-4ad5-acdd-7af21829e15f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1323764-d4da-4060-b1a8-642fbcabfc83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97afa44a-dca5-422d-a47f-33990accf2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed986c0-b17d-4817-bcd0-4de04a61742e",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5579991-04a0-40ef-89a1-e6dc5840856e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67c53e0-bb30-404b-851c-66296c243487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9da602-93c6-48b4-8add-9b009a8ce014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9545b66-9557-4d75-8c3a-b7cc9c64a95f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c673f6a-ba7c-4dc9-ab5f-5f8c635ecb10",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b26c7aa-8eaf-43f9-9564-80fe18bef85f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "625615fe-c5f9-4545-80e8-f09f0b0c36e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7081bfe7-9401-4f87-9ecf-5b764c8fb4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0476ad5-180f-4e42-be52-bfcd3dbfc4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d431dd92-9749-40b8-8d27-57cb8ad8a2db",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d69a16-b412-448a-9e19-371f38275774",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4ef55cd-f0af-4b8c-8191-d53de623326c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e8019f-4d46-4834-9e72-1e76e5b64dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca406c14-aec5-4374-96c1-847c7ab59cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f006d8e-66fa-45ce-995f-f7e4d790f2f0",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02c8eb3-6b9a-4a77-9970-7b4bc7a0ac00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28ef9330-f03c-43f0-ab22-310cdc871e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "458dbdbd-942c-4407-a853-07b472a4e991",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96db9aa-b7a0-4ac3-8e30-31d400aa6a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9186c8-e72a-48d9-968b-e5dfd68a89f7",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5cf8de-2150-4287-8fe6-6f9d218f0ee0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58e2b4c3-c805-4cb7-9419-91e36866e715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5128f0d9-c20b-4819-ac44-ec4802e6360d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76311dba-a01b-411f-ab8d-79b7393c246d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354985fa-677b-4693-b90e-7da5ac6e51e6",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda9c5f0-d294-4878-8560-5f82a68b914f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b611a8c2-4aa9-4e71-bf9c-48637c94a0fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfeaa5d0-7aa5-47ad-90bc-2c2e07054451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "688ee671-dd18-4dbd-8bb7-08184caaa77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43148f51-e6ad-40c5-a624-a0a0408595cc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f2cf47-53b9-429f-90a3-7fdd36b8f28b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7eeed7f-c104-453b-860b-2d85b80a9ff3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c464fa-52db-47d8-8577-773105a5221a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7fa6706-5b2c-497c-91b4-d8aa69bbcb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef4bdfac-20f9-432d-ba7c-c11783058f06",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0721cfd-eac6-47ff-bb37-abf5edaebc4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ec1fa1-3280-4f97-8b19-70de804cd10b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a587649-6a16-4da8-abc0-04826067feaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c0009b2-2621-4945-aa6f-d1e8f35901e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9dc380-3b7b-4d68-9f1f-50c674a3ae3a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9999037-b859-40db-866f-9f711813ce05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d3eb3e1-9794-4ec5-98bb-df51f669b77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1140bdc3-f6d9-45ed-b0f6-6a7de7af5e22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2234ec57-de3b-445d-a416-3b71e997ff12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "778aae9b-3e36-4d28-ab6d-37ff6607f797",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4438b07-7efe-410c-af8f-38db533e31f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63c2e56d-00ad-4135-b94b-4c0a4d330b2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040eb514-0db7-46f2-9b4e-28eadcff2fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08aa322-0845-4d60-9174-259722a202cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc09ae9-1911-4ba4-8c03-17fea289c4b3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a529b73-2c87-4034-903c-8d63edae9510",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2173db-6adc-430a-b52b-cf6fe51882ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a434fb1-fb6d-4b5b-87f3-246baf80987e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730e22dc-7b89-47d3-af14-524038eb9bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705988a5-6bba-4e61-b036-8ae924c06561",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93818100-5dcf-4604-ba36-ef00ab7913d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cef1628-1dd2-4c99-ba9f-9926f94380e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47f3421-41cd-4a15-b0cb-8a80e05955ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2346624e-99bd-4e7b-9972-badbcd6731ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57700132-9227-49eb-8882-ecdc893313d9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee763306-4d89-48f1-b36b-e90c2bc4328f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8556fb4-be0b-4bc0-ac40-efd47ed25eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02efa1bc-a627-4c64-a29d-c8ad3bb09cf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b5723e-88a3-42bc-9f20-17d203f99de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b80cc5-0ce0-474b-8831-bad0cbdd28ce",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20376cfa-7e90-400c-81f0-9144fdc66e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c32bace7-eada-4323-8275-0440bbdb3154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85be99da-c91f-4035-ab02-fd20873d3a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fabf0268-3a3b-427d-8dfb-f03eb91d7fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1618a31f-e7ec-47a4-8fb1-8f4f8765ab17",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6114fe24-8007-4a07-850f-144a2ac434c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb6a50d8-daa3-4d28-8138-7ebecea30a15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d7777a-61d9-44c8-9fe4-cbb0b47674ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18624e5-11e8-4e74-af33-7a663a023e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c902e0-a754-4958-a8ac-96db96fa4695",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f757c5ff-87bc-4f75-97ee-dcc197c80d43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef01991-5e07-4ca1-a3dc-b2b7e35a3bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d62fb2-2104-4fe3-b203-662e4662678a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf6eb3ae-121c-485c-a61a-4889c0dbd4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6a76f1-20ff-4c9b-a7a6-5838092c0634",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ebdaca-0f2d-424c-9aa3-eafb5d6413b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cafc0d7d-a1d8-455e-84af-ee3acda95838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21310418-5013-432c-bbd6-bffca266454d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287b76a0-8d88-4fe9-8788-0c1b556a7920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "949c8a7d-16b9-47e6-8fca-6a0e1c490b67",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a501bc7-9de2-4c2f-b243-f1f8ad932e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389503e5-2094-418d-99a3-04e420a60b30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c45417-ea65-410f-be8d-b74a87253c48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a4e51a-3742-4887-a6c0-47fc3a26a1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9de18cb-b115-45e5-ada5-bb8fdf5556df",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d886d665-537d-41e8-b6b8-97376e8411fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9debd25-e594-42b3-b83c-5d0f21afa8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dab4801-5801-4a91-9490-bf6f5c6a8ee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b575b110-a44c-483c-a38b-bb0e4790b02c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f876c98-7f9c-4d59-83cb-a625ba17306c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fa3898-5bf2-445d-87da-adc213cd4f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d963d7a1-9441-405d-bfb2-c8e31cfaebdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53993f3b-2845-4dc7-a133-1fe2dcf09652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a2f7a6-f926-41a9-9a65-804a0ea18da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3958cd37-dab8-426b-abc1-0de3d2d3cfd1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da385c29-9813-4a35-8bfd-1714e1224b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84bd4b2-09de-4bc9-90d6-c705465edb82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab217fa4-6eb3-4149-86e7-7fd74926d571",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "683940c4-db61-4afa-a559-66ae0f050d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e07df25-2f8c-4c30-a4e5-a05eb27f24df",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84f0f78-79d5-403e-b7f9-07d468b6119d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a092b9c-6837-4b25-bd45-e0450de826e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3354c49a-a907-4fa1-bba7-a5434ff0ba16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d77e67eb-7bbf-4154-9a94-50544609294a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb77989-12de-46f1-acd4-e2003eacc9c2",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a74a9d58-8c9b-40a8-b846-c9f1f1c7e88a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "462907a9-23b7-4164-b249-a82c8066160d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa2f833-3df1-4f0c-acb8-f63bed6ad524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e68f8a-a55a-4e79-925c-f45d2e0dae7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "414a1a2f-10aa-48fc-8598-d16892763dc5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9763e7b4-9109-40b8-bd5d-e05f84f05db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96cc7d4e-34cd-4c20-a10d-6c34f81d3c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfe484b-1ebb-4a6d-990d-9d41877fbeb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14174732-f539-4d2e-bfbf-6f4ac381ffef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03c25587-2e63-48f0-b980-31b07f97b15b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc4a808-f00d-4c30-8695-4ad17f2e7a72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc78752-044f-4890-ba33-0621d5ba8d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea6e632-090e-4249-8b0f-7f16d6b2df8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae35e859-58f8-46d3-9be4-72ea10dccfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec502963-affd-4a64-8adf-4741f8e5672f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df1cb5b-2783-40aa-82b9-454d8bd3fbe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "132c76c8-e926-4c55-b52e-b30a345e6e7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ed70fc-8a01-4f9e-89f9-62cf8ac853b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e17ace5-3af1-438a-9e3f-d2e69ff85692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e48f528-6c97-4214-83e9-1f67c7198f9c",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82da6a6d-584c-4d19-9f4f-77ca47377592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ebbd4b0-47ec-496c-9385-25b64f7e242d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ba71c8-55b7-43ce-96be-baf73e5581b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00df384-b097-41e9-9c4e-f060885cd4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3392e8-325a-4073-875b-b66b8cc1845e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbe2b36-3431-4c01-9e8f-c2c7db2f3afa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd74ed25-e584-4776-aac7-dd643fbebcd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfed773a-8712-467b-9844-fbef2e58e6fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ba2a2e-eaa0-4d16-a2e5-e2aba57a1454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751788cd-11d3-4eda-bc24-fe4513f38b48",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e442b20-6458-4085-a8c1-50f76a6869ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5c3b4be-edd6-4a59-8a9b-61a04c543008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9dacc5-601c-43d5-84cc-5548ee82aa83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebaa592-3638-49ab-8e84-337f0c90a51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fc7b60-ad72-49cf-b081-cd4241030c96",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f95c520-249c-47db-9e28-d9415675b1b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5311ad58-31e9-463c-9deb-59c03539e695"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52cb174-373b-4ad0-b297-de185f1081b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82dbfc7e-b397-4f42-a679-094a56e1fc9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4bb392-e814-485f-bf50-cf2457f31edd",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "498f94bf-a10c-44e3-9d0a-dac2d72bcbe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "605b4c83-15c7-4bb5-aca0-56c08ae8e627"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b225bc-1e77-476a-b985-1b9ccea9adcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54c23f66-20c9-4094-a1fa-3c5ae7abc3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e4862b8-490b-45f6-a5f1-2cd8bcacd090",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67e57b50-975b-434f-bbeb-9a1220bd3722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27426d35-5315-4834-b747-76f68c45af32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ff73e5c-d2a1-4186-a756-2bca8a7c1124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0712f59-a9ca-4338-8a0a-138f3e540f1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244fbbe3-109a-4169-b0c5-faa123159147",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b822df-010d-4e2e-8fff-a78e60b70740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8426c485-4f63-4784-9562-2f2c97716736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6c805e6-71e3-40bb-8840-55f46b531b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c449c7a2-81b6-47d9-96c8-2187541ff5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5108d4-48ab-4521-8454-68d5dc695867",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d8d5eca-dc98-47f5-a96f-7bdc664651b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2bab71d-2eca-4376-8bf6-6e68dd474706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a051a92-ad5a-4f1a-a2a2-ac4eef27e13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ed877c-cde8-4fb2-bbfb-dd5e010fbc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95769b11-b6ec-43c7-b934-8b442fe0ac1d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67e0886-e29c-4fb6-ab42-79e07455101c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21aab6f6-8cc6-4a1c-a4c9-7fb82345bb6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f808263d-c68f-4873-93de-bdf90c25ba11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b080858-4d0a-4253-809a-d243acd366fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac78290-10ef-4b57-b98c-9ba80323cd48",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a98c869-5ac5-4c8d-8457-15759a82e660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e657c3-5aee-4165-bacd-0125902952c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4fad73-0835-430a-9954-3c18acb4992b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af10ce15-13da-426e-a09d-29e38ebb5724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af85bd5f-9df1-41f4-9961-1b4c906f9633",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b6d597-040b-427c-981e-b2eb5edb6fea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "757dddf8-56b0-448f-a4db-8792eb52d2f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6958b036-d0f4-45c3-88b4-7f87a4f1e81e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f41054-0a8e-4ae0-84f0-80b5b82e13f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae162cbf-9307-4f6d-994e-e9aa2317f4e9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7389058c-0d32-42a6-b9be-b2aa2119cc9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ea02203-9307-4d04-bec6-503da11aeb44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48f3db1-4d2a-494e-92aa-ce841d3ab2c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24141ca2-5bdc-4273-b592-33bc5f025971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10af2fb5-62b9-4ac4-b3e2-916d3e7883c8",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0544b385-5a8c-43e3-b51a-c9dc8c2e3987",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02cbe0f0-54e4-4e17-9c92-99a08f591424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93f1d507-4426-4379-9d23-85bbc215eecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88086dd3-c75f-411e-8ee0-588e36627a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197439fa-e608-4c15-a1a8-f34f67ab614f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95cd210-c73e-4978-8800-c30ceaba8dfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a71a5e8f-885a-437f-b42d-bf9f31b05323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c6ae941-fa1b-4433-add7-779e94c01ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9894e8a-ab20-4214-b51b-31c400c63a18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec9e2b25-a393-431c-849b-ba8476c8b180",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa72d637-7403-44bc-90cc-ae3c558aa1f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecab3a6c-5a18-496b-8ce6-3ad74400a2cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d42d6d-5c8e-4b02-bc12-9bea77810777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8a9c1e-ec6f-4140-870a-aff9c4db47c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5fc2a7-fd43-4a6c-a5ad-8ed1b2aadeab",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682b6a8e-be41-44f0-b08c-76c8b67ed3d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93dfc9b0-b200-46e7-bfa4-3b36d524f3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb6b34f-a0f3-4769-9fa4-6647758228e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd857202-521e-473d-afff-81b516434eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cab01ba-1b0a-415b-bd8e-16f975cb5648",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7c15ba-0b71-4796-bf1c-a4776d0952e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b29e25a3-84a9-41e8-a5e5-93fb64e4231e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e45417-4ab8-4fc2-a967-0232bfe35601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5712d71-cd9f-4be3-8e22-5e96b2a7570f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2189eb65-0779-42c1-9bca-0dd73c5315f3",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ceac9e-778e-403c-8cf5-a497917ef2be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5131e359-9a25-422c-89db-1505646e5905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "573f0afe-7e3f-43c6-bd71-abccd037fd26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "071c4c67-664c-40fb-9eb4-a715d702b15a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9bb1b4f-7109-4f45-a548-01ceeb3b1136",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b1638d-97cf-400d-9f26-d0d04f17cad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d42f576-ef60-42fd-830a-80e670511e95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92990589-e6ab-438d-9b45-dd0fb3dc060e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f857dc37-0f27-4ca6-b893-8f3b7661688a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b302750-f2f7-40bb-891c-7dfe6bee2b8d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc7214d-be6c-4428-be76-354b7be2f201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ab9527-5066-4849-9862-d9d570cd76df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7534fda4-0dd3-4599-afe4-2792c444a676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3386838d-28f1-47ae-bb0b-1a4990cc2c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86890210-3e0d-4423-8c96-e7b9657d3fdb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ab1cf7-8dc6-4182-b3b3-01e40939074c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b25727d5-8c2a-4b16-a13a-7094a1fb7d9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f50aaf-e3a4-402e-8197-cf3041412db2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf26ac70-6c0a-4651-b0cc-14078f9cdd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a67404c-17b2-43dc-893a-0f0f54001752",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a708fd56-4500-4ef9-85e5-b964b0400001",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba8e19cc-08e4-4822-8b99-5debfc04bed5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80a966be-a758-4673-9721-54a2ba51b06e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7815788-1b47-4d05-8733-480b07a9df06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d555d47-23e2-4037-b016-cf0c239596d3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064b4568-6195-48dd-af11-ec0b508f6e6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "167c1680-7261-4829-9365-64450f163918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b68d11-d5b2-48fa-aaef-3039771c44cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63713b5f-9ac8-458a-8c45-17e909d87feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d332fb00-3068-4802-8c37-ae4adff01180",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b48c2ee-0ef5-4310-b670-d06da4f3aa62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74bf16ac-452b-43a5-9ae5-c3cce20a4e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73331711-64c7-46e0-a3d2-8f3881d3b9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9132360e-1861-450b-9eea-7e5f7c891834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c208e8-1f1d-4601-b66e-87fd90c12208",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659d4b6d-4105-46d0-9ec1-aa231105e648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dab9bdb0-de0f-4963-b9b0-1fc88b7c734d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa879258-d63a-4b19-b7f0-57bbe0100178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1250ff-4293-438e-b1a0-a5189dd136cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471e9b4d-9003-4613-b31a-0e282589521b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec1d203-e2b7-48cb-996a-370a1955fafa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53024f93-b19b-44fd-b073-218e700e530c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd27257-e04a-4d0a-91cb-e0a9ff931d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14150c4c-8f20-4df5-a975-50d4dd77fc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "989cbbb4-ec53-461b-bb78-9d85f579b26a",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a229131d-5a85-4da4-a850-1ebca4e74d5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3fec0db-2f41-4dae-aa64-45502ab80af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79791b7d-d308-42f0-bcb6-b5c90a21f24a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb581291-2def-416d-9467-8e7195c83877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057e6b33-28c5-44fd-9a52-5e669e9117da",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb27328-3bd9-464d-be72-ee25682fdbcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11c9ca3a-098f-4f97-a5bc-2e3e5a25e96a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c06031-a6a0-4303-aa99-9f19ae59d8f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bcc3dd1-31df-4bd7-85f8-aba221cef474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91875e3-43b7-4712-bc62-931f3cbe4c6f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be812192-7537-4508-a150-95f27688b1b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79ab6e3d-8ef6-429c-913d-8ce8d10a118a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e7e073-f1e4-493e-8b78-198f6a5ee267",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3690648f-a924-445e-80d2-95ccc8986cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a1a6cb-8398-4e62-852c-e47036f54eed",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de83b25-459f-4800-9007-ab66514ff86f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8724d9a-0575-4d0b-8715-08345f4ba05c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87003130-d8e9-4703-86e9-f106584a005e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667ec317-de70-4f8f-bcc2-b98be81cec6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9c3c65-0f9e-4391-ae77-e333f7a0d518",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286660fa-557e-4ed4-b925-0d7af55517de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "296ea7a7-988c-4aa9-b2e7-edc46385f123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ddda15-f74f-4616-8195-ee99102ef625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5d4060-6c41-43d9-8387-aa4fd63d3bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6464727e-2b91-4c63-a7cc-a8ab0bf062dc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5112bbdc-5330-4969-9e4f-de50ac2f0015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63f5f102-d465-48ed-8000-3481696e0cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5da7895-c99e-4738-85b9-46aa2ccadfc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83bf963-4eb0-40f2-8e6b-924a2751a2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d85d263-0d03-4c2d-8acb-5dc262c0f8c6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda0fa75-e37b-4081-8fc0-17d1626fbd73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a946f97-1309-4b33-9a42-6aa47b1b07fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1e106c-95f8-4c00-abf0-d3c80958b248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2a4081-989d-4cbd-bb96-b6393309f38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0255fd77-abdc-42e8-a2b9-fb71df98eb0a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd92785-f02d-4d13-9908-0e8836282010",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52e2e46b-6681-408c-9724-8637273cb72d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b325f673-afa7-49ab-9760-6b122c7abe4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fceb690c-942e-4f9e-8d02-84898ae52954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee2d8ab-adbf-44bf-9425-be18c9f854bf",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa22eefa-51e2-48d3-ae23-36de597863bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b9ce6a5-bc5b-44f2-b1b0-1c0cba3ade98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23785bf0-6dcf-421f-aa91-30e42b2a473b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3bf003-339a-4f09-b21e-e393409fc01c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37bae28-31e1-406d-9cfb-39a87d55f6e0",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8f0432-3058-49a9-bf77-b6107a026ef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f533f924-d6ad-4190-875d-a68322d16e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d92d8c4-d9cb-4c8b-a944-ce7ffdd361c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c173f4df-8b38-44a3-90f5-de7d74c23aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf4db9c-b4f9-45f6-8e67-81982e6cb6b2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886f36e0-71f3-43bf-ac5d-ef19a3f03e0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a66ef88-9445-49fe-937a-722e5052b6d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94b20a8-4cdb-4937-b9b3-4488e454a08f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22b59d76-6338-460e-b757-df4f70e8dea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7d14cf-cacb-4b6c-8d6e-00a219fe2c4a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d916936-c7d3-4c64-ad53-91a91f31d91f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55ba6766-c635-47a3-ba3c-7065b323a8c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef94936-6be3-4e70-965f-4f0639368a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01788f4b-e74f-48c3-89e1-a865e1d47a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0994afbb-0fc9-49ab-bc34-b4b2a683b7c4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26f781a-06af-468d-9cc4-0422f21793ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d0ef70e-2eef-41ca-858c-55013d2b8657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c051ff-5faf-467a-aec1-7a212e168932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe2f029-1ba1-45ea-aa7c-45736ceadb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf39aa76-c311-4064-873f-e48d256a2327",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a449dc1-fe4b-4f4f-82db-05b6c912695d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b811349-9d93-40c3-84a3-d62ec20422fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1413d6-7b20-47d1-a56a-4abe57aa1663",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3612a41f-87e2-477e-8d15-d8478ac71f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818aa002-aaf0-4af2-8be6-cf0aac6eec18",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e90711-9802-4773-bdae-8ea9e7fbe325",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "238cfa2c-a0ea-4d81-9f9b-51fa863740d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad79d7a-f522-455d-adc4-76063fde6c66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9afd03b7-fa16-4980-a386-0f7012489bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9fad39-1f46-4158-85ea-6a6d622c5622",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7124c3-a076-4661-9bb5-245719a6a9ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3409062-f820-4bf2-bde0-692bff21bae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "477426c7-63d4-4bd5-8bf8-05b6e043eb7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4f5beb-5253-4864-b249-e343aa69fefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cab848-837e-462c-af0c-acb51fa47038",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53cef4c-591d-4283-9f62-26bd866ad772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9b5750b-4be3-4601-9ff5-e3a52403e0d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39b8d21-9992-449d-9b4e-a06f51e79af4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5524bd9-9699-47dd-82a3-0a90e36beb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb780741-4a3b-4a86-9695-41dc59e676cc",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "846a4caf-3b47-4fa1-a9a4-f66e6db0ab54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29e7d55e-1f11-450d-b3fb-4237ddc408c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f8924d-d2d1-46b3-a52d-8ff3e9d440c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef3ddac4-6a22-4e93-9de6-0a9a82e37db0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "280dc1df-a4c7-4e49-b5b6-c89c73c3987f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "98f660b7-d819-4c60-a203-9cd923316431"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "050f272e-b9e2-4804-9be6-07f4a319012d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dcba86b3-b221-4746-9c59-66e6e97e5622"
                    }
                  }
                ]
              },
              {
                "id": "906a0089-f58a-4b68-b074-83e7de8284ec",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87af7db3-a301-485e-bbfe-5676412a92bc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cab829f-2670-4f15-876c-62ccba910073",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a3ed00af-101c-43fa-9afe-db3b5bd543ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fad8961-e3cd-484e-9c80-7cb8e822aef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26174980-22e8-4758-9695-462c2bd1506d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d4e06fe-b2ef-4d1b-ae8e-2d4475a05c25",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "442ffdbc-7634-431b-872e-80ba263973cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9577b6dd-0b42-40d8-b934-bc5f488b14b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "df32b2b8-191f-445e-90df-7795daac69f5"
                    }
                  }
                ]
              },
              {
                "id": "6011f111-024c-4937-bcea-2db611ca820c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c4ece608-459f-4da6-8afe-fe6d46eeb227",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98e50b34-ddce-4d1e-acf7-13244050ac69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "30b869d7-697a-4e25-addd-abeb5265d5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55c3b445-8d9c-44f3-b25a-a5314345614b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e49f1306-483c-4ea1-9306-d0e894dbb502"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "93720bea-41bb-4560-885f-398a6b2bceee",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b5a9dea8-d506-442d-8896-f0d4e4191cee",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6001caa9-3087-42ee-b1ba-835784520906",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "1e212cbc-fc71-42e7-af02-5715fc9c8be3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d31bcaa4-30c4-49e2-95e5-099fb34e6f77",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5aedc9e6-5daf-4112-bb51-fe7d23ce3e8a"
                    }
                  }
                ]
              },
              {
                "id": "6a5c89fa-c74f-4714-b606-33ef5c622367",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f80e22c9-55a8-4395-b620-d0aeb71c4684",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "439bacaa-672f-4566-b370-569095330dbf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "118a1150-29a3-4f76-aab8-9cc0ae4530f0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b29a2a41-bc04-4c2d-b896-fe02bca5999e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "244bbf73-684f-4941-95dd-a4bc48f35f77",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "a0d9aa24-511e-4247-9822-5b7a17dfb1f6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2885e30e-6d55-41f4-a79d-406b798afa4d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8db265d4-fd36-48ea-bdc3-c171129dc8e2"
            }
          }
        ]
      },
      {
        "id": "e25164c0-31fc-4ee3-b337-4d7882211864",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "97bbfed5-29f5-4995-bb4e-092ce9713ec8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df1c1637-208e-44d2-89f6-fa159c28aaf8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e44c7073-f9c7-405d-9305-e98ad7295fe0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf9006b-cb0a-4221-b407-204df6c8b420",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "463eb057-0ca4-4aea-8335-08a6a71e22bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ace993-62c4-4657-830a-d77655edcaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "75c24de3-a80c-48fd-8024-7ac815ec1bfd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee7bafff-b272-4b0e-9ac5-012d1041e151",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b16b565-04e8-46e2-aeab-0594a522db1e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84f6d0df-97e0-44ec-adaf-62b546e9921f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c066b64b-f133-4a84-b2ef-8eddcaac5960"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c03fb55-387b-4e4d-a4fd-b17f0db92b30",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "fa568681-7db9-4363-92d5-99b5bf1ca2b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3e9e4c5-aa97-4a95-8c94-abf012f574d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6cc263b2-7243-4367-bf1c-c887434c1c74"
            }
          }
        ]
      },
      {
        "id": "10e984d7-12f2-4532-99c7-b7aa71e7ef5b",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a7469ffc-162f-4a3b-a693-daef401f9f9f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd453aeb-8940-43b0-9d4f-3d51f64580a8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd805644-4f22-42f1-b5cf-5ea99998dca7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb363de-0720-4b06-9d5a-c35422be3377",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e83098b-09e4-4640-88b8-29b52376fbff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07455b43-21ad-4ad8-b8f0-75ce6198a77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "443757c7-1c38-4b88-8e9f-29c51b6d58ad"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec1188c5-0350-40a1-95e2-e426ca98c3ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ab0ce6b-382e-4c59-b29c-66bcf88cd365"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "850877aa-7c7a-42e9-bd93-7c4d0b222fad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52ee5baf-a164-400f-97b1-74690a8fd903"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49748e36-0c20-4ea9-8e12-3c9259041961",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9ecb3e42-6763-4d31-9a9a-2ce4818a2815"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46081366-acc7-48ed-9f35-4de18d97092e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9ad3696-1cbf-40c0-a93f-0a4d4f44adc8"
            }
          }
        ]
      },
      {
        "id": "0e7c7736-0c42-4a86-b77b-ef2a8db7fbbb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6b62be0b-e30a-4c04-869d-c2269def7edb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "138f490d-1588-4236-ac11-444e390174fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ef0840b6-2a03-4731-84c4-86087b50f94a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4cf7e52-8468-446e-adda-6dddca15c0e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4c3d0f3-6b25-451d-ab52-62b0ff1f0ff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8eda9b-ba23-4e3c-8e9c-62ef8046414c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "889e0095-742e-455c-8b42-b677f6b286ea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5dbd6c9d-3316-494e-8977-e052faf6fa17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58376635-ec8e-4daa-9390-a29dce5a3a67"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "173798e6-40d5-44bc-ab01-555281dffeba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c4f4013-db5d-4c95-b905-43d4cd642847"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a1d982a-7bfa-4839-860a-d53c5dd965a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3ddb13ad-81ff-4058-953f-59896cdbbdf0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c64e04e3-6195-4933-b9e4-59c713984fd3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e1d09992-bca5-4f42-b7c9-e3063b9f30c0"
            }
          }
        ]
      },
      {
        "id": "b7868ff7-8d41-4768-8132-e76ca00f5af8",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0ed3397-56ac-4779-997d-e77106acf622",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2e50e697-3555-422a-9169-0de60af7ac5b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a08c48ca-744b-46eb-b3d3-d620e0d55783",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "59124c2d-071a-4678-bb1b-e08d07a62b5b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab9fe2bb-9698-44e3-a04b-47cd9611fdac",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 241.18661971830997,
      "responseMin": 15,
      "responseMax": 6963,
      "responseSd": 759.0124771867662,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688259027549,
      "completed": 1688259111021
    },
    "executions": [
      {
        "id": "a06ced1c-d190-4488-89b6-1e740acc6708",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c6a20991-d322-496f-a2e0-9042b098114d",
          "httpRequestId": "907f0d11-62c9-4577-a909-48c704ea4299"
        },
        "item": {
          "id": "a06ced1c-d190-4488-89b6-1e740acc6708",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "dc572575-9739-47f4-9250-b70f09ee98af",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 0
        }
      },
      {
        "id": "34ab2e20-6a0a-48b4-a148-97db00e0ceea",
        "cursor": {
          "ref": "ff5b642a-89a5-402c-8cfd-76d5ce3c6fd9",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6aa3cbad-ce59-4e9a-a627-52fd9765300f"
        },
        "item": {
          "id": "34ab2e20-6a0a-48b4-a148-97db00e0ceea",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c5950ed5-1909-4c91-b335-bb3c7906afca",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "a6ed8370-9afb-4c11-a805-22347b39c805",
        "cursor": {
          "ref": "4924beca-d238-44fa-9a31-0f116ea4203d",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "404af169-084a-4a9e-9531-11b12b10d06f"
        },
        "item": {
          "id": "a6ed8370-9afb-4c11-a805-22347b39c805",
          "name": "did_json"
        },
        "response": {
          "id": "7f2598b9-9dc2-4ad2-a38a-1e4e0c3abcca",
          "status": "OK",
          "code": 200,
          "responseTime": 501,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb7ba99-37ca-4f79-9e2f-27f1009a29e2",
        "cursor": {
          "ref": "9c1aad2e-78c1-41a3-ad7e-126f4837e4f6",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "897dbec5-f515-4625-aa4c-7fa5cb77228e"
        },
        "item": {
          "id": "bcb7ba99-37ca-4f79-9e2f-27f1009a29e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "06e42275-587b-4808-9618-425cf5029593",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1350,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "bcb7ba99-37ca-4f79-9e2f-27f1009a29e2",
        "cursor": {
          "ref": "9c1aad2e-78c1-41a3-ad7e-126f4837e4f6",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "897dbec5-f515-4625-aa4c-7fa5cb77228e"
        },
        "item": {
          "id": "bcb7ba99-37ca-4f79-9e2f-27f1009a29e2",
          "name": "did:invalid"
        },
        "response": {
          "id": "06e42275-587b-4808-9618-425cf5029593",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1350,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "17916517-6503-4689-902c-d47e43108604",
        "cursor": {
          "ref": "5d8cb205-5934-4755-9d28-c2c7ba3bda95",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "50c3d24d-e37f-4375-bf33-2a11344f8f84"
        },
        "item": {
          "id": "17916517-6503-4689-902c-d47e43108604",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "67d0fad8-7fb8-46fe-a6de-33316ed9707d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a1d390-5471-44bd-900f-a8f336ef4f2f",
        "cursor": {
          "ref": "08557ab1-feef-42dd-9ec8-7fb33ca28f58",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f853b3b4-b2d7-49b4-89cf-8c988af7d1fc"
        },
        "item": {
          "id": "b9a1d390-5471-44bd-900f-a8f336ef4f2f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "13a42339-ae71-4610-8f24-d12d34d755cc",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ca0319d-0dac-47a2-8dbf-3d7e73aed471",
        "cursor": {
          "ref": "4e2311a3-aa45-440c-8e48-a5221ce0826f",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d4a70226-5d2a-406f-a006-c66f64bd2d15"
        },
        "item": {
          "id": "4ca0319d-0dac-47a2-8dbf-3d7e73aed471",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2d86bf4c-5212-447f-bfa0-8b196cba6f33",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ea8dc500-a14d-4be6-ad0f-ae54a03123a0",
        "cursor": {
          "ref": "734995b4-f0cd-4990-aa8a-65c16da81432",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2c2d25ac-f61d-4575-8918-284797eb1592"
        },
        "item": {
          "id": "ea8dc500-a14d-4be6-ad0f-ae54a03123a0",
          "name": "identifiers"
        },
        "response": {
          "id": "b764ab21-eb0b-455a-b880-31cdfcceb80c",
          "status": "OK",
          "code": 200,
          "responseTime": 55,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7c5ca7-fbc6-46b2-b3cb-673b678ba483",
        "cursor": {
          "ref": "503903d3-b881-4b68-ad6b-d62acd0bd251",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c354e4dc-d1fe-4cb5-b25d-8ca0cd264e34"
        },
        "item": {
          "id": "fb7c5ca7-fbc6-46b2-b3cb-673b678ba483",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2cf6180a-baa9-4ab6-ae5f-5529c2249e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7d8a821-8534-4a09-9c52-9eaac6ed4b0b",
        "cursor": {
          "ref": "1d69139d-7b12-4dbe-b750-a082318b43f1",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "597f264f-62ec-4001-bb9b-db85024e6c66"
        },
        "item": {
          "id": "b7d8a821-8534-4a09-9c52-9eaac6ed4b0b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "793b556f-2504-4b5d-8761-ed5e26849669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b1ddbf-0dea-4024-a240-497f00875523",
        "cursor": {
          "ref": "fadaac1b-8d44-4e2f-b796-b33fd2656e85",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7c7aaba1-daf5-42e0-8bd1-c74f2b759144"
        },
        "item": {
          "id": "62b1ddbf-0dea-4024-a240-497f00875523",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "32a1a3c0-4e20-47d9-a899-7aa093bc6a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb4cae1-84dd-40bf-a383-06587e94565f",
        "cursor": {
          "ref": "e9615a6b-0bfc-42d9-9040-d0c05a9ee56c",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "875732ef-f45f-422f-8b9c-8bd0664f17d5"
        },
        "item": {
          "id": "3cb4cae1-84dd-40bf-a383-06587e94565f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c3b777e9-a8ca-45ba-b4fb-d2efe0704ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d086d698-27a8-4ea9-9520-b01e3a842fde",
        "cursor": {
          "ref": "ed43bab6-ca2c-4883-b78b-c46674621895",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9c5129b7-a3a1-4aec-8bf9-a925cba43f03"
        },
        "item": {
          "id": "d086d698-27a8-4ea9-9520-b01e3a842fde",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fec29311-8baf-4763-b83a-e340dbeb22d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 170,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebc9829-6ef2-43f1-a482-f119d454fac6",
        "cursor": {
          "ref": "3487c960-2f7f-45af-82bc-89e13a6a4eb1",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2a318cb3-24a8-4ec4-91ef-398a2d5b9411"
        },
        "item": {
          "id": "cebc9829-6ef2-43f1-a482-f119d454fac6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e81cafb4-7a5b-4c82-844e-ccce6f97669f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26ad44b-6688-49be-93b0-62db2d19b614",
        "cursor": {
          "ref": "4420b5af-a450-45d1-abfe-c67494d15dee",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8255fb41-1bb6-4944-b68a-3c3b4a38af68"
        },
        "item": {
          "id": "a26ad44b-6688-49be-93b0-62db2d19b614",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "43b6342f-63c9-405f-b14d-31866bcfa361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1716ab-ae8a-43bf-8b47-b96b12869f0b",
        "cursor": {
          "ref": "2eedf14a-d9a5-4629-923e-6acaad5c7bfe",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "12d9a041-bde2-47f1-bfe0-eafdaa71b5d7"
        },
        "item": {
          "id": "af1716ab-ae8a-43bf-8b47-b96b12869f0b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9cbf2918-77af-46da-a0d6-c4749500d868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f1861d-b746-4df4-9cb9-e820caca6496",
        "cursor": {
          "ref": "8f74d44d-c2c5-4142-9bbe-2c91fdd4caa3",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9d792334-9de0-4379-9d23-504cea4f71a7"
        },
        "item": {
          "id": "60f1861d-b746-4df4-9cb9-e820caca6496",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e0e9bc3b-7c26-4754-b2a5-0f296f29cc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabae217-3d2e-46a2-8146-b2a125701f00",
        "cursor": {
          "ref": "d94bb4b5-9b11-42a6-867a-9d34e6abb483",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "05c42923-2d2a-4bc3-9e80-74bb68e18e6d"
        },
        "item": {
          "id": "fabae217-3d2e-46a2-8146-b2a125701f00",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0de74637-eedd-47eb-b196-2e50eb67b671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a867ca-2753-4ee7-bfda-f6786a22d77f",
        "cursor": {
          "ref": "370d78e0-b659-42c9-8769-70d318140b90",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "fcc05106-09cc-4fac-b7c6-1f37f15299c4"
        },
        "item": {
          "id": "85a867ca-2753-4ee7-bfda-f6786a22d77f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6a851040-93d0-45f2-8ede-112611eacbf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cda5ff1-bdbd-4bfd-9f6a-4521ebb7c7f3",
        "cursor": {
          "ref": "400ea724-ec89-4040-b5cd-22f18fa16b12",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "83c3917c-c4dc-46ad-8ed1-6675a36ccf86"
        },
        "item": {
          "id": "4cda5ff1-bdbd-4bfd-9f6a-4521ebb7c7f3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d1490852-1357-4918-8567-d47e1c6656bd",
          "status": "Created",
          "code": 201,
          "responseTime": 822,
          "responseSize": 983
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "27418e7a-cb15-42fb-87e4-4f7d2cbc9bf6",
        "cursor": {
          "ref": "b5fff0e3-6387-422f-9de2-73340c0bcbfa",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "01cdde7f-4306-4d43-b737-69c1020b6479"
        },
        "item": {
          "id": "27418e7a-cb15-42fb-87e4-4f7d2cbc9bf6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f0b25333-ba93-4161-ae2c-fd9469d14fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7626185f-8769-4f9c-bea3-4d2e6e7b77fd",
        "cursor": {
          "ref": "b3eef640-bdf2-4d7b-bb5d-e26cf808b7ec",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "80454425-fc5d-456f-b4e0-6a7307a2d7b6"
        },
        "item": {
          "id": "7626185f-8769-4f9c-bea3-4d2e6e7b77fd",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "190b458f-7102-4dbf-90b7-d29a9eab08e9",
          "status": "Created",
          "code": 201,
          "responseTime": 5265,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "19700601-07b4-4cf6-9295-374d0abc0ee3",
        "cursor": {
          "ref": "8b1d11d3-33fc-49f4-b012-20ab98c87ef0",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1ff44914-b215-4c52-b025-7fc3fff9bcd0"
        },
        "item": {
          "id": "19700601-07b4-4cf6-9295-374d0abc0ee3",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bb58383f-bccf-49bb-bbad-6a5258dec739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554031dc-c002-4f2b-8e24-9ea41cb3e6e8",
        "cursor": {
          "ref": "0d4aa097-6083-4eef-a6ca-4caee91604d3",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2f9398fd-eafa-4ab9-82d8-c25e067bd424"
        },
        "item": {
          "id": "554031dc-c002-4f2b-8e24-9ea41cb3e6e8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "90d4224b-190b-4e3b-9d0f-dd182f44c98c",
          "status": "Created",
          "code": 201,
          "responseTime": 6963,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2f78eafe-c275-499b-8667-9fd74406996a",
        "cursor": {
          "ref": "ce1dbd48-1e62-4fd1-ae82-2c51b099c7a0",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "220d3288-48a0-4970-b50f-4b6483f55627"
        },
        "item": {
          "id": "2f78eafe-c275-499b-8667-9fd74406996a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6ed21583-026d-4f2b-833e-6b2c4ea4e90c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d743a2-fceb-474e-a365-641074266480",
        "cursor": {
          "ref": "8c80b503-0aa0-4473-b81e-0d6ba2821171",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "766ec26f-a8dc-4bb0-9a89-5978aac2a3d3"
        },
        "item": {
          "id": "61d743a2-fceb-474e-a365-641074266480",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b0954b5b-7341-44ad-94ae-41764830974f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52eec725-7142-41c4-9f44-a6923226a13c",
        "cursor": {
          "ref": "5d24050a-ccf2-4f82-8cb2-4bae74451821",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3dfd8820-a17e-4760-924e-a582f1228a22"
        },
        "item": {
          "id": "52eec725-7142-41c4-9f44-a6923226a13c",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5e0a1e80-baba-407f-be48-a133ef85482f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a2fae3-d2f4-46c8-b37b-ba4af75f9419",
        "cursor": {
          "ref": "39fd9255-dcda-40fc-b172-42c7e263762a",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "29af1ac6-82ab-43c7-9ece-e2001d70b062"
        },
        "item": {
          "id": "47a2fae3-d2f4-46c8-b37b-ba4af75f9419",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "08d0863b-5e23-4ff5-ae47-306f771e1a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1214b608-d5ec-4105-adcf-1b072136ea21",
        "cursor": {
          "ref": "56b8776d-6a08-448b-b625-50f936c2a0dc",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "03b6e5ea-155f-43f9-b9c5-69c40c93914c"
        },
        "item": {
          "id": "1214b608-d5ec-4105-adcf-1b072136ea21",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "bad33f4e-67c9-486e-ad64-5111587d562c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de036cf-84bd-474f-872b-b2fdd3e5dafa",
        "cursor": {
          "ref": "1123197b-f490-47ff-b672-523f85153ecb",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6ab1738d-2153-4680-a0ca-d8401b0a4b25"
        },
        "item": {
          "id": "9de036cf-84bd-474f-872b-b2fdd3e5dafa",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "023a1758-346b-4c68-898d-ae7b6965384f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7fbbe1-e3e9-4b8a-8bdd-1eb43a35aa71",
        "cursor": {
          "ref": "fd7955c0-6a19-4980-b7f4-e3170d9c8b86",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5a6647bd-cd9c-4b8d-b38a-baa611cf6ba6"
        },
        "item": {
          "id": "fb7fbbe1-e3e9-4b8a-8bdd-1eb43a35aa71",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "6676fefc-6634-410c-8cf6-3a251a306a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb21b92e-5e1e-4478-be40-febcca26177a",
        "cursor": {
          "ref": "f0f358fd-5fa7-4a42-8d5c-0adc04ec4f8a",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9b1d6769-5369-4742-9a8c-3561e811b22b"
        },
        "item": {
          "id": "fb21b92e-5e1e-4478-be40-febcca26177a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "acdae1c3-8c0a-4e81-9278-b5d44af6dd9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788dbb3b-df95-4511-b8d1-791dd8d0389a",
        "cursor": {
          "ref": "2bb6734f-5eef-40ae-ba2f-bf1423f6a05b",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f8702d0d-e5ce-477e-a5f1-f6eae3fd3c22"
        },
        "item": {
          "id": "788dbb3b-df95-4511-b8d1-791dd8d0389a",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d63cb450-d2cd-4faf-a033-70ace481d39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75010e02-0a53-4c3f-ba5e-188c680b49dc",
        "cursor": {
          "ref": "05ce4c96-c6b6-42d9-9562-ff72e71d3f5b",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe025b71-a8fb-40e5-8934-1a7700326cc2"
        },
        "item": {
          "id": "75010e02-0a53-4c3f-ba5e-188c680b49dc",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "13d6a1ec-9085-4494-a601-d6e115b85c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca4b2b12-0767-4d25-952e-d1a7be6ec437",
        "cursor": {
          "ref": "9e61e5cf-3c6f-41d6-aec7-c53993f26dcc",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0a7ce07e-8165-4300-a9d7-50466511d547"
        },
        "item": {
          "id": "ca4b2b12-0767-4d25-952e-d1a7be6ec437",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6c58c6f5-c42f-494f-8e85-e9fbf0ce1df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08398eea-2e6f-4da9-ae49-7351d5fb7ad4",
        "cursor": {
          "ref": "4bd52a80-a516-4233-8757-28a572bb54ab",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "cbc75d28-e1b0-4342-97bc-7fe90875ec9c"
        },
        "item": {
          "id": "08398eea-2e6f-4da9-ae49-7351d5fb7ad4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "5ab0e795-440c-4168-8b84-13cdf423f176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab2da22-6236-4eed-a721-84d098c233c4",
        "cursor": {
          "ref": "753d2de1-bff1-41d5-afa8-a8a8de176151",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1e1da10e-80df-4d8b-8974-da39b20c84cd"
        },
        "item": {
          "id": "5ab2da22-6236-4eed-a721-84d098c233c4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "717830e3-1798-4749-bae2-ca283dda79ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38c0e165-d14e-407c-a3f4-fa4bcbe414a6",
        "cursor": {
          "ref": "b0f61525-9bab-4651-971b-db1c68a39079",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a721cb75-74a5-49b5-83f0-97f0a20b7c9e"
        },
        "item": {
          "id": "38c0e165-d14e-407c-a3f4-fa4bcbe414a6",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "29f4222e-3c62-43b9-858f-372116d6db51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d23267e0-df0b-4a5f-a054-7b2548881537",
        "cursor": {
          "ref": "9cf79e79-eb76-4953-aa0f-b74a5b36b201",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b4b51ce8-e49b-4029-9b6c-4fdf3a3d440e"
        },
        "item": {
          "id": "d23267e0-df0b-4a5f-a054-7b2548881537",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4a23011c-d1c8-4180-8a83-f3b82b88ae67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f05e97-fa23-4410-8d3b-5aca1a62a9b6",
        "cursor": {
          "ref": "ea12f820-0071-4b6b-b481-e0c53d39ddaa",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3da60a0f-d9e2-41ee-91fe-fc706d72b817"
        },
        "item": {
          "id": "f7f05e97-fa23-4410-8d3b-5aca1a62a9b6",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9d0b910e-7570-4cbe-9e0c-9a99d2ef4441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa427af-e052-4476-8302-c8779249e84a",
        "cursor": {
          "ref": "b400622d-93d2-46f3-9a6f-97586d268954",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fbfe8846-6a27-45db-855f-7f6d4ceafad7"
        },
        "item": {
          "id": "ffa427af-e052-4476-8302-c8779249e84a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "51c70955-2a51-43b2-a680-98231105ad4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c03bba-48d1-41db-bcd7-a6120bee3c7b",
        "cursor": {
          "ref": "1975fc4a-e4e3-45f6-9e65-f89262f4bea9",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5bfcfa11-f4dd-4b2b-999f-f0603f1b274f"
        },
        "item": {
          "id": "a6c03bba-48d1-41db-bcd7-a6120bee3c7b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c365b33f-20a8-485f-8eb2-3d47cd7086fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef4906c-0271-4f5d-818b-7c354d309980",
        "cursor": {
          "ref": "0a6b9a10-646b-4a8a-a14b-e317de5f1db5",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "66b29009-bc07-4c73-910c-3707fbac47d0"
        },
        "item": {
          "id": "cef4906c-0271-4f5d-818b-7c354d309980",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "63a028b8-b4bd-4c4b-b50e-ee200c87ef60",
          "status": "Created",
          "code": 201,
          "responseTime": 2162,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "18dbb914-bc18-4ea2-be3a-927c07a323a9",
        "cursor": {
          "ref": "1ba552d4-af3c-4936-bfb1-8b48d06fb160",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1d587c68-e0d1-4029-b1be-a87a8a44477f"
        },
        "item": {
          "id": "18dbb914-bc18-4ea2-be3a-927c07a323a9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "732735ef-7616-4cec-abfa-7354941766db",
          "status": "Created",
          "code": 201,
          "responseTime": 2698,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2955da05-4451-43ce-b616-af2999b7da2a",
        "cursor": {
          "ref": "055ab462-1043-47b5-b93c-dfd2cb250257",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d29c950a-8c43-471c-856d-5dc9b5074ab0"
        },
        "item": {
          "id": "2955da05-4451-43ce-b616-af2999b7da2a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2109e596-bb8a-4887-b652-28c10f78a178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ed852f-f6da-429e-acc4-ff186260f4a7",
        "cursor": {
          "ref": "d51085e6-fc17-4a43-a9b2-1947a8fd2662",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a407dd81-bd57-4311-a1d9-be64016bff5e"
        },
        "item": {
          "id": "24ed852f-f6da-429e-acc4-ff186260f4a7",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9707db25-12cb-44f4-9a0d-19b6b3ec0d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142ddf00-3b2f-4403-a56b-ed4ded6a9391",
        "cursor": {
          "ref": "4dbf11bf-41fe-475b-8c97-64e337be8084",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2a0c02d8-8b97-4319-9d69-f93a68591421"
        },
        "item": {
          "id": "142ddf00-3b2f-4403-a56b-ed4ded6a9391",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4b3bc0bd-e271-4e5f-8123-63f6c46e0985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79802c38-1eef-4dac-a9c2-c45a304eb609",
        "cursor": {
          "ref": "032a4746-af36-47ac-977c-10541367c61e",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "f9f50c56-2291-4910-81c5-b4069283e3cf"
        },
        "item": {
          "id": "79802c38-1eef-4dac-a9c2-c45a304eb609",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b2cc3fd0-2b00-4b33-b4fd-9edd12a129cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5838cca0-1b33-4848-9cea-fc70b5595e4a",
        "cursor": {
          "ref": "8f5a05c4-63ae-4d0f-9fb5-f6393ebb66c0",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d7132f3e-12a2-429b-9487-bf1113e2b2d3"
        },
        "item": {
          "id": "5838cca0-1b33-4848-9cea-fc70b5595e4a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b233ed18-7a0e-457c-8452-975006798801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a195870-e762-4b04-b21b-bc327753bad0",
        "cursor": {
          "ref": "9bb4b875-eedf-4018-867d-07d13f62766b",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "dc3a597b-370e-464c-a5f9-7398e746cd83"
        },
        "item": {
          "id": "0a195870-e762-4b04-b21b-bc327753bad0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "31263112-341b-4376-94ed-dfe422235e2b",
          "status": "Created",
          "code": 201,
          "responseTime": 2421,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b5d8420c-e60e-4186-b8a5-527aa4b40e4f",
        "cursor": {
          "ref": "c4d10dc2-dfea-42fc-97c0-f44244976dfe",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "21dcbd91-99fe-46f5-b2d5-91ae60f1b705"
        },
        "item": {
          "id": "b5d8420c-e60e-4186-b8a5-527aa4b40e4f",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c93cabc1-f605-462e-8536-ac1d24b77038",
          "status": "Created",
          "code": 201,
          "responseTime": 2482,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b4f1623a-26ec-4e25-99df-671141a2643a",
        "cursor": {
          "ref": "712e21bb-6060-4382-9ffd-e02e227b8371",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f5fec0b0-2876-46dd-838b-eecdd80d05fa"
        },
        "item": {
          "id": "b4f1623a-26ec-4e25-99df-671141a2643a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "280a5686-f901-4cde-90c5-aa8f6a33cf4c",
          "status": "Created",
          "code": 201,
          "responseTime": 2534,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "88d8573e-c0e8-4e8d-9f50-15e6766b6973",
        "cursor": {
          "ref": "fb7dce46-a44a-4989-b6ce-e2348ce6b317",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "34ee1e80-0a33-4b1a-9489-90237cacb6d9"
        },
        "item": {
          "id": "88d8573e-c0e8-4e8d-9f50-15e6766b6973",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "620ab82f-ccee-4f14-8895-149e8c2db592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8f3ed77-5782-4c66-9dea-34573c12e6e9",
        "cursor": {
          "ref": "154c6d28-6f52-4602-99ec-23de1a8a6d6e",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "221da234-8bef-42c7-aeac-87537797b5c1"
        },
        "item": {
          "id": "d8f3ed77-5782-4c66-9dea-34573c12e6e9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c783d995-1453-42cf-a7c4-ea2409dcbc61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593784ce-4de9-4b5b-adb9-a16b1a641490",
        "cursor": {
          "ref": "469975bd-9fd2-4b34-90ab-2cec7b107c50",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6cc10004-f2d6-4800-acc8-08367314d200"
        },
        "item": {
          "id": "593784ce-4de9-4b5b-adb9-a16b1a641490",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "931b2d73-13b7-43c9-a87f-fe35c4b97a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb65f929-a21f-4fac-84d1-7550e941de86",
        "cursor": {
          "ref": "0079b3cf-dc72-432d-8a20-3667d1f0070a",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c0f96775-54cf-4866-8037-616c6cf6ede4"
        },
        "item": {
          "id": "eb65f929-a21f-4fac-84d1-7550e941de86",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "dea39153-26ec-43ce-bb62-f2bd207d4f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f93c9f-bbe6-4af3-80c5-972d86de5fff",
        "cursor": {
          "ref": "c806b767-350b-4d84-a301-417251d8284c",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "71e22f54-829a-4ed4-a520-0851d4b221fc"
        },
        "item": {
          "id": "d0f93c9f-bbe6-4af3-80c5-972d86de5fff",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "247b1aac-ce30-4799-a1de-e1b1860b1cf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0062117-bc48-4638-b686-769305e9f6c2",
        "cursor": {
          "ref": "ff45e96e-ec70-4ffd-bcfe-2fff442c6d40",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "04e8a931-a59c-447b-812d-af9468f6ea09"
        },
        "item": {
          "id": "f0062117-bc48-4638-b686-769305e9f6c2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "693e6f28-7dd1-46f5-845a-e05a00ddf51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af80e27-c459-4468-92f0-b4a007470c77",
        "cursor": {
          "ref": "88842c06-ce3f-465d-9cb2-d49806c28b03",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "63a5b033-8a8e-49db-b41f-b53dd91a5bd5"
        },
        "item": {
          "id": "1af80e27-c459-4468-92f0-b4a007470c77",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "320bdd88-3dd7-4ca8-916a-79d44fb1b459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73dc9293-9b4a-4511-8d2e-0bc1eea48e6b",
        "cursor": {
          "ref": "7912833a-5afa-4d71-b4d0-9917299728d1",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "aad8dabf-7193-4507-a14a-fed02321fbd4"
        },
        "item": {
          "id": "73dc9293-9b4a-4511-8d2e-0bc1eea48e6b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c9ad7ce3-617e-415b-84d9-19ffc16fcc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7059f22e-ba29-4876-8d67-b91331b0282d",
        "cursor": {
          "ref": "f4f3e7df-5971-45ac-a85d-c28ae7c12b2a",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1e5222b5-6e50-4c68-99d2-d51842e7e45d"
        },
        "item": {
          "id": "7059f22e-ba29-4876-8d67-b91331b0282d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "84f6af1a-c07b-4053-86a7-57816ec725d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f45449b4-7b75-46f6-ad01-acfa7bad7da9",
        "cursor": {
          "ref": "10f9fe2f-bd4b-4989-96ee-552fae52b0bb",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "01c9999d-5432-416b-bc8e-c505a4d7942b"
        },
        "item": {
          "id": "f45449b4-7b75-46f6-ad01-acfa7bad7da9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "25bb4b93-b80b-4122-993c-dc5597ddc852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acf594a5-5c95-4a8b-a0ad-96457664b1c3",
        "cursor": {
          "ref": "7fd1c705-090d-4a82-b329-1209b9303988",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2d501408-1f36-4a33-be53-b670b139ac88"
        },
        "item": {
          "id": "acf594a5-5c95-4a8b-a0ad-96457664b1c3",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5833bf8c-db59-429c-a2de-e5c482bf6569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f433823-0992-4a88-b463-20e2490c5941",
        "cursor": {
          "ref": "b7daa359-3a16-45b9-b355-00ffc0c0ddfe",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "eb751719-ef38-40c4-b8b6-8563080dd62d"
        },
        "item": {
          "id": "9f433823-0992-4a88-b463-20e2490c5941",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "55dc4b1a-a338-458c-a254-288791f84589",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 819,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4d0ce35-73c8-4e1a-a0c2-77759ded30f9",
        "cursor": {
          "ref": "5a4798db-5534-442d-811d-cd3e2f00388c",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "a033ea20-03b7-477c-9cd6-e1001fb5cef3"
        },
        "item": {
          "id": "d4d0ce35-73c8-4e1a-a0c2-77759ded30f9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "035a7fbf-41a4-4283-9a9c-2a0583801f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d45a615-098e-4a4d-829f-e6f67ec3250d",
        "cursor": {
          "ref": "82022abd-4b58-446c-8ba7-c347ba148994",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7a58c87d-4ee7-463a-80e0-bf1ad5b29e73"
        },
        "item": {
          "id": "9d45a615-098e-4a4d-829f-e6f67ec3250d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5d5da327-7bc4-4763-aa9d-6c445e0c461d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b53306a-7d39-4aa6-b5a8-ef2b67e231d5",
        "cursor": {
          "ref": "f8e2a4f9-2c90-4f88-af52-0d693dc25472",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9df0fb28-ed57-4b92-83a1-647463023bdf"
        },
        "item": {
          "id": "1b53306a-7d39-4aa6-b5a8-ef2b67e231d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "67153437-f209-4357-863b-1a0ad97b9b11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3bec71-a9c5-4da0-ba57-04cf533ded0e",
        "cursor": {
          "ref": "504840ee-3c85-45af-a2ae-095f9fa25dc2",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "354f4f7f-0021-4d39-ac70-7da0b3399c7d"
        },
        "item": {
          "id": "eb3bec71-a9c5-4da0-ba57-04cf533ded0e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a11b3fa0-53b0-4896-b189-1448553bc0e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197ef78d-0c9d-459e-a82e-ed8c39bb8dc4",
        "cursor": {
          "ref": "5d5a0f18-be90-4edd-8136-bed5442d699d",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "de6938e8-ffd1-4e5f-983b-a5a6fb1b448b"
        },
        "item": {
          "id": "197ef78d-0c9d-459e-a82e-ed8c39bb8dc4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e2fbd393-05ec-41ec-8dd8-6896bd0224cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfae02fc-22c1-4d88-9a4d-2f9c1427d885",
        "cursor": {
          "ref": "5189e7e6-ce46-4ac1-91eb-97a58276cf73",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "71373084-ca8b-4f09-b8d0-ddc8f0feace0"
        },
        "item": {
          "id": "dfae02fc-22c1-4d88-9a4d-2f9c1427d885",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6e4a83fa-587c-4628-837f-5716f143c6fc",
          "status": "Created",
          "code": 201,
          "responseTime": 2124,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "ee8538a1-bd93-41c7-ad86-a016dc5d410f",
        "cursor": {
          "ref": "f2cd9841-ca54-417b-9499-6018b50adc3d",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "303902c0-15fd-40b6-92d5-09e20ef872a0"
        },
        "item": {
          "id": "ee8538a1-bd93-41c7-ad86-a016dc5d410f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "83814d29-c897-4680-bc2b-a7be7228cb2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48afe53c-b3ad-40b7-8979-ad81114b0ac5",
        "cursor": {
          "ref": "b95bc875-dca8-44b2-b405-c6f5f68c3ee0",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "91d2d183-9627-49db-826f-07b705b67390"
        },
        "item": {
          "id": "48afe53c-b3ad-40b7-8979-ad81114b0ac5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "be6f1c2c-b964-43f4-97eb-369182fa3ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea41145d-ebc1-4038-a744-47deaf5c011b",
        "cursor": {
          "ref": "1042e2c3-302c-459e-bba4-cc0013c77492",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7d52a5c1-0264-4ac1-b0f8-98731c1886d6"
        },
        "item": {
          "id": "ea41145d-ebc1-4038-a744-47deaf5c011b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "bf790bb1-bf96-4b00-9c4e-77e975086123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417f344b-230d-482e-ba80-ac89910fc280",
        "cursor": {
          "ref": "1eb815f7-816e-4c12-bced-e2f982fa0ba5",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "660e16fd-cd68-4123-ab21-a296ed39c329"
        },
        "item": {
          "id": "417f344b-230d-482e-ba80-ac89910fc280",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "53cfbc5a-1b59-49c0-a062-0d3fc9c18c7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9110818-740e-4a9d-8454-ae1e767bb036",
        "cursor": {
          "ref": "6e4db7ac-b008-45e4-a6b5-6282e957e760",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6b1c29b9-e66d-4cc2-8d57-1ad72f53cf4d"
        },
        "item": {
          "id": "a9110818-740e-4a9d-8454-ae1e767bb036",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "c892cfab-29a1-45e8-894f-001f1df0d1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d1d9f47-12f1-45f9-9c63-49293eae147e",
        "cursor": {
          "ref": "a6c4d48f-3bea-499a-ab8d-042b512ea69f",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7b62c5dc-f8ee-4387-bad8-64c1ae1b8487"
        },
        "item": {
          "id": "6d1d9f47-12f1-45f9-9c63-49293eae147e",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2ee35ef6-219a-43bd-9f89-b73d66505489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ca73da3-a6bb-497b-8fb9-61b64c64eaf8",
        "cursor": {
          "ref": "e8b6d5bf-302b-48ba-a6de-ab647f94b5c5",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "17f2eebb-af66-42b5-9b67-2221fc3e97ea"
        },
        "item": {
          "id": "0ca73da3-a6bb-497b-8fb9-61b64c64eaf8",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e8c99009-f438-46eb-80f8-462d08abd3a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af4c021-439f-4069-9375-7e5ac45d9058",
        "cursor": {
          "ref": "ceff8eb9-d08a-4b39-90d5-6ddd7d8c6173",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f583a7d0-f508-4906-b41a-2ef49e635f11"
        },
        "item": {
          "id": "3af4c021-439f-4069-9375-7e5ac45d9058",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a42a9e6f-b3df-4ede-aaf5-cecdbdc1da3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "527c2c2f-a876-40f2-a8f7-8e4ea21ab52e",
        "cursor": {
          "ref": "bad1eaa8-cac4-46a6-9d82-fc3ce5a15e9a",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "33a88305-858a-4aeb-9806-7f992cfaba9c"
        },
        "item": {
          "id": "527c2c2f-a876-40f2-a8f7-8e4ea21ab52e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "1b983204-912d-42c6-80bb-0519b2ce0931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ed42be-f6fe-43a5-99d9-7ccdc6e0a9b7",
        "cursor": {
          "ref": "52b749f9-7da7-4099-831a-49ab8b7dd7de",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "3dd44f72-91e6-487e-8c45-40ce5f5f7613"
        },
        "item": {
          "id": "b1ed42be-f6fe-43a5-99d9-7ccdc6e0a9b7",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8a550cd9-d06e-4cd7-a7c4-f863b953742e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1759775-4d33-4f8a-bfc6-2c874cc02b71",
        "cursor": {
          "ref": "f80c5d9f-d8a6-4a50-be44-06ab1086cf32",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e5726115-c8c4-4bbc-98e0-4666023c4bca"
        },
        "item": {
          "id": "c1759775-4d33-4f8a-bfc6-2c874cc02b71",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "cccdab41-ff39-4e5f-84ca-7ae09c8fa1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "584ddcfb-f6ff-41b3-aeb9-661e4875d7b4",
        "cursor": {
          "ref": "a4c80313-59db-49c4-bb96-907a1c0c426a",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "dc80d9a1-5faa-4a00-8601-6518417ce109"
        },
        "item": {
          "id": "584ddcfb-f6ff-41b3-aeb9-661e4875d7b4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "315b0345-5a35-41cb-a0f6-d8e1e50324c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521b47df-d198-42f7-8940-1ad992b6dd17",
        "cursor": {
          "ref": "ae5b84dd-8c61-45a4-a1d4-f956f4c35b98",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "616ec02c-20f7-4c30-bc0a-ee1cc0880e12"
        },
        "item": {
          "id": "521b47df-d198-42f7-8940-1ad992b6dd17",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8be3299c-5439-4f73-962f-de8f840f482a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5873c8-987b-4626-8192-4de25429ee01",
        "cursor": {
          "ref": "0be0ceaa-65cb-4a08-8fc0-dcb2b400b0ba",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d5fb2525-f802-4f1f-862e-957bad4609d9"
        },
        "item": {
          "id": "7f5873c8-987b-4626-8192-4de25429ee01",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ffe7d799-6670-440a-ab0a-cb510db9a4f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 216,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c968591e-c6d5-423f-88d9-9adcdf219d5e",
        "cursor": {
          "ref": "e4d1288b-4c01-4454-90b4-fc57ffe3fc8e",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "bc3784b6-b2ae-4a87-bc70-044ba2391583"
        },
        "item": {
          "id": "c968591e-c6d5-423f-88d9-9adcdf219d5e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5247968b-a3dd-4ab6-8887-2e6f61dbb942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4974c05-c9d0-4840-bf69-b49ad4e8046b",
        "cursor": {
          "ref": "f7b6d230-a103-4f56-aa92-ec257763a62a",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2d7704ff-108a-492c-b3de-acac2b4e9fa8"
        },
        "item": {
          "id": "c4974c05-c9d0-4840-bf69-b49ad4e8046b",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "62014609-2286-431b-8e52-4c48ab097857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd5776fd-97aa-46ca-9049-55d981dd7da4",
        "cursor": {
          "ref": "9aed1c98-f6dc-49da-b32c-6baf5910a29a",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "680430d9-75af-4aaf-8262-cee5cf6303f8"
        },
        "item": {
          "id": "bd5776fd-97aa-46ca-9049-55d981dd7da4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c72e611c-632b-4a09-9fda-ccb4b847d410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6de333-7cb2-4835-af89-c54d654b96a7",
        "cursor": {
          "ref": "7dc2b068-d7f7-4523-b069-955c37c9f4b0",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "2973e259-a870-43cb-bb63-02388de4d984"
        },
        "item": {
          "id": "7b6de333-7cb2-4835-af89-c54d654b96a7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2b435816-a221-4985-a4d0-22080bf287df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddb9a1c-a6ae-4fed-b3fe-74696d46a737",
        "cursor": {
          "ref": "9d8f011a-b44b-4d1c-ade9-b959190a764b",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0d1c480e-f0ae-43b3-801d-74c477867559"
        },
        "item": {
          "id": "7ddb9a1c-a6ae-4fed-b3fe-74696d46a737",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0cc0d34c-09f0-4607-bc0c-d36d83404c86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee1415c-e28c-42f8-b27c-476e35794efa",
        "cursor": {
          "ref": "ed7c5e58-e6f6-4455-b017-69736d9afcf3",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4d81761c-c208-4e4c-998d-8a5a4289fbd2"
        },
        "item": {
          "id": "9ee1415c-e28c-42f8-b27c-476e35794efa",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8f21b9de-813f-40e3-97d9-74a6d63878fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a27efe-109b-4f43-9214-4a51af994dc5",
        "cursor": {
          "ref": "a4f2929f-6283-41d0-9674-d08dc958cc42",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "fa234fdc-fa00-4401-8876-58e71cfb726c"
        },
        "item": {
          "id": "44a27efe-109b-4f43-9214-4a51af994dc5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "054d7e7d-7f55-47d0-9cf9-ebbedbbe85ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21652eed-9884-4f02-baa8-187f92e07adc",
        "cursor": {
          "ref": "8b17cbc4-976e-4f7f-a663-eda74b4088d7",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "c16af176-08c2-44eb-96b1-2b88bb9a377f"
        },
        "item": {
          "id": "21652eed-9884-4f02-baa8-187f92e07adc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2cda7c7a-a332-4a1c-bb7f-f17fa5170777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ce1e9f-00de-437e-be25-bb1f1a4ad714",
        "cursor": {
          "ref": "f0e07dd0-69a9-41a6-9ac2-9d8f1ce2d0bc",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ae3a3069-65be-4ccb-a180-cc049fa69cb2"
        },
        "item": {
          "id": "46ce1e9f-00de-437e-be25-bb1f1a4ad714",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b28b3536-b693-4dcb-8194-0a209a2c1d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6947e1ad-a4e8-488b-a09e-cf0b6245e394",
        "cursor": {
          "ref": "443c4954-7402-46f2-886f-68b865826869",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "42570ff6-56d2-45ab-9229-7fbbfff2f86d"
        },
        "item": {
          "id": "6947e1ad-a4e8-488b-a09e-cf0b6245e394",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ee99b6f6-6d1a-4b9e-a8c0-2d600f1d69c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99644bb-a7c7-4d37-b12e-6ba6c1be9de6",
        "cursor": {
          "ref": "97c80981-e93f-47d3-af6f-6cf9798f7dc7",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "58c2d207-f293-4b5c-87ec-2ae694dc8d08"
        },
        "item": {
          "id": "b99644bb-a7c7-4d37-b12e-6ba6c1be9de6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "627d114d-b67f-43b0-815e-39bab673b7f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4521fa-4ca4-4545-ad15-885bb582c3fc",
        "cursor": {
          "ref": "694f5ba4-c8a3-4f28-a094-7eb21c909f0b",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2c25df92-8d64-41e0-81fc-b6618c3f38f3"
        },
        "item": {
          "id": "7d4521fa-4ca4-4545-ad15-885bb582c3fc",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ea1d2d58-7659-46cb-ab33-1f1093c74f8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a6ba6a-94ac-4815-897e-e297646633d7",
        "cursor": {
          "ref": "5112a66e-9c63-42c9-8d21-517d31db4181",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d82c1f0b-c998-4620-9a85-6c3dd06ef458"
        },
        "item": {
          "id": "57a6ba6a-94ac-4815-897e-e297646633d7",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "de82176c-13f6-4ba0-a129-2748117cef05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e93573bc-a56f-4eb6-a047-2c14a3e0cbc2",
        "cursor": {
          "ref": "adbf3e98-b484-4144-8c87-ff6f57e5c83d",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "89e3259c-388e-4c96-bfb3-9ec8f00f0e43"
        },
        "item": {
          "id": "e93573bc-a56f-4eb6-a047-2c14a3e0cbc2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1cc61213-f698-42e7-a38e-3cfe30bf7f1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa95f7da-48bc-4f91-9776-088b2428c4c7",
        "cursor": {
          "ref": "639cc670-1180-40c7-87f7-0ab5a1fad90f",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "aa759efe-4db6-412b-86ba-ca3a3135ccdc"
        },
        "item": {
          "id": "fa95f7da-48bc-4f91-9776-088b2428c4c7",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a075e5d1-b090-47db-869d-1b958f536cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "befbd46a-0b8e-4b3b-8a97-87f03b42fbbd",
        "cursor": {
          "ref": "340a6a58-9f6f-41ef-a58c-5bd99b6e4eda",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d241d687-0c46-4451-896d-c0ad443c3ed1"
        },
        "item": {
          "id": "befbd46a-0b8e-4b3b-8a97-87f03b42fbbd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bb250c2f-ccbd-4dbb-9e2f-ab84bdcfbfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa31905-8b7d-4abb-82bd-3f5e3e264ba4",
        "cursor": {
          "ref": "227d9410-a87f-42a4-8890-5f86ae4611c6",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1ea51535-95d3-4dda-8671-f637099a0e41"
        },
        "item": {
          "id": "daa31905-8b7d-4abb-82bd-3f5e3e264ba4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3c7a40db-ac23-4be8-908d-a701ecb9c834",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "62d55929-8369-4301-bc28-57ecb9d58ff1",
        "cursor": {
          "ref": "dec0d528-00fb-4d8b-a5e9-d02473ade588",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e5674439-bf9b-4643-91c5-1a4865f477a0"
        },
        "item": {
          "id": "62d55929-8369-4301-bc28-57ecb9d58ff1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8424e960-1e25-4bd9-aef5-4a459dbdda77",
          "status": "Created",
          "code": 201,
          "responseTime": 3064,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7e927b-f9bd-4435-a0f3-322405cd93fe",
        "cursor": {
          "ref": "83913ff1-b4d7-4070-a77d-8c4c1795d1c5",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1046a43a-13bd-4eb0-a49e-87b3291212d3"
        },
        "item": {
          "id": "1f7e927b-f9bd-4435-a0f3-322405cd93fe",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7f046463-b2f1-4289-b4a0-19b2e8ddf35f",
          "status": "Created",
          "code": 201,
          "responseTime": 2664,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c90191b0-13a4-47df-a8b8-836f4f7470f1",
        "cursor": {
          "ref": "f3c7471d-5a17-4701-b819-9436cc5ce3f1",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "11697229-1c00-4918-b251-57a4ccef1553"
        },
        "item": {
          "id": "c90191b0-13a4-47df-a8b8-836f4f7470f1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0e583aa9-f321-49f4-aed0-94273a3a1e3a",
          "status": "Created",
          "code": 201,
          "responseTime": 3680,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b99712-829f-44b6-8a4f-e8dc40b60d0f",
        "cursor": {
          "ref": "b6aeae94-c18c-4f88-9c95-8809fdc26f29",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1fe8e92c-7a06-45d2-bcac-8e28d6ea5603"
        },
        "item": {
          "id": "39b99712-829f-44b6-8a4f-e8dc40b60d0f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0fa8b244-3965-4dad-8f72-1313c39e17a7",
          "status": "Created",
          "code": 201,
          "responseTime": 2693,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71ed2b3-2970-40f9-acc1-4ffc72e09808",
        "cursor": {
          "ref": "79d9e85e-8c33-4d31-998f-9206a578ed08",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "27ef57e6-36cb-4b67-a4a5-39505801681b"
        },
        "item": {
          "id": "f71ed2b3-2970-40f9-acc1-4ffc72e09808",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e6ef709e-ef46-4fe0-8b78-47659e0b92f7",
          "status": "Created",
          "code": 201,
          "responseTime": 3412,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-02T00:51:24Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-02T00:51:24Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "2a99f6cf-d434-4718-a37d-ea79d6712c1d",
        "cursor": {
          "ref": "347b67fd-116a-4c86-940a-0c71f4ebcd10",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1abae6b0-5ecb-4547-8cca-2cfdd5124cbe"
        },
        "item": {
          "id": "2a99f6cf-d434-4718-a37d-ea79d6712c1d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "53c4bf1c-e1b2-4472-82be-0db20180fb5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "c0725364-1d00-4e7b-a677-a53d6575250f",
        "cursor": {
          "ref": "bf52407d-1558-4ee7-bd73-d782e63d7918",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0a7a121f-719d-4041-86b1-dfef2a885e2d"
        },
        "item": {
          "id": "c0725364-1d00-4e7b-a677-a53d6575250f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2a86b0cf-4dcd-4afe-99a3-0489c03f6ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c36c788c-b497-4df0-a4f0-e02d50114ff3",
        "cursor": {
          "ref": "d626d1f0-ecff-41d5-a1c3-9201ab6cc66b",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e6f3c05c-5b8f-44bf-9d45-1ce446d5bfe7"
        },
        "item": {
          "id": "c36c788c-b497-4df0-a4f0-e02d50114ff3",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a70ebf75-0e04-492e-bcde-3b2fa71a1842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe05c880-53d4-4d4f-9964-1f2dd4304cb6",
        "cursor": {
          "ref": "c319b43c-cd04-4888-a0ad-2f73965f0dc7",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3fa56b78-adfd-4925-a4d2-7c2e7426d6bc"
        },
        "item": {
          "id": "fe05c880-53d4-4d4f-9964-1f2dd4304cb6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "269573dc-e7d3-4c72-80e8-47acd9595ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edd958a-f5a7-4327-a155-83670724ef60",
        "cursor": {
          "ref": "3b00c8b5-3215-472c-979e-d307c0abc7f7",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "bf61f59c-6423-4cbb-897f-87c9f14862ee"
        },
        "item": {
          "id": "0edd958a-f5a7-4327-a155-83670724ef60",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bb3e81a2-694c-4c6d-89be-b40c3f36420d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ee4108-2a37-41cc-9e56-6be7721c4564",
        "cursor": {
          "ref": "7201b5c5-952e-4b35-afa3-1acaa0a7bcec",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1569d1aa-7fa3-4a77-8805-0e877a8076c1"
        },
        "item": {
          "id": "c1ee4108-2a37-41cc-9e56-6be7721c4564",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "708c5771-615e-4980-8b3a-5789b94d220c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01929577-b199-4680-9b0b-bc83d92c09a5",
        "cursor": {
          "ref": "cd5c7ed8-0880-48ed-875b-90e372e5b42c",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "52c3d751-cfaf-4394-bd33-c14f26f8bb0a"
        },
        "item": {
          "id": "01929577-b199-4680-9b0b-bc83d92c09a5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2ed8758b-6e37-440a-8c55-6488c7960d26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ba5427-2c83-40a1-b413-ec57bf4032e7",
        "cursor": {
          "ref": "e3ecb1b0-ef60-4ee7-8bae-6ceac6b9240f",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0c48bc86-7b86-4dd9-aa62-4afbc4d52202"
        },
        "item": {
          "id": "41ba5427-2c83-40a1-b413-ec57bf4032e7",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d777fbc9-e92d-44f0-a250-3d149ff5157f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0152d95-e8df-4496-b293-8d4637be90f3",
        "cursor": {
          "ref": "7fa62f15-8d98-4236-8da6-5b1597021fa1",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "03880049-56b7-4e58-bcc8-2f2f24a9ba8f"
        },
        "item": {
          "id": "c0152d95-e8df-4496-b293-8d4637be90f3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "33624f3d-0169-40d2-95d1-90b6486802a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b3d83b-b498-4720-8a6b-ae38144d6fad",
        "cursor": {
          "ref": "74212d45-25ba-453d-b665-d36ef1e0eb67",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "26c7ed87-26fd-4bbf-bb9d-8db9cc26b762"
        },
        "item": {
          "id": "06b3d83b-b498-4720-8a6b-ae38144d6fad",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "75fedd94-7b3c-48dc-957f-a6cdf6d76ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f56d299b-31b9-43cb-b637-790971db68a2",
        "cursor": {
          "ref": "90f59575-0a9a-48ba-920d-cf979236acbd",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "15f3f1ff-a76f-4f19-8f56-761a329f976f"
        },
        "item": {
          "id": "f56d299b-31b9-43cb-b637-790971db68a2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b856884f-8cb7-4298-be35-bf070668507f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d216b680-b3fc-4598-9ce9-508bfd6ed5e9",
        "cursor": {
          "ref": "7c048356-ee57-4fc8-83f7-c654c5ac8286",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "22b3b971-ebd2-454a-aae7-52d2910592f8"
        },
        "item": {
          "id": "d216b680-b3fc-4598-9ce9-508bfd6ed5e9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5529344f-9e8d-4c9f-8775-1f1cbbf380bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e7d40d-47df-46c7-9304-8bfe2cf04909",
        "cursor": {
          "ref": "db4cb490-6ea7-4368-b7c3-6b68b560dc58",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "706d252e-9236-4306-a097-41b14fb09594"
        },
        "item": {
          "id": "f8e7d40d-47df-46c7-9304-8bfe2cf04909",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "791191d6-238a-40f8-af14-9bdaf1789683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9277dce-2a68-49f7-8bdf-b84069d5f75f",
        "cursor": {
          "ref": "0986e6f2-6b71-4d10-9ab5-98bcf17d715b",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6fba184e-0e6f-47f1-a984-9083b8cc1fe3"
        },
        "item": {
          "id": "e9277dce-2a68-49f7-8bdf-b84069d5f75f",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "01125a30-a7a5-4e16-a11a-de4174581a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b74fa90-aa1c-45bc-b7ba-a8fa777036c3",
        "cursor": {
          "ref": "febeac09-77bb-4358-8eb2-385a9b8e1bac",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b7063ab3-b3e9-4254-9659-ba66317b26ac"
        },
        "item": {
          "id": "0b74fa90-aa1c-45bc-b7ba-a8fa777036c3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8ce0c518-3196-4f8c-85d3-1febaecdf04a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70c702b-58bf-42ce-a8f8-b9e2f52a9bd7",
        "cursor": {
          "ref": "d1ab9245-2512-4320-bd55-ff6266081297",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b3ef7f27-b5b8-4c57-a74e-7c5141bd5a33"
        },
        "item": {
          "id": "e70c702b-58bf-42ce-a8f8-b9e2f52a9bd7",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "66b63819-f352-456e-bd0e-4b4e001b4db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910e03c0-fe40-42e5-984c-a31eec8e129b",
        "cursor": {
          "ref": "d565055e-d303-468a-9c86-2ef5330e9007",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3561462c-4ebf-42d5-9bc4-9cb2ee102154"
        },
        "item": {
          "id": "910e03c0-fe40-42e5-984c-a31eec8e129b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0cba7764-0222-4da0-b9b9-17ec14c17b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92af5a25-7592-4770-a7e5-11b739bebbf8",
        "cursor": {
          "ref": "01ef3dfc-d041-4444-a366-611426ff1b77",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "f6cc2c04-9a83-4377-9b37-83299ec82709"
        },
        "item": {
          "id": "92af5a25-7592-4770-a7e5-11b739bebbf8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1cebf701-66ff-4fe7-bba5-81d63b4ea75c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3ba439-d08c-412e-8290-8b2e567bc9d2",
        "cursor": {
          "ref": "e8b589ff-51fd-4614-b818-7c5678d61b84",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1e6aab11-206b-4f8c-b042-88459bd81901"
        },
        "item": {
          "id": "9c3ba439-d08c-412e-8290-8b2e567bc9d2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c2c41932-aa71-4d33-bc2d-67f61d1b5449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0b1d385-d909-4481-90db-c4d2cf3bf5d0",
        "cursor": {
          "ref": "f41039a0-7548-43ec-9f61-0139c407c216",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "143aa12e-fdfe-441d-bed2-411e4b7171db"
        },
        "item": {
          "id": "a0b1d385-d909-4481-90db-c4d2cf3bf5d0",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4613ce18-80ac-4750-ba80-4863b4a5ab82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab3fdd9-40b0-46ad-b26b-07bb8051cb04",
        "cursor": {
          "ref": "c70f0bcc-4a60-4dd9-967d-2efac92628c4",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5816d354-12fe-4e29-b0d4-07d202a36328"
        },
        "item": {
          "id": "6ab3fdd9-40b0-46ad-b26b-07bb8051cb04",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "11216999-bab3-4213-869b-0cd1eb260cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0032dad7-fd49-45c1-b016-72bf3fec10fc",
        "cursor": {
          "ref": "a0e6576d-b648-40f0-866d-39896200ca3a",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b66ab48f-981a-4490-a1c5-b5bcbc3b5f7f"
        },
        "item": {
          "id": "0032dad7-fd49-45c1-b016-72bf3fec10fc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2cbca6a0-2519-42e2-bdf6-0323d413f216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edc5479-6c4d-44d0-a1d2-85640022c517",
        "cursor": {
          "ref": "704a3371-2c28-44a0-a96b-a6dd3a46f947",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6ef1ebf8-554d-43e3-a4dc-30ba5ec2964c"
        },
        "item": {
          "id": "3edc5479-6c4d-44d0-a1d2-85640022c517",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "09a55bc9-0c61-4098-8a26-6b75ab22dddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa25349-01df-46cc-9ed4-1fb3ec282fa1",
        "cursor": {
          "ref": "64f9bc48-b774-4f81-87a8-0efc728dd44a",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cffed7c6-a7ad-417f-9800-06f4dd272055"
        },
        "item": {
          "id": "2aa25349-01df-46cc-9ed4-1fb3ec282fa1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f5dc3e7b-9677-484d-aee9-a7266f2a271a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abd2be0-6da1-4e1d-a94f-37ad7564d6fd",
        "cursor": {
          "ref": "d3bea7ee-0752-478e-bed6-8a89822b2f35",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "b4465053-9f2c-4c93-a8e6-56f515e4bf82"
        },
        "item": {
          "id": "1abd2be0-6da1-4e1d-a94f-37ad7564d6fd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2be64437-baca-4f14-b2c7-a126b1a7a530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352ae438-3eff-4ec4-8d82-0bbc7879a928",
        "cursor": {
          "ref": "091e81d5-c61d-4c88-8d2a-d75619dc2369",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "28b66965-ebb9-459c-9d68-03b1e1559e6e"
        },
        "item": {
          "id": "352ae438-3eff-4ec4-8d82-0bbc7879a928",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "07a6bf61-ce5e-4723-b16b-f59f17b67058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38263259-511c-41da-8705-1914ccbf9aa6",
        "cursor": {
          "ref": "a2a7ee62-b5bd-4b1c-b3c3-b60f3f4a752e",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "3af4415d-ebe3-4d34-8cd2-842232ca57b7"
        },
        "item": {
          "id": "38263259-511c-41da-8705-1914ccbf9aa6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b9e858c3-1cf8-4940-ae14-8d9e9aa19550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964ccbcc-8465-4167-abd1-68b36a92abe6",
        "cursor": {
          "ref": "2c26efdb-93e2-45cf-8f2a-16b10a3195eb",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "18c2c9a5-1a13-452a-ad0e-a73f993f288b"
        },
        "item": {
          "id": "964ccbcc-8465-4167-abd1-68b36a92abe6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4074fd77-7256-473f-a6f6-9d274a41cf1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358d5f1d-0a88-4933-98ab-3042d93d180b",
        "cursor": {
          "ref": "f1db977e-c75b-4051-9e1d-3284feb3b62a",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "37eac03b-073d-42a2-8558-494e8f77689c"
        },
        "item": {
          "id": "358d5f1d-0a88-4933-98ab-3042d93d180b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "ed67b339-3bff-4672-b4be-f9d90a7cd7d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aeb0d09-ee13-4288-bb49-504d9a0e9e91",
        "cursor": {
          "ref": "08457d11-8dbb-4032-b3f5-ef84b3f828b3",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d42e4bd5-b663-4d57-b653-e8091cc2cf54"
        },
        "item": {
          "id": "1aeb0d09-ee13-4288-bb49-504d9a0e9e91",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c87cfbf4-dd32-40cf-b957-8e0a945a102a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd376db-476e-4902-8a37-80464e2f96fc",
        "cursor": {
          "ref": "8ef4c060-4c99-4909-bebe-c17d47f2c361",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ceb973e7-135e-40fe-b1aa-1ee134ada883"
        },
        "item": {
          "id": "abd376db-476e-4902-8a37-80464e2f96fc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8640cb0a-30f3-44d5-aa1e-3e8019fbab4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7cb2a25-4d53-4825-a208-e8ffe4e236fa",
        "cursor": {
          "ref": "12e59279-bb16-4d7c-80c9-d5ee8b07ab3d",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "b68e2969-a83b-4ea9-81bb-4a1da5389f91"
        },
        "item": {
          "id": "b7cb2a25-4d53-4825-a208-e8ffe4e236fa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "30a8af93-e225-43e8-8d3b-0c0ddcdf18fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d373df94-fbf2-41ca-afca-c12162c7ea73",
        "cursor": {
          "ref": "9e5e5797-6302-4a1f-b880-d237efd5a180",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b8d10619-19e0-42bd-9017-7378156fe7f3"
        },
        "item": {
          "id": "d373df94-fbf2-41ca-afca-c12162c7ea73",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "33bcf470-2404-47a6-b1b2-aa6b564fbb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb787a85-4c64-4316-a23f-16d06e99ce15",
        "cursor": {
          "ref": "f0fac29e-3a37-4960-9248-a358cafe03ec",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "81bc5f62-ea1d-49a3-9537-52bff936e865"
        },
        "item": {
          "id": "bb787a85-4c64-4316-a23f-16d06e99ce15",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "57a8cb58-b77a-4fb3-9592-331f75bb90fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8698dae7-5c5c-466a-91b5-9e7f75c42a8e",
        "cursor": {
          "ref": "3843c4f3-c434-435b-bb29-0a6af7816303",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7a2870fc-1664-4574-8f29-20bc197eebab"
        },
        "item": {
          "id": "8698dae7-5c5c-466a-91b5-9e7f75c42a8e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "79abe8fe-c5ad-486e-9eee-cf02e326a272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d096eb6-eb44-49ab-a3e0-441f7f6658f7",
        "cursor": {
          "ref": "2ff57f1c-1892-474b-af68-f1caf8b541df",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "60bfe874-a75c-4af6-b1ca-4005901b22e9"
        },
        "item": {
          "id": "3d096eb6-eb44-49ab-a3e0-441f7f6658f7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "83ac7da7-deb3-4d38-81bb-6b226f50c2e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b2bb22-8b9f-43c2-a740-c81aea10db1a",
        "cursor": {
          "ref": "56f95d03-f45f-44d0-ae7f-7b93f63087a4",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "88214677-a9c3-4660-825f-5c5231916b5c"
        },
        "item": {
          "id": "c7b2bb22-8b9f-43c2-a740-c81aea10db1a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5a01db72-8342-4ac3-9f41-df2776e1cea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9cfd94f-453f-457c-bdb8-6936e751d937",
        "cursor": {
          "ref": "d5080dd1-4b74-401e-a809-39283bdac730",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "96dd25b4-2fae-4921-9161-00881fc1aecb"
        },
        "item": {
          "id": "c9cfd94f-453f-457c-bdb8-6936e751d937",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "81018ae8-4aaa-4ddd-a7db-9e348c9b4e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae32803f-c70d-4813-9239-a59d3b9738d5",
        "cursor": {
          "ref": "a3c0bf7e-8861-4377-9ef0-e64d5ae9b3b7",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3b8073e1-4100-424b-8f53-630a3505d498"
        },
        "item": {
          "id": "ae32803f-c70d-4813-9239-a59d3b9738d5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cdbd1679-93f1-408e-86f4-0eae29e8a299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c1d038-75f1-45c8-8070-b8a01e4028fe",
        "cursor": {
          "ref": "9769d075-8785-4e16-9da0-9b508b201a1f",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "89186140-2b23-403a-b4fc-8783dd8e0250"
        },
        "item": {
          "id": "59c1d038-75f1-45c8-8070-b8a01e4028fe",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b4848bb6-b204-4f85-af75-02ebf12339af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5574b53-be05-4902-9984-5d9d0ddb2f89",
        "cursor": {
          "ref": "3af49a5e-54e4-431c-8daa-8e0ebc958ba6",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "0464dcd2-78af-4201-8a0d-9c9e17ef0f6c"
        },
        "item": {
          "id": "c5574b53-be05-4902-9984-5d9d0ddb2f89",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e05f96f7-0070-48bd-88ff-f992e607e324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c872e144-9c59-498f-8d33-f20e10a6def8",
        "cursor": {
          "ref": "fef9b26d-1c3d-4439-8b01-0da5e86f180e",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "96d16f0b-a16c-489b-880c-10ca62064719"
        },
        "item": {
          "id": "c872e144-9c59-498f-8d33-f20e10a6def8",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9166b48b-790e-4e5a-8ac5-e982a08f0ea6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "badebf2c-7d20-4108-884e-e540bf3d30cc",
        "cursor": {
          "ref": "0ab33e15-2fde-4c1c-a334-8519b3af6a56",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "7c37e83e-1c58-4660-8def-db6d46aa0b50"
        },
        "item": {
          "id": "badebf2c-7d20-4108-884e-e540bf3d30cc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "afb6387f-61c3-49ce-b782-20cd9035efe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3940c1d9-bbd4-43ed-9440-9590dfc5748d",
        "cursor": {
          "ref": "9b32b006-f4e6-478d-9a40-337b062f8d72",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1dcce447-a919-4e87-bebc-469a35f3ef38"
        },
        "item": {
          "id": "3940c1d9-bbd4-43ed-9440-9590dfc5748d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "37deee49-297e-4161-be38-8bbef16df1e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa31eaf-0765-485c-99ee-29837c27e8a0",
        "cursor": {
          "ref": "67104124-7d72-4919-a668-a0bd39ba92ec",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5ae6002d-e369-4270-8e6f-29ed2ce06247"
        },
        "item": {
          "id": "0aa31eaf-0765-485c-99ee-29837c27e8a0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "aea62791-8370-4169-9c0b-302c15162957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e75313-408e-443e-9d4a-d29aa4c93d3b",
        "cursor": {
          "ref": "4552c442-1ffb-4ccb-9f2c-c7765d891c5c",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b27bc26c-f6aa-4756-91eb-dbe8f07a603a"
        },
        "item": {
          "id": "57e75313-408e-443e-9d4a-d29aa4c93d3b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c0757f0b-a85d-4b7b-9266-94afa78f4121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b485f3-2159-4c58-bf6e-cd928c10f523",
        "cursor": {
          "ref": "7030fdef-a472-49d3-9225-ad70681e7c6a",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2ac19bda-5469-497a-8f24-7988feb43608"
        },
        "item": {
          "id": "c2b485f3-2159-4c58-bf6e-cd928c10f523",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "fcf51281-27b9-458f-afda-693ebf7a26f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b3cb0f-0f5e-45ac-8759-3b7975df5071",
        "cursor": {
          "ref": "b71201b5-e25f-4361-b2c1-35e9fae78132",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0d32a62d-639c-4c6b-b05d-ab8062b267d8"
        },
        "item": {
          "id": "69b3cb0f-0f5e-45ac-8759-3b7975df5071",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a480da3d-d843-4230-a559-c0988b23a856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0551caa4-c330-424b-b04e-3f3c7852a9b1",
        "cursor": {
          "ref": "052f5c94-df42-4fe9-bf01-c12c6ef2555f",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "50d155f2-1baa-4aa7-a66b-e4b9f8615f7d"
        },
        "item": {
          "id": "0551caa4-c330-424b-b04e-3f3c7852a9b1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c0ae01f5-b1d3-4a56-ac8e-cb601d98c0be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "107576e7-af45-4f76-970c-0e85003574d7",
        "cursor": {
          "ref": "69d9d009-3ac7-4d8d-adfb-2be5b515885c",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "514fa337-ab4e-4469-bb0d-2dc2d1766856"
        },
        "item": {
          "id": "107576e7-af45-4f76-970c-0e85003574d7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2206c81c-713b-4ea5-8a0d-26f134101a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f1ae88-6ef2-473a-be2e-56eb2e78f671",
        "cursor": {
          "ref": "c52630e1-1f49-4ea9-8c89-cbc3fdad594e",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "19f7e32d-6574-4a81-a9fd-707fcf01b6a9"
        },
        "item": {
          "id": "a0f1ae88-6ef2-473a-be2e-56eb2e78f671",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "774bb549-51b4-409d-959b-6a9b1c63f963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0057e9ca-4f30-4636-a8bc-549e26cf2628",
        "cursor": {
          "ref": "72eec870-3483-423a-9b9d-0dcfcbf312ca",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "41001d51-e996-42ad-bf79-a5572236e19a"
        },
        "item": {
          "id": "0057e9ca-4f30-4636-a8bc-549e26cf2628",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "153e7d12-501c-4774-ad56-c5451e6903b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994a3bea-79cf-46e4-9705-620de23cb96c",
        "cursor": {
          "ref": "70703866-0727-4b4e-ada8-2c0a12de22a5",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d67092fb-c16e-4d07-ab13-b0db4b4372be"
        },
        "item": {
          "id": "994a3bea-79cf-46e4-9705-620de23cb96c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "30f2f4d3-2261-4957-98de-8be2aa38a24f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47bd45b2-75ad-4720-8200-eeef9bb5eb81",
        "cursor": {
          "ref": "dd9a1aae-a70f-40e3-89b8-212f8c3254a3",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7c4c9d58-3baa-4f29-888e-a812d8cd2ca3"
        },
        "item": {
          "id": "47bd45b2-75ad-4720-8200-eeef9bb5eb81",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5e9ceb9a-e64d-4c3c-ba58-564ba15c9b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f24ba3-ab64-4580-8347-a81842af998a",
        "cursor": {
          "ref": "d6a5eae5-cf58-4bb9-986a-ea1854d8d519",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "39701558-8402-463a-b17b-015f0a882dc1"
        },
        "item": {
          "id": "70f24ba3-ab64-4580-8347-a81842af998a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0311a181-03d8-4429-8c64-0920be778605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba375e07-4cb0-463f-a95f-c11eb7974288",
        "cursor": {
          "ref": "799f22fd-da9d-4337-b039-57b6a4350445",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "29e7a745-045c-4341-bb3c-99fb4eab20b4"
        },
        "item": {
          "id": "ba375e07-4cb0-463f-a95f-c11eb7974288",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "80831b47-0a87-4f3a-ac72-12e61f8c3d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842bd455-e7ee-4afa-92ec-cb4b706129ba",
        "cursor": {
          "ref": "5aa2c4bf-f617-4e04-97ec-42cbaa38ed8c",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "83e4ab67-be07-4370-8ac0-d61c2739e1cc"
        },
        "item": {
          "id": "842bd455-e7ee-4afa-92ec-cb4b706129ba",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "94b5fd76-da73-45dc-bd6c-783e8ba66378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410aaea2-84d2-41e8-8110-2f28404fc0cf",
        "cursor": {
          "ref": "94ddb6c9-a47a-463d-9f3f-c942bc24d1f7",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "27819a19-ef0d-447f-a7b7-f0e0ed54e378"
        },
        "item": {
          "id": "410aaea2-84d2-41e8-8110-2f28404fc0cf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ee012f16-8e9c-48b8-8bf2-7bd018f045d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86b25bf-cd70-40e6-bf6b-ec764ecb568f",
        "cursor": {
          "ref": "cec14692-5501-49cd-bdae-fe1e9c9bc8f1",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b8ea7e82-dad7-4b00-ba89-11fdb89e25e1"
        },
        "item": {
          "id": "b86b25bf-cd70-40e6-bf6b-ec764ecb568f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "790bf871-3c1c-4992-b8b2-6349e52f1db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e278a8c-2d28-46eb-b254-4f817e22428f",
        "cursor": {
          "ref": "59e5f75c-b32f-491e-9911-1aab846166e6",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "668f3a6e-ecd3-40cd-af4a-47d5f296a736"
        },
        "item": {
          "id": "8e278a8c-2d28-46eb-b254-4f817e22428f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fda2fe1c-9658-4b36-97ea-0c9644303192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "940257f3-dc52-4e05-9789-a73631ac9360",
        "cursor": {
          "ref": "da738e31-575a-4996-9412-969433980cfe",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "38a3be5c-6769-4bfc-b455-3b26a25a64d4"
        },
        "item": {
          "id": "940257f3-dc52-4e05-9789-a73631ac9360",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "899a34f3-bd38-41c8-9e80-4ea1f391720e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9cf3ccc-02fd-458f-874e-f0cb14b14a80",
        "cursor": {
          "ref": "93f91d81-a770-4b8b-b3fa-5312f79d8e9f",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "40c618ff-7280-4604-b240-7e3fe662124b"
        },
        "item": {
          "id": "c9cf3ccc-02fd-458f-874e-f0cb14b14a80",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "47053af6-a97f-4d8f-86f1-27be09a0d47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a361396a-f13b-4633-981b-10937b295dff",
        "cursor": {
          "ref": "94173adc-4c6f-4cd7-8e0d-ccb1e9883fc1",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5af5e3a5-2e11-4b33-812f-97eb55831979"
        },
        "item": {
          "id": "a361396a-f13b-4633-981b-10937b295dff",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "29365cc6-1eae-4601-8225-96b29dd5a09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f83cc6-eaa6-4b29-8ae4-ce4e4ca4dfe6",
        "cursor": {
          "ref": "dc296a63-32bc-47ad-8600-fb14840e63d4",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "92c26384-72c6-406d-bc1e-b5c0ff39f93c"
        },
        "item": {
          "id": "b4f83cc6-eaa6-4b29-8ae4-ce4e4ca4dfe6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "08eb0421-551d-43d1-840c-1d910173ae9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6afc1146-9a4b-4bf6-99dc-5812c6123ddd",
        "cursor": {
          "ref": "519c2f7b-99f2-4ee2-a613-56e5c838ce79",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d9e97951-9dc4-4b18-8422-c43cac27f1ef"
        },
        "item": {
          "id": "6afc1146-9a4b-4bf6-99dc-5812c6123ddd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9b9f7f56-8e56-424c-81dc-546f09cde093",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4e997f-1959-4cef-a369-0f2482d57d85",
        "cursor": {
          "ref": "54945f84-be12-4fe8-8872-86cdea8c232c",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4c311992-a993-4a8b-8f11-fa45c62f531d"
        },
        "item": {
          "id": "bc4e997f-1959-4cef-a369-0f2482d57d85",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4856f02b-82c2-4900-8a00-c98836bfe48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2281d0-02f8-4a1e-9186-30ce4d10f430",
        "cursor": {
          "ref": "efc89d02-e3bc-40a9-82a0-7cc3b8dfd5f8",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "99af4c2c-0dbc-46e9-bd1e-d4346687338c"
        },
        "item": {
          "id": "6a2281d0-02f8-4a1e-9186-30ce4d10f430",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "00b9251d-76b4-437c-a335-164c43177bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba295ae6-325b-4b45-8ca3-50779831fc80",
        "cursor": {
          "ref": "f738dfd0-8719-4058-a19b-243831fa248d",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dfd4c25c-0563-4930-b69d-10a07af3b692"
        },
        "item": {
          "id": "ba295ae6-325b-4b45-8ca3-50779831fc80",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "aa9962e7-50a2-4efe-9caf-47da9c7d9165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814ab44a-f4b8-42aa-855b-5b3187e21ae1",
        "cursor": {
          "ref": "cf06f05b-9cf7-4d05-97ff-472850b3c1b1",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "18e486bf-76e6-46b2-8808-0d5ae20da9f1"
        },
        "item": {
          "id": "814ab44a-f4b8-42aa-855b-5b3187e21ae1",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7da09f70-c988-4cb7-b451-604fbf27fbe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe6bca2-f602-4633-bc45-8760805b992c",
        "cursor": {
          "ref": "dc12a1fc-03bb-4db6-baea-95270622f462",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2c5fbc31-3690-4fb2-9b5d-115ddb683518"
        },
        "item": {
          "id": "7fe6bca2-f602-4633-bc45-8760805b992c",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "83940355-2f09-479a-ad8c-b170e4015be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831c37ed-afb0-4783-863e-d229509593af",
        "cursor": {
          "ref": "f18265bf-9b34-47b7-a01e-2ac92e252f36",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0e1af44b-7a29-40f8-904d-9764809b7a7f"
        },
        "item": {
          "id": "831c37ed-afb0-4783-863e-d229509593af",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c7886159-861e-4b10-8121-f7c5f1d0cdf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58346984-c4fb-4496-a95d-40e199a7be7f",
        "cursor": {
          "ref": "89e42cf2-6bc8-4285-8756-c1225d4129b7",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "17d5bf04-d957-4be3-b8b0-1e5f3cc7cb75"
        },
        "item": {
          "id": "58346984-c4fb-4496-a95d-40e199a7be7f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e9fa8cef-69f5-4bf8-bc4a-b7cd938a72dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "bb7fd5ec-88f0-4684-bb28-4846697982c5",
        "cursor": {
          "ref": "1b3e7947-4548-4003-ad63-abd0f4ba0cbd",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "773afed2-c2a2-4028-aee5-be520c25ba15"
        },
        "item": {
          "id": "bb7fd5ec-88f0-4684-bb28-4846697982c5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "37434f86-e9ce-4fa9-b955-ce1ef363d805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98a6ad8-1b06-45b2-9246-5bc7ff631ebf",
        "cursor": {
          "ref": "8cc23386-6dd6-4f13-b332-9fe2009c827f",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "133527c2-d60b-43f8-a3f3-24214300b450"
        },
        "item": {
          "id": "f98a6ad8-1b06-45b2-9246-5bc7ff631ebf",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "24530741-b516-4387-9570-8feaf5cd4c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f98147f-b49d-4b3e-8460-497ac7a5c688",
        "cursor": {
          "ref": "9d99fa9c-829d-4a39-93e4-c1cfda70222e",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "71c1ba63-5269-4f05-ad93-b9f82b22ebbb"
        },
        "item": {
          "id": "7f98147f-b49d-4b3e-8460-497ac7a5c688",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "507a80ff-7279-4e1a-8605-6d4b3837258c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151976a9-66f1-4a2b-b128-9e11efb3e6a3",
        "cursor": {
          "ref": "7935656e-db03-4be8-b9b2-109e3ff6e808",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "706df0bf-2c85-4101-9810-2f9c1f429231"
        },
        "item": {
          "id": "151976a9-66f1-4a2b-b128-9e11efb3e6a3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "95425541-2bd2-49a1-afbb-9128558ca820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6656de-9a1b-4582-89c3-61e38d2a63a0",
        "cursor": {
          "ref": "49440439-c173-4dea-90b4-8577d9834c0a",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "7243ff63-7585-494d-8e7d-b5acaa151c12"
        },
        "item": {
          "id": "df6656de-9a1b-4582-89c3-61e38d2a63a0",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "70ecd29e-8239-402b-979a-53f58d1b7029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a73474-6e6e-40f3-86aa-95160ac65fdb",
        "cursor": {
          "ref": "7975a6da-4cc1-4630-bbfa-2df5566603ab",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ebd9e43d-f1d0-489e-8861-3d598bd43d99"
        },
        "item": {
          "id": "45a73474-6e6e-40f3-86aa-95160ac65fdb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "177bf7fe-2a07-470f-8c7b-22124954cb76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276b37bd-d1bd-45bc-b2ea-34d953ce552d",
        "cursor": {
          "ref": "552237a0-4716-42ae-ac85-9b1f7f57b15f",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f57a3653-1dba-44e3-92b1-603109273472"
        },
        "item": {
          "id": "276b37bd-d1bd-45bc-b2ea-34d953ce552d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "600719d9-4daa-4997-85bb-dd84db1ae306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da73a346-49ae-40d8-a6f2-4a13983e354f",
        "cursor": {
          "ref": "0ea5c993-a63e-4c66-ba8a-8984fea44aae",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b651c596-f54f-43e2-bbbf-4e10e7e91992"
        },
        "item": {
          "id": "da73a346-49ae-40d8-a6f2-4a13983e354f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f249c026-a880-4fec-aecc-012d6a7eaa59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0043824-e6e3-49e1-ad02-a7476eda427e",
        "cursor": {
          "ref": "4b3e3fff-349d-44f4-932c-8c1e64812594",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bd7acf77-c65f-4e92-8e8e-dafdb212a71e"
        },
        "item": {
          "id": "b0043824-e6e3-49e1-ad02-a7476eda427e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "05c01bec-6b23-415f-98c3-1bb91018fac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67599b17-2bc4-4e89-b25d-5563918feae1",
        "cursor": {
          "ref": "2476402c-6de8-4788-bc40-0b1361179a65",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8be1adce-85ca-4408-86e1-9714c99200e4"
        },
        "item": {
          "id": "67599b17-2bc4-4e89-b25d-5563918feae1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "643ec7d1-1d14-4730-b834-5e76b1aa65c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed049876-c969-48e5-809b-96ad43f3ec5a",
        "cursor": {
          "ref": "a4d188c0-de9b-49d3-8350-5eb705c9aa33",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "807c49d6-8c90-49b5-b787-eb387d0729c8"
        },
        "item": {
          "id": "ed049876-c969-48e5-809b-96ad43f3ec5a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0a5ce806-0f88-40e2-bced-0d42b55e9129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ffc50b2-7ebf-47f0-9a51-a4905e44cd4b",
        "cursor": {
          "ref": "398e26b2-e2b0-4d88-802e-075bec117280",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5ca82f05-f9ba-4a89-94da-4f91f2292123"
        },
        "item": {
          "id": "6ffc50b2-7ebf-47f0-9a51-a4905e44cd4b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9276b797-3ab8-430f-ac45-a93b2067fc84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8277e386-b915-44ba-b2b7-a4eff3fd0678",
        "cursor": {
          "ref": "dfa6650a-1085-40cd-b093-e62a6a39f16f",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "21f5d03e-da74-4c08-af78-4cc67f740b78"
        },
        "item": {
          "id": "8277e386-b915-44ba-b2b7-a4eff3fd0678",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c4dbd14f-deeb-43a9-a9bb-cc4bbb9911bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25497dbc-313b-47a2-b5e8-f9b92f0a5c3f",
        "cursor": {
          "ref": "ed842cc1-fec0-402e-8f7e-b6359148369a",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "cc5f8ea1-d2ca-4cc5-ab90-0ce9f070d616"
        },
        "item": {
          "id": "25497dbc-313b-47a2-b5e8-f9b92f0a5c3f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2ee3d2a6-5e75-4f05-9b71-f18e0dd13271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d970bd1-c2ab-47e5-8c4a-8a62d40b5e0a",
        "cursor": {
          "ref": "9fbd110d-0683-4190-b71f-6b8365fc4fa1",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4ce8fc77-1994-4658-a700-807febc765d5"
        },
        "item": {
          "id": "1d970bd1-c2ab-47e5-8c4a-8a62d40b5e0a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1a523799-834a-4f8c-b568-378d87481bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745c80f8-4d38-4f13-9729-7b3646a767f5",
        "cursor": {
          "ref": "834afda1-091d-42f4-b1d9-6d147da23398",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "14d479d1-b22e-4f9e-9102-72a3ac8854be"
        },
        "item": {
          "id": "745c80f8-4d38-4f13-9729-7b3646a767f5",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7fd660d9-56cd-4abd-9dcc-8dc29586ce0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d4a623-3515-48cc-8960-51d409bd1af7",
        "cursor": {
          "ref": "ec711af0-159c-4b09-bba5-e093efd897a6",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8dfe97b5-3866-4e05-ac73-9f01c4bcbe2c"
        },
        "item": {
          "id": "a7d4a623-3515-48cc-8960-51d409bd1af7",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "654dde6c-232a-4320-8043-fda1b92ee38d",
          "status": "OK",
          "code": 200,
          "responseTime": 232,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "12e0bd48-f2e0-4d10-b38c-a7253e67fc7a",
        "cursor": {
          "ref": "728d0c54-876f-4db6-859e-213a5b8cb6b4",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "79784de5-b4a4-4bbf-b3d2-9f7c21097f00"
        },
        "item": {
          "id": "12e0bd48-f2e0-4d10-b38c-a7253e67fc7a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4b03773f-a31c-4aa3-bd2e-0f23b9259143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31e7bac5-8505-4149-a8f2-c2c0dc7d24de",
        "cursor": {
          "ref": "4ca4cf13-1c30-4095-bfcd-17db17595aed",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8a1d94ac-98ee-419b-b891-432a79108bb2"
        },
        "item": {
          "id": "31e7bac5-8505-4149-a8f2-c2c0dc7d24de",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5f8015e3-30c8-40ea-b5ea-e10646d9aebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6945ef07-829a-4630-b351-60a9f22ec8aa",
        "cursor": {
          "ref": "026914bd-45a4-413b-bafb-a209a68cda02",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bf484565-0a29-4a4a-9ad7-042af5269e79"
        },
        "item": {
          "id": "6945ef07-829a-4630-b351-60a9f22ec8aa",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f22e7c95-6f9f-4e6e-891f-24f55646b388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f475f7b4-921f-4a12-9947-bc5c09ec690e",
        "cursor": {
          "ref": "0e72d1a7-b271-40d7-bf17-ba652eb0d0d5",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "dde23fbb-30be-4b96-8c32-fe241e4946ce"
        },
        "item": {
          "id": "f475f7b4-921f-4a12-9947-bc5c09ec690e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6c7b297a-656f-4459-b1e0-b0b525379cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14540cf5-f69d-45ac-b9e6-fb1f01584948",
        "cursor": {
          "ref": "453b52d7-475b-49df-bc58-d4363d09b114",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "925ee7da-1c03-42ad-b1c9-65cf6e6c8115"
        },
        "item": {
          "id": "14540cf5-f69d-45ac-b9e6-fb1f01584948",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "beb37bae-de93-4466-921e-8f6d667839f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8369ed4-3a62-4b51-a0bf-b7c1026e7590",
        "cursor": {
          "ref": "c28338c8-29f2-44e5-9763-c55a9f6132d7",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a833d853-024a-460b-8b9a-1e0d046e2b6e"
        },
        "item": {
          "id": "e8369ed4-3a62-4b51-a0bf-b7c1026e7590",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "455cb7ba-2133-4884-9d67-0f969ad91a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2939cbc6-1acc-4734-b965-0121b68962b1",
        "cursor": {
          "ref": "4b6af840-11ec-4b31-9898-82a460d53ec8",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6e16b238-1628-446a-b99d-a2f3afbcbe4c"
        },
        "item": {
          "id": "2939cbc6-1acc-4734-b965-0121b68962b1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "79e60e89-7518-45c4-b8ce-392d62520ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dc6492-525f-490a-bcfe-1d4c7155a220",
        "cursor": {
          "ref": "f4e02ac0-d486-4fdd-8784-7c2d49142201",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1e061a99-9ba8-4391-9396-e670de60c4e8"
        },
        "item": {
          "id": "f9dc6492-525f-490a-bcfe-1d4c7155a220",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f3805ad2-324f-479b-bd04-8eb240bf0791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01c8380-fd2c-4c35-8ea0-8d80cbacdb10",
        "cursor": {
          "ref": "bfadaad1-ef6e-466b-8730-f049f1d81999",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "c3f0d2f8-08fa-4a34-bce9-a97dab73ae60"
        },
        "item": {
          "id": "f01c8380-fd2c-4c35-8ea0-8d80cbacdb10",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "c42c2412-7763-437a-9d2c-a18d8addd4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2497e067-90a0-4e0f-b047-0cdce22d5b47",
        "cursor": {
          "ref": "2b527df0-e7d3-45f9-8a7e-c01e4e722cf9",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4d393cd4-f84d-4e45-8d7a-600a64ac3c70"
        },
        "item": {
          "id": "2497e067-90a0-4e0f-b047-0cdce22d5b47",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "ddb3a00b-1a88-4960-8a9c-6291c37c610c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed986c0-b17d-4817-bcd0-4de04a61742e",
        "cursor": {
          "ref": "b2eb79af-4763-46fa-ae29-e4eaa918c1be",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "77d1b9b6-1bd1-4161-8343-26c95d2bb5da"
        },
        "item": {
          "id": "2ed986c0-b17d-4817-bcd0-4de04a61742e",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8f255f5a-26f1-43e9-a71a-e95890e7c7f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c673f6a-ba7c-4dc9-ab5f-5f8c635ecb10",
        "cursor": {
          "ref": "596bbba7-51a6-452c-ad59-8a2e033cf865",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5ccc32a5-d717-42b6-baf3-513a74bbcd3f"
        },
        "item": {
          "id": "4c673f6a-ba7c-4dc9-ab5f-5f8c635ecb10",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c6ea0970-fa5b-4441-b0be-b5517da532be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d431dd92-9749-40b8-8d27-57cb8ad8a2db",
        "cursor": {
          "ref": "69f17c41-3682-4a7b-8d69-cf752bda6651",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "65f30fc6-fab3-47ca-abee-3b401de057f2"
        },
        "item": {
          "id": "d431dd92-9749-40b8-8d27-57cb8ad8a2db",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "90d4b0f1-effc-45d6-b994-dc9970d54a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f006d8e-66fa-45ce-995f-f7e4d790f2f0",
        "cursor": {
          "ref": "baf11148-7fa3-464a-ae8a-d608fb91c61c",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "e35e19fb-3681-46cd-84bd-326fb5296aef"
        },
        "item": {
          "id": "8f006d8e-66fa-45ce-995f-f7e4d790f2f0",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ff10e961-7c89-4a7c-a9d4-2e1fad6a9bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9186c8-e72a-48d9-968b-e5dfd68a89f7",
        "cursor": {
          "ref": "91ada53a-cba9-416f-93e4-e8d932ac1ab7",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "df6c8f6f-96a8-42b3-949c-d4e02f861b4e"
        },
        "item": {
          "id": "7c9186c8-e72a-48d9-968b-e5dfd68a89f7",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ec52eb56-0a5d-4897-bb29-ad1186719626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354985fa-677b-4693-b90e-7da5ac6e51e6",
        "cursor": {
          "ref": "13491d8b-c725-42fa-9d22-8326d47cc4b5",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "7eefac41-1855-4003-a3e4-869561f44590"
        },
        "item": {
          "id": "354985fa-677b-4693-b90e-7da5ac6e51e6",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "72870b42-40ca-420c-89c1-72258df2118b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43148f51-e6ad-40c5-a624-a0a0408595cc",
        "cursor": {
          "ref": "71e0af12-97d1-4e02-a6f8-ffdce5510cf3",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "50788509-e406-4706-9271-24c832a66540"
        },
        "item": {
          "id": "43148f51-e6ad-40c5-a624-a0a0408595cc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8787be85-94eb-4fa0-a121-16fd79e4bb8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef4bdfac-20f9-432d-ba7c-c11783058f06",
        "cursor": {
          "ref": "4d3dafa4-4145-4bc8-997e-fea481ca5c24",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "213b8f75-e89c-44f6-9fc6-a9fd1aa267bf"
        },
        "item": {
          "id": "ef4bdfac-20f9-432d-ba7c-c11783058f06",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "74068479-a9f2-4c4f-827a-3222d408fd81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9dc380-3b7b-4d68-9f1f-50c674a3ae3a",
        "cursor": {
          "ref": "91800eb8-f4f9-4726-9b72-cfed015cb4f7",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "59f7769f-63be-4abb-b45b-1f3c5e516f96"
        },
        "item": {
          "id": "2b9dc380-3b7b-4d68-9f1f-50c674a3ae3a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "be798a79-5ea3-4340-996b-5778b7db5fef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "778aae9b-3e36-4d28-ab6d-37ff6607f797",
        "cursor": {
          "ref": "1792c542-c427-4ca7-befa-e863d3872885",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d0d55091-1c7e-4096-88c5-e704dfab80e6"
        },
        "item": {
          "id": "778aae9b-3e36-4d28-ab6d-37ff6607f797",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3fa8039a-3c2c-41e1-865d-3a61ce82bff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc09ae9-1911-4ba4-8c03-17fea289c4b3",
        "cursor": {
          "ref": "bebafc22-1217-4eaa-8a7e-e811ce189c5b",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "954a89fe-9f21-4a87-899a-72b73cf74f6f"
        },
        "item": {
          "id": "acc09ae9-1911-4ba4-8c03-17fea289c4b3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8c417d9d-9e31-4324-994b-29ed7d12a438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705988a5-6bba-4e61-b036-8ae924c06561",
        "cursor": {
          "ref": "02b29bd9-d5db-451a-8580-1affa88736d3",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7ee3afbb-3ea3-43a6-9efe-e47b170b49b7"
        },
        "item": {
          "id": "705988a5-6bba-4e61-b036-8ae924c06561",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dbac9e7f-ce1c-49a7-a598-9061d264101b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57700132-9227-49eb-8882-ecdc893313d9",
        "cursor": {
          "ref": "00c9324a-9fd0-4f6e-ab8d-afc069a73b57",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "61ff468c-1837-40db-9d24-0c4d08a0f0b2"
        },
        "item": {
          "id": "57700132-9227-49eb-8882-ecdc893313d9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "17d6486b-faa8-4e93-80b8-648bc47c1c30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b80cc5-0ce0-474b-8831-bad0cbdd28ce",
        "cursor": {
          "ref": "ba8530b6-acbc-4497-8d44-effb6375b636",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "94d8fd9d-fe6f-4560-8e50-b55d3569c8b6"
        },
        "item": {
          "id": "b1b80cc5-0ce0-474b-8831-bad0cbdd28ce",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "af33b6e6-5f3b-49e3-8996-8fced198c329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1618a31f-e7ec-47a4-8fb1-8f4f8765ab17",
        "cursor": {
          "ref": "35fa9a74-7f75-44b0-a153-00e40e462dc6",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "23bb168b-80cd-48b7-857f-784b46080787"
        },
        "item": {
          "id": "1618a31f-e7ec-47a4-8fb1-8f4f8765ab17",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ffc616a8-db83-4f8f-8a0a-5d21696e32c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c902e0-a754-4958-a8ac-96db96fa4695",
        "cursor": {
          "ref": "ee9af069-a5f4-4482-a7dd-e91cde8c489e",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "cf2ddac3-a292-4d8c-ac31-7f8ea78c6ffb"
        },
        "item": {
          "id": "b7c902e0-a754-4958-a8ac-96db96fa4695",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "0eb1d7a3-3b5b-4b02-807f-10c3b432d194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6a76f1-20ff-4c9b-a7a6-5838092c0634",
        "cursor": {
          "ref": "ac7b928f-ed62-482e-8d1b-dcc7e7d963ea",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "215321c9-51fe-4970-82a4-593da266a7dc"
        },
        "item": {
          "id": "7d6a76f1-20ff-4c9b-a7a6-5838092c0634",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "22e9031c-d0f0-478d-b2f3-7293c75b958c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "949c8a7d-16b9-47e6-8fca-6a0e1c490b67",
        "cursor": {
          "ref": "b5a2dabc-70fd-48d3-a3ce-451854d527e6",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1dd22b73-4fd8-422b-9813-e32c40ee820f"
        },
        "item": {
          "id": "949c8a7d-16b9-47e6-8fca-6a0e1c490b67",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "15f85c82-7a5e-4859-903b-4510275e500e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9de18cb-b115-45e5-ada5-bb8fdf5556df",
        "cursor": {
          "ref": "eb3263df-ee85-4c07-8107-024206c248c8",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "626fe509-300f-40d9-adfe-b0b2f1049148"
        },
        "item": {
          "id": "d9de18cb-b115-45e5-ada5-bb8fdf5556df",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c5ab8c33-33f7-4429-b6c0-0437f674f236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f876c98-7f9c-4d59-83cb-a625ba17306c",
        "cursor": {
          "ref": "1a03c5e8-8288-4763-aab4-462330cb9a68",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7a369579-978f-493a-b819-ea34be0d2614"
        },
        "item": {
          "id": "7f876c98-7f9c-4d59-83cb-a625ba17306c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "076d1903-f062-40a9-affe-7505a015c6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3958cd37-dab8-426b-abc1-0de3d2d3cfd1",
        "cursor": {
          "ref": "8a8168d7-e4a7-4ad5-8761-43e89c5cf361",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2d4fc188-d69d-4eb1-b8db-fbf5af453589"
        },
        "item": {
          "id": "3958cd37-dab8-426b-abc1-0de3d2d3cfd1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "2f681f9f-949a-410e-a457-a8c13ff0f1fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e07df25-2f8c-4c30-a4e5-a05eb27f24df",
        "cursor": {
          "ref": "e109296f-19d0-478e-b68d-aaaea3eec5c2",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "04437330-9210-4d0e-b171-b0dffc75ebc0"
        },
        "item": {
          "id": "3e07df25-2f8c-4c30-a4e5-a05eb27f24df",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f83eff83-42e9-4628-8503-396769dcff25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb77989-12de-46f1-acd4-e2003eacc9c2",
        "cursor": {
          "ref": "9bbe0624-c28d-43c5-8bee-d63d5204718a",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8126e66a-e472-4a0c-b722-04d9b5bbd296"
        },
        "item": {
          "id": "2fb77989-12de-46f1-acd4-e2003eacc9c2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f1891fc7-7487-4fa4-9711-bf347b075aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "414a1a2f-10aa-48fc-8598-d16892763dc5",
        "cursor": {
          "ref": "642e5661-7c79-48b8-8825-38c6932481f4",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8e370e59-c8df-4510-9235-8b26c22cfb03"
        },
        "item": {
          "id": "414a1a2f-10aa-48fc-8598-d16892763dc5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "513262e9-bb95-4a0d-88dd-ab02bc17fbb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c25587-2e63-48f0-b980-31b07f97b15b",
        "cursor": {
          "ref": "199faf73-d1fd-47c3-b997-77115950cdcd",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "4c29a518-2715-4a67-b3c3-fba3a9b23c24"
        },
        "item": {
          "id": "03c25587-2e63-48f0-b980-31b07f97b15b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "4ece9c3b-bba4-4aa5-9679-1e42bb9c0dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec502963-affd-4a64-8adf-4741f8e5672f",
        "cursor": {
          "ref": "31a6a86f-5c63-423b-99b6-e47851abcdb7",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "134d69ee-ec47-4d6f-bc4e-a3557fd86701"
        },
        "item": {
          "id": "ec502963-affd-4a64-8adf-4741f8e5672f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "76239558-f074-40ff-a359-1557af077785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e48f528-6c97-4214-83e9-1f67c7198f9c",
        "cursor": {
          "ref": "5c9c1570-64b0-4c25-b060-ec89bc794823",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fbfe28d6-0846-4b94-88c0-467371a58782"
        },
        "item": {
          "id": "8e48f528-6c97-4214-83e9-1f67c7198f9c",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "55b16e14-a1b1-4b3f-afa2-832f775a6652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3392e8-325a-4073-875b-b66b8cc1845e",
        "cursor": {
          "ref": "8a0b8acd-b65d-45c1-91d7-8c4088e9e986",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "5c2ea972-71ba-4d96-bd24-87d530ef2caf"
        },
        "item": {
          "id": "ed3392e8-325a-4073-875b-b66b8cc1845e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "32827f38-8ad9-43e7-bb2c-162450bc2e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "751788cd-11d3-4eda-bc24-fe4513f38b48",
        "cursor": {
          "ref": "34f466fb-e270-4432-9c5e-ff91137442ee",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7aec65a7-22c1-4ca3-b9cf-afc414f18b48"
        },
        "item": {
          "id": "751788cd-11d3-4eda-bc24-fe4513f38b48",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3604eadd-165e-4d83-99c1-c02f0b3f6ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fc7b60-ad72-49cf-b081-cd4241030c96",
        "cursor": {
          "ref": "be6705d5-b1be-48b7-a96e-466411827f80",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e1bd6297-b328-425a-a551-e710240605aa"
        },
        "item": {
          "id": "42fc7b60-ad72-49cf-b081-cd4241030c96",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "03c728d2-a699-4f90-bcfd-fc80db0cf0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4bb392-e814-485f-bf50-cf2457f31edd",
        "cursor": {
          "ref": "81bac5f0-09aa-44c8-8a8d-efe992ad1a27",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5ac2560d-a27d-4713-aa74-88c27bd2668a"
        },
        "item": {
          "id": "2d4bb392-e814-485f-bf50-cf2457f31edd",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1025da8c-2479-4061-a4eb-7c0eaade24b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 559,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4862b8-490b-45f6-a5f1-2cd8bcacd090",
        "cursor": {
          "ref": "6e21a878-36f2-4fca-a32f-855299c79536",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f0fd77a6-86a4-4176-bc88-00fbb576e772"
        },
        "item": {
          "id": "0e4862b8-490b-45f6-a5f1-2cd8bcacd090",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1962e914-5532-4678-8d4a-bd59725ae1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244fbbe3-109a-4169-b0c5-faa123159147",
        "cursor": {
          "ref": "20c131bb-0000-454e-aec1-4afb8f902706",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1c0ee876-e29b-4184-8974-b64164075a85"
        },
        "item": {
          "id": "244fbbe3-109a-4169-b0c5-faa123159147",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "23fa83c3-7239-406a-892d-87767553deb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5108d4-48ab-4521-8454-68d5dc695867",
        "cursor": {
          "ref": "b655582d-cb69-4def-bc8a-aebb8054e8da",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7080e281-7cc9-4221-8b78-845fba52991e"
        },
        "item": {
          "id": "2e5108d4-48ab-4521-8454-68d5dc695867",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "6f75c9ef-c3ed-4d98-89b9-f29c0f73e8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95769b11-b6ec-43c7-b934-8b442fe0ac1d",
        "cursor": {
          "ref": "be0b9c15-eab7-4527-ac53-f28096810143",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "469d14ad-8532-458a-b016-f6caba2d8c9d"
        },
        "item": {
          "id": "95769b11-b6ec-43c7-b934-8b442fe0ac1d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b48ef8c6-67e3-4878-8a8c-8470a089fd48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac78290-10ef-4b57-b98c-9ba80323cd48",
        "cursor": {
          "ref": "3eb6b2a0-42b0-4ed0-a4bc-ec494f777ce7",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b67aa3b7-b8b7-45d1-8ba1-c2a86af78464"
        },
        "item": {
          "id": "6ac78290-10ef-4b57-b98c-9ba80323cd48",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2b605ca4-e551-4f6d-9bcf-c91771aff3f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af85bd5f-9df1-41f4-9961-1b4c906f9633",
        "cursor": {
          "ref": "5d204c78-090d-4d69-a117-2a29cefc17dc",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8047d49f-dd09-4f91-a69b-c729a695487e"
        },
        "item": {
          "id": "af85bd5f-9df1-41f4-9961-1b4c906f9633",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8ff4fd10-a374-4a35-982a-dda902634eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae162cbf-9307-4f6d-994e-e9aa2317f4e9",
        "cursor": {
          "ref": "d7c2df2b-2f83-42f5-a384-3669517dc77d",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a0e02c3d-3949-4acf-acb3-988a5050eb96"
        },
        "item": {
          "id": "ae162cbf-9307-4f6d-994e-e9aa2317f4e9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2840a57d-cbca-4a91-b575-c585ea8e8a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10af2fb5-62b9-4ac4-b3e2-916d3e7883c8",
        "cursor": {
          "ref": "6e42fda4-b3e3-4e3e-b756-f777f2d3c850",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "46b8485e-61e8-4786-bcda-e7b5670bab80"
        },
        "item": {
          "id": "10af2fb5-62b9-4ac4-b3e2-916d3e7883c8",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4c047772-af18-4e8c-926a-81d606b3226a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197439fa-e608-4c15-a1a8-f34f67ab614f",
        "cursor": {
          "ref": "171d7a50-8c2a-454c-a01b-d10344422580",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9cc457af-e7a7-493d-a6fd-aa808a131d1b"
        },
        "item": {
          "id": "197439fa-e608-4c15-a1a8-f34f67ab614f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "45144cea-c22c-41d6-abca-185dbb3c095f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec9e2b25-a393-431c-849b-ba8476c8b180",
        "cursor": {
          "ref": "6f8869b1-0874-4bd4-8939-79b600fcba22",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c8901cad-aa84-4efa-a5d9-84d7d52bf2d6"
        },
        "item": {
          "id": "ec9e2b25-a393-431c-849b-ba8476c8b180",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "fa83458e-ca0c-4e07-87a1-615c907b1608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f5fc2a7-fd43-4a6c-a5ad-8ed1b2aadeab",
        "cursor": {
          "ref": "ec104375-7d5e-49a8-835c-63625ad6477e",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5f4b66ff-f3f3-4653-8527-98ebc23e3617"
        },
        "item": {
          "id": "4f5fc2a7-fd43-4a6c-a5ad-8ed1b2aadeab",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "51991c6c-ee6c-434a-af3f-61a5839c037f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cab01ba-1b0a-415b-bd8e-16f975cb5648",
        "cursor": {
          "ref": "1dac3552-c46e-4467-acd9-0663d4e08c6e",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d351ae96-fc87-4bfc-8b8e-230fdffaac7d"
        },
        "item": {
          "id": "8cab01ba-1b0a-415b-bd8e-16f975cb5648",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7669fb4d-9192-471f-85e5-ec764f90e8eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2189eb65-0779-42c1-9bca-0dd73c5315f3",
        "cursor": {
          "ref": "1f0fddd5-e964-40d8-8b67-62d2dcedcb1b",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "f5a02456-47a1-4953-8f9a-cfa0cc9d870c"
        },
        "item": {
          "id": "2189eb65-0779-42c1-9bca-0dd73c5315f3",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "de27fc52-d70a-43f2-935e-c7016741434e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9bb1b4f-7109-4f45-a548-01ceeb3b1136",
        "cursor": {
          "ref": "e0faf92a-e039-4ba7-9c6d-c04e112d7ad8",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "96c2c20d-b7a9-4e88-8d51-7bb7dc3e22c5"
        },
        "item": {
          "id": "c9bb1b4f-7109-4f45-a548-01ceeb3b1136",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "972fdc54-1b03-4962-b5ed-0c5a47b62235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b302750-f2f7-40bb-891c-7dfe6bee2b8d",
        "cursor": {
          "ref": "1747e033-a60d-43aa-b7de-b1e4c60a7b1e",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "0a3a2243-1bf5-4ae4-bc5a-d22278951782"
        },
        "item": {
          "id": "8b302750-f2f7-40bb-891c-7dfe6bee2b8d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7ae54d00-292e-46a4-bc00-8c8e63ec7ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86890210-3e0d-4423-8c96-e7b9657d3fdb",
        "cursor": {
          "ref": "7f3bdf51-3790-454f-9719-7d4f60a6dc27",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "dd654071-d32a-4500-9d43-9594e96367de"
        },
        "item": {
          "id": "86890210-3e0d-4423-8c96-e7b9657d3fdb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "7b7082be-2f0b-4061-a1d6-74e881d2df0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a67404c-17b2-43dc-893a-0f0f54001752",
        "cursor": {
          "ref": "3f4c9a5d-52e4-4eaa-8621-22046d040cfa",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "fe909c0f-d01d-4ef8-91ce-90c2e67aa431"
        },
        "item": {
          "id": "8a67404c-17b2-43dc-893a-0f0f54001752",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "db9fe864-19c5-4125-8aae-11e57faa8317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d555d47-23e2-4037-b016-cf0c239596d3",
        "cursor": {
          "ref": "cf68b8e8-1bf0-4260-82b8-65407e7ae43c",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "499fc8eb-0a4b-43d6-b412-87264a0f1589"
        },
        "item": {
          "id": "7d555d47-23e2-4037-b016-cf0c239596d3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bbc73b9b-b24f-4c1f-aec4-7c4e66650c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d332fb00-3068-4802-8c37-ae4adff01180",
        "cursor": {
          "ref": "a9e4578e-fbd3-4c2f-8b01-95b80f6fe2c1",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a9e33886-044b-4c34-a174-9fa1031c3c4f"
        },
        "item": {
          "id": "d332fb00-3068-4802-8c37-ae4adff01180",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "883789e0-8a44-4a17-b1e1-4836e9e3de90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c208e8-1f1d-4601-b66e-87fd90c12208",
        "cursor": {
          "ref": "baa79539-53bf-4354-b21a-38c6f06fe3f3",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "944cd37d-4089-4a53-a5e6-114ef6fc1c21"
        },
        "item": {
          "id": "34c208e8-1f1d-4601-b66e-87fd90c12208",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4125f0ef-b881-4c82-b2e3-2ff629166251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471e9b4d-9003-4613-b31a-0e282589521b",
        "cursor": {
          "ref": "8b6ae50d-fb7c-441e-a90b-4996e410bd7a",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b02d4485-5486-41ba-83aa-461a15a3a06b"
        },
        "item": {
          "id": "471e9b4d-9003-4613-b31a-0e282589521b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "35dfab0e-d6c8-44d1-bed4-c726c2b061c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "989cbbb4-ec53-461b-bb78-9d85f579b26a",
        "cursor": {
          "ref": "c6e66d7a-cf04-4bfd-b063-55bd9dae0fef",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "7a98bae7-a513-4c24-b775-2cb62a8e1147"
        },
        "item": {
          "id": "989cbbb4-ec53-461b-bb78-9d85f579b26a",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bc62f730-44fb-428e-a7c2-2e2aeb417768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057e6b33-28c5-44fd-9a52-5e669e9117da",
        "cursor": {
          "ref": "8bdc8759-4ab1-41dd-9238-a854f1d52679",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "036036ae-4f9d-43b8-8ed7-504fa14385fb"
        },
        "item": {
          "id": "057e6b33-28c5-44fd-9a52-5e669e9117da",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "919d752f-1b62-448b-9796-0066e7029574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91875e3-43b7-4712-bc62-931f3cbe4c6f",
        "cursor": {
          "ref": "61884254-cbfa-4488-be85-307fe6501b47",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d4935f4c-ceba-48ab-9e99-84b797bb4a7f"
        },
        "item": {
          "id": "c91875e3-43b7-4712-bc62-931f3cbe4c6f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "5fe7739c-d601-4cbc-8fde-6ac4d5e27da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a1a6cb-8398-4e62-852c-e47036f54eed",
        "cursor": {
          "ref": "fb073b92-d228-4a78-b02f-ab478c975980",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "e7b5dbb0-80a8-429a-a381-6d9bbec2b25f"
        },
        "item": {
          "id": "d6a1a6cb-8398-4e62-852c-e47036f54eed",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a3abe075-b3fc-4ef2-8aa6-38de9243ff85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9c3c65-0f9e-4391-ae77-e333f7a0d518",
        "cursor": {
          "ref": "6ebba729-5ee4-4410-a4cd-d577dfd1ff6b",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "abb6917c-4c03-4c66-ba32-e8d401b3abad"
        },
        "item": {
          "id": "7e9c3c65-0f9e-4391-ae77-e333f7a0d518",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "d9ec8f70-423f-4ddc-9963-d87849f02fb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6464727e-2b91-4c63-a7cc-a8ab0bf062dc",
        "cursor": {
          "ref": "0f4189eb-a8b2-4cd4-9131-ce55cb1a408b",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "5ee3ab6d-0e03-4e9b-8eeb-206c3e46fddc"
        },
        "item": {
          "id": "6464727e-2b91-4c63-a7cc-a8ab0bf062dc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "394293b9-37f1-42bd-b560-1025022339db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d85d263-0d03-4c2d-8acb-5dc262c0f8c6",
        "cursor": {
          "ref": "145cea40-cdf2-4fa9-a83e-d0f25448b2cc",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a8a03b60-561e-4eab-8c91-ce1392b35e3e"
        },
        "item": {
          "id": "7d85d263-0d03-4c2d-8acb-5dc262c0f8c6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ead2d671-d31c-4938-be35-707ef54a3292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0255fd77-abdc-42e8-a2b9-fb71df98eb0a",
        "cursor": {
          "ref": "d59187c0-e924-4ba1-b0b2-5e7a43a08185",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "33243ade-d73f-450d-91a8-54c5a523dca8"
        },
        "item": {
          "id": "0255fd77-abdc-42e8-a2b9-fb71df98eb0a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8f8ebcf9-85d2-410b-8f88-9c24964f1b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee2d8ab-adbf-44bf-9425-be18c9f854bf",
        "cursor": {
          "ref": "963b9ec3-bbe5-4b5c-af30-f571c9a3e2b6",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ea23c3c0-5281-43f9-9679-8b05be72335e"
        },
        "item": {
          "id": "eee2d8ab-adbf-44bf-9425-be18c9f854bf",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "dc61dc37-66be-4a11-9d2c-0e29e5fdd665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 123,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37bae28-31e1-406d-9cfb-39a87d55f6e0",
        "cursor": {
          "ref": "29496757-a80a-420b-97e5-cc5919f8396d",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "43ecb48b-555d-4fe3-9de9-86424e342700"
        },
        "item": {
          "id": "f37bae28-31e1-406d-9cfb-39a87d55f6e0",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "55079201-63be-4277-b739-96125286831f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf4db9c-b4f9-45f6-8e67-81982e6cb6b2",
        "cursor": {
          "ref": "0258d0c7-154a-40ab-8760-2b61a1ea82d9",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "5f00ec31-8741-4813-a821-73fcc008856c"
        },
        "item": {
          "id": "dbf4db9c-b4f9-45f6-8e67-81982e6cb6b2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b6fdd7e6-6651-48ff-9ea5-4c0243463da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7d14cf-cacb-4b6c-8d6e-00a219fe2c4a",
        "cursor": {
          "ref": "cb378326-a97c-4337-93c8-e22204e1b3bf",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "bb6f2e54-3573-40c2-bdf3-385df0d16487"
        },
        "item": {
          "id": "4d7d14cf-cacb-4b6c-8d6e-00a219fe2c4a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5f99b7dc-b1ac-41e1-9669-b04711824abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0994afbb-0fc9-49ab-bc34-b4b2a683b7c4",
        "cursor": {
          "ref": "eb8d484d-3eb0-45cf-bb24-c1a7fa458fe4",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "45cbedcb-e636-41ab-bb58-caf609256c85"
        },
        "item": {
          "id": "0994afbb-0fc9-49ab-bc34-b4b2a683b7c4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8dadd1d9-9556-41db-8ff9-e179cf1a19a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf39aa76-c311-4064-873f-e48d256a2327",
        "cursor": {
          "ref": "2451c391-96c3-4286-940a-b006c46d0074",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "d67582bd-aa04-4950-a193-14dd47b3bd8b"
        },
        "item": {
          "id": "bf39aa76-c311-4064-873f-e48d256a2327",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "23f1a2e2-c426-4148-82bf-491451ab228d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818aa002-aaf0-4af2-8be6-cf0aac6eec18",
        "cursor": {
          "ref": "706cf8f8-8ba9-4891-9058-be87b56d636c",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "33f615e3-683b-44ec-9312-ec6d25511abd"
        },
        "item": {
          "id": "818aa002-aaf0-4af2-8be6-cf0aac6eec18",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e0b436e2-14d0-41a7-84a2-9daef34a81e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9fad39-1f46-4158-85ea-6a6d622c5622",
        "cursor": {
          "ref": "bf71d51f-dafc-46c9-8db7-ab4259ab7c4d",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f65d5ac0-ba90-42e4-9ed4-89cf847b4289"
        },
        "item": {
          "id": "1a9fad39-1f46-4158-85ea-6a6d622c5622",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ec62b17d-f2ee-414f-bb49-9a487ab4b208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cab848-837e-462c-af0c-acb51fa47038",
        "cursor": {
          "ref": "be1ad47d-0e00-4bce-bead-98792dce9439",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "05892139-8b44-411d-88d1-eeb7d51b3763"
        },
        "item": {
          "id": "83cab848-837e-462c-af0c-acb51fa47038",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "95788eb6-f7c3-4112-b66a-670d07eb0578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb780741-4a3b-4a86-9695-41dc59e676cc",
        "cursor": {
          "ref": "d6d709b1-ec64-4a57-83b3-7e31dc61a9f8",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "eb5379c3-de42-430b-8bd4-a0c20cbcdc19"
        },
        "item": {
          "id": "cb780741-4a3b-4a86-9695-41dc59e676cc",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "eac7a72b-b4d9-4219-8b1b-43e1edacf16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87af7db3-a301-485e-bbfe-5676412a92bc",
        "cursor": {
          "ref": "9e1888ec-a1b0-4a61-a8c9-955f3da6010c",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "20c6eb00-6d74-478b-bbf3-fe2ce026ebba"
        },
        "item": {
          "id": "87af7db3-a301-485e-bbfe-5676412a92bc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8f696d9b-3db1-4fa7-a4ce-445c8a2e32c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "c4ece608-459f-4da6-8afe-fe6d46eeb227",
        "cursor": {
          "ref": "ee2151ab-a9b6-4080-a90e-d0e29b45077f",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "b3b7cb06-bc70-4b69-88e0-850f399d4cd9"
        },
        "item": {
          "id": "c4ece608-459f-4da6-8afe-fe6d46eeb227",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ad9bf6d7-1c02-4c8f-9203-d1d7ac30718e",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5a9dea8-d506-442d-8896-f0d4e4191cee",
        "cursor": {
          "ref": "2f8b02b6-a14f-4676-9385-dcf117aec367",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "9caefb6e-a319-4412-aed3-96b407341ce0"
        },
        "item": {
          "id": "b5a9dea8-d506-442d-8896-f0d4e4191cee",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3fec7ef1-af76-493e-a185-7ee919b40632",
          "status": "OK",
          "code": 200,
          "responseTime": 2431,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a5c89fa-c74f-4714-b606-33ef5c622367",
        "cursor": {
          "ref": "92b9cb3d-554c-42a0-ab56-56f6c8650351",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ca018549-3e15-4a51-8cf8-2ba98aac24ab"
        },
        "item": {
          "id": "6a5c89fa-c74f-4714-b606-33ef5c622367",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "271632d4-6bd1-4eaa-9439-41b2dc250249",
          "status": "OK",
          "code": 200,
          "responseTime": 2632,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44c7073-f9c7-405d-9305-e98ad7295fe0",
        "cursor": {
          "ref": "a381cff6-3b07-4338-a263-3632d95eb944",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0c9b509c-356d-485c-827e-abe5b148b4c3"
        },
        "item": {
          "id": "e44c7073-f9c7-405d-9305-e98ad7295fe0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ac5dfc9-4806-421d-b866-b81720279ebd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "e44c7073-f9c7-405d-9305-e98ad7295fe0",
        "cursor": {
          "ref": "a381cff6-3b07-4338-a263-3632d95eb944",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "0c9b509c-356d-485c-827e-abe5b148b4c3"
        },
        "item": {
          "id": "e44c7073-f9c7-405d-9305-e98ad7295fe0",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4ac5dfc9-4806-421d-b866-b81720279ebd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "cd805644-4f22-42f1-b5cf-5ea99998dca7",
        "cursor": {
          "ref": "98ef55e8-f31b-4c64-9d2c-05f478e3b04d",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8383db18-59ae-4902-93cc-6ec3788ff05b"
        },
        "item": {
          "id": "cd805644-4f22-42f1-b5cf-5ea99998dca7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "e9b1181f-d542-403f-ab66-9563cc092ed7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "ef0840b6-2a03-4731-84c4-86087b50f94a",
        "cursor": {
          "ref": "cb7dce6c-9621-4fde-b5cf-497f6e3ce3fc",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "4686ae0f-ff42-4695-9fcd-b312f6d5e7f0"
        },
        "item": {
          "id": "ef0840b6-2a03-4731-84c4-86087b50f94a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "a1b1f7d2-d738-402f-83f0-a250f1d7245b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}