{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5220ed7e-4006-4cf8-aefc-07362b80f905",
        "name": "Clear Cache",
        "item": [
          {
            "id": "03847924-7228-4899-ae92-980426e4b90b",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7cd4332-2f9e-4dfd-9c4c-40e884c7c635",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "642acd16-85ed-40d9-99c3-012a82fe7d5d"
                }
              }
            ]
          },
          {
            "id": "40269e1d-c6aa-4264-952f-4513d55e0584",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c46de53c-0df0-4469-a5c1-ec7e2921393a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ab4e2b64-d58b-43a5-981f-43f53b5abbe3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "42d7dd23-9d95-41b4-a350-b979d83c2ab4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "e339e4e6-ec57-4af3-bd52-df106a067613",
            "name": "Positive Testing",
            "item": [
              {
                "id": "44d9fa66-518c-4c53-be1e-4054a44a1478",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f41e828f-80e2-4506-948e-db323d5019af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "293f9621-e3ee-4b49-9c12-91fb897c92e3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb87698a-f7d8-45a7-b0a3-366743e32925",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d6de91de-a5be-4fa8-8160-32d9c004414f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1ac7e58c-4e4f-4611-b605-b88641b777cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75b408f8-107f-439a-8cb3-27c2453121e6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "546370af-ae2a-403f-9f82-4bedbbd7050f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "04202873-8e6a-4166-a79e-1dd5975fdcd7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dc2f7dd4-c23f-4fba-b5f7-f8272991291e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "20137f7e-47ad-47f5-adf9-b067482eeb3d"
            }
          }
        ]
      },
      {
        "id": "f591aeef-74a0-421d-9bbc-077e804d8a21",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "18e405e8-d67c-4c4f-a211-2e0d8b61ce12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "edb93865-38c9-4991-aaa1-5bce8cc64a42",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8aabcf43-afbb-49dd-b710-d824721e5363",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86b3ea5-383a-44bc-b6b1-a62c5c251809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "25d66a8f-51ed-4ea5-af7d-d8981f53e874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7540e1e1-cb3f-479b-997e-6cbbbc8c671b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a39941e-7d2c-4f9f-a0d6-d1a335691dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f89394fe-6774-4b39-a685-c88c4d98834b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe49d0e-6b8c-4334-81b7-a68f4608ad26",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e17ec680-23a6-4629-9b5b-ec85cd3e7240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d07430bf-c1db-4f07-bf3b-14c44c0c04f5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c192262-da7a-4948-a5bb-5f81e5d9e985",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec99cfec-d30a-4c84-b79d-6984450c2bfd",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdadafcc-622e-4a6b-b258-f8513568d5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "936f9a88-3fa3-423f-affa-18a480cad7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0ed0cd7-15e4-4e50-929e-a47a7cac4b24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09cdbb61-c1e4-49ab-9f77-5be862118c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a46fcf8-d2f4-41cf-99ea-8b25c9517ab3",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a46559-abff-4555-96ef-7525a1c952dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43e01429-e57c-4417-9587-70502f768a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9659789a-6a0e-46a1-9ccf-f579b452d5d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "b2d341a2-e985-4ebb-8961-3eea81a9bf6b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e33e44e8-ab74-4e65-ac32-59b88bcd5258",
            "name": "Positive Testing",
            "item": [
              {
                "id": "89e55011-67ec-4e41-bb64-c49041fc673d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51e9666e-2d52-4926-8360-9f8d761b0461",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6ea66793-d729-476e-90e9-81f532218e5a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ade43bf-4fc0-476f-a342-98300fcef058",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "ee7b8440-8e5e-4294-801f-ff878fff4350"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a24e767d-74cb-44e9-a3f6-bf00000ac0cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2300db1-6fec-4991-b9b9-0b346bc2d94e"
            }
          }
        ]
      },
      {
        "id": "290c2126-dc6e-4d67-aa43-6d727cfae4cc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5a36c365-8fd8-46ab-aa15-b2b947c44679",
            "name": "Negative Testing",
            "item": [
              {
                "id": "164f809b-5233-4e19-8a89-aa195a6aad85",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b09f8ace-785d-4c2f-835e-e473099280cf",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f692c94-6dfe-41af-b1cc-49222c4b17ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02a4e60-c0e7-4b92-aac3-a0f07cd8ddba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f8de13-fb45-40fd-9537-db086fb94be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d5d45be-531d-494a-823c-0ff178249fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f99e5a-8b2b-428b-8051-1d19412ec392",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0713003e-9260-4f87-95f9-30b6be18d280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b975df-8076-4ff6-a9b4-3735a25b7680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbc0ef5-8708-4f01-8094-ca0300afaafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7518f162-d108-4114-831e-f7953b7ed7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7872707e-c3f4-405e-a35f-9eb05c158593",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5b2599-7f22-46e6-b0c3-876a7087ba98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a22e7ed-90ba-47c8-83cc-aaae792f7568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40de23e4-6f1a-4861-9df2-0bd218d0b074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3bea454-dba7-4cb5-8fbb-be51de6746bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1913d9bc-4d2f-452e-9f3d-590258b49939",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76aca0c3-7419-4bac-b160-36664989fc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39637e72-942c-4c92-a8f3-495adb83626c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6030a8c-1587-4acf-b7f3-7a2c9323635c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c53a89fa-a4da-46e3-b5a8-1af637a4c357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ba68d0-e5fd-41b0-8435-db9d3546ee81",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434eda12-532e-4cfe-86c4-496707f8388f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7edb4e51-0dda-47b4-b6ae-7daf13224843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ced4b521-254e-44a6-9810-92bb9f7d0061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2130fe59-2224-464c-92b4-866ff16e0bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "714913b8-82be-4d70-b5ad-c02f761c9675",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ddb4736-872e-4caa-88c3-090faae29031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fd1055a-2bf9-4a64-b773-b807250cbd04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297aaebf-5773-485a-8253-5475d8d64934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c727189-91e6-4030-b106-d7b4cf76bd75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb477556-3843-410d-9cf8-8177ddbed86a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4614675-325e-4bde-a550-e3dff54ab30b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251f8929-41d3-41b9-9a25-7c03a9fbf584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c335021c-4850-4945-8772-23a35f69a6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af0ecee5-0ebb-4101-a3da-dd5d96face99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e8525a-9e72-4ff3-8a02-e0cc87bc17c1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621a8e31-fd5c-45aa-9e72-2d40467a4444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573ea0dc-dece-49f4-b81c-73d9d8459f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67872c81-e7d0-4507-8642-fd6e9b9b40b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a6563af-2871-4d36-b7cf-cf38a95e65bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc882de5-ee9a-4430-9e9f-403a5a0439d5",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "003ca1e1-9eb2-4cee-aacc-0f03d3720867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62383426-4e19-4547-9b35-8b87f0fc19bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a68bcbe-55fa-4810-965b-b85fcb4317a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "498fe601-d532-4568-8dc0-e90299d7ebc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45489db3-d52c-4d8d-82db-d7146a35cedf",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed77330-4713-486e-b558-f97fcb2d7b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c03d9d-1a0a-4acf-b653-837fbe1e8ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61025b32-83c3-483d-a57d-73aeb07814a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97371d6c-de56-43cb-9a35-3df0064657c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff6a4b39-1b4b-4f40-96e8-4833f5d230de",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a28430-a512-4261-838c-0b9ffb36292c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b241b6-0d26-4cf9-99fe-0e7262f1bdb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d4e3d1-622c-4c3a-9218-b6b4592b958f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5a4585c-8c03-4c29-97a1-7e23228f495e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd11a2a-f889-4621-8c67-e132a7e3e506",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd67f0f-7c7f-455c-9407-b4871683792f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1940ab24-fe15-4fd7-9734-3952fdb29819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc7f735e-5b99-4fcc-932e-2c1dcda23af4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4be9150-ffe5-40ce-895e-5f8a1467527c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdccc023-8634-453b-9dbd-996e0bd28b7a",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a06090d-b7aa-4e2b-91e7-e96771df0d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c81dbacd-0c6c-413b-b1c1-965b270255f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afa91da-9f8a-419e-afac-3ddeda3646fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8434cb50-8b72-4869-8fc2-234e04ce7f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b140de99-79f7-45f7-81e8-a943c179bf5e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8615e661-0c6d-4c4a-8c71-9eeb4e24eb42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5670416-26f0-4ff7-9fc1-6aed09cc32e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3801b17-ecc0-4a5e-8187-255362165c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e26c2300-8f10-4a7e-abab-a677371f0400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758db23a-7bb2-4129-a9c7-8d05fc5ce65a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e086b9cb-b943-49cb-8c1e-dc84a582634c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebcfa14f-2318-48b1-b799-b1c7ae5636de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920b9403-0525-4e58-9a7a-9b0014f1f2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5944c9e2-f96d-46ac-9515-ebca8e987adb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c994289e-6a0c-4687-a05f-e8215b5b950c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f04bdaaa-f9be-46a7-9480-c9cd7c95d62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d49840d2-35a2-47e8-aa94-5183e25c3366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b06e5e1-06e9-4a49-868d-9ea0e95f66a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8270638-5d73-4f88-a8a7-9eb87dd40817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b173c523-73dc-422b-9835-a57f431968d2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6e08f0-7971-43db-921f-18709611aae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc8ce15-0132-4f31-b4c0-ebb1d462d54c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b70d215-b40b-4c88-ac49-20d091fe41fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f895dc3a-21af-49d5-a56c-92a7637720e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831b0904-0af1-4d57-9d16-d4318faa7a37",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d321c10b-88f7-40c0-b4f2-d69f016329bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3fc7a1-684f-497d-8427-644cecd55138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "033f9348-c691-42e8-a5a0-6ecc56c76d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "022a9adc-2774-42ea-b132-b31c79dd580d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda3cd39-3df2-47a9-98cb-08ef2e77d832",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe16ea93-2b99-4fd7-ba70-8cf2c43fbcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da19352c-ab1f-4d3b-9d7e-a26f221feb51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06abba79-020b-4ea0-809f-873bb4eb2d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "966f4fb2-a7af-4114-b9e6-b13bc5f9b78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c0da63-5165-412d-b21d-72f14842d38f",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8be9856-cf17-401e-8ec3-26698a80cd0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1289cc-a5dd-4cbc-af47-e210355d28fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d7a85c-d5e2-493b-babd-7256efef2734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9170ec-4a08-41cc-ab48-9931e09d24c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9c9116-8cbb-47e6-b44d-9343649410a7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81a28fe-03ed-4c92-934a-047c059e28dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9db3571-7e24-42b9-8fa4-a4568fd5f21a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ce0fb0-29a6-405b-b85e-ce35c154a179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b879ed5d-4d1f-4b49-9b81-aeb7a368f299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d3aab4e-1117-440e-89a1-b629379c7499",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75109a67-e721-4983-b8d6-af0855a51cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74255aac-c413-4d5e-bdb0-a58042c74048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f661900d-d344-4f61-b432-9db355cf75c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "34614ac0-b657-4aba-a629-9590aaded772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34c4eacc-d88a-4b75-a6e4-7eefed12d45f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0289f654-2a89-499d-a4d6-f8d5b9af5d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdea77ec-72be-4f3c-bacc-18937e612dc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19567766-4f8d-4f19-9e1d-7c652abad735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cda7a445-cdc9-4180-a735-004920c8c058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbc372f-82a4-4018-aa41-91cb7182e742",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd811264-694e-4f8c-923c-d7e425ff6aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3803c990-3d6c-4ac7-83bd-f6633d44a7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88edfc71-7c0a-44f7-a576-47b52066ff4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4ebf168-8335-4256-9bfc-5c8357f00e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84433aa3-74fa-4694-b28b-e26def9a2459",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c9506e0-f3c0-46e3-8de2-31a753728c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7d7cd82-8922-43c2-8ad8-04a233f5c92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f40170f-39a8-41ef-bc61-ecea5476893e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af92b892-3fe4-4fa2-b444-4c969c698ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d002590-01b6-4a1d-8905-a191830488a0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d93d3cb-6bc5-47db-8e39-369dbbc8edc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a407145-9197-4cac-bc4e-e50790c4e3fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac9e0ca-4015-4075-a4f4-4e95cb695ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b05154a-28ab-4a12-8dc9-c242607631b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1fbebc-454b-4b9a-a001-845fa63b37b3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3775bae0-05e9-4038-835a-fa8d130ee9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4527ace-aab3-4c3d-820e-a05dee2f9f9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bcc8a3-bbfb-4765-810d-b7a66e591928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a38afacf-ef65-4bd4-a5de-c5e11260276b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ccfd311-6142-4861-a302-4de41f445d69",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3184c49-103d-4669-84a1-96b95e59f84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50532bd-8780-4325-b989-0b6bfdcd9cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f889bb1-b639-400c-95b5-1289eca18dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa2967b6-690c-43aa-9696-e2dfe59e56f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee594a93-6544-4779-b6e5-5e4f215b86c0",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfbd785-4274-4281-b560-310af673f81b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbe7cbd-40ef-4d20-a46c-802a86741275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb92e758-d788-43e7-aa14-654f7e148998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be3afa8e-62f1-4caa-8cf1-5ffb3279c650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8129f68e-91ec-4d1b-9cc3-726f73872e4e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3c19ae-64b0-412e-a602-7d3b2f0c7da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ce769a-78fe-444f-ab51-4e365e747e06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ebc089-76b0-49b4-b1f2-ee735a6f41a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "364f1a21-cb19-4164-a619-76a660b9159e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64e9d3e-b31a-4a75-b07d-2053d5930053",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c719f26-3ff6-474c-9bb4-316b32499e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e36fc8-ce9f-4f55-baf4-3ea894233b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297440e3-e986-405c-8277-31fb0199798a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "252c87df-cd7b-457a-82fc-7371e78717e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b608362-23c4-40a9-99d8-49b07240f9f0",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78471401-1536-44ad-961c-c410764485fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72573ac5-c3a3-48e9-a6ec-74c51089419b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6dcd740-7217-48c3-a01d-28c5f3e965eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc2517d2-da91-48b9-a004-88a499ffb367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3a6f42-169d-4f98-81ef-f6c21034853a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07d7e66-d531-413b-a60b-c0aecfcc8352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3a0ea11-6842-4cc5-982e-af1fc61808e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c9ed20-3305-479c-8ba1-6f0d228b71d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7359c1b8-f0b3-4d66-afc0-e55cfc7d74b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa7c6a6-bd0b-4d5e-b27b-32d0d769dc2e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977f1465-137a-46a1-944b-7a9a9cb74dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bbca31a-a6ef-4162-8677-6115ba19d832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c39365-722a-4c7d-a395-13316103c2ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f57ec7-637e-4cea-b892-2ccdfc3c242f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "166a9037-9277-49e7-aa5c-af91ba6bfbab",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd4889d-1bf9-4387-bba5-cc47ab940af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2768fb35-06fc-4ffe-ad1e-f86e86979507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d52683-2d4d-452b-86aa-a59737dee0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "09061fa4-6ecf-4910-977c-ffee63278e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3087bbc-457e-4906-8830-14754e10ea5a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e53364-c7f8-420c-af53-1b11bf1818f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "05c8d4ba-3986-40db-b7ad-ecafefe0324d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5108996-176e-489c-a808-13832b4032c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65c3d6da-9f3d-453a-8f2f-84f3989d876c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f59bda-0a1c-4a40-9a4a-b45e1cd8d60f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f025faa6-7cea-414f-a517-b852fdd2c9cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e2f086e-30f8-4c41-9208-a88940cf73ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26e423b-e44e-4b29-9c53-37666c84f590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89b063f7-d881-4cf5-bb58-f7a54683a330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb34b3c-34e0-40a7-940a-af98909ea70c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18690189-1670-4229-be24-b3344b387341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1abde2c5-1cd4-49d9-8319-5597b9ca0553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70cb3c2-12d4-4b56-bba1-a5a287dd28fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "15bb2fe1-2fe7-4975-9dc6-b63c916c433f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3fe21f-24f4-4b0b-ac66-d293d95ba7ad",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b012e019-51ea-464e-876e-349236dc9e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad50faf4-5cf5-4e3b-b320-a68a93c6a424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79bd347f-169f-4a92-8bfb-ebad67338a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a32ddc9a-cd81-41f3-8f61-8ca0b904108f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb2cd84-c7be-4dcd-8d1d-09170a5af553",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cdcddd-f1d1-4bb2-9068-0658f8111161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f713c321-2357-447c-b2e5-281961285aa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e34ba9e2-346c-408a-88f4-869652186eb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a95da7f6-a386-411a-b067-02371de6c1ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8ef64d-20fa-423b-9c7a-a81e850f330e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dbda6f0-4820-496c-9307-7f069d57b3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf31388-3037-4695-942e-24bbd70c9ce9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3365c28e-518f-4194-bf61-7adabddebd43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5d419b-f38b-4e85-8012-1cf2e6137cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d50b8e-5432-427d-986e-0ad244f3b123",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6237805-b6f8-4f00-97a0-693fc7cf3053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "439708d5-f4ed-4da4-8766-fc9b50dcf953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe934b5-010a-4134-8bfc-bed074bcb780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0828e0fd-842b-4e77-84ae-eafc52f64e69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ff8275-8c3e-482b-ad61-952f82cd4dc9",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2121e7-4ef3-4477-80b1-f52c5f7a83b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca9d455-56bb-4813-86c9-a337161d5fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9785fecc-ff43-496e-a70e-c5f0f2d85062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b08ee937-efe4-4eb1-8b78-91e637c16752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1690966-5a69-4f23-80e6-a840e4341a31",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb9c6ce-9b11-4b0a-933d-9d10210b845e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5927e5b8-adb2-41fd-9c3e-3ac2d33c4795"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74bb3d1-0f16-4707-a29f-2b5915f7e8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dec69cbc-7504-468e-9306-cc8646a95310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa53207-45ce-4106-9b10-f219858641ac",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4978f43f-3890-40b2-86fc-e7ce7fe15275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0477ce22-69ab-4ba7-89b1-061e65b618c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55389e53-d906-469b-b363-f62f0cb91901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a557e0fb-9e81-4890-ba09-bc6311e3851f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfac1069-bdb2-4985-bb50-3f4d34297fec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850d5e7d-f9c9-4c6d-8281-1c5a72761ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209a504a-1575-48d3-802c-5e60665c195c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bb5819-e2f9-4f34-b4ed-e1421d4032d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a416539c-5d10-4b90-8f49-9fa4d00c86b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f2c5a0-bc96-4cdd-b9f5-7ed725164f13",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c45bc2-75d4-4850-a972-af0825437403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7bd144-3f5f-46be-bd1b-12bd9fe00c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e46bbac-38d3-49ba-ac94-1b872220bebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54ca3071-f744-4198-95ca-de4acfa1e45f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ff86eb-9737-4d2e-bd2b-44891b8d02b7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f5678a-e49d-4278-ae12-9f277a68eec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741a9f40-61a3-4508-b877-4d030e8d1895"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64b4b2a-2f92-4827-b1b6-f7ae51634da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d909481-134c-466c-96e2-fc188671e3df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c89b42-d737-46b7-9a81-1ff7776d5b6a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30f8abe-ef05-4f1b-bbc9-298c45715b58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed0293a8-d9e5-447c-a4bc-8bd1ab856f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee4345ba-3bf5-45e8-8f7d-430236b77cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b9875ad-184a-4fa0-8e6e-6eb54b823fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2309004f-701f-4896-8f2c-5b3414b2d54e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8a3d1d-3b90-437d-8609-003602c074c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3decab75-58f1-4b2b-b6aa-47925252a625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2718586e-0a1c-48db-aef1-4227e713f992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "192bc336-a1fa-4b50-be6b-3598f2ab2dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "114a8a65-9fb7-490c-9c28-99c3470dd31e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb226d82-b0ea-4446-8a97-6da56bdded1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f0a497-0084-4c74-8546-1bd8265d8ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05179611-88e1-46a6-97bd-deecde24afe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "545fe47a-2247-4413-a64f-0786b362c582"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ac71d8-c934-4a1a-9dda-9de80c739d6c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d4c2d0-0cf8-426c-a1e0-d3efc14497c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b60dc2a-68d2-4e82-83f5-7ad574aaf063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3809d111-1c47-4a38-bf7c-7bbfa5e3db59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "91e8aa0e-b9ab-4119-932a-96e0d729dfc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b64d21c4-84ed-4028-a1bb-b997252221b0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ba3bd3-febf-4da4-a8ad-c7ede6a9a493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226f4b4e-d21a-409f-abf8-17bea2047589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc960f2-e5ed-47f7-936d-08bf1a02bc86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c6b6eb2-f71c-47fa-a732-79119e20adc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "614b15fb-f84c-45ba-844e-890bb3ef270e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c43580d-8116-4b10-8dec-f5aae711a963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4db1364-4441-41cb-b36e-796bcc71791d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25562d23-a518-4fb0-a0db-886d171c5487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a1f5953-d191-4430-8287-c99706a2b122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24b0ff4d-bfcb-4b80-886a-a86da1e5469e",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce83a69d-6801-4a4a-8848-3434ffa25409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccb0f0fd-70aa-4855-8495-daeae14913ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e11860c-bf11-41e0-bf3f-ee7e259556b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "065f1289-139b-4d70-8454-37c137205f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35df64ac-d3e0-4a93-9f8f-88715f121626",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02f51c0-eb5d-4206-8f0e-b2dae6875370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4486d8fc-99be-41b7-8229-282bb92a5b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fc4a29-3a29-44e5-b2ec-1998ec296dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "85112122-cafa-4557-9a58-b105ce95fe72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1ffaeb-fe89-499a-ab6f-af4ee84a6489",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93c5ed72-7073-4091-9d1c-90f5eab0cabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0a11984-8e1b-42a2-aed6-e45cd04f00b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006ae699-bb53-46ed-9fb6-9a84068c83a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5556aa66-2602-4650-9ccf-2e9fe545b250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19cbd03-da88-4faf-bb3f-7cda005f8b67",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6865ca3c-7c75-4751-b357-b6fc28081a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c48275-254d-4908-a7d0-3cc9408f5d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d62b87-5346-4d71-89c9-7cc444252fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "74f576d7-bc8c-498d-8eb5-98a3097bda39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32f4e49-d0c6-4447-b482-33450dcbd1c5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f381a0f-a5d3-4614-8ec1-11ce97519e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff2b525-96e5-4a73-a926-bc0acd4f0222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfd63e6-273c-4b86-a517-ac067b7738de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e534a87-7939-4f55-ad4e-83d89885c5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92986904-2097-4ba5-ba56-c01fc2b8b6de",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e4ff1e-b2ca-47e2-aa5e-93880c0b5075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6640b91d-5b09-4f9b-ad02-e10473096173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7957c87d-02ef-4564-a97f-7f0b8eaab4fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa37e744-dec9-4984-b55b-38ada7d0ee09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863ec2d5-baf9-499c-8abf-b2731ca07469",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b872fc33-8723-48e2-9a56-95d205c1a6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "530fcd1a-b897-494e-bc5b-9598c5279270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95d1eed-21b0-4f48-a35d-f3b5549ec55f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "13f1d3cf-13b1-4e64-b94a-bdf11e649085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95fd6421-c541-4d35-818c-0a0fb64cf86e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25a715d-7afd-4aab-845f-f99dc448b4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1fa2205-294c-43ba-9326-24db885c06cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574ee915-2f62-478c-86f5-a08f6428b00d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "52cc5581-b9dc-4b21-aecd-5ab81c23ddb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ca533e-c9fc-41f6-874a-7408171ddd75",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe3687f-56c3-4b59-9052-ccd7e9cc6c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f819cc18-58c4-4973-8e75-623c121f8121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383dc825-a703-41d8-889f-768ea80cbd9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "97f4b371-d966-4c47-b7eb-e9f9cc8c3f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e363425e-c8a2-4e2d-bcdc-9534aa4ca8c2",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e270438e-4b36-47be-8489-664182a4d35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab545302-2810-4d6e-82b3-4a18d7ea8f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5665467b-cd44-4367-844a-7229bcc4e8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "16084f96-5f37-4dc8-83b5-8cf5d828a5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e2f801-d527-46ad-867e-7bac12f168a6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8f2d95-3f7e-44d0-aead-71fbed774d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4773d31-1fe7-4b1a-a77c-5b4cdeab399b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50079fd0-5d38-427d-a3ae-5666b788182e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9743e998-e3fa-47e8-9b78-d0740fa14b97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0537b096-5cd3-4218-a33d-c63e52a7c7f7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8bb7f3-e3c7-410c-a29d-b51d15efd8de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705f5895-8d6b-4c8f-9456-8868c12a0d27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968749bf-8a38-4c7f-acb0-6d1c2a345e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9a3ec5-81b8-4439-a220-c95042a9f26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78f3299-6a5e-4698-8e92-ab35b3d81c22",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95255b2e-597a-4f5e-950c-8354b201cc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a82fa73-90de-4080-987e-040df41abf82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a9caed-fbc8-4e65-8228-997490627aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e6cffce2-014e-4bbc-be75-889563eeb1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adba1731-97f1-4e82-892b-bcb836a1fc52",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf72112-f90b-4b40-a91d-189be98ddedf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b687793-476c-42ae-a53b-64e946a8d550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a27ec3-7683-4bd9-b883-cfcbd6f9bd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9972ba3d-c750-4470-bd43-9e39a560fd31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13b3eae-0461-46bb-8199-0c101151929d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7e4502-a7f4-4676-8054-ec1ca7b1d5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faf96d5e-eb8a-4573-a59a-12c8afb80a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1ef5c6-9297-47cb-a7de-88950fc83bf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd48054-17a7-457c-8b2b-572b633f8540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331dc673-f3af-49b1-befe-db5ee6078a97",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd4c373-be8f-442b-b25d-e939820d1be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b703808-74e7-49eb-865c-a5ae719a7f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bd2468-057c-4af9-8f2c-ee5d3440f790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56164a93-259c-4e9c-944c-37ee5f32eee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c171d3-ce49-4b37-ae2a-f9cfffea5c9c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283a9975-f84a-49fe-8b65-f68141663126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5153158-1949-47dd-8c77-c6e6af7d1f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4d76b1-de82-4fc1-8159-e250cf19b3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76848cd5-2839-40d5-a7cc-9f69b684c761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24740894-b8bf-4ed9-a920-f3f2fe92eafe",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f03d70d-2f61-4cfa-a4de-7c3e9163fb75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1117a652-e912-4af8-aa59-ea6640a53ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dce00d3-8783-4aab-9a02-c86e67d98303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e617aaf9-1460-4707-b2cb-392731ef452d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd59f6b7-b9da-4e5a-a7ff-cdffa5b336b6",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8996721-ded1-46a6-8343-8eb47d07bca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a27b92c-9e48-4373-9220-b90af3239d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e77bb93-a7fc-4e31-ab7f-807275a403d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b671989-7cca-4772-b667-f187ff2649c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ff8236f-f0a3-4c06-8712-83276504441c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e871e569-1518-47c3-abd2-2c411d304aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22aecac5-4848-43ab-8eb6-3f11489153a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8282c67-bdd1-453e-88da-cb6506a6b56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8390b7ee-850d-4ecf-bd5e-f3a78570b996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4547e5-b537-4eda-af43-2ee131e40a7d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc47e90a-0476-40d9-989b-d6c4d50ad146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ba1c65a-eef4-4164-9829-f4a8f77c5f84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d874252e-2a45-459d-b48c-b87eaa5d19a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "49a949cd-7f94-4a50-b0e2-8eb9fe39d42b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b9e384-99e6-457a-8da6-5251094edb00",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9750a619-f1ab-44e1-acca-28b4f66583fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dfcba0a-1d04-4121-8498-a3a61b148446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9867d0-ff9f-4487-8d5e-dc33a3a4096b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6283d3af-972c-4de4-ab91-9f47060a3198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7320b2-94ea-43c7-96ae-09d86a63662c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb6207a-3441-4dc8-a8a9-2b4781317963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc20daa4-0323-4c26-9253-8ad211d59384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d7760c-3a9c-4a06-8f47-738cebe737e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "451e3371-7b47-43c0-afd7-196bed4d7133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b8892f-824f-480e-9983-a9aab3c32522",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8c03c3-8f92-45c0-b2da-3a3b534318ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc1baff-694c-43ea-9b7c-d154746e9cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11df09a2-5d90-439c-a8c2-0b7635373e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8687e7a6-68b7-4106-86f9-2f501ad46fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b83a870-91c7-47b2-ab87-91378ecfd189",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d2fc8a-5efb-45fc-b421-b3dcd325190c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fcfa525-a9b7-4ce4-9fe2-3ad31af10d80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d331a9dc-57a3-4912-9046-aa3e5801e092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c9c1c2-bb62-41b3-941f-32c83463f842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad116af3-ce33-416d-8450-990789202424",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f82c43-69ec-4920-ba86-7b1ef1e60ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8402f22e-f4bf-4f90-a92b-2dbba0e536c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a270b292-a8ca-45e9-9bac-2e28137292bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cef1a0f2-5365-45e7-9c37-1edf44d29170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4620e638-d345-4942-9adf-84b0c8d06311",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba7a067-099a-4369-a1c5-7f207cb6d74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be6ac8dd-4a54-48ce-a6ba-d6a2e9a2a079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c868b0-7b81-4491-aa44-7192dd286dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "57ba26c8-c850-4386-a640-730f41531850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e6e28a-59d5-40f5-b691-4c0b02092f69",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9ff2cc-f0c9-4725-a0b8-dcda07a7db9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e12fb53-7efb-46a7-9ab9-b025ac042ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd868716-3199-4703-9b4c-1be702a1a2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e52cdb59-e5ea-4ee8-8e66-3102b80dc07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79099ed-fcac-4638-b2cb-e776b0e96d67",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c1f69b7-7384-4afa-b57a-6e8c2f67c048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b346d83-ed74-4cec-916f-fc0dc23bfcc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51de8aee-fbd6-41b9-9058-7cecbd09691f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63d17087-9949-4044-b6a4-02a65619e0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665f42d8-f0ac-496d-8bd0-ce4c8559da48",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55819719-de02-4977-b100-1522197d1c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05db4c96-27c0-47a8-9edb-63c812834c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafb1ed0-d24b-4d67-b566-fc22811a6877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "173f8d13-9337-41ac-b5bb-90079f77e6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d3d77f-a20a-48b6-9ce5-30b50617008d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146403cc-e11a-418b-a68c-08c7c49f3b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a797e0d-2d17-48bf-83de-ffac9478be74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163784a0-5603-4b55-9204-d62cb8a927b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4894f6c5-d311-4e19-92dd-7316eade7420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a96c16-faef-48f4-a854-a5d243c89afb",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae449e6a-e288-4249-9d47-dfaad0cd7b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6b1cfa-1372-4790-a968-fd3707f90180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c8c0b82-08d2-4009-b419-aa5fa87b4a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b338e1e-5b4c-4585-bcc8-ea671d9147eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a3151c-edba-43ca-8302-5281403f35a7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb74ce2-3282-463a-aaf6-c0360690922a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82cb9944-6217-4af0-8fa3-39afbe438a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4518f428-2c00-4765-9a12-00cd5fed9de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "05b3e0dc-2061-4fcf-8459-953b06987102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdefa591-8d91-467b-b82f-de1a76b1278c",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b73ce5-9e3e-4ec6-a095-b1fcd4749d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac7bf1f1-aa07-4039-8d51-af5fe1867352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0085aaee-a36a-4f2c-bc16-9ab0eb63beee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "899ea4d4-a7df-4082-b8ab-f317258ce7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c0e759-10e9-4cb9-8583-11b00bf1b3fe",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ad0575-ab14-49c6-b78e-347750575bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fe827f-7e8b-4d7f-9f43-3c3e3e199fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fed2f0-3e82-4ca4-95cd-35c56c9ac049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "60e98d24-a5fe-4f4f-b182-c3cb5b7509e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dda101c-7796-435d-8162-ea0e663ec741",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e97d33-9def-45b5-a8d2-5aac46211006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb292886-4139-4ab6-a21f-119f129dabfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730f67f1-df62-4823-ad05-a4f26b855684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4533a6e7-c26d-416a-84ab-4a150a3738f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee31d62-20a2-4974-8414-4739d148dc51",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a988ff-f6c0-4abc-a981-ce5f54618855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962bcef5-ee57-484c-8791-dedb51ffd092"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90eccffd-f420-440a-a6a9-d5e87861b23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5fadf4c-8dfb-4697-a23e-6150123f8caa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c547beac-70bf-4470-87a4-4ccc900a5f1b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46072187-a956-49b6-8d39-2456d21740ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bf261479-50ba-4783-880a-4c73d8847690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93048ea-78be-4a4f-810f-7d658f0895cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a8157e9-b885-40f9-be72-56dd42c0b0c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d7abfada-43d6-459b-86ec-d656a5c352e6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abd12ffa-d13a-4980-a108-c1c8df8b6093",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa482cf7-89fb-43ae-b355-a29930cf41bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b22123ef-0ede-489f-829e-ab7499a3d834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1beb3fc9-2419-4785-ab6e-5078f26263c7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "e27fdcbd-cc37-443b-8588-c39251675454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b0a54c-b7c2-4880-bddf-3b8a4d6967ab",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9259f4f4-e63a-4c2f-87ff-87d43c7192b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "63ec9867-9413-4d44-a17f-00a47492618c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2024c60-df16-4098-9445-83d4a67ffda4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "0447b8a2-2f87-4812-bc2f-24d4a8552119"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32303c93-c59b-4e88-9114-af506160a03c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61657db3-7d63-4c24-9ab4-505deac28501"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9335337-b837-4886-9fb0-65acdbec9ae3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02f79d58-d0ae-412a-a787-13a3d51bc6e3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ef230a1a-1ff3-43d1-8735-2444a8c90aaa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "239ab847-32d9-4114-8485-7feb5dc9f33c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "701462aa-a272-4798-8909-2f2321bcb32a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1b5da374-ee33-4854-b71a-466e87bf2b17"
                }
              }
            ]
          },
          {
            "id": "9b54ada0-13f5-4634-b764-ee080ab0c138",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86a9bd95-d11d-421d-832e-41505df24aa8",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "91b45294-27cd-40bd-a4a5-7ba6053e0e91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "195ec4d1-fd94-4131-8452-c3e16ee8248d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51f1a2ac-7f84-49d5-83c0-0da9f72971ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "620dc66f-ce32-4338-a6ec-bb15b5466283"
                    }
                  }
                ]
              },
              {
                "id": "d31ab8cb-3d9d-4c5d-9f3f-26e455f9bb21",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e543bdb2-3ea8-4d83-92ae-42f2e4af9a76",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4509d0bb-4aa4-43c8-89e2-f532484c5ea2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e2b014a-7734-4252-9d5f-307fab7212c8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c8d475c5-18b9-437f-ba74-92a6ba29a7a6"
                    }
                  }
                ]
              },
              {
                "id": "20c5079e-4b85-4595-aacc-f6dccfb890fb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a263dec5-adb5-46f5-8f4f-8cd67641ef89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2846d722-645b-4d9e-a1f1-f15a56662c36"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d8a0762-74d2-430b-b82c-1ea8b4aec0ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "05adeb0a-94f2-4db5-b837-aa1500a31cdc"
                    }
                  }
                ]
              },
              {
                "id": "ed0c2cc3-2c44-4bbe-954c-ad9d70f28220",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cea153b0-1137-4e74-b275-114c3cf33ccd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "64e406a3-e4fa-4bd1-9ffd-82be6ba84774"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "afba3785-7fa3-48ec-b08b-932b9fb7af79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0fb748de-848d-4b47-b538-9343722cdbd5"
                    }
                  }
                ]
              },
              {
                "id": "4152e030-0d3b-4ebe-be03-7de77c9f82ca",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a67eafc5-a92b-4e1f-b3bf-5366b9a21c58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60be842f-fa8d-4563-8b85-9c7a5c6da4b0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "09c32b50-12e3-45c7-b148-e5480c44c8bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cce6d869-0919-427f-863b-381410c1a8d1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "12f2a397-fa34-48f6-b849-b6a4c57ee1b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "87c82002-939a-4f07-a66d-9f5344c0c468"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "450e668e-3d38-4f60-b484-d5238f3b9ed3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9a8f914-1d52-4dff-89e9-1fe64f92b522"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f573a6a-b649-498a-b12f-a1bfdf5f76e4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b7165c94-8abc-46d5-bb7c-1878b805b82a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0511f572-9037-4a93-a00a-fd5e71c7e224",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a186c7d-47e2-404d-91ab-2872937bfcec"
            }
          }
        ]
      },
      {
        "id": "7c5b708f-4c02-429c-9bf8-ab4432d8df6d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e2dda622-f5ca-47eb-a032-71d4b79250f2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fabc8a72-caeb-4ea4-957e-e0ade5381c16",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0d06d4eb-bcee-4084-b652-33b019c9b239",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6abd930-ea63-4dd6-915a-1af89db4fdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7692e058-b650-451d-90c6-8eff39074c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1596ac-904d-4b1f-be75-5e0efffcbd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe04ad0-9c05-4427-9db5-c40d9e354def"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c2bab36-8880-409c-b1c5-4593ae9f786a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6a2970-ede0-4754-918c-d098fda31133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235e2b2e-5fd7-4b27-9447-e02db9c01135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94b97517-9b88-4565-aa1b-93707ebfa181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8edc5ab-3f2d-455f-96c7-1b325d327e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd017131-99a8-4d81-92db-ec99233b17ba",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eef0188-077e-4947-bfaa-0822c177a28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d59d91d-d462-4362-90b7-81d6513f6adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "236890ae-9da0-4801-98b3-9e4f4374222f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71bea9d1-7e49-40aa-b0d0-d3ea2f917dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a6dac0-8eea-44c7-a504-ae285ccb38d2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1442f62b-e116-4e4d-86c3-af21ef87e8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d75c6e-6677-41ae-919c-aba7227ac8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1eff804-e5cc-447e-9cb3-72f36c393fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f8b35df-4325-456e-8fc9-e7de94d556fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e34dc8-5996-46f3-9bcf-80dfe0a308ef",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4473e01e-54bf-4215-b34c-eddb150e97cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4142e8dd-7adb-42b7-9118-191f1c5ed7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba8920d-169a-4291-abca-92cabcba3521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b9d362d-8fd7-4b93-b1f6-13e6f2f3304e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c20fbc-5819-48d8-9a23-1559200daac3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "249edc47-cb90-4463-84c7-a0ec0bfe244e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47aa2ea3-1654-4278-98e5-ddc5ba5cc3c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fb5ef2-97b2-4f90-971b-404e66355ad6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ccabe35-526e-4feb-8c26-20d36d0245e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052f4df1-5a46-44a7-b667-2c9a5332aecd",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813f7257-cf1e-412f-a35c-e836fbfe68ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051fe82b-104f-4523-bb18-157e912c0fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf1748b7-7893-4615-9ee4-025f27a56fca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "48d835fd-a366-4375-a8f2-7de14e54a5e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ac356a-a1c2-4bec-958f-d184fe38c6d5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1b3b1f-1caf-458e-ab34-be116e3bd792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d04ed0f-540b-4b6d-a42d-1e1776f75a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21587ec0-9219-4661-8633-311fef5ec47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09febbbd-b6fb-4c4a-a028-7cf963719676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31152513-e51f-4f0f-a530-93d7c026c1a7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf59188-0114-4343-87b1-e0823dee1e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "765c8657-10cb-468d-94af-cd2166754c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b27964-4649-4624-9cdc-cf11dc21b67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9bda24e-89e2-491d-be66-a9016e60c61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b25ff9-b7ad-407c-9dbf-2ddb4771d04c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e9cce8-2a54-45e3-9aff-c9dc0e3ab3e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08caa610-7ac6-4c2f-9495-9d8a097dfc93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c71ef7d-8bd3-4a60-ad4b-8623e8200ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f449910b-cabc-48e9-90ad-388fffa0e4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5332f965-873a-4eda-9a98-dad313f12239",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563475d0-d695-45e6-935e-15d880ecc43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d1a0f1-1bd9-4eb0-a734-1db07c268d50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5f42fb-9a31-4247-aff0-e6cf14f5708d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "946979b9-1c3e-455b-8189-d81c6c07fba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c75d75b-131e-47a2-af01-a758d7d54b14",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d290d702-7c94-42bc-b2ce-139b44cda824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ceefe5c-fa49-4528-bacf-5f353f6a1c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a43aa9-dded-4017-a6c9-cd57da2ba7ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "948fcb7b-8b20-4329-8155-650b73ac9dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d555d0ec-d69e-4bfe-a8ab-d664440c18f5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af14758-4c71-407c-bb2f-1b9fbfdbaf61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d29e9e-1e23-45a6-9948-509890f3d42f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da4a636-4668-4fef-98dd-8cd108d8b3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0f429e-c8bd-4f12-9ed5-4c74125bf0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02d84342-e9fc-4054-9e36-7ca3985d8814",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0ab9f6-eed1-4e34-bd42-a19b9d3b8b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8930b805-4ef8-4476-8cea-29e4692a74ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7adf6f7-6469-45d1-8868-aab623c79a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f32ec78-2924-4421-8b73-8f4307f7ea03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8797b653-4b2b-4b47-a70e-6df8771300c4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfda3fc5-fa39-4aff-a467-c8472aa5f37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d863ddbb-b7bb-4521-b041-7f40300457f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293bef77-11b6-4b93-a0cd-6bcd84674736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b23902f2-4ead-4505-9d2d-80c7fc31d24a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "320adf28-e777-479a-8468-b3abd689a32d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a678d0d-dc20-4a68-b002-9b207ef3b4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df1fba6-8d3c-404e-a6cc-91afa432e5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff62469-bd84-4ae8-8cfe-292e4bb80686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d94f4c3-42a1-4296-b91b-dc469bdb18ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f3540e-71ca-468f-8006-cdee9bcc4198",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "434a8409-76f6-486d-9175-160ab874b69e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a5b153-5943-4d00-b3e0-095fa253e839"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cf4d0d-4e91-44ad-a623-5687bd4c84fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "82adaf37-787f-4b28-a43c-737f1ab81cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3221fcc-aa77-4518-bb7b-08306ec6010c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78eb7808-de81-462f-aa0c-b1c43676d3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "defe5da8-17c9-4931-980e-0f4c60f018a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c791fe1-97a5-4bb4-b484-d94aac370955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7f8818-bf7f-4c76-a3db-0676f7e58812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dadaa1a-b960-46c4-9340-18a13f02280c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578381c2-25df-47b9-9375-8116fbeb1a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b7b6fc-58f0-41d7-b4f8-ca9b87617969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31819f5f-6e90-49fd-a615-00de719d8b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e508187f-0d93-4e70-a7b0-4f4673a449db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4d2f8c-661c-4ef0-8e26-7a9fa63e270a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75969691-3236-4c42-bbd9-9f26f06365b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1636e295-2c6e-4437-b994-94dab3b6e599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cc817c-956f-4658-bae7-c50ea6706ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4fc7347-aa39-472e-a2d8-d6029aa32422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326eec86-0362-4f33-b8fc-8c4905d2d17d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2492a0-08d6-4a72-a324-83f07f235c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38fa2631-12c6-4f89-93bf-98571188ce2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528052f2-9e73-44ba-921f-6df99c5483fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffe6475-da0b-4206-82e0-0e09b909b222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24408ed7-861d-4fc1-80b9-a2ae5b6bdffe",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66eb2a0-9ca7-41c8-9dc6-2eb3513aa3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d58c12b8-39da-4c37-987f-1fedc8bb7fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb29b3a-4b15-4f56-aaf3-56fd303c7c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7eef2ce-52d7-4850-85d5-20e67b9332e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add32f85-aa2d-427a-b4a4-896173553946",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656fd71e-8c6a-496a-8cc1-7f8670aa22f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e1907e-80cf-4973-8d0e-7819b7c51ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af69a64b-c6f5-4cf6-8107-491aa7613b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea2b21ff-cc5a-4b5d-a089-50f0898a4523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a991e5-e7f8-40ea-a84f-656ba45f3470",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84807a4-4d0f-43ac-9be2-b4d8973a042e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c10d7a2-4a95-4f27-acc4-c23864151662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9acf4d87-bfae-436d-bf18-79a8e42bd51c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a83f900e-5422-42b8-98aa-bd8e6c1f1355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee94cda7-b6eb-4635-af20-8c6200a7bdd4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6aa288-d9b3-4c19-83ac-16bf6c8cc6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983bdc9e-e1fc-4ada-b3a4-0115e67a157c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575e11bd-c947-4b97-8212-35cbb7ac7475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2020d8-4c8a-4b46-90b5-6709cb36072a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51023f99-f2b9-46c5-986f-af8910df0601",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742f6293-1a71-4efc-8e8b-36cdf73a1469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7ccbe7-1f8d-4f7a-8e65-cfd8177ea0b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f63aa5-780d-4389-8a36-c53114b4d161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68d41d2e-61b2-4b5c-b846-32625011a082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b768b9b-76f3-43fc-9971-8cab207c2419",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5008ee34-dbde-435d-979a-f5b44cacaaa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d72c68b-3d31-4843-85c4-28b4f2f39815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251b55d6-13cb-4350-8831-be26118b3751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10de597b-7dbf-426f-97b5-dc25527a4e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbbfdb5-2a90-4414-a257-74875a6e3e5f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c24e87-33ad-403b-b99a-389971b6b0b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "033a587a-9fa0-4d27-984a-fa6aa6bfe72d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc662ec-39d7-4709-93d7-5eb704c66fde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c62f88c-0a98-459f-a030-0dea56e5e73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216344aa-5c17-4a85-bc29-55732a035d22",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98775dc9-4603-4d80-b50d-eecb32cf169a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b2561cd-1d62-4f2f-b21b-d25542a4210b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42eae04f-0c69-4e1b-9eda-d53fb869e918",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "550a3fc2-d0cc-45d0-b7c8-347ec7385455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a70d19-5f37-4f76-bc92-4569e4c7a467",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdef6ba3-5447-4c7f-8382-0abdb0f64ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010e6721-26bc-4708-97f6-817f949c935d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82718a90-76e8-4555-8172-afa912b9e79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15889911-6a57-4371-b3af-d184b4344d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdca72b-a92d-4ded-ba45-50fe68092735",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f93d99-8721-489f-aa2e-c1d76409630d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38da5f38-a3ad-4cbe-9a21-79b6b8f7e9bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd8dbe8-92a2-4fb4-9b98-6cd6bd3901ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38d37a09-1267-485d-b286-17be4d31e1c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d2d276-972d-47d8-a57c-620e7a344832",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b3edde-93fc-48ed-896d-29a1c855d20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000fc758-028c-4c1f-ad06-b833578e0dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b2fbe2-b558-40a9-93d2-4ee350cdf762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cae4364e-d1e5-49f8-8e6b-b04cb1c8ec99"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6782f6b0-96c5-4a55-8d1d-eacdebfd44f6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e43e8970-1b8c-415b-a4f7-799b29d66230",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4edcbed1-f886-43b3-8280-1ba1a54ed4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8872c069-d795-42a9-a179-e622b419fb75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc426c60-982b-43cb-9c42-621603d80c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5843ada2-485a-4667-9471-60587565831a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90626758-de53-4515-945b-8117624fe44b",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e9988a-65e3-4693-9103-4e8316b4787e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "e167a610-0b3c-4ce2-8ddb-0cfa7ed0a90d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3faa984-d61c-40a5-a47a-65fca6154b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c4299145-85af-4abe-af44-2e1ff4e6e620"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cba0bcd-0821-4735-813a-994c4a3aa851",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "684790e3-1957-406f-a620-9622c24af37d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf39bff8-be8f-44b8-94a8-2a2709d598db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43c2d982-c425-438a-9269-8d69073e3cfc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9435aab-0eef-487c-8a64-3b68341d89f6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "38547acd-df9f-4d40-8c42-c27222e02283"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b09aca9b-a258-4ddf-a0bd-e42f90428bd9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2552c3b8-2a74-4bcf-ac2a-f8758a903f2b"
            }
          }
        ]
      },
      {
        "id": "79ddca97-8967-44d2-9613-c1cb0b474525",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "05eba046-21d6-4da1-8422-dcb3ae16da91",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c33fa78b-2caf-4e55-8bc3-25ff2fd96139",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "373b2bca-fb00-4a94-85e6-3246a6f1cba5",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528c822c-5827-421f-9a52-13687cb9e82f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5871b32-1245-40cf-9799-cebe95ee7806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712c85c6-bbca-473c-9f12-a7311aafaa67",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99d63a2-c7ad-46f2-8808-6872ffda41f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f25b89-883e-4d34-95d3-25c801d7fc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cbf437-a0a1-4e19-8865-4329958b5629",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff6ac75-34da-417c-b2fd-b45f3963fdd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "119fb77c-00e7-4b9e-a73c-76782b1df777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b416647-e7c6-425f-9325-206b2decb8a5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec9ac00-d519-4102-8ce7-db958e20af6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec749c1e-df22-42a1-89de-c0427f85ea4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e208f4-27f1-4b84-92f1-1f0dc9de4924",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ce4d29-76e8-44f0-984e-bc3aed788dba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803beebf-f02e-480f-a1fd-548ffbdbb603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67517bae-7b19-44ee-b185-a19ab23ee4d9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe00042b-4bd2-4b25-988d-cf3098dbe170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e40422-9080-4fd7-b5b7-228bbfd49609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77532bea-0232-4d6e-ba52-907a215b4791",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193f3245-11dd-446d-98fd-de2a4dd1c06c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8d5ba8-187a-4fae-b58c-af6db671d3ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e113ceb7-f72d-4a53-a85d-48ef2e5d1dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7103c6a5-e965-4269-933b-edbc4db0d899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b036450b-db1b-4f9f-8f47-e0b6e4e8ee2e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb01c0c-8342-4541-adda-0810dad5a3fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36b0cc22-b0eb-4137-92e6-3c200af473be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44532eb9-3263-472a-980e-fcb6a4f315b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e6cb80-6cb9-49f7-bce7-f3e2e14e7213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802df09f-82f1-42c2-9e2b-3218644227a4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f7f0a8-14c7-4338-a34f-59f98f5956db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8271e75d-dcd8-4e24-aa98-edfb0e9fe424"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "869d97c8-c9d4-496e-a349-a5ac5ab4730a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868f80dd-af23-469b-8241-4173fce39f6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaefc494-fe50-4cd7-8b7f-1d492743c890",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67eaea2-95cc-467e-82e8-0ee9ceaec998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d192159-d327-4ff7-8867-f8a8b619372d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d88cefe-6e75-485e-888c-755c45b6e80b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4dcd84a-eed6-4644-8737-8fcfa08b606e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe863a1-7ca1-4790-8689-e1b8a202395b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e03594-1dd4-4e2a-8981-81e10eb15f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dcd8ab8-eaa7-4f5b-8c6c-e863a167d29a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f950434-c2f9-4fc3-bb6c-b8e7dbeea8c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86456d4c-1903-4424-9d62-b5dba7c58687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4182a54b-7010-459a-8e06-9902c29de20d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba05942-6970-4deb-acaf-d5b450935402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fc056a-28e2-4f6c-ab03-1c68b6056c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "392e366d-b719-48d8-a924-c28ec83089af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4e695b-6dc5-40e0-9c59-5d8dcd7c83e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebffac9-6dbf-4454-8ba7-4c5ae2e0d5fc",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f35912d-3cf9-4228-a1d1-a8a0a584cb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dc72df9-19cf-4cad-8eb7-75fa01508a78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96368794-f48d-4b15-9679-6adbf975599d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f031db-7975-472b-bbc3-d23484490e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b179edc2-ea52-48e7-904a-b2cba32b7c5a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c12555-08d9-4813-9626-4d798bca271c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc5bed1a-b734-4473-abac-438952330011"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cceb3bd8-4364-4f4c-b93e-7dcf83929fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "924220c3-11a3-4103-9795-c7dc95bdf24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8617c46f-aefe-46f7-b269-2bb8d3f0f55b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a455b940-046b-4b68-94c8-340630dfbb54",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9888b1d4-1e93-47d1-8007-1495873145f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadf8062-a6fe-48e0-a1a4-017f0ce0c823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2afb4827-e13c-49ea-ba57-7dd0abca71c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f403af-526a-4e38-8e10-f3105a2b102b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98e4546-1bc6-4cb5-8b79-aa04f5b027ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d66c289f-ebb8-4bcf-9ee5-ed68da29a271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7395f5fa-b3e0-4bf4-ae7f-175e191fd251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa5cc56a-097b-4728-82f9-a7eb0a431a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecda439b-c38d-4edf-9682-0164ba046442",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8adcc52f-c916-4833-9586-2965abea80b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3db54a9-f84f-4e29-88db-0592cde74f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb2da0a-e7ec-4df5-8fd4-2452ae999f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8532bc9d-7ca2-4ece-8b92-bfa195074cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663484ce-0f9d-4ea9-b6b5-3f289e8ac420",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486faf5a-0a00-4e09-bca0-900b1499634c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9a19e4-e566-41b0-a80d-14844fc81d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9bc9d8-0559-4d98-b444-48cc146a5d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690bb019-ea3a-4f72-99c7-39e37bd77028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a131b1d5-1b26-4ad6-8bd9-d21a518254ff",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af71b2f9-5515-4129-b8ba-4400a651e115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ec621bf-89e4-4edc-b56a-f3546a1c3366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f2f429-10c1-4576-855f-14906eb6a179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e3b6d0-02f2-42f0-bb54-005bdf74c718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393c2550-6ae5-442c-9234-1f81877316a5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07df052e-4cbf-49bf-9ec1-200427e56ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb2a1624-9964-421a-81e1-51c7f9b17143"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd2f4c7-06e8-4bdb-8ecb-3071d812deb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e373320e-411a-4f89-955b-3be95cf23b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9113da-9a7a-419b-b86a-70d73afe157f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c754895-123b-418c-a65c-42e066337bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df1de0f-9ee7-477b-9d1d-0e1972e25f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2322c377-1c66-4649-b7f8-a0de7889c71e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abc00621-1de4-4e17-aec1-f64ab16f224e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbedeb30-be01-44aa-8db6-0aa48910e689",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba78a57e-bff4-4510-b867-768b66eccd04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adeaf2c6-b303-469d-a4fd-171b024e03e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fbc77c-0a4f-499d-95dd-8237b59f80ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e450db4d-8bfb-48b0-8d21-58b44f159f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed943c39-2ce3-4488-9074-15ea44d64710",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923ea96f-42eb-433c-ba52-62e246841b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9530fe-de29-4941-ab9a-6f46264be2d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3f4ae8-3a3d-4000-984a-19fe185e2743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f24a637-e2c8-46b3-bc22-79155c0af6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eab93f9-6a3b-42b9-b50f-ced9105f6d60",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a999406c-a0a1-425f-8fbb-5454eaaa750c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b2c5afc-8974-478a-bba8-cee5167338fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f99c68-6354-460f-8f5c-8510ebe52ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6710dd-f7e4-4973-92a3-8346c183d141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de051fc-ee35-42e3-b463-77340b213f99",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085620ca-72aa-4dca-b67a-ae5a93398d79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f15488d3-7d23-48e7-b971-3adc7a5bb0e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61746dea-4b09-48b8-ae18-bf1ad2f3a43f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15a1dc04-f702-4e30-aca1-de657ed728ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18f3e481-6cde-4ed9-968c-1e3d653a3516",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "227e103a-b6f4-4e95-87ad-365463b9b54d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77165356-96f7-4512-86d6-78f45a31e1b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5f34e2-adbc-408e-8123-0eaceb9abbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094d9d8d-c22c-4fcb-ab08-4eb3c0be82b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b226743-e554-47b4-8a18-e3c0b1781f4c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ff9191-82e8-4baf-97ab-ca33202795ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18b80a15-22a1-4080-a477-f124d07f79b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1148fa-1c8b-4cac-9596-efac1f7c8c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "289032d8-5e01-4b5a-88b0-5ab2fd346b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705e5c12-514b-481d-90f8-ca03b3edecc4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b253475a-043b-4d4e-949b-998384053db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77449397-c118-4f0e-a953-e42424965943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4eb3386-996d-4356-aaac-aed41500ed00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6273d598-2db0-4ff2-bca8-773631ddfa32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117fecf8-48ea-4589-8d2a-34a2246a3788",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ad710e-8268-4be4-92d8-cfb15fc25da0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7aa8d72-eb8a-43f3-8896-4b9b0113e975"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d471da-c736-4089-be2b-d3d1f89618be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "164744c6-f274-4059-b61e-bcbfb79800bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7a49928-916c-40c4-9fb9-4b7bce96d0ff",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8144b112-3c59-455c-ac29-4325a1ac4931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fae5f1d9-384b-4d38-a507-7c07e971873d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7a1e2a-d61f-40d7-9a33-880d3be8891a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d602035-5036-43cf-9411-e66881d3f90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6581028-2783-4f0a-bade-18678de462e8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9dc4c0-6e58-45a4-869e-a8a56068d27f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15cffae7-baa9-42f7-b5be-0563c6217a8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b1a7573-2c10-4a4d-aa29-ce67f3d0ec83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e277ead-1fb7-4896-a637-8c64772c9c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b285a7e4-9146-4505-870c-bc235868ef8a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637d736f-4839-4732-81ea-1945b4d5e62f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16dd6f0e-5348-4a33-9802-6fe404ab1e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c7cd71-0151-4476-812d-5c74d298896e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d72a32-98fc-4415-9b97-cb55c11ed399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454d9c81-082d-4058-8485-aaa3b7ccd327",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98cb8dc5-7f00-4a0b-b243-8a17632bf2ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86aa4228-e32a-4d1f-8b85-1c41e066abbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f550c9-b3c4-46d6-a103-12813a168b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e01acd2-aee8-42db-8ef7-3d567307afae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c0350c-c24c-4a50-8990-f2a498626b2c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee8edbd-3e0b-4c55-82c5-3bd24c320189",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcdeee0e-74a5-47ce-8807-f03014c1da42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b79551-f4f6-4a29-bb74-4c9a2919ec16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769d7898-6c9a-43e7-b100-86ebc05c97f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f812c39-e111-43e8-9514-891cb7444ec0",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9870f2b-1c52-494f-af38-0be86d39649d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90eface7-dd7b-42f9-8c61-32ad0527bb59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5089834d-4cb2-47a2-8eb1-ac9365ea2b04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15a535a-0e36-44c8-a6c0-64a4f33f752f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4770f5-ed0e-4cb3-a22b-495080bde9f6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f77694-a4cc-4ac3-86c2-01edd28d53eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929f900e-5cb8-4991-b8dc-86571684bc06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4323932a-27b3-49fa-af54-79fdc750c269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98526ed-4166-4284-9e8a-49e1e5eb3770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a383d85-4d7f-43d5-9b40-907f1d2a8aaa",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60081212-4153-40ec-b30d-71f2e0e240c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170c0b82-dd22-4a08-880a-601baddc298a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776dd92c-186e-490b-b693-dcf5c719e46c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f190e772-40f7-40f4-a4a3-b859b7de8071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b6eb1a6-e2e1-4c90-9b80-856f375c172f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb5a8ae-a16c-47f5-b27c-1fe004ec5ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf3eb44-20a7-45ff-8eb7-0b5e296692e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06b2cf0-de43-4d33-a3dd-eac14cc8420d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9012dde1-91ff-4b72-abc5-a08f1b313aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8561fc-a3cb-40f8-a056-bc602fc97e0b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a88ed3-9e57-43ae-8142-d1d48f61f310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcbc520e-abfc-4e1c-b0ed-abaa0b81728e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1a7859-b510-4a46-bba4-930901db8e8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d57677c-0343-4143-b186-dbbefddaf8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a5760a-8314-4358-979b-f7f365f432ba",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb3a1bd-3ef0-488e-bef4-0a32692c8e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00549e9b-c3ae-4b61-b817-76bd353b50ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a2e5bb-53a5-4a99-97fc-b3118fb07767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6148eb7b-696e-46ba-9d88-20de0845dcda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162db0a2-31e2-4704-b4a2-2c09d409daef",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cc1f6f-1a20-460f-a4e2-579f1a53549e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0dd333-a828-41cb-aec4-27378a51c912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de9894a-be74-47f8-bd67-27b6cb91895b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "760c7174-5cfa-4b91-81e4-81afb9e869c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2613b98d-ae16-44c1-acaf-d3cd6138462f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71f92c3a-fe59-474c-8207-3b305f8c0cf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169da25c-d648-4e52-a194-baa6803c5905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "630ff27e-5b9e-4935-96c5-3d865f978e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f666887c-db9e-4eb5-af73-b415ce070a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32091d3-9638-41a1-80fc-3fb0c0af7673",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa6bfdf8-1721-435b-bf25-bb1db87f03d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1e520f6-6c30-4322-a683-537648434a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9f006f-f01a-4ebb-87d5-73ef0aa802ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7944320-872d-4247-a52b-1775e5364a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a2d565-3c77-4a69-84b1-236bd082a4f9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf5ba5e-8bb2-4ced-8a57-c9b9169cc17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73bdeaa3-4564-4151-a4d9-73bf34b3b26c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83af6653-54a5-4099-a0bc-6e289d85c64b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5efe6c-7979-4b1d-be8e-27022b483590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1075061a-22f1-4b2a-9dd1-c533debe61fc",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899296e4-acd3-464d-9012-f3f58d29aca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee73f4fc-3afa-4924-8857-7c8efee4d620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1241893a-24f2-4b19-b8e1-738c130b0a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36605e1-075c-40e6-93e3-cf0aac78f073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36da55f3-0a2a-4379-b89b-6c858ab8f2a0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ca2cf1-db95-4996-b174-8cba20d21307",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22eeb3ba-454d-451e-b04f-1f56b0687b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc7c9b5-bcf2-41a4-9540-d84b736fb3db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4c5555-232f-473e-bc15-ae9e9a2a6e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dcef054-c158-4b98-914e-16bb87758793",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15b003d-738e-45d0-a694-ad1add70401e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b75d8541-1300-4137-bee5-9a09578b8154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c684911b-2a20-4209-9595-8c66eb0bf248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2864b12-ab9b-40fe-aa7a-fd8f83188f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad4babb-a95f-40c6-a189-e85632c51e3b",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3953b980-b894-400c-b5e1-64eae9ba9c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7ac0ad1-9f69-4d32-9e21-46d86b1e4fc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9938f62f-5d26-4bd3-ac32-c3e28a62b6b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07ed08ec-552b-40a3-9b91-522be61b1201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e5aff5-5d0c-4df0-9317-ead1c5f89db2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e47c02-8e42-4030-9a63-e1c09d9d2af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84f17186-46fa-49d4-8e4d-a5d130c516ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b563c9c3-1ee9-483d-a107-30858a6cb665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a6ace40-f99d-4509-9cc7-ff6fef441ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265087f3-7672-4515-9180-3a8c4261bb3a",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2a4654-efdd-40b4-a7a1-4b8811e88643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49827a87-8c93-4434-b173-4949972a0faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a92b5a6-dee2-4cdb-9b1d-85c67b0d4dae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6362b782-f8f4-4a56-8e28-0cf9f4e92d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f33699-1777-4ebd-9aaf-f7a7d09ae184",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e2a8422-5557-49ba-a0cd-eb2b8b02d22d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6199428e-1356-4213-8d57-7361e64e9de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f743d33-4459-49d4-a539-38102718864b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557b6409-2675-42d6-acba-60f024e49751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704ed9ee-5d2b-4716-83fb-ffacb766e2b4",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37101299-59db-4ea6-89ee-859ee6b7ad38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a67d80e0-f1f0-4207-8587-6db35af15f76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c7b6c8-c936-433a-8448-b2959e4742ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0639794-38ed-48ce-8707-bd0730c2c7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73869baf-3bf6-4a2c-829e-ab868150481d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa85935-aedf-4a4a-a7b7-1f7afbb7f8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ccd6dee-7730-47e8-b2a7-64010ab92d57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47fccc9d-18e6-44e5-b248-d489c3e9ff48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24afcc48-c3c5-43b1-b316-49431583c44e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc08eec6-e203-4b9f-9237-7419fedcef32",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860955a5-8aa1-435b-8232-76777ced5101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b921bda9-be27-4e1b-8bb0-f3512b112e14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7a525c6-5f4d-4165-ad57-76a12114f893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a586ec-d9b3-4524-8fe8-54ab8491d15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08961e61-a607-48ca-a992-0205102b0874",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f51b13e-e2ba-43fd-a84b-445db8a9cde0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097e83a1-db3a-4a97-96f7-c74f1e94ada3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a053f3-283a-4585-8042-df311ff9559f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "539dccae-5ad7-4825-8403-d57508f31389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f8a87d-6471-4f0b-ac60-67288632baf2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adcea983-90ca-4de2-9281-398d069be2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a0c902-a397-4dd6-9246-28b8ee709eb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e3a535-9057-4376-9879-79845667405c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2acfbf7-45c4-402e-a080-b928bb3e0346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d29e362-1083-4b72-a737-3d6a67d035fa",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ea33dd-5f11-430d-bace-6793e0312a4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7684b8-042d-4ac5-8762-d80536bae715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012b9a5a-02cb-4e40-b945-4c8d7cbc1df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "145cfb6e-589c-4e44-8eab-1fe175a6a88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bedf91-57f4-4c40-aae7-d4a6ef02dad5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ab7c29-61ba-470c-a7b6-58b9a0686bd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab03ccf-4a70-437b-bcb9-a397a19f06c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "088f8d72-3cb5-4b87-9cda-240a67407421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5fdf82-54da-43ae-9f48-115b1790c542"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b84f77-3f63-4c51-8488-6f48543c9476",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4967b9d-a4ee-4a8a-85b7-4e6668205b2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5430e213-1121-489e-a9d0-6408eb600522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8172da6f-90b7-4002-ad7c-b84de6b3c6df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7895498c-8430-46cd-8926-02348b87a8df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b28dd72a-9378-42ab-bf96-8b0f80d60b55",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "242d57f1-683f-4668-be7e-4e5f3a816f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f964079-4d9b-49e5-a730-2cb6222dd473"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c976e9d1-8159-4106-aeb2-5cfb6f51ea73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b616d23b-7776-4d91-afdd-63df22b73da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd816585-f101-4330-ada5-d40464807e85",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877d8eda-d232-427b-b7b9-dba42a86f590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98592b5-b42e-45db-85ae-7cf6fa9f8668"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef05a65-9972-4aec-bdd1-ed54340540ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1670df-70d5-4572-bac4-a23c7fd9187e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ba4655-f975-4fde-ada0-a9d84c6b9169",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6a23f3-9b03-49e8-bbaf-b16a4a613306",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c281711-7473-44bb-ae06-11b8d889cc07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84e9e8c-4732-4c17-8a8d-78906aa73495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44baafe8-6c34-47bb-bd20-3427fe7cb4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5ab9820-da4b-4b71-8d9b-718e63e66805",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37692922-d018-47af-b839-6ac6da2295fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50fd901-505e-4894-8fb3-c1b87413d3c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2079808-4a88-4163-ab92-164a84aa158f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83aef013-e992-4697-9d67-fc634b636cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6dba89b-4912-4440-8b2c-c2873a39ed1d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87221b69-a251-4996-ac4e-f1aa677566f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ade78d0b-19c1-424a-9d3c-e84322f32fd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e8716a-a979-4c4e-b9b7-7d8f98919803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e3e90d-734d-4032-aee4-086b5346b9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6887c171-039f-42c4-952d-64272fef988a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abda447d-78e6-4f94-8950-edface6b8f13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7198422-3865-42a1-a7b8-c12a24a8012c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bfaa106-a738-42b2-9f32-50720a8d77ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58dcdc22-a911-42e7-a7bc-53686e0ce5dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819ac561-525a-4bba-9813-f9dc5c49720e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efee176f-5b2e-4233-81eb-89c86c7b271a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5615a467-759b-46af-9129-caf753821f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c109b7-94f4-4365-a348-57ed3a71f73e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed6f7d5-bb44-4351-b555-9d290a46ac2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c2edabe-7439-4db4-aea6-d014796aec27",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec6a562-dffd-4a5c-8531-21d386987215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "515a2fc6-bef8-44f1-b823-03d50296beaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff1c9bb-6516-4a03-8168-4f670b112170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03f40da1-d2f2-48f6-af9e-7c08298185f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8663cb28-cfbb-4f35-be2e-7a1c891d0e06",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a5ea84-b94b-47b1-8597-cc59a1b658f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31f5685c-76a8-422a-a15a-76341edce285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7f1965-7cd4-4f00-b96a-a954e694a50e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "301e26ae-98a1-4449-b309-b1694de37379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d671083d-7801-4df8-be04-19e0b280cfa3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4e5c3c-c9b1-4032-a66e-9a9f91fee848",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb8ba4fe-abfd-42a1-9ce5-126366a9afc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b4bf0f-a3fd-4e52-8e8e-cca29dc73491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83121162-512d-4ae2-a2ce-1688035bdac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae6dc29-6536-49ae-bafc-a4e7b238737f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3346dd-2d14-4796-8865-5957a743fd96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9268cf7a-0400-4ea7-bdc0-8b4432e98b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d1e3c0-7a5d-419c-bf0e-3812ffd03ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66bb6be-65e0-4092-8664-ba97424644fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c3b83f-3912-4fb4-93c1-a49ca546cc93",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09441337-a587-4913-bda1-5cdbb02604c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e99dadf6-71b3-46e3-b48c-df333b0f706d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c76722-61e0-4f27-a9f8-e558cb4d86cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97729f3c-364d-45e8-b77c-8e74f7aa70e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db82195-e9a7-40bc-bc15-217d9401ff40",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac70976-4455-49a5-afe1-b904cd0e24ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3c73a37-4d95-4fd3-aa8e-359279428b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4c3116-e176-4a52-9a36-b241f744ba41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a252dfd5-fb6e-4ea2-a7e0-d7c7b2f76f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f07081f-65eb-4b65-8644-2903776788e9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e32cb2-9865-41b5-9690-460c697b601b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51459d3a-5bc1-462e-b423-98fa40b37ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7fcf43f-e5f2-45ba-9ca6-c77b084edaa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c15a788-052a-4fce-88d1-81eda57e843e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99978e42-6ce1-4d70-b37f-7706efe74686",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a25a3a2-3628-4abc-b5b8-52e7a7e6116e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c258f5c8-6668-43d5-aee8-64b1bf3f235c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "049038ea-b8e2-495c-b06d-29e50ee58e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae644b8-43cf-42fc-8b7f-79915231f8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08d51045-ccbc-405d-a154-9deef196f0e0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6eb5698-9235-424a-9e9c-41e7715b73b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2bd4c00-bf50-47d4-b611-7b1798166b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34419250-6839-4098-a471-0732cfda2736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef4c5f0a-9cfb-47eb-9788-9361721ab887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfd2cb5-df82-42d7-a8a4-07881b5d789b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69cdd7ab-7849-41c3-840d-8b519354b1d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29caaec8-003b-40a7-8312-e36ede1f9e43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491c8838-5b76-4ea1-8526-bfc7737a6045",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df89c0c8-79af-4a56-97b6-171c1a8d1372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f225c6e1-e811-4346-9d03-91b6ccd85bda",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b690f4c7-28bd-4fec-af26-7bfc21c39c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a108dfb-0e99-46bd-be63-739ef5655258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9892bc0a-9fc2-42f6-85a0-c331a44d5b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38ea105d-423b-463b-9512-7e923bb81d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a54621-9fd7-480d-a512-3f47afef49b5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a9b7cf-7118-4089-9411-dcc7d3407ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bdb8050-4ae9-47a9-b315-6c9a220c3a63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb04cfbc-e685-4f00-b31f-84e7bcb5a2f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d229f836-7393-4925-8f04-cb9053390c18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ac9920-e549-4b2f-871c-cd69a6b10efa",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90269f5b-3678-4a73-afb8-d9f9804ecb60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "927cf34f-eae9-4aa7-8f51-a7a2cadfffeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71f5c64-cd70-4b38-be01-9bf78af89f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f60c7eb-150a-4a2b-af1f-e0e822864a1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb39751-6c62-45b5-84c9-770b21384e83",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f268aaec-4c04-43d0-8c39-2d0406ac681c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b95a4d0-6b9d-4b9e-abfa-077b51667085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d70534-b634-4a13-aa47-f4971990ac16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df32fbbe-695a-49db-bc1d-d9138041dd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504ca79a-60b8-47e0-bfff-dec9b3186b39",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3b5484-5a72-44c9-a5f2-8b8fea53fc0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee6c3f64-171e-418b-ae06-1f2e31ce66fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f5be3a-d440-4a06-bbf2-c08a312d4f18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3cfe389-16fa-41e3-9a67-acd7270c4681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16a94ea-1f17-4b72-bab0-de6b13cee7f7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4de163f-5eac-40b4-8e3a-083aa0aa27d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3f28163-cb29-4fd6-beb4-f3e23a7bd034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42415fa-266e-4b0f-bfd8-3c0aac303d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4026bed7-6330-465a-a08f-4eff429ce8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "986ed867-3790-4e73-8175-bc50484aaf40",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5107d80-9b34-4374-acb2-bbdf4c54f2a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fb0432e-3287-4c5b-bd56-734129543ff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf6915d-16d3-4d64-ba36-2bc24bc38fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5085095a-cc6c-4aea-ba0f-69a347aaa925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c74362-30d3-4171-880f-261734816cbd",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf456e7-a8a0-47a8-8315-b2db36db0c29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ee0b21-f7d2-4a54-97d2-02ed447f0559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa6efa4-3fcd-4986-861d-0ae8e457f013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c76f5577-b76d-41ed-a702-fb9121cc0079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e5e8ac-7258-4a5e-9d90-677491b8994e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35464941-3794-4873-a9f4-f55e6b272814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea3a2c0b-bbc7-4939-bd82-6404ab4b98a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825943b5-182d-48c2-81c5-9c9fe5425db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32a83878-19b3-4010-88a3-aa2c31c8880b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "469855a8-e02c-48e4-b493-f185e93469d6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00249712-f5c2-4649-835c-44ef4b6c0084",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "270ddfd6-2b0e-4b75-b86d-9e4c8e69edb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b21d52-0ee7-4495-a6d8-94b976eabf5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0ab9ad-8b39-45eb-ba46-851702df90d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc696459-cd27-48a4-a872-b4694103bb5b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8a2cfa-cb8e-4ea4-95fb-b7c0bd538b4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e24fd3e-bf5f-404b-8d49-a3f1aafb5c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "990a545e-6306-41e3-bb44-6004f6e00fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c48f10d-e725-4314-aca6-43e49c2135d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08519d74-0d31-4101-a844-77034324f8aa",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3f16c2-b4f1-4ac9-8036-b8d156fb5ca5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ce9a943-9991-448e-8419-38fbb7ee39e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1db677-8ea0-4e4a-a42b-a4f9cde0d79f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c421267-f5a5-49a8-9dfd-b817fd841ec8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e07bc19-88fa-44ea-8552-40244e8febbc",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bfc2f1-1b49-4188-a5e0-6522f9ea9120",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c3f0108-9347-44fc-b6ce-47d84602b7bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a9bfc1-a415-490d-b734-e04f27c2ee48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3fc6146-2043-4725-b519-ceac4357054a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a26e4c-c214-4aef-b83b-cfdcb3cc8633",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9fb7a9-a88b-4dc2-900d-31d03089537a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d2a6650-2a30-4d3e-a1ae-3ee2edc61272"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33b4ee9e-5963-4e65-bc6c-aad8717d7dc0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e563c631-67e1-46b8-bc22-593a9574f510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2593ea34-d9df-4dd0-8338-0c73c5d7a85d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a462386a-5e43-4534-b8ee-1d4d2de95846",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cff9004-240e-46d2-b0fd-766777fb0ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5be42b-c9ef-42ef-b895-30c534c37a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "890fb41f-5c17-4650-8ce5-b8ba54a26173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f6a6fb-1e57-4f32-a304-2c4df1e47cf5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba637c46-c4ba-4dd1-8f08-c68e7ae3bf23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "654a4837-69ed-46b6-b4c4-d2c43f33fe1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "567dc1f0-98e3-4b9b-a094-4a03189a20c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5569f554-a657-46dc-b43e-073790acfd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983f0bc0-77b7-4281-af12-a8f75ffc75ef",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd78790-4430-4cea-afce-f9e714867118",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98252983-750b-4e36-b87f-40dda38a83d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ea1606-7e7a-4568-bf2a-ed70ebbbd582",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ab0a46-101f-41e1-9850-95d7ca632909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c739d7e-bc1d-4b75-90e0-e4a8e7414fa5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bd76a3-d0ea-439a-b281-27cf6ec7e1c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e3b245e-5b02-4c83-a346-01a24ddabf7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32af5008-7c3c-4be3-ac59-8f3b3f8e3bd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc58439-e6e0-42dd-8897-132c9845ea69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8039d12d-d07c-44cd-900e-ddac5c377057",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf37f59-1eba-4616-bbcb-a051c7cd4ce4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f4def27-8167-4ba5-988c-4db8035d40cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f0fa38-c6c7-488c-9ba7-b30eebfd942f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1a9dff-7abc-4fd0-ad79-23e7847bbe71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e78ba44-dc9b-426c-b587-3afc58d32a5d",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28040d3e-991e-48b4-b877-d8bd395feaa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d6bf4f-267d-4806-b327-306abcb82702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "343576d4-c45d-46df-ae9b-453b105b5039",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c18325-aa1f-43a9-8fc3-89153f606bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f95162-7716-43c8-b604-4fae4737ea52",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fae888b-e907-4845-ac56-9f3b992020d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7921f6fe-74c4-4997-8142-47667dea09ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c16f9939-2c8c-41ee-ac11-ea50f98ac747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5267271a-8190-41e0-9b50-a5700be42acb"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e2e7512-bfec-4e37-b821-1e6fd9987587",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94de6077-81ec-410b-9218-61d573fe0588"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "93d5ec52-0b0b-44e4-a22a-193dd3ada2b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0d6715dc-f6a4-4212-897a-786234edad78"
                    }
                  }
                ]
              },
              {
                "id": "c6cc2664-3ecc-4d3e-a680-f707c07b4298",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1353f556-a7c2-481b-b2eb-2ae04fb259d8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c2dde6-0844-4156-bea6-56b5a553ca70",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "59444f00-aa46-488c-a72d-e700b5e0767c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59454af8-7739-43c9-a45d-a76a06e6acef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14f75d14-019c-4dcf-938e-fdf25dd60c1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c8cb73-cd42-48b6-a9db-3d19d22560a8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e45a548-2aba-4c5f-bde1-0c59c3b0b4c9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "bc659465-3b2a-40d9-b21c-d3118fc4937d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7187b94-6e32-409a-974b-8494acdf6c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3651680f-06ef-40e3-9bd9-d501d2c6a71e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccbb06e7-c858-4bd1-8dc9-d41c86215958",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78ee8c35-fdbc-4d2c-84d9-0a0bbaa3cdb1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "66955536-eabe-4a2b-8934-06a6385efa6d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8defe59-93da-44df-acd7-2d5d3a5366a1"
                    }
                  }
                ]
              },
              {
                "id": "00342a6b-634e-4353-9021-95a8aea4f5bd",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c2f04577-d1b5-4047-a815-924b1c6a6e35",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46967262-1ed3-4bde-9c66-7c64b5d78f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b17707d7-304e-4edf-be46-47fccc621f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef0a3285-cd27-4dc8-baa0-02164f1b7ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f09f6f9-3e3d-43e5-aec8-a3dfb26c6c92"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "de5a7271-ba9a-4adf-893e-c2a7a90e18fb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62575495-3c9e-4e69-b438-8cee6d38e7c3",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccf99f50-0128-426d-9f0f-c32071731561",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d35dfc19-fe7c-47c8-9e97-5169a0f475de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66d6876f-a26a-4a3d-b002-bb9be3bc62d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9521366-b0f4-49a3-918b-f4b2ecb80991"
                    }
                  }
                ]
              },
              {
                "id": "ddfdb5d0-a99f-49dd-af7f-52b7a2eff451",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d53fe74-1196-4fcf-b27a-9ff8f14b056b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d0fef27b-8443-41ee-b5be-529755db4137"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d51ad859-e60e-488e-b208-ed28034ac04e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7a1f341-46e9-4230-83de-75fbf54326d5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a91f45e9-1a3b-47d7-96ed-fe785f6c27cc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "4c7337ff-9cc4-406b-bed4-450dd83c520b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80d1675d-5a4e-473d-a016-e6c51cde3abf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3e033999-a879-43ce-9ec4-fc8d3a087c96"
            }
          }
        ]
      },
      {
        "id": "9dce8cbb-897d-44bf-b19f-e782b20ff17e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "46fa1da2-169f-4cc9-9fba-7ed661df6469",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1e151c05-c024-42f2-b411-7c75e59eea67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4f4d2c4a-a63a-47c4-88af-29fb552485a8",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7d42c5-4ebd-4d0d-8484-96698498360d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cdb16abc-5f08-4897-94f8-ea9c7a643b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc8059f-ac6a-4e40-aa32-0e23257e3940",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "745a2911-e886-420a-aa58-674fd3558aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3031f68-e6ea-45cb-997e-0c93dffd2f88",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a000969c-5c17-4313-8f4d-40ce8c04f134",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f34441f9-cf9d-4669-9004-446d9e5029f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9bca4e-837e-4d1f-904a-df98bc5e1383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7702a155-68f5-413d-86f0-e82c19a0142f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "986ab32d-ec88-4c1d-81af-8526fce54e21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee7d2669-0cfa-4cf7-8966-6f9f4c2489ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48845abc-2fb1-4e45-8402-1a3c74c8124f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05ddf359-2b60-49ad-a7cb-6a916c92a28e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eec748f4-8341-4bd1-ba64-de0c047a3e05",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5c3e1bc7-71b3-4b7c-8d7e-4005b6a8c72c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "30abae9c-4648-423c-8c76-1cc3997dfcab",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "58b912a6-cc29-4f86-b7fc-4c8a9dca64c9"
            }
          }
        ]
      },
      {
        "id": "253364d6-00cf-4cba-9393-aedfe274cdf2",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5eed013e-1631-40f5-91b5-787af7a65f88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19bb7a68-6215-4862-b933-d2fa33b8a997",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b3ab58f-eb12-457f-8079-2db2e503544b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e994c3-9cb6-40d0-b6df-cc8740b8baee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "33f09e62-39f1-4f69-b00b-9c8dbd0bdd17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2fd6b6-1926-44bf-b2ec-a3b52adf3e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "508768b2-49e9-45b5-8afb-e4389c63262f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc05ba3-04dd-4bdb-8fb3-c6411344f4a7",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c768824a-844d-4256-aba3-82bccdb6be3e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a0cc49d1-72c9-4a9e-9335-62e724b52f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782b16b9-5eb9-46c9-97e0-659d9e8033a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0624eb74-1618-466d-8b7b-560918ac29c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2842973a-65be-4c25-8515-d6e80ca21699",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ac502865-2d88-4f8d-9d94-d943c7e80cc1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1613722c-76fd-4a5d-bb3e-47db0604191b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "391b6378-f39c-41c7-bb3f-2cfe07cfbca9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "07c91a5d-f73b-4682-9e31-9e0c90d26cb2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8b1e4902-39f8-42bf-936e-ba91fa80f7b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e1152364-3067-410b-8e18-cd02e1ee3afa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d6b55b4-4d81-4784-9e41-65fdd43c8854"
            }
          }
        ]
      },
      {
        "id": "59412b63-d0f4-42ba-bf37-b64c4c16a267",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "cebdc3ee-f146-4592-a0a4-e4a922646396",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df4c45f8-895c-40a9-a1be-f460ed55d49c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "066c9b9c-174a-48ba-a248-a6045f1a6993",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3e7a09-6b5d-4d3e-bb0b-ade87fa694da",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "638a791f-da34-4901-a888-cdb1fc5611ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13846b96-9d44-4c17-a98a-1bb26390d96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8207c528-3d16-4ea4-bf0f-4e46b09bc532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5909d915-5cf6-4701-a018-b8971aa4d5bd",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dae349c9-1d40-4424-8a21-3f14299d45ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "98501393-2de9-4a66-92cd-2504ec70206e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87b0ca57-41da-453e-a1f6-a609a92b0c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9921e97a-4c50-4a8e-9840-2dc390db1c7a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02a2fac9-dcf0-4d4f-8f1e-914ff23f06ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b38d095c-9646-4704-8476-f4522f530cc0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3be8b777-dfee-41be-80c7-c5dbc1db25ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5043ea88-b320-41b7-8754-c55bb89a44f7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd935a96-77d6-48a9-870e-1fe6949c8f6a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a155a7d1-d433-4adc-b4f8-5eac6d09420b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5f3505d-b961-45fc-a99e-769b32da1f3c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0fe6d619-c07d-4615-b3fc-3dec232c21f8"
            }
          }
        ]
      },
      {
        "id": "19ce22d4-2d3f-4dd4-9c16-694fcce9058e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8188fa2-7be9-4963-9559-316b06011f41",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a56d8d8-5723-42c1-a90a-660c021dcba1",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "d97d6556-db4a-4e78-932e-6f67d4bf5c6c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2d3e2b8-518c-4d37-aa3e-d4a4463dfa93",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3605687b-b413-4803-b33d-0cd0f6223984",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 263.32046332046343,
      "responseMin": 21,
      "responseMax": 5550,
      "responseSd": 706.3637605144565,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1677285668610,
      "completed": 1677285747378
    },
    "executions": [
      {
        "id": "03847924-7228-4899-ae92-980426e4b90b",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ba666c77-a59b-4f5e-8f3d-22a71153a7d5",
          "httpRequestId": "f7ef86b9-070a-4cee-8c26-64dccb8505b1"
        },
        "item": {
          "id": "03847924-7228-4899-ae92-980426e4b90b",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6f656bf9-08ef-4300-b94c-e2ab8fc914af",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 0
        }
      },
      {
        "id": "40269e1d-c6aa-4264-952f-4513d55e0584",
        "cursor": {
          "ref": "4067939a-6bc6-4122-a3a7-bedcda4ea95c",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "598d485a-8f09-41d0-9356-dec0eca4a67d"
        },
        "item": {
          "id": "40269e1d-c6aa-4264-952f-4513d55e0584",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7cfe5c75-49b5-4485-9114-baae86c8dbfa",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "44d9fa66-518c-4c53-be1e-4054a44a1478",
        "cursor": {
          "ref": "a5218249-36a5-439b-a6d3-6fa56c102597",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6dea6cd8-5310-4b9e-8e7e-c439d4de34ab"
        },
        "item": {
          "id": "44d9fa66-518c-4c53-be1e-4054a44a1478",
          "name": "did_json"
        },
        "response": {
          "id": "7eb0b657-72d7-49fa-b0a1-b72800f46cf9",
          "status": "OK",
          "code": 200,
          "responseTime": 540,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aabcf43-afbb-49dd-b710-d824721e5363",
        "cursor": {
          "ref": "270ed857-752c-4881-a191-7e04895ba312",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "189dfcf1-798a-4ab4-9835-1ed02d77ee96"
        },
        "item": {
          "id": "8aabcf43-afbb-49dd-b710-d824721e5363",
          "name": "did:invalid"
        },
        "response": {
          "id": "5f6e9392-057a-417a-ac0c-858ed359cf2e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1544,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8aabcf43-afbb-49dd-b710-d824721e5363",
        "cursor": {
          "ref": "270ed857-752c-4881-a191-7e04895ba312",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "189dfcf1-798a-4ab4-9835-1ed02d77ee96"
        },
        "item": {
          "id": "8aabcf43-afbb-49dd-b710-d824721e5363",
          "name": "did:invalid"
        },
        "response": {
          "id": "5f6e9392-057a-417a-ac0c-858ed359cf2e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1544,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "7540e1e1-cb3f-479b-997e-6cbbbc8c671b",
        "cursor": {
          "ref": "130171c9-de84-499c-8869-03cc70288b2e",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7e0b4d65-8e2d-46a2-ae9b-add2df3e7611"
        },
        "item": {
          "id": "7540e1e1-cb3f-479b-997e-6cbbbc8c671b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "621a5a8a-6150-4ea6-820f-25d0a7d05b31",
          "status": "Not Found",
          "code": 404,
          "responseTime": 239,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe49d0e-6b8c-4334-81b7-a68f4608ad26",
        "cursor": {
          "ref": "28eca7c5-a249-49a0-8cae-dfc1c22752fe",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "05a965a5-5f4a-4a2b-8a58-d1dae5256e27"
        },
        "item": {
          "id": "5fe49d0e-6b8c-4334-81b7-a68f4608ad26",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c33880c5-0b05-412c-82e4-c8de73c02166",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec99cfec-d30a-4c84-b79d-6984450c2bfd",
        "cursor": {
          "ref": "06ff297c-aab9-4514-b70b-1da6d70afa24",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ba14e05d-13de-442a-b464-23ad685a15b0"
        },
        "item": {
          "id": "ec99cfec-d30a-4c84-b79d-6984450c2bfd",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b3ec1870-3c35-4021-8d77-f75e6ea7671d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 267,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "2a46fcf8-d2f4-41cf-99ea-8b25c9517ab3",
        "cursor": {
          "ref": "e412655b-1602-4f75-b7d3-b860e8ff5419",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "91deb4a9-69b2-4c58-a408-ff2b9d177828"
        },
        "item": {
          "id": "2a46fcf8-d2f4-41cf-99ea-8b25c9517ab3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b67bf22e-6702-42cf-872f-824bdf79288f",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "2a46fcf8-d2f4-41cf-99ea-8b25c9517ab3",
        "cursor": {
          "ref": "e412655b-1602-4f75-b7d3-b860e8ff5419",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "91deb4a9-69b2-4c58-a408-ff2b9d177828"
        },
        "item": {
          "id": "2a46fcf8-d2f4-41cf-99ea-8b25c9517ab3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b67bf22e-6702-42cf-872f-824bdf79288f",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "89e55011-67ec-4e41-bb64-c49041fc673d",
        "cursor": {
          "ref": "31334679-517c-4e30-9c74-f68e8982c565",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "aec8077d-6a36-4bfe-82ee-fe6211e2a38c"
        },
        "item": {
          "id": "89e55011-67ec-4e41-bb64-c49041fc673d",
          "name": "identifiers"
        },
        "response": {
          "id": "3ac5605e-cfd8-4ee9-af52-a562562fcf4c",
          "status": "OK",
          "code": 200,
          "responseTime": 285,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09f8ace-785d-4c2f-835e-e473099280cf",
        "cursor": {
          "ref": "365282cc-cfe9-4975-87d3-8c92527abddf",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "21ea9d2d-c51a-4221-bddb-195b4dad7c37"
        },
        "item": {
          "id": "b09f8ace-785d-4c2f-835e-e473099280cf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "414578c4-45d3-4445-9171-8b517d71adf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09f8ace-785d-4c2f-835e-e473099280cf",
        "cursor": {
          "ref": "365282cc-cfe9-4975-87d3-8c92527abddf",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "21ea9d2d-c51a-4221-bddb-195b4dad7c37"
        },
        "item": {
          "id": "b09f8ace-785d-4c2f-835e-e473099280cf",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "414578c4-45d3-4445-9171-8b517d71adf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f99e5a-8b2b-428b-8051-1d19412ec392",
        "cursor": {
          "ref": "8d20fae8-a4a8-4210-bffc-7e7c5469e376",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "86b7dcc4-5ddf-4a31-95af-ecd0b1ce757c"
        },
        "item": {
          "id": "03f99e5a-8b2b-428b-8051-1d19412ec392",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "1252577a-4376-4c93-908b-eb6885d82938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7872707e-c3f4-405e-a35f-9eb05c158593",
        "cursor": {
          "ref": "e6c2fb98-d34e-48dd-b25e-1be69c6b6639",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "06364dc3-2f66-4e2d-ba7f-fc20d857b7cd"
        },
        "item": {
          "id": "7872707e-c3f4-405e-a35f-9eb05c158593",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "fa96aa22-b2b8-46c2-ba0a-9fdf3b8857e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1913d9bc-4d2f-452e-9f3d-590258b49939",
        "cursor": {
          "ref": "4f67401f-3b41-4345-8b89-66d838f68406",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "4a3428a8-cd70-4d36-ab74-3b77c11f76e4"
        },
        "item": {
          "id": "1913d9bc-4d2f-452e-9f3d-590258b49939",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "db58d330-4f76-422e-a252-38ecd7e314f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ba68d0-e5fd-41b0-8435-db9d3546ee81",
        "cursor": {
          "ref": "0d33996c-8f42-44a9-b51b-022e31630e07",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "27b1ffd1-e578-4f7d-a2ac-e51441c393df"
        },
        "item": {
          "id": "36ba68d0-e5fd-41b0-8435-db9d3546ee81",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dd718206-9800-45bf-9897-7617dbc382e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "714913b8-82be-4d70-b5ad-c02f761c9675",
        "cursor": {
          "ref": "f7a5b320-a38d-4d88-a777-44ca9e0a00f4",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "5bcb5ed2-808b-4b08-94c4-d6b251ae3456"
        },
        "item": {
          "id": "714913b8-82be-4d70-b5ad-c02f761c9675",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f210dbc5-7b62-44ca-8ef6-fe6679d3b127",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb477556-3843-410d-9cf8-8177ddbed86a",
        "cursor": {
          "ref": "0b63980d-df3c-44c8-944d-4962fa408811",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "94c6d498-152f-4263-a771-fb7f6b3fe04f"
        },
        "item": {
          "id": "eb477556-3843-410d-9cf8-8177ddbed86a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7dfc07d6-687c-4ed3-966c-ba61b2d43171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 194,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e8525a-9e72-4ff3-8a02-e0cc87bc17c1",
        "cursor": {
          "ref": "5314769c-118f-4135-aef2-df4f9bc8de0b",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "73a233f5-2f17-497c-9e10-25542c6ce249"
        },
        "item": {
          "id": "e2e8525a-9e72-4ff3-8a02-e0cc87bc17c1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b52bd10e-c484-4d1c-8c2e-ee7f985c44a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc882de5-ee9a-4430-9e9f-403a5a0439d5",
        "cursor": {
          "ref": "bd44cd19-feb9-4e64-9029-dfd39a22f5e6",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a11c4e41-3925-4bfc-827a-c7f57bfcec48"
        },
        "item": {
          "id": "dc882de5-ee9a-4430-9e9f-403a5a0439d5",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "060fec80-ecaf-44ff-a752-bb6f33b93c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45489db3-d52c-4d8d-82db-d7146a35cedf",
        "cursor": {
          "ref": "bc8de93f-a3c0-4019-9d07-510f59699799",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2ddf19ff-664b-475c-a730-a19e5a9ebde7"
        },
        "item": {
          "id": "45489db3-d52c-4d8d-82db-d7146a35cedf",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "626ae518-c30f-400e-a0af-fd4aff6b2c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6a4b39-1b4b-4f40-96e8-4833f5d230de",
        "cursor": {
          "ref": "bacbf3fa-9763-4841-9124-325a42767d94",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "91687b5b-19eb-4883-b291-7029ee223236"
        },
        "item": {
          "id": "ff6a4b39-1b4b-4f40-96e8-4833f5d230de",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "41c9de65-7e65-4808-b2fa-a5a259e6dea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd11a2a-f889-4621-8c67-e132a7e3e506",
        "cursor": {
          "ref": "4287157c-9b5e-4c1f-89ad-42fbcf65e5c5",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "7014bf0b-b4be-4f69-94de-b3fc654406bf"
        },
        "item": {
          "id": "5dd11a2a-f889-4621-8c67-e132a7e3e506",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3973f5c1-41dd-44b7-83e2-476bcb6288f7",
          "status": "Created",
          "code": 201,
          "responseTime": 757,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "cdccc023-8634-453b-9dbd-996e0bd28b7a",
        "cursor": {
          "ref": "9c4d840c-011d-4fe3-ac84-6b110baebdb6",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3a5230d7-8169-4489-a121-4a198947768a"
        },
        "item": {
          "id": "cdccc023-8634-453b-9dbd-996e0bd28b7a",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "26b562cc-e38a-4101-b144-b9448d0bc3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b140de99-79f7-45f7-81e8-a943c179bf5e",
        "cursor": {
          "ref": "18ba5d60-c7e9-4cbe-8baf-b110718d4f1d",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "98047239-32b8-435d-878f-f0ebea860ee2"
        },
        "item": {
          "id": "b140de99-79f7-45f7-81e8-a943c179bf5e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "972b5399-cef5-4d3f-a4e4-659f82fb2d3f",
          "status": "Created",
          "code": 201,
          "responseTime": 5550,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "758db23a-7bb2-4129-a9c7-8d05fc5ce65a",
        "cursor": {
          "ref": "c99a8651-20a1-4523-b036-f8f2343ee08d",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f30afa60-cf12-4203-a6a2-6ae0e2735a7d"
        },
        "item": {
          "id": "758db23a-7bb2-4129-a9c7-8d05fc5ce65a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "db9bb273-c110-4ba0-b0df-1b7b6e14226f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c994289e-6a0c-4687-a05f-e8215b5b950c",
        "cursor": {
          "ref": "32b4d219-d75d-4b7e-8781-732871a22302",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "32b19416-a16c-4e75-bd71-ad8e9a4ab6ad"
        },
        "item": {
          "id": "c994289e-6a0c-4687-a05f-e8215b5b950c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a8485f9f-4646-4f4e-85eb-86eea5cc8d46",
          "status": "Created",
          "code": 201,
          "responseTime": 4220,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b173c523-73dc-422b-9835-a57f431968d2",
        "cursor": {
          "ref": "f8c839fc-cc72-430f-9d3d-5f3964895e2a",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a999f892-e3c8-4d33-97c9-2ef395a6aa21"
        },
        "item": {
          "id": "b173c523-73dc-422b-9835-a57f431968d2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "096d425e-35aa-4dd9-9245-75f6f25e56b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831b0904-0af1-4d57-9d16-d4318faa7a37",
        "cursor": {
          "ref": "f6590ff1-fc06-4e82-ab35-69c71bbdc73e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3135f6d7-2604-4aca-aa1c-919c691f77a0"
        },
        "item": {
          "id": "831b0904-0af1-4d57-9d16-d4318faa7a37",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7da34c45-4cdb-485e-b62e-28ca4781f280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda3cd39-3df2-47a9-98cb-08ef2e77d832",
        "cursor": {
          "ref": "7d37bc36-718d-4062-994c-51368aced7fb",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "39e083af-e288-4884-9a09-3f76173619cf"
        },
        "item": {
          "id": "bda3cd39-3df2-47a9-98cb-08ef2e77d832",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fcf5a3f4-b4f8-4f1c-baa2-926609a87569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67c0da63-5165-412d-b21d-72f14842d38f",
        "cursor": {
          "ref": "06ae4e35-4fd1-4ab1-b18d-c9e81603419b",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1f338539-04e2-4799-8fa3-d5ba71852817"
        },
        "item": {
          "id": "67c0da63-5165-412d-b21d-72f14842d38f",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "089f8cab-f6bf-4cbc-90b8-69584b3ad42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f9c9116-8cbb-47e6-b44d-9343649410a7",
        "cursor": {
          "ref": "a1f53ab7-101c-47fa-97bf-595fd6365b86",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0b59d750-03e1-49ca-a0c2-5c6d6dbde3eb"
        },
        "item": {
          "id": "5f9c9116-8cbb-47e6-b44d-9343649410a7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "c20ce90c-2e14-429f-99e6-b8b2184baf9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d3aab4e-1117-440e-89a1-b629379c7499",
        "cursor": {
          "ref": "cb3e608a-5558-4db9-8952-4ca7cfc168e1",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "b9e7764f-7109-4284-a4fd-73f0731d6452"
        },
        "item": {
          "id": "6d3aab4e-1117-440e-89a1-b629379c7499",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "07b34037-ea1d-4153-8695-3fda9141c365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34c4eacc-d88a-4b75-a6e4-7eefed12d45f",
        "cursor": {
          "ref": "7a06a6e0-7ab4-4e38-8822-0101109d460d",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "df680f18-b261-4402-8ce0-e72df3dd8547"
        },
        "item": {
          "id": "34c4eacc-d88a-4b75-a6e4-7eefed12d45f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4e59d44d-2c09-4687-a60a-2bc54b9ccd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbc372f-82a4-4018-aa41-91cb7182e742",
        "cursor": {
          "ref": "1e554bd0-ffd5-474b-a766-b42d9ebcca3d",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5d91c773-de86-45e0-be44-877c8498d8bf"
        },
        "item": {
          "id": "6cbc372f-82a4-4018-aa41-91cb7182e742",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "51e43636-9658-4cfe-9d7b-ffa0098300bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84433aa3-74fa-4694-b28b-e26def9a2459",
        "cursor": {
          "ref": "39c2ff49-7642-4c44-bbe7-32f73ece6031",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8b544758-7ee8-490c-9975-c34d68fd6371"
        },
        "item": {
          "id": "84433aa3-74fa-4694-b28b-e26def9a2459",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e367fe3f-5637-4255-82eb-a1125ea0a479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d002590-01b6-4a1d-8905-a191830488a0",
        "cursor": {
          "ref": "9903c072-d7ec-432e-b264-54825d088057",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4bc1857a-eb88-448e-8849-5476ce6a704c"
        },
        "item": {
          "id": "2d002590-01b6-4a1d-8905-a191830488a0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c2399da8-8027-4937-b4a3-7ebe5c64af13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1fbebc-454b-4b9a-a001-845fa63b37b3",
        "cursor": {
          "ref": "8b0cb719-29f3-43f9-8f59-7c7f0324b8e3",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e44cb253-a319-4f84-97ef-8f19eb864a8f"
        },
        "item": {
          "id": "9c1fbebc-454b-4b9a-a001-845fa63b37b3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "122d3df6-666f-47d1-b585-7299147fefe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ccfd311-6142-4861-a302-4de41f445d69",
        "cursor": {
          "ref": "a5fee9e4-4d10-4d23-9f30-0377e96984bd",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "104075dc-e2e7-4e3b-a89e-ee742bab6d85"
        },
        "item": {
          "id": "1ccfd311-6142-4861-a302-4de41f445d69",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9ef799fb-f6ff-4c73-89ff-24dd40fd2407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee594a93-6544-4779-b6e5-5e4f215b86c0",
        "cursor": {
          "ref": "9d680c44-da28-44d1-9abe-2ba37a6b12ca",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1ad258ba-5ddd-45aa-924b-3f4a57211e25"
        },
        "item": {
          "id": "ee594a93-6544-4779-b6e5-5e4f215b86c0",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "173f10a1-15ac-4b56-b4e6-0632b021ea7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8129f68e-91ec-4d1b-9cc3-726f73872e4e",
        "cursor": {
          "ref": "7deedba1-98a0-471a-bde7-cc1d384cad43",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "e3780e72-14a1-40ac-861d-46a07f785f92"
        },
        "item": {
          "id": "8129f68e-91ec-4d1b-9cc3-726f73872e4e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c9dc21ea-b393-43d7-972f-498a51a410e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64e9d3e-b31a-4a75-b07d-2053d5930053",
        "cursor": {
          "ref": "f8907a38-c8cc-4512-b566-68e244abba79",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "04034b21-a088-4341-a1e6-ab3326e90217"
        },
        "item": {
          "id": "e64e9d3e-b31a-4a75-b07d-2053d5930053",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "177d3333-764a-44bb-b42a-30b9b1bd6723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b608362-23c4-40a9-99d8-49b07240f9f0",
        "cursor": {
          "ref": "6ecee511-4e4b-4ea3-9692-ac1850542c44",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2973ec70-8e2f-4c55-8638-0db2fc42b506"
        },
        "item": {
          "id": "2b608362-23c4-40a9-99d8-49b07240f9f0",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "e8ccd7b4-7594-4963-aa7c-384ba655bc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a3a6f42-169d-4f98-81ef-f6c21034853a",
        "cursor": {
          "ref": "64997677-7ba6-4fcf-aeb1-5bd6e150d2c2",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "38bcdd25-55c8-4bb0-9b76-c3fcac5cd06f"
        },
        "item": {
          "id": "0a3a6f42-169d-4f98-81ef-f6c21034853a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2bcdb60c-7d7f-4e32-861f-730837c449b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa7c6a6-bd0b-4d5e-b27b-32d0d769dc2e",
        "cursor": {
          "ref": "4778af4a-71f3-4e79-826b-40c4ecdf6099",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "770d2f64-48fe-4587-a1ee-210350e49ece"
        },
        "item": {
          "id": "eaa7c6a6-bd0b-4d5e-b27b-32d0d769dc2e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "faa2506b-ce44-4805-ac78-8c1ac60ef836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "166a9037-9277-49e7-aa5c-af91ba6bfbab",
        "cursor": {
          "ref": "2b0d662e-b36b-404d-b38e-4dbc270bc7a6",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9fc2ad29-ac15-488e-8b23-9201f8678fd2"
        },
        "item": {
          "id": "166a9037-9277-49e7-aa5c-af91ba6bfbab",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9f0ef04a-175d-4c11-99a1-dedf0ac73141",
          "status": "Created",
          "code": 201,
          "responseTime": 2435,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d3087bbc-457e-4906-8830-14754e10ea5a",
        "cursor": {
          "ref": "85674680-bd20-475d-9d67-164653375f9b",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5e5cc003-04ea-4b88-a1ab-5821ad2513cc"
        },
        "item": {
          "id": "d3087bbc-457e-4906-8830-14754e10ea5a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d4e14bcf-6af6-45be-bc99-fb0e383c93db",
          "status": "Created",
          "code": 201,
          "responseTime": 2532,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "37f59bda-0a1c-4a40-9a4a-b45e1cd8d60f",
        "cursor": {
          "ref": "e3ec0184-22ad-437a-a2e5-13310d345479",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "73defc3c-9205-4099-8eb8-8e5bbe378a84"
        },
        "item": {
          "id": "37f59bda-0a1c-4a40-9a4a-b45e1cd8d60f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "03888a05-a7cf-47ce-9c4b-6a93c6096202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb34b3c-34e0-40a7-940a-af98909ea70c",
        "cursor": {
          "ref": "624753f8-2253-4247-bb7c-75c912396f88",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c2040333-8c3b-4d45-a2ed-884700b7b4bb"
        },
        "item": {
          "id": "2fb34b3c-34e0-40a7-940a-af98909ea70c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bd0f44a8-d6f1-42a3-b5f8-efedf49546fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3fe21f-24f4-4b0b-ac66-d293d95ba7ad",
        "cursor": {
          "ref": "31c80576-030d-4d70-ad6a-46b16946f831",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "810cf36c-dc18-4d7c-8735-5f8397078af9"
        },
        "item": {
          "id": "ac3fe21f-24f4-4b0b-ac66-d293d95ba7ad",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d6fc9496-73a7-4c0a-9c3a-9d8efa227723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb2cd84-c7be-4dcd-8d1d-09170a5af553",
        "cursor": {
          "ref": "82c4283d-0125-4519-a009-5228f9f4214f",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "e1780e30-1491-471d-9e27-80830f331879"
        },
        "item": {
          "id": "2bb2cd84-c7be-4dcd-8d1d-09170a5af553",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "d86e48d3-2deb-4f73-a16a-c5287b284f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8ef64d-20fa-423b-9c7a-a81e850f330e",
        "cursor": {
          "ref": "8fea74ff-e4bd-42b4-b476-dca5b5048ad8",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "1d712d61-d844-445f-b916-027c76e68b0c"
        },
        "item": {
          "id": "7b8ef64d-20fa-423b-9c7a-a81e850f330e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "932b3ee7-a09d-46f1-9146-0f14cb54bacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d50b8e-5432-427d-986e-0ad244f3b123",
        "cursor": {
          "ref": "9b84be33-c983-4e65-a62e-659c12cf1bbd",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "32be8d44-b17f-41ea-83a4-d8961da3b759"
        },
        "item": {
          "id": "c0d50b8e-5432-427d-986e-0ad244f3b123",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9f20d86c-36a8-4a4f-81d2-6c7a40989181",
          "status": "Created",
          "code": 201,
          "responseTime": 2423,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d2ff8275-8c3e-482b-ad61-952f82cd4dc9",
        "cursor": {
          "ref": "d609c2fa-e627-4101-8a1c-3bb06206a764",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e3054636-f5af-441a-9a63-b311025e2389"
        },
        "item": {
          "id": "d2ff8275-8c3e-482b-ad61-952f82cd4dc9",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "427e2d71-b282-481f-b91f-4ac7eaa2b3aa",
          "status": "Created",
          "code": 201,
          "responseTime": 2513,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "e1690966-5a69-4f23-80e6-a840e4341a31",
        "cursor": {
          "ref": "13c39b0a-3c39-4291-a663-8c0d6f888160",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4b214087-da5e-4e93-bdb7-8d9a6f635729"
        },
        "item": {
          "id": "e1690966-5a69-4f23-80e6-a840e4341a31",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ca5b0a6d-98fb-49e9-a3d3-233b24bb4831",
          "status": "Created",
          "code": 201,
          "responseTime": 2337,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "7fa53207-45ce-4106-9b10-f219858641ac",
        "cursor": {
          "ref": "99c33708-1bdf-4398-b26a-3a133167fc3d",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c5ca6888-12a1-4575-b815-1a976e745e24"
        },
        "item": {
          "id": "7fa53207-45ce-4106-9b10-f219858641ac",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ea0431b6-c44a-4f59-b0d3-07fc0fde7b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfac1069-bdb2-4985-bb50-3f4d34297fec",
        "cursor": {
          "ref": "fbe16cc2-383f-4e25-9178-77dab6d21c8b",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b7c58264-bca1-4552-918d-f847a06fb24f"
        },
        "item": {
          "id": "cfac1069-bdb2-4985-bb50-3f4d34297fec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "83eff8c8-1543-4db8-a58e-b36a1698a7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f2c5a0-bc96-4cdd-b9f5-7ed725164f13",
        "cursor": {
          "ref": "c2182e2f-3128-433c-b621-1b5099d2ad5c",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1128c7af-0033-4f0b-8d33-ae25764c31c7"
        },
        "item": {
          "id": "93f2c5a0-bc96-4cdd-b9f5-7ed725164f13",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9b980c2e-6903-476b-ab03-7b0d4e608f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ff86eb-9737-4d2e-bd2b-44891b8d02b7",
        "cursor": {
          "ref": "2996007d-096b-4261-ad75-8ab2d03e0abf",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6fcd6675-cb52-46d5-ae90-99acc97d15f2"
        },
        "item": {
          "id": "95ff86eb-9737-4d2e-bd2b-44891b8d02b7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "2a4c1bde-81ae-451b-94eb-53a0ca1eedea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05c89b42-d737-46b7-9a81-1ff7776d5b6a",
        "cursor": {
          "ref": "05f3b848-2ea6-42e0-ae8a-4c52c78fc984",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "9bf5881d-9575-40d9-a12f-1c3ab178032e"
        },
        "item": {
          "id": "05c89b42-d737-46b7-9a81-1ff7776d5b6a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5b65fb10-ac43-43f5-ac3a-98a0cd55dccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2309004f-701f-4896-8f2c-5b3414b2d54e",
        "cursor": {
          "ref": "5a1f8ce3-5cb7-44fd-b9ee-5e563c6e5271",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d5edc489-7242-4f74-8a05-54781cbed172"
        },
        "item": {
          "id": "2309004f-701f-4896-8f2c-5b3414b2d54e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4f32c987-c693-4598-a6b3-6b9873b2ebd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "114a8a65-9fb7-490c-9c28-99c3470dd31e",
        "cursor": {
          "ref": "46021175-cd9a-437d-a79a-c583e9e19e52",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e9d2692f-acbb-4be8-a87a-5093ff945b04"
        },
        "item": {
          "id": "114a8a65-9fb7-490c-9c28-99c3470dd31e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "4fa83789-b862-472c-8f4a-ee0fabc12a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ac71d8-c934-4a1a-9dda-9de80c739d6c",
        "cursor": {
          "ref": "29aab524-625a-4225-a7c9-39a33ccbd200",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b5a156e9-d232-4af7-b42a-0444e411dd3f"
        },
        "item": {
          "id": "e1ac71d8-c934-4a1a-9dda-9de80c739d6c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5c3ef504-f57d-4d14-8236-01d41d6b1ec9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b64d21c4-84ed-4028-a1bb-b997252221b0",
        "cursor": {
          "ref": "560ca72d-687f-4f99-91ee-2cb8081db044",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cecda214-7c40-4e34-885b-1bed90a3fe68"
        },
        "item": {
          "id": "b64d21c4-84ed-4028-a1bb-b997252221b0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9dc03c8a-81cd-4797-9c50-6f9d4db961ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "614b15fb-f84c-45ba-844e-890bb3ef270e",
        "cursor": {
          "ref": "ff86b11b-f92b-4952-8208-f1d7a9658843",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "303be6f3-d7ab-43d9-82d3-bff4857621dc"
        },
        "item": {
          "id": "614b15fb-f84c-45ba-844e-890bb3ef270e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "4cfcc2a7-f25e-4327-b669-0e2fff60f49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24b0ff4d-bfcb-4b80-886a-a86da1e5469e",
        "cursor": {
          "ref": "4c4c86e6-ae8e-4149-be54-171ce76340a7",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5bd730c3-3b74-4db6-b4a6-29a7e3557588"
        },
        "item": {
          "id": "24b0ff4d-bfcb-4b80-886a-a86da1e5469e",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "c56ac6f2-dde7-4a28-be7a-f5c93ad11688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35df64ac-d3e0-4a93-9f8f-88715f121626",
        "cursor": {
          "ref": "6bfe5498-2a01-40f6-a432-a4576f2b5928",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6c202d8a-2a18-4fdb-b677-8e5075d33309"
        },
        "item": {
          "id": "35df64ac-d3e0-4a93-9f8f-88715f121626",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3f2fd05b-59cc-4da7-b162-9a3117733664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1ffaeb-fe89-499a-ab6f-af4ee84a6489",
        "cursor": {
          "ref": "8c1079c5-da0a-4ba8-a20a-35c4d2b5e0bf",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d14b8f0a-2fc7-4c78-a96f-79d1a6d350b6"
        },
        "item": {
          "id": "2a1ffaeb-fe89-499a-ab6f-af4ee84a6489",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ed0429ba-55c2-455a-9256-3dcd75f2b8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19cbd03-da88-4faf-bb3f-7cda005f8b67",
        "cursor": {
          "ref": "b13ca02b-9a14-4e3b-8c94-18b23944b1f3",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "48912de2-107c-46e4-acd0-011f965afbbf"
        },
        "item": {
          "id": "f19cbd03-da88-4faf-bb3f-7cda005f8b67",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "77271e92-26b6-4606-9f19-e4a0b59f7f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32f4e49-d0c6-4447-b482-33450dcbd1c5",
        "cursor": {
          "ref": "1248deaf-0dd5-4fda-8ce9-b6de39f7e3d0",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "72f7a4a5-358d-4842-b2f5-329803f51f3e"
        },
        "item": {
          "id": "d32f4e49-d0c6-4447-b482-33450dcbd1c5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e3d308d3-a071-409d-b6b5-fbc4ea71ed17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92986904-2097-4ba5-ba56-c01fc2b8b6de",
        "cursor": {
          "ref": "87732fec-3b6c-410f-99d6-3c9f810d264c",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ee3dade5-9e76-474f-8c2c-018c05f79435"
        },
        "item": {
          "id": "92986904-2097-4ba5-ba56-c01fc2b8b6de",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8cad1122-f99d-42ff-b9af-08fb5a7ce212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863ec2d5-baf9-499c-8abf-b2731ca07469",
        "cursor": {
          "ref": "8e0371fc-6e9b-474b-8569-edb971204960",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "fcc98fec-5b18-40a2-b5d5-f88f8a0a1272"
        },
        "item": {
          "id": "863ec2d5-baf9-499c-8abf-b2731ca07469",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "377b158d-9171-43fc-a813-abeaa1cd331b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95fd6421-c541-4d35-818c-0a0fb64cf86e",
        "cursor": {
          "ref": "80c85e68-8385-4526-bba5-e1c0485b1e4a",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "cf36dd7c-4f0d-4905-8ea0-141d2efae4e3"
        },
        "item": {
          "id": "95fd6421-c541-4d35-818c-0a0fb64cf86e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0b80a61f-2de3-4cde-ab82-78a3971ea3a3",
          "status": "Created",
          "code": 201,
          "responseTime": 2538,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "e2ca533e-c9fc-41f6-874a-7408171ddd75",
        "cursor": {
          "ref": "c8d8684c-fee9-4e7a-8ef4-ad7e2b71c7ce",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c73cee8a-11a0-439a-842c-600831a1befb"
        },
        "item": {
          "id": "e2ca533e-c9fc-41f6-874a-7408171ddd75",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "fd50d8af-e77c-49ff-8ae9-d23b2684abc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e363425e-c8a2-4e2d-bcdc-9534aa4ca8c2",
        "cursor": {
          "ref": "b0269fff-0b42-44b2-88d3-2fa9254f9a53",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "053019f3-5b9e-43c4-b98a-e1a9f57c0c68"
        },
        "item": {
          "id": "e363425e-c8a2-4e2d-bcdc-9534aa4ca8c2",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "99d28ab8-9aea-46a5-b012-a8fc4b9a9706",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e2f801-d527-46ad-867e-7bac12f168a6",
        "cursor": {
          "ref": "b2bc9146-8084-4fa6-8db6-f2bb4500372c",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3d2ec6de-b27c-48ba-b019-1898eb2e76e9"
        },
        "item": {
          "id": "e8e2f801-d527-46ad-867e-7bac12f168a6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "32b06571-ad20-475c-b6cc-dd9f2a758c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0537b096-5cd3-4218-a33d-c63e52a7c7f7",
        "cursor": {
          "ref": "fc0b9ef9-f784-4550-bdbc-f6709d4a43cd",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "464977ca-ade0-489a-93d4-3a9adc13da7b"
        },
        "item": {
          "id": "0537b096-5cd3-4218-a33d-c63e52a7c7f7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "6c3e8746-d02b-4bbc-8554-07d30552dea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e78f3299-6a5e-4698-8e92-ab35b3d81c22",
        "cursor": {
          "ref": "7a9d17a5-78b9-4881-b23c-5f1680e9ec99",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e1be34de-19db-4488-bae9-ada5d31c4485"
        },
        "item": {
          "id": "e78f3299-6a5e-4698-8e92-ab35b3d81c22",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2550c38d-c65c-415a-8705-589d8568c38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adba1731-97f1-4e82-892b-bcb836a1fc52",
        "cursor": {
          "ref": "5b853d24-0f99-443e-ac4f-99c23aa044d3",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5603c1e1-2931-4970-8945-55dcb878522b"
        },
        "item": {
          "id": "adba1731-97f1-4e82-892b-bcb836a1fc52",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "76251a04-abad-4849-9873-08f434eacfd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13b3eae-0461-46bb-8199-0c101151929d",
        "cursor": {
          "ref": "04c8d045-05d7-4d8e-8f76-006e736e1ea3",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "59fdf958-03db-4023-b072-77f607580dd0"
        },
        "item": {
          "id": "c13b3eae-0461-46bb-8199-0c101151929d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "22e8239d-50a2-44c8-a8f5-b53859761d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "331dc673-f3af-49b1-befe-db5ee6078a97",
        "cursor": {
          "ref": "8aff6483-4f78-435a-99bb-23bbb6fe19dc",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "89511897-5c7c-4ec6-9085-912b7efd3501"
        },
        "item": {
          "id": "331dc673-f3af-49b1-befe-db5ee6078a97",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "add4e8cc-57b3-40d0-8851-9e2c7a54eb85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c171d3-ce49-4b37-ae2a-f9cfffea5c9c",
        "cursor": {
          "ref": "b04c7b57-3bf9-443e-8921-183d092ac0c9",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f176c007-cbb4-4d1e-bbe3-497af4897e52"
        },
        "item": {
          "id": "62c171d3-ce49-4b37-ae2a-f9cfffea5c9c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "fc63132d-bfad-491f-ad27-a60716e27295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24740894-b8bf-4ed9-a920-f3f2fe92eafe",
        "cursor": {
          "ref": "e6e1c90d-21ba-4147-a87f-dc60e8ac84a7",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "795cd492-650f-405e-ba64-b3d2a95095b3"
        },
        "item": {
          "id": "24740894-b8bf-4ed9-a920-f3f2fe92eafe",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2de5f595-ecf8-4f6a-af1c-df5e121ca835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd59f6b7-b9da-4e5a-a7ff-cdffa5b336b6",
        "cursor": {
          "ref": "926791aa-5730-40da-9a75-2c1ece2dcf9a",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "21e24afe-a4c7-403f-bdab-e404a95847d3"
        },
        "item": {
          "id": "fd59f6b7-b9da-4e5a-a7ff-cdffa5b336b6",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3dee45b0-8d21-4856-b80a-f5c25db855df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ff8236f-f0a3-4c06-8712-83276504441c",
        "cursor": {
          "ref": "7bf5211d-f228-4ce7-b48f-136338ecf7d8",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aa4e4291-e9ee-4264-b7d5-a75fe8c364ad"
        },
        "item": {
          "id": "2ff8236f-f0a3-4c06-8712-83276504441c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "056f924e-ae93-4a67-bc3f-e1df7943d92a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d4547e5-b537-4eda-af43-2ee131e40a7d",
        "cursor": {
          "ref": "f4b1ec28-9c8d-4d5b-804e-7b39a061381c",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "02ad626e-7bde-48b5-b99b-f7c39187fac8"
        },
        "item": {
          "id": "4d4547e5-b537-4eda-af43-2ee131e40a7d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "500e1049-92ad-4090-88f6-59cbc8e3da98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b9e384-99e6-457a-8da6-5251094edb00",
        "cursor": {
          "ref": "dbd19e7c-a499-4799-9f64-cc2e904f34c2",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "3e23fb87-979d-4ed8-8499-1c1d30e12242"
        },
        "item": {
          "id": "17b9e384-99e6-457a-8da6-5251094edb00",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5f0d6028-7170-429f-85b9-9f60facbd514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7320b2-94ea-43c7-96ae-09d86a63662c",
        "cursor": {
          "ref": "12b06606-e61b-4074-a2ac-1fcfbddcfda5",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e4023716-09c8-4187-a99f-9ac221e7442a"
        },
        "item": {
          "id": "2c7320b2-94ea-43c7-96ae-09d86a63662c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6e1c727d-5dfa-42bf-9b7a-ca466b2c6471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b8892f-824f-480e-9983-a9aab3c32522",
        "cursor": {
          "ref": "044ca0d6-f4d8-4a6a-9b4f-b6d015e70481",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "8961c382-99b2-41f9-a0c5-1d0dd05a069e"
        },
        "item": {
          "id": "b2b8892f-824f-480e-9983-a9aab3c32522",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "fd662eb6-186e-4933-b00b-edeb27603121",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b83a870-91c7-47b2-ab87-91378ecfd189",
        "cursor": {
          "ref": "e6fa0432-7eef-48d9-94cb-137feb73322b",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e72fb22e-b3ea-4c5f-ab7d-d32b57b4b305"
        },
        "item": {
          "id": "7b83a870-91c7-47b2-ab87-91378ecfd189",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "62af08c7-d54b-4325-9b6c-741001b54407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad116af3-ce33-416d-8450-990789202424",
        "cursor": {
          "ref": "f7d7bf6b-633e-4a92-8044-c7f35489052e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f3341cd7-4b60-43b4-b8cb-d459edb566d5"
        },
        "item": {
          "id": "ad116af3-ce33-416d-8450-990789202424",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b9ddb38b-40aa-4747-80db-c7f66d496e36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4620e638-d345-4942-9adf-84b0c8d06311",
        "cursor": {
          "ref": "cf05ab06-35d3-4cea-b262-826ffa9b05ec",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "49fcfa27-8425-4e01-a4ca-7bf5be795bcb"
        },
        "item": {
          "id": "4620e638-d345-4942-9adf-84b0c8d06311",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "103d39a0-121c-475d-bafb-97b639efa24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e6e28a-59d5-40f5-b691-4c0b02092f69",
        "cursor": {
          "ref": "944c1d00-1826-465f-9dbb-a3639ffddd87",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "338246e9-7d41-4213-af19-739858e3cc53"
        },
        "item": {
          "id": "a4e6e28a-59d5-40f5-b691-4c0b02092f69",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "b5345e19-a99e-47b9-9d43-e5bd2581f4d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79099ed-fcac-4638-b2cb-e776b0e96d67",
        "cursor": {
          "ref": "0f7675d0-7df1-4c49-88ac-b4fcbb4c7b08",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "29095f76-d973-476c-8380-8381966c75d2"
        },
        "item": {
          "id": "c79099ed-fcac-4638-b2cb-e776b0e96d67",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "05de6d80-0ba8-4fc7-9d55-20389a3c89f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665f42d8-f0ac-496d-8bd0-ce4c8559da48",
        "cursor": {
          "ref": "a08529fc-1eab-49a6-850e-cef2916cebc7",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "f68f6af5-1549-4d3f-808b-b6f2d4a34e93"
        },
        "item": {
          "id": "665f42d8-f0ac-496d-8bd0-ce4c8559da48",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "edb50987-0c91-484f-abb7-2047be74c73d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d3d77f-a20a-48b6-9ce5-30b50617008d",
        "cursor": {
          "ref": "75db7721-e5ce-4d84-b568-95da075a7312",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ead2a3bf-6a29-4e49-8fb4-3d06527954e6"
        },
        "item": {
          "id": "24d3d77f-a20a-48b6-9ce5-30b50617008d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4ab7f602-0515-4292-9228-5a427b67a7f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a96c16-faef-48f4-a854-a5d243c89afb",
        "cursor": {
          "ref": "ecc1d093-0624-49be-9a2c-f4204529ad0d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "b0d0d37b-5c48-49f1-b261-ea46271f15ff"
        },
        "item": {
          "id": "73a96c16-faef-48f4-a854-a5d243c89afb",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3f806085-8bda-4a0d-9867-ebb73e2bd63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a3151c-edba-43ca-8302-5281403f35a7",
        "cursor": {
          "ref": "3e23231a-254c-4db3-bdba-6b27c552057c",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e0638be3-5fce-4776-8a5d-977287016fd9"
        },
        "item": {
          "id": "c6a3151c-edba-43ca-8302-5281403f35a7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "61eca95a-c1e7-4e93-88cf-9845daaa41af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdefa591-8d91-467b-b82f-de1a76b1278c",
        "cursor": {
          "ref": "1a1657fc-e135-4792-87be-361e1d103ebc",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b61c476a-f862-4c69-99d0-7c54c36532d6"
        },
        "item": {
          "id": "fdefa591-8d91-467b-b82f-de1a76b1278c",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d6503725-76d4-40ac-a8e6-dc4421f31e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c0e759-10e9-4cb9-8583-11b00bf1b3fe",
        "cursor": {
          "ref": "d24c15f9-fe6f-4354-9087-c5382c557ebb",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "b9e29c90-3408-4afb-8b08-33616e8264bd"
        },
        "item": {
          "id": "e0c0e759-10e9-4cb9-8583-11b00bf1b3fe",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "34585499-c639-4375-b795-ee5b40b866d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dda101c-7796-435d-8162-ea0e663ec741",
        "cursor": {
          "ref": "ab4cc89d-7b50-4325-bc34-1991a9e71c58",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ea780e00-4c5b-4fda-9569-616fab6272b2"
        },
        "item": {
          "id": "1dda101c-7796-435d-8162-ea0e663ec741",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e3ec30b6-e225-4c72-829f-b9b184246915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee31d62-20a2-4974-8414-4739d148dc51",
        "cursor": {
          "ref": "5ad352ca-527e-4e43-bcb7-536df4a3566e",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9c20f288-e1ff-4001-b039-e505688ac07c"
        },
        "item": {
          "id": "dee31d62-20a2-4974-8414-4739d148dc51",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "59e2601c-3592-42f0-a920-ef1e04383a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c547beac-70bf-4470-87a4-4ccc900a5f1b",
        "cursor": {
          "ref": "144f5bb9-eacb-49aa-813f-6a7ddc80d454",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4bca106c-262b-41d6-9536-476cab7ffc23"
        },
        "item": {
          "id": "c547beac-70bf-4470-87a4-4ccc900a5f1b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "53519b4d-641c-4baf-ad7f-960f43962d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd12ffa-d13a-4980-a108-c1c8df8b6093",
        "cursor": {
          "ref": "3c410904-90b5-421b-8494-46f7523e0188",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "2daa1fd4-3687-4f8c-9c00-030436f0ade4"
        },
        "item": {
          "id": "abd12ffa-d13a-4980-a108-c1c8df8b6093",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b3aaa448-f3a1-44cb-a48d-813a963eec63",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "e7b0a54c-b7c2-4880-bddf-3b8a4d6967ab",
        "cursor": {
          "ref": "f659db65-1766-4c0e-838f-ec49ad4bb6a0",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "10d11c0a-3db7-4d1b-ad58-94fb62a24add"
        },
        "item": {
          "id": "e7b0a54c-b7c2-4880-bddf-3b8a4d6967ab",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "c611a2a0-b778-46dd-891f-40f53d0ab4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "86a9bd95-d11d-421d-832e-41505df24aa8",
        "cursor": {
          "ref": "e19c86e3-5335-4a11-9a7f-f12f6f4213ab",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bb4fbe2c-b940-4512-89d8-3cdf9c0b1585"
        },
        "item": {
          "id": "86a9bd95-d11d-421d-832e-41505df24aa8",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9c334fd5-3a0a-4a6a-a29e-eab7fe63ec2a",
          "status": "Created",
          "code": 201,
          "responseTime": 2445,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31ab8cb-3d9d-4c5d-9f3f-26e455f9bb21",
        "cursor": {
          "ref": "6743f232-ce67-458f-9929-468520aa431c",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "110e7253-679e-42c1-bd98-d6d169745c59"
        },
        "item": {
          "id": "d31ab8cb-3d9d-4c5d-9f3f-26e455f9bb21",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e90a219e-f55c-4559-b7c0-bd416cbabb4a",
          "status": "Created",
          "code": 201,
          "responseTime": 3399,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c5079e-4b85-4595-aacc-f6dccfb890fb",
        "cursor": {
          "ref": "15321b49-267b-412a-afd1-f3612b531c19",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b80ec585-1c34-4f82-9730-f7703a1e13cb"
        },
        "item": {
          "id": "20c5079e-4b85-4595-aacc-f6dccfb890fb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "dc387441-d5ac-4914-9dfe-421ee325244b",
          "status": "Created",
          "code": 201,
          "responseTime": 2380,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0c2cc3-2c44-4bbe-954c-ad9d70f28220",
        "cursor": {
          "ref": "3b23c680-b03b-46ac-99c2-7cb816e44c65",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "bda91811-9de9-4d3e-9ddf-37475f9143ac"
        },
        "item": {
          "id": "ed0c2cc3-2c44-4bbe-954c-ad9d70f28220",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b0e0cfee-1937-46a2-958b-cf19857d08d5",
          "status": "Created",
          "code": 201,
          "responseTime": 2717,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-02-25T00:42:00Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-02-25T00:42:00Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "4152e030-0d3b-4ebe-be03-7de77c9f82ca",
        "cursor": {
          "ref": "e88ce8ad-51bc-4d27-8dd9-8c9609c16100",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "21248af2-26e5-4fc2-a37d-ca1c590dbb9f"
        },
        "item": {
          "id": "4152e030-0d3b-4ebe-be03-7de77c9f82ca",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "5783b489-4232-40e1-946a-e3347b982f4c",
          "status": "Created",
          "code": 201,
          "responseTime": 2922,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d06d4eb-bcee-4084-b652-33b019c9b239",
        "cursor": {
          "ref": "db901609-62bf-47e3-bf12-5860c5438d78",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0a067150-addb-4d7c-a0db-34ed8897ed07"
        },
        "item": {
          "id": "0d06d4eb-bcee-4084-b652-33b019c9b239",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "63c565b8-9856-468f-b662-13678c3e2516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d06d4eb-bcee-4084-b652-33b019c9b239",
        "cursor": {
          "ref": "db901609-62bf-47e3-bf12-5860c5438d78",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0a067150-addb-4d7c-a0db-34ed8897ed07"
        },
        "item": {
          "id": "0d06d4eb-bcee-4084-b652-33b019c9b239",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "63c565b8-9856-468f-b662-13678c3e2516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c2bab36-8880-409c-b1c5-4593ae9f786a",
        "cursor": {
          "ref": "1b499607-0cbd-4c63-9db3-dd280aa182d3",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2c5aa61f-3f5d-4f93-9eed-7fa6cdcc4a66"
        },
        "item": {
          "id": "0c2bab36-8880-409c-b1c5-4593ae9f786a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c560e606-8ff6-40cf-93c8-8e68a3d20434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd017131-99a8-4d81-92db-ec99233b17ba",
        "cursor": {
          "ref": "3a372293-b55d-4114-a273-ca9286fe9a3b",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "6f6d4173-d581-4f24-b9e1-4cfe3a8e72be"
        },
        "item": {
          "id": "fd017131-99a8-4d81-92db-ec99233b17ba",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "82e00025-9db3-4252-8c6e-292c09f8dc09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a6dac0-8eea-44c7-a504-ae285ccb38d2",
        "cursor": {
          "ref": "3e7595e6-2551-4a78-81df-396f140dfacd",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "90b0a8b4-5e4c-465b-a968-bda1cdeaa2b5"
        },
        "item": {
          "id": "f6a6dac0-8eea-44c7-a504-ae285ccb38d2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e60f9ab7-1547-4e70-8804-c9b2d94500cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e34dc8-5996-46f3-9bcf-80dfe0a308ef",
        "cursor": {
          "ref": "8471e65b-a907-4942-8d87-525227f05563",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "da373349-c75d-46c7-b38f-98beae8dfb31"
        },
        "item": {
          "id": "47e34dc8-5996-46f3-9bcf-80dfe0a308ef",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "49eaeda3-aed1-4da8-b24d-175d56a96b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47c20fbc-5819-48d8-9a23-1559200daac3",
        "cursor": {
          "ref": "a2bfaddc-4c57-416e-9dd4-363c1f8a13a8",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "12bc3675-2219-436a-843c-944a0b5a3115"
        },
        "item": {
          "id": "47c20fbc-5819-48d8-9a23-1559200daac3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1e6bdcf0-a8d0-453f-95d2-9aadd7cb909a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "052f4df1-5a46-44a7-b667-2c9a5332aecd",
        "cursor": {
          "ref": "833143c1-7edf-4caa-84fd-f0d7474b6c61",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b0fa6a0f-be86-4103-a041-4e491ba426c1"
        },
        "item": {
          "id": "052f4df1-5a46-44a7-b667-2c9a5332aecd",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "52c86273-f354-4cce-823c-95930c14dd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ac356a-a1c2-4bec-958f-d184fe38c6d5",
        "cursor": {
          "ref": "aac98a54-4538-45d4-9a26-e7c5fcc6115b",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fdfa1773-3dc4-449a-84f3-d3d2b5ff58dc"
        },
        "item": {
          "id": "92ac356a-a1c2-4bec-958f-d184fe38c6d5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9492734a-1330-4eb8-ae46-f5e9da81fa84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31152513-e51f-4f0f-a530-93d7c026c1a7",
        "cursor": {
          "ref": "769be0b6-879b-4443-b196-0f131c98dc64",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "69fd9402-9022-49f8-9c38-ce7063ad2b80"
        },
        "item": {
          "id": "31152513-e51f-4f0f-a530-93d7c026c1a7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f0445930-37f9-443a-b767-858a63fd8740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b25ff9-b7ad-407c-9dbf-2ddb4771d04c",
        "cursor": {
          "ref": "3b7d00ad-7ab7-4be4-a2bf-8daf04810679",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fa43a32c-0935-4e57-8e8b-34d20e8db9f6"
        },
        "item": {
          "id": "d1b25ff9-b7ad-407c-9dbf-2ddb4771d04c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "166ed20a-9c1a-4f8c-92ac-af46253a80b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5332f965-873a-4eda-9a98-dad313f12239",
        "cursor": {
          "ref": "88b6d9d4-a499-49a7-ad3e-5b9c5f54fdd5",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a21c61fc-ee24-4eb1-8abc-0a0e2c371193"
        },
        "item": {
          "id": "5332f965-873a-4eda-9a98-dad313f12239",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "84b2789b-accd-450f-846d-e1718f5ca550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c75d75b-131e-47a2-af01-a758d7d54b14",
        "cursor": {
          "ref": "81425dcc-3740-444d-8e41-de6ebc5722a2",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "82503ef6-50ea-4298-914d-d8f51bf01501"
        },
        "item": {
          "id": "5c75d75b-131e-47a2-af01-a758d7d54b14",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9b618013-8fc4-4894-a276-382ec0fb00e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d555d0ec-d69e-4bfe-a8ab-d664440c18f5",
        "cursor": {
          "ref": "d3b64174-e8f0-4f2b-8f39-43420af02d5c",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5b3d685e-aa0b-4fac-93da-993ab66a7238"
        },
        "item": {
          "id": "d555d0ec-d69e-4bfe-a8ab-d664440c18f5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9f335487-f7c8-4c0c-bf72-3c9075c598d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02d84342-e9fc-4054-9e36-7ca3985d8814",
        "cursor": {
          "ref": "485b1a1d-5c34-41a5-bf2c-16517b02f117",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "84ad8436-b8ef-40df-9844-6b0718e71a6f"
        },
        "item": {
          "id": "02d84342-e9fc-4054-9e36-7ca3985d8814",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "252d3854-a73a-42aa-98d4-b676b871b36d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8797b653-4b2b-4b47-a70e-6df8771300c4",
        "cursor": {
          "ref": "74339a3e-eee4-4104-863c-109175582a90",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2ad3d2f8-7183-4c59-87da-4f2c4065c9bb"
        },
        "item": {
          "id": "8797b653-4b2b-4b47-a70e-6df8771300c4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0a1eca7e-bba3-45f5-b487-37e95b3c0646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "320adf28-e777-479a-8468-b3abd689a32d",
        "cursor": {
          "ref": "16c1b4ac-f397-468c-890f-2b717756c154",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4f7b2866-49df-4549-bd11-e9f191f85fb8"
        },
        "item": {
          "id": "320adf28-e777-479a-8468-b3abd689a32d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7b96087b-872d-4cdc-9cff-b26413eb7f3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f3540e-71ca-468f-8006-cdee9bcc4198",
        "cursor": {
          "ref": "bedc80ba-b888-4190-bad8-689f01c0380d",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7a043e51-98cd-443f-a9fc-bf5633a3d0c7"
        },
        "item": {
          "id": "90f3540e-71ca-468f-8006-cdee9bcc4198",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e79b6e71-6d93-4dfb-92b0-b00962b43a98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3221fcc-aa77-4518-bb7b-08306ec6010c",
        "cursor": {
          "ref": "2e681c2a-f643-45f8-969b-c5715dd1e33c",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "50348b1c-09b5-49aa-9a8e-92f81092716f"
        },
        "item": {
          "id": "e3221fcc-aa77-4518-bb7b-08306ec6010c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b7eccf22-c924-42f1-bcfc-8068d04070c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dadaa1a-b960-46c4-9340-18a13f02280c",
        "cursor": {
          "ref": "eceb2234-0c11-441e-920b-3bb0fb097f30",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "54ba527b-4a3d-4616-ab03-611506eda66b"
        },
        "item": {
          "id": "6dadaa1a-b960-46c4-9340-18a13f02280c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5eb10d67-e8d5-4c59-b3d3-0a28587e298b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4d2f8c-661c-4ef0-8e26-7a9fa63e270a",
        "cursor": {
          "ref": "5cd507e5-5ba3-468a-9024-0b8b904c9dfe",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "29461990-95fa-4eff-941d-a9f0aad6f267"
        },
        "item": {
          "id": "6f4d2f8c-661c-4ef0-8e26-7a9fa63e270a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "54709451-f270-4c37-b89e-3f908cb5dbd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "326eec86-0362-4f33-b8fc-8c4905d2d17d",
        "cursor": {
          "ref": "7e92b7c3-031e-429f-9885-f0845a07c9c6",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3caa5a34-4daf-4bec-8474-0178236c1512"
        },
        "item": {
          "id": "326eec86-0362-4f33-b8fc-8c4905d2d17d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "225fc474-b81e-4dca-8925-477ea883891f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24408ed7-861d-4fc1-80b9-a2ae5b6bdffe",
        "cursor": {
          "ref": "5286c425-63ec-41c8-a15a-6a191be3ae34",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7a5c330d-7159-486d-9a9a-2fca40776fc4"
        },
        "item": {
          "id": "24408ed7-861d-4fc1-80b9-a2ae5b6bdffe",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b9d25b0b-02d9-494b-8072-c88b9648b50f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add32f85-aa2d-427a-b4a4-896173553946",
        "cursor": {
          "ref": "dec1fe2f-a4bd-4893-9601-d67dff86f59c",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3f90bec7-1643-46c4-abfe-45166e0863af"
        },
        "item": {
          "id": "add32f85-aa2d-427a-b4a4-896173553946",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b90bd3da-a076-40cd-9cc2-e218ae380556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a991e5-e7f8-40ea-a84f-656ba45f3470",
        "cursor": {
          "ref": "45921ce0-b3ae-4cb4-afed-e4ac05b6ac17",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a828507a-78db-4b19-adc3-2e884f683932"
        },
        "item": {
          "id": "65a991e5-e7f8-40ea-a84f-656ba45f3470",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6fff422c-886b-42a9-ae46-7fa4b8c11faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee94cda7-b6eb-4635-af20-8c6200a7bdd4",
        "cursor": {
          "ref": "924dc69a-736e-4d84-8440-16229d194c39",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "a281ca9e-5d08-4059-be44-9430d795cb5b"
        },
        "item": {
          "id": "ee94cda7-b6eb-4635-af20-8c6200a7bdd4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3bb8d099-c32b-4e49-b798-bdded91d7b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51023f99-f2b9-46c5-986f-af8910df0601",
        "cursor": {
          "ref": "99638020-77ed-4027-bd99-16a25845bf2c",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bf5d92b2-956f-49a6-bfdd-a1b3997126fd"
        },
        "item": {
          "id": "51023f99-f2b9-46c5-986f-af8910df0601",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8b912fbb-3699-4c9d-b5dc-5ed14cce6e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b768b9b-76f3-43fc-9971-8cab207c2419",
        "cursor": {
          "ref": "6d938591-96e9-49e3-a82d-04e48efe49fe",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1952a0b5-1556-4eb3-b5a5-02723b406679"
        },
        "item": {
          "id": "7b768b9b-76f3-43fc-9971-8cab207c2419",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "dba98bba-bb8a-4123-8b6d-c9c2246d77e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbbfdb5-2a90-4414-a257-74875a6e3e5f",
        "cursor": {
          "ref": "7e6afe4e-8d22-4a63-bd5e-1fa728e65aa4",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "4be032cb-5001-41d4-868d-96e56d46db8b"
        },
        "item": {
          "id": "7dbbfdb5-2a90-4414-a257-74875a6e3e5f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6b1dc43a-3537-434d-a84a-193a0561ed2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216344aa-5c17-4a85-bc29-55732a035d22",
        "cursor": {
          "ref": "3a3830ae-e0d4-4b57-a367-d6f4bfc09bcd",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3e4827f5-2faf-4778-b387-64a1d4c04312"
        },
        "item": {
          "id": "216344aa-5c17-4a85-bc29-55732a035d22",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ec3e0aee-ccb8-4411-9eb5-fa245f30c201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a70d19-5f37-4f76-bc92-4569e4c7a467",
        "cursor": {
          "ref": "3321d6bf-1587-4330-8ec6-d336145c7ba6",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "429131f7-37bd-4919-9717-0892390ee950"
        },
        "item": {
          "id": "84a70d19-5f37-4f76-bc92-4569e4c7a467",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "99cba565-814d-40b3-8c2f-82d25a97289a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdca72b-a92d-4ded-ba45-50fe68092735",
        "cursor": {
          "ref": "ec20cfb0-519c-4e18-8654-fbd7c1fc8010",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a9a8f7d0-67f8-451a-86f1-b05a4c462508"
        },
        "item": {
          "id": "9bdca72b-a92d-4ded-ba45-50fe68092735",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f428ee59-7606-4fdf-8c7d-15f3cf94cdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d2d276-972d-47d8-a57c-620e7a344832",
        "cursor": {
          "ref": "4454b874-5f01-46cf-907b-7d1595e090a6",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8b2c798a-c3c2-4022-82d6-599e980620fd"
        },
        "item": {
          "id": "38d2d276-972d-47d8-a57c-620e7a344832",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "15619117-43d8-467e-b8b1-f28de0732726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e43e8970-1b8c-415b-a4f7-799b29d66230",
        "cursor": {
          "ref": "748b37ff-08cf-4a92-873f-c0c3c3ffe564",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b38adcce-eb01-493b-b991-6b30610193be"
        },
        "item": {
          "id": "e43e8970-1b8c-415b-a4f7-799b29d66230",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0ca27de4-044a-45a8-87d4-279b5b390423",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "90626758-de53-4515-945b-8117624fe44b",
        "cursor": {
          "ref": "d9a18a7f-10c4-4fb6-a5aa-4cf523be10f5",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "23107e02-c002-4f02-abb8-45b00ca98a2f"
        },
        "item": {
          "id": "90626758-de53-4515-945b-8117624fe44b",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "475df113-eff2-4bfd-a195-5e0f19d8a58e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "373b2bca-fb00-4a94-85e6-3246a6f1cba5",
        "cursor": {
          "ref": "3cb5fd4d-5192-44dd-b11c-66b982a6541d",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1f0f0d9f-a7d2-4469-a0b6-c550f0424f2e"
        },
        "item": {
          "id": "373b2bca-fb00-4a94-85e6-3246a6f1cba5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "85a4e2de-550c-4e22-bada-6bb91ed8947e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373b2bca-fb00-4a94-85e6-3246a6f1cba5",
        "cursor": {
          "ref": "3cb5fd4d-5192-44dd-b11c-66b982a6541d",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1f0f0d9f-a7d2-4469-a0b6-c550f0424f2e"
        },
        "item": {
          "id": "373b2bca-fb00-4a94-85e6-3246a6f1cba5",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "85a4e2de-550c-4e22-bada-6bb91ed8947e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712c85c6-bbca-473c-9f12-a7311aafaa67",
        "cursor": {
          "ref": "5d9b393d-98e4-4e91-81e2-fbad42a6fa4e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "58717ae3-6aec-4ae9-8fa6-b1f8fb256598"
        },
        "item": {
          "id": "712c85c6-bbca-473c-9f12-a7311aafaa67",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "7abdc952-b4c7-4758-a6d6-15c0fa0db532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90cbf437-a0a1-4e19-8865-4329958b5629",
        "cursor": {
          "ref": "791efaf0-e811-4fa6-91ef-3bfcf2c9cd4a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "acb73208-a8ad-4c76-b83a-a6802fa18133"
        },
        "item": {
          "id": "90cbf437-a0a1-4e19-8865-4329958b5629",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "878736e1-eab0-4c9b-b634-515b80079131",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b416647-e7c6-425f-9325-206b2decb8a5",
        "cursor": {
          "ref": "fbd1d4be-69f2-418d-b200-3eb7fbf1f46a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "383bbd83-a32a-4137-a58b-3677f45b85d7"
        },
        "item": {
          "id": "4b416647-e7c6-425f-9325-206b2decb8a5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b09e5a5f-d15d-43e6-889e-0a531b782ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e208f4-27f1-4b84-92f1-1f0dc9de4924",
        "cursor": {
          "ref": "e9a57c65-615c-4d53-a71e-274f706f014a",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "60acaa87-2fd7-424a-a85d-a8cdd41ef247"
        },
        "item": {
          "id": "a7e208f4-27f1-4b84-92f1-1f0dc9de4924",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a34afcfd-0f20-4124-9939-424cdb1a0b2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67517bae-7b19-44ee-b185-a19ab23ee4d9",
        "cursor": {
          "ref": "44851a7e-e185-48e6-aadd-ad3edeef2516",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "45edc974-0b0c-4e5c-bc6b-fe9b7209702b"
        },
        "item": {
          "id": "67517bae-7b19-44ee-b185-a19ab23ee4d9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "69184492-a10c-4121-9a4b-33f38b312bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77532bea-0232-4d6e-ba52-907a215b4791",
        "cursor": {
          "ref": "131c63e7-bce0-4e18-b55f-eadd955e3933",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bc92d4e5-0ebf-4a56-8a6b-bdf29296c626"
        },
        "item": {
          "id": "77532bea-0232-4d6e-ba52-907a215b4791",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "7f49ef8d-8a22-4d25-8485-5742639b3eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b036450b-db1b-4f9f-8f47-e0b6e4e8ee2e",
        "cursor": {
          "ref": "b271c9ed-21fa-4b32-b9e2-a17c7deff350",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "48245de6-5b25-451f-8924-45a002ac20e4"
        },
        "item": {
          "id": "b036450b-db1b-4f9f-8f47-e0b6e4e8ee2e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "16391e56-83e0-4878-be9b-636c388ef428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802df09f-82f1-42c2-9e2b-3218644227a4",
        "cursor": {
          "ref": "8c284276-6825-4d36-a228-ac4c8a2bde5a",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4db50258-e368-476c-b800-74d085d813d3"
        },
        "item": {
          "id": "802df09f-82f1-42c2-9e2b-3218644227a4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "3ef8b0e6-f5ba-494a-b899-247963b1350c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaefc494-fe50-4cd7-8b7f-1d492743c890",
        "cursor": {
          "ref": "d6b0fd67-1b86-4a67-8f40-4bf82da96d5d",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9782c6a0-58e6-4b9b-9847-db9eccc9b301"
        },
        "item": {
          "id": "eaefc494-fe50-4cd7-8b7f-1d492743c890",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e29f9938-0354-4272-bcc1-fd76371f17df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe863a1-7ca1-4790-8689-e1b8a202395b",
        "cursor": {
          "ref": "05a4a0f6-6c71-4969-b84b-179d080676b3",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4ed4c4f4-a80b-4945-a2fb-a99cb0d223de"
        },
        "item": {
          "id": "8fe863a1-7ca1-4790-8689-e1b8a202395b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f41378e6-9f32-4049-b78e-26247792fc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4182a54b-7010-459a-8e06-9902c29de20d",
        "cursor": {
          "ref": "dbd8d32a-35a9-446b-85aa-da905c86927b",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a29297d1-0ef6-4375-9805-d0d92169eb5a"
        },
        "item": {
          "id": "4182a54b-7010-459a-8e06-9902c29de20d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6f9daddf-c70d-45cf-bce8-cadd1281987f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebffac9-6dbf-4454-8ba7-4c5ae2e0d5fc",
        "cursor": {
          "ref": "922fe5a5-6209-4414-807c-68acd3e690b7",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ed8f6148-f075-495d-9d46-801cdee38261"
        },
        "item": {
          "id": "cebffac9-6dbf-4454-8ba7-4c5ae2e0d5fc",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "4dd5f604-af56-48e9-90f4-c30a7499f625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b179edc2-ea52-48e7-904a-b2cba32b7c5a",
        "cursor": {
          "ref": "d55f5e1b-4718-4ee3-94fc-9a16be7f96ef",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4acc7487-10f0-494d-9b73-cb4d0a152580"
        },
        "item": {
          "id": "b179edc2-ea52-48e7-904a-b2cba32b7c5a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "14dce5e8-c24b-4a6a-a37f-01bff18570a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8617c46f-aefe-46f7-b269-2bb8d3f0f55b",
        "cursor": {
          "ref": "0d08c3c3-a7dc-4d13-bc91-a9dcea36bf51",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0d226d19-2000-41f7-b7cc-9d6117bc700b"
        },
        "item": {
          "id": "8617c46f-aefe-46f7-b269-2bb8d3f0f55b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "eddb6d5d-cab4-42ac-b5e4-a07ade14eace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8f403af-526a-4e38-8e10-f3105a2b102b",
        "cursor": {
          "ref": "ea9ece95-258a-4d06-82c9-6281ef764e54",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1ca81c8f-44e0-47a6-a8a7-59057a2c2cd6"
        },
        "item": {
          "id": "e8f403af-526a-4e38-8e10-f3105a2b102b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "92a2ed8a-4312-486f-8053-0a59357305da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecda439b-c38d-4edf-9682-0164ba046442",
        "cursor": {
          "ref": "d2c9d7d8-7bac-4110-9609-703d3d7cce59",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c94e1a80-7bb3-431a-a12a-dc42531b3aea"
        },
        "item": {
          "id": "ecda439b-c38d-4edf-9682-0164ba046442",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3238a857-4c56-4861-869a-3f0138c4bf43",
          "status": "OK",
          "code": 200,
          "responseTime": 235,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "663484ce-0f9d-4ea9-b6b5-3f289e8ac420",
        "cursor": {
          "ref": "cf581f5c-19ea-4c47-92ce-ebc178104cd8",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "72abe04d-2381-4fe3-8787-71bf98a53a42"
        },
        "item": {
          "id": "663484ce-0f9d-4ea9-b6b5-3f289e8ac420",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "feaf2080-dc32-472a-94e0-8ff2dc0e6c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a131b1d5-1b26-4ad6-8bd9-d21a518254ff",
        "cursor": {
          "ref": "dc7cffee-7383-4aff-a49f-0e2d2345d99e",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0dbae7ae-20a2-4017-af9b-c31fc89982a1"
        },
        "item": {
          "id": "a131b1d5-1b26-4ad6-8bd9-d21a518254ff",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3118e649-0fa6-4c7f-a243-05dd8c630646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393c2550-6ae5-442c-9234-1f81877316a5",
        "cursor": {
          "ref": "2d84805a-f122-464f-9a76-754c4e037d1b",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fd51d6fd-fc9d-41cb-ba05-fb54a23d899e"
        },
        "item": {
          "id": "393c2550-6ae5-442c-9234-1f81877316a5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "49ac8aff-75de-4ff2-8ba0-759e792d08ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9113da-9a7a-419b-b86a-70d73afe157f",
        "cursor": {
          "ref": "7af56526-d196-4ba1-a412-6cc08789b4b2",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "aab1e1a7-f974-4e6b-8e21-e33275ec7da4"
        },
        "item": {
          "id": "db9113da-9a7a-419b-b86a-70d73afe157f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "69eb92ab-4a83-4a76-906f-c5d22e27100f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbedeb30-be01-44aa-8db6-0aa48910e689",
        "cursor": {
          "ref": "f24b3a29-8c73-4375-a188-f4a081602d3c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f67f2601-51e9-4ea9-bc26-aefeedacbc6e"
        },
        "item": {
          "id": "fbedeb30-be01-44aa-8db6-0aa48910e689",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f73b2258-7e2a-47a5-a331-e663fd0df9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed943c39-2ce3-4488-9074-15ea44d64710",
        "cursor": {
          "ref": "fd1e1247-1e21-4892-b7b9-db4fd8ef5c97",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "f82f6c60-3bc4-4447-a2a6-2fcd0f539037"
        },
        "item": {
          "id": "ed943c39-2ce3-4488-9074-15ea44d64710",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ca7766dd-89a2-49e9-bfb4-950e94e4889c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eab93f9-6a3b-42b9-b50f-ced9105f6d60",
        "cursor": {
          "ref": "4999acdc-2b61-4ec8-883c-cbcc827939c1",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "215fe0cf-67a3-45eb-8cbd-8a0fcb68008d"
        },
        "item": {
          "id": "1eab93f9-6a3b-42b9-b50f-ced9105f6d60",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5fe656aa-7649-4db9-9744-ea8202a3ba24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de051fc-ee35-42e3-b463-77340b213f99",
        "cursor": {
          "ref": "ed89031f-b8dd-4a24-baa2-7a8430ff3fcf",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "cf245f1a-ae5e-4463-9894-2318d8ce020b"
        },
        "item": {
          "id": "2de051fc-ee35-42e3-b463-77340b213f99",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cb032c49-5673-4b1d-886a-8ce7f4f0a2bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f3e481-6cde-4ed9-968c-1e3d653a3516",
        "cursor": {
          "ref": "0da73e15-1229-4306-a6ea-c61a87ac4ad4",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "11c7a16e-faa4-4b7e-ab90-05dd673102c2"
        },
        "item": {
          "id": "18f3e481-6cde-4ed9-968c-1e3d653a3516",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "eb70973e-c651-416a-96f8-810d71f91029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b226743-e554-47b4-8a18-e3c0b1781f4c",
        "cursor": {
          "ref": "036dc410-7de3-487e-8441-fd5ab78d174b",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "59467b2f-8332-4689-a259-1446c8efa7b2"
        },
        "item": {
          "id": "1b226743-e554-47b4-8a18-e3c0b1781f4c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b301cbf4-dfe1-4400-8731-f80e85252b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705e5c12-514b-481d-90f8-ca03b3edecc4",
        "cursor": {
          "ref": "e2dd9112-03e2-43ba-8ae2-61dc1c607197",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "81c091c9-1c6e-4515-95a2-3eb45b259201"
        },
        "item": {
          "id": "705e5c12-514b-481d-90f8-ca03b3edecc4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "03f94881-6ac4-4e14-ab2b-93be0183e2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117fecf8-48ea-4589-8d2a-34a2246a3788",
        "cursor": {
          "ref": "2ea6b3e2-4791-41b0-9c36-b86189ad5971",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0d5067c3-3a1b-45ed-824f-388537a6a601"
        },
        "item": {
          "id": "117fecf8-48ea-4589-8d2a-34a2246a3788",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e2dc48f2-677c-49ca-825f-90531452207d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7a49928-916c-40c4-9fb9-4b7bce96d0ff",
        "cursor": {
          "ref": "b0939905-d553-4f70-9d74-ff5cb1770f68",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c189aef9-775b-451b-906b-8b1a0b353200"
        },
        "item": {
          "id": "f7a49928-916c-40c4-9fb9-4b7bce96d0ff",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9a498b00-d460-4224-8e4a-0fc616201362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6581028-2783-4f0a-bade-18678de462e8",
        "cursor": {
          "ref": "b9f8a624-af9a-4611-943c-288fdc8dc88c",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "25ff3dfc-9476-461f-b0f2-d168900609ad"
        },
        "item": {
          "id": "f6581028-2783-4f0a-bade-18678de462e8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ff1a8ac4-6218-4f73-b95f-f95c9d257113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b285a7e4-9146-4505-870c-bc235868ef8a",
        "cursor": {
          "ref": "d4d249d5-6ecf-4a3a-a989-f9742312795e",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ab9e6fac-58d4-4d37-8089-889430144357"
        },
        "item": {
          "id": "b285a7e4-9146-4505-870c-bc235868ef8a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e006f8ce-a8f8-4f8b-bc8c-5c91d54756a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454d9c81-082d-4058-8485-aaa3b7ccd327",
        "cursor": {
          "ref": "324e1272-7a4b-4e26-8bca-737f14d0b244",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "ba11da65-5b35-43db-b975-00cd4cfe6250"
        },
        "item": {
          "id": "454d9c81-082d-4058-8485-aaa3b7ccd327",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "63303115-2288-4dcc-9895-4e48bdc99f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c0350c-c24c-4a50-8990-f2a498626b2c",
        "cursor": {
          "ref": "a34d2260-9205-4328-a93b-32b14783f5a7",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a64ed502-c71b-4ed6-97e7-17c1f13049b5"
        },
        "item": {
          "id": "68c0350c-c24c-4a50-8990-f2a498626b2c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d90c9425-5a45-4f2b-8086-5ce55b094b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f812c39-e111-43e8-9514-891cb7444ec0",
        "cursor": {
          "ref": "6fa4fbee-50c7-4b5b-b327-bad3ab2c9952",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "21774997-2d6a-4c3f-bb54-6a2c278bb3b7"
        },
        "item": {
          "id": "8f812c39-e111-43e8-9514-891cb7444ec0",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "820456b6-4136-41d1-b90f-154776916030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4770f5-ed0e-4cb3-a22b-495080bde9f6",
        "cursor": {
          "ref": "7da52e9e-40f6-46a8-9f07-a33a7014614e",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bb9a464b-ac95-4ff7-a23b-b1922996d37d"
        },
        "item": {
          "id": "8b4770f5-ed0e-4cb3-a22b-495080bde9f6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dcb5cd8c-5dec-4433-83b3-43c398893da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a383d85-4d7f-43d5-9b40-907f1d2a8aaa",
        "cursor": {
          "ref": "bc477f30-387f-437d-ad28-782f2da33f52",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "57ae7e4a-a960-4e89-8a08-5c22abd517f4"
        },
        "item": {
          "id": "6a383d85-4d7f-43d5-9b40-907f1d2a8aaa",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cd371bd1-607e-4712-a556-699f979d4a27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6eb1a6-e2e1-4c90-9b80-856f375c172f",
        "cursor": {
          "ref": "9e3a5c18-f88a-47c3-b3b3-13d0f8193b52",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0fdae658-6b8a-4dfa-8861-b735038ed0d8"
        },
        "item": {
          "id": "5b6eb1a6-e2e1-4c90-9b80-856f375c172f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "aeeb9449-ef68-4a85-b550-11bfb7e8961a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8561fc-a3cb-40f8-a056-bc602fc97e0b",
        "cursor": {
          "ref": "aac8f4c7-637d-4b5f-a55e-26f7309a16a9",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "0f101439-0b79-48f3-8c08-6559f2bc10fd"
        },
        "item": {
          "id": "9a8561fc-a3cb-40f8-a056-bc602fc97e0b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d16244f9-94e7-4c8e-81d3-551a4314090f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a5760a-8314-4358-979b-f7f365f432ba",
        "cursor": {
          "ref": "3a24ac66-1e7c-4acf-9d50-6d4f57029e02",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8fd9257c-bf00-4509-9592-71ebdbe9db9c"
        },
        "item": {
          "id": "37a5760a-8314-4358-979b-f7f365f432ba",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a246e1ed-c92e-4b92-b5b9-17b702254bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162db0a2-31e2-4704-b4a2-2c09d409daef",
        "cursor": {
          "ref": "32e4185a-4c19-4078-950c-ef70959956df",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "becc1051-c33d-4e0c-a64d-843feaba86c5"
        },
        "item": {
          "id": "162db0a2-31e2-4704-b4a2-2c09d409daef",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7493fdda-9e35-40d0-8a5b-d3f29a20b983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2613b98d-ae16-44c1-acaf-d3cd6138462f",
        "cursor": {
          "ref": "0d783386-d651-435f-952b-7faf538ec1b9",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f17bf15d-3295-433d-b2cb-7089bfaadacb"
        },
        "item": {
          "id": "2613b98d-ae16-44c1-acaf-d3cd6138462f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5e32cae2-3838-4290-baf6-39047600945b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32091d3-9638-41a1-80fc-3fb0c0af7673",
        "cursor": {
          "ref": "08e55a13-6884-41fe-9d27-8787c51cddcb",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "7e21e937-a205-4af1-8a0d-ed424866683e"
        },
        "item": {
          "id": "a32091d3-9638-41a1-80fc-3fb0c0af7673",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "eec1ce10-7a57-4dfa-9c44-cae347f07292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a2d565-3c77-4a69-84b1-236bd082a4f9",
        "cursor": {
          "ref": "09e4ce1f-3906-494d-886a-1297e95aafbf",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f318193e-bfb4-43e4-92be-6675073dc254"
        },
        "item": {
          "id": "82a2d565-3c77-4a69-84b1-236bd082a4f9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ed40fca6-1f17-472f-bd02-deec5125515f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1075061a-22f1-4b2a-9dd1-c533debe61fc",
        "cursor": {
          "ref": "0839cefe-6009-4445-b941-1922b2ad6886",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b77b74a6-13a1-40fd-9025-7ac22956bd26"
        },
        "item": {
          "id": "1075061a-22f1-4b2a-9dd1-c533debe61fc",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "130f2057-d733-4807-9d47-9a67a89b55ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36da55f3-0a2a-4379-b89b-6c858ab8f2a0",
        "cursor": {
          "ref": "e03d2c13-3410-4c47-a37f-8078d417ca30",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "dca95bbd-6362-4b00-b37a-7832f91da18c"
        },
        "item": {
          "id": "36da55f3-0a2a-4379-b89b-6c858ab8f2a0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ed8a8151-fa7f-48c3-9090-a4044aeb7f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dcef054-c158-4b98-914e-16bb87758793",
        "cursor": {
          "ref": "4bafc626-37e9-433c-915b-8803fe0361ed",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ab6026c3-615f-42ff-a0b8-0ab066057bc2"
        },
        "item": {
          "id": "3dcef054-c158-4b98-914e-16bb87758793",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9976b677-a526-4d52-bce5-191897d5e16b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad4babb-a95f-40c6-a189-e85632c51e3b",
        "cursor": {
          "ref": "23b8f0b1-00a6-4ce0-a4e0-91e4df4eed54",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d2176ba7-712d-4ed5-939e-ddbd46b9f588"
        },
        "item": {
          "id": "cad4babb-a95f-40c6-a189-e85632c51e3b",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "90ce9ffd-0802-4e43-b0bb-d1141732e126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e5aff5-5d0c-4df0-9317-ead1c5f89db2",
        "cursor": {
          "ref": "af6c74fd-50bc-4c0f-a8cf-bc694949340f",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b25bc065-1690-4dc0-b042-bb595fb4ff20"
        },
        "item": {
          "id": "a9e5aff5-5d0c-4df0-9317-ead1c5f89db2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "31c784de-185e-4fcf-a226-0227fd822b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265087f3-7672-4515-9180-3a8c4261bb3a",
        "cursor": {
          "ref": "dc490e49-7e32-40de-a4fc-9da9087b221e",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "96ad4f69-6dfc-4424-ab64-42066f38321f"
        },
        "item": {
          "id": "265087f3-7672-4515-9180-3a8c4261bb3a",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "970024bf-5661-4d78-b0e8-460d45e613c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f33699-1777-4ebd-9aaf-f7a7d09ae184",
        "cursor": {
          "ref": "9b8932c4-313d-4e65-a425-8baa42dd01de",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4f252906-fe86-4bab-8fb5-8d3a79e34a2b"
        },
        "item": {
          "id": "33f33699-1777-4ebd-9aaf-f7a7d09ae184",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f88963fa-eaaf-4873-8c2f-af595e818519",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "704ed9ee-5d2b-4716-83fb-ffacb766e2b4",
        "cursor": {
          "ref": "c270c2f7-972a-499b-835d-4d2a43707935",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3f78ef08-27f4-4cc4-8c75-e616c1128a18"
        },
        "item": {
          "id": "704ed9ee-5d2b-4716-83fb-ffacb766e2b4",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "55ad6ebc-8331-49fe-8b7f-59f3dd8fb80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73869baf-3bf6-4a2c-829e-ab868150481d",
        "cursor": {
          "ref": "4f886008-0c5f-48a5-851e-1665d143542f",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "841cfd07-9ca1-48e8-8a9d-1dcc85789870"
        },
        "item": {
          "id": "73869baf-3bf6-4a2c-829e-ab868150481d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "0db42308-4419-4b84-a178-923d77df0e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc08eec6-e203-4b9f-9237-7419fedcef32",
        "cursor": {
          "ref": "2856f604-e1a6-46f4-bdb6-be4ea74ca7cc",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "390c44ea-3518-45ad-b631-8959de8ae05f"
        },
        "item": {
          "id": "fc08eec6-e203-4b9f-9237-7419fedcef32",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fdb48b47-641c-42ee-92fd-f5d97a09792a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08961e61-a607-48ca-a992-0205102b0874",
        "cursor": {
          "ref": "031dacbe-5f34-431d-ab87-c2843a159279",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "17afb192-f97e-46e6-ad87-81f9525ad1b9"
        },
        "item": {
          "id": "08961e61-a607-48ca-a992-0205102b0874",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "85e589dd-5462-4c60-8ed3-e3e3aeb0a556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8f8a87d-6471-4f0b-ac60-67288632baf2",
        "cursor": {
          "ref": "a4775b22-a0e0-4f0a-9538-12790a7e7585",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "397fe9b5-f177-4e18-b58d-f4147a364432"
        },
        "item": {
          "id": "f8f8a87d-6471-4f0b-ac60-67288632baf2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "853d7a98-f490-4da0-93d9-21c0bfa2630f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d29e362-1083-4b72-a737-3d6a67d035fa",
        "cursor": {
          "ref": "9a471775-fcf3-4d9b-91fe-ecfffe820776",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e741fc0d-eea9-4ead-a36c-ab26f881aa81"
        },
        "item": {
          "id": "6d29e362-1083-4b72-a737-3d6a67d035fa",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8520cab6-a188-403a-b64c-a246dfca643b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bedf91-57f4-4c40-aae7-d4a6ef02dad5",
        "cursor": {
          "ref": "7b8d49c9-c918-4c40-9828-338066d1028e",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "8cc93cd6-0501-48ad-bc0f-786fee5b8d98"
        },
        "item": {
          "id": "51bedf91-57f4-4c40-aae7-d4a6ef02dad5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "25503cd7-5ea2-4715-b55c-60937664b868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b84f77-3f63-4c51-8488-6f48543c9476",
        "cursor": {
          "ref": "e621b97f-d02c-4940-b30c-7b639e762ffe",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5c311f53-be9c-42ee-a969-9bcdffe2ce42"
        },
        "item": {
          "id": "89b84f77-3f63-4c51-8488-6f48543c9476",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cd348a99-da54-4f07-a734-6a01a94e4442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b28dd72a-9378-42ab-bf96-8b0f80d60b55",
        "cursor": {
          "ref": "2daea0f9-2f1b-4a1b-a708-463c1842fbc7",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b799e819-ba66-47c3-8b2f-9100d898164d"
        },
        "item": {
          "id": "b28dd72a-9378-42ab-bf96-8b0f80d60b55",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c98c231d-695f-43b3-a149-24b24a20f17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd816585-f101-4330-ada5-d40464807e85",
        "cursor": {
          "ref": "393a9052-d27d-451b-be3c-4c2325856b52",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c3265dbb-9fb2-4877-8e25-44746863c4bb"
        },
        "item": {
          "id": "fd816585-f101-4330-ada5-d40464807e85",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3f573ce5-6366-45ac-a13f-a310b225b402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ba4655-f975-4fde-ada0-a9d84c6b9169",
        "cursor": {
          "ref": "41a77351-c6af-4a45-b3ef-3f7f6e5a6475",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "352e84e5-21d7-4e77-874c-5fe67b8b955d"
        },
        "item": {
          "id": "58ba4655-f975-4fde-ada0-a9d84c6b9169",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9362d0b1-7f06-45fa-9f0d-fd6fc6c6b42d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5ab9820-da4b-4b71-8d9b-718e63e66805",
        "cursor": {
          "ref": "72914469-0f98-45d5-be05-724047ef3d51",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d3ff72bc-44a4-4201-83af-b96d09354860"
        },
        "item": {
          "id": "c5ab9820-da4b-4b71-8d9b-718e63e66805",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "eae33950-7ca4-4fe4-9902-99737e3ab171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6dba89b-4912-4440-8b2c-c2873a39ed1d",
        "cursor": {
          "ref": "92dabc95-037a-4331-b584-1fa8046bf6b4",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7940ed65-33fc-49dd-9714-5610c4530920"
        },
        "item": {
          "id": "a6dba89b-4912-4440-8b2c-c2873a39ed1d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "73e56440-2e33-43a3-95ea-fbb8572f9b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6887c171-039f-42c4-952d-64272fef988a",
        "cursor": {
          "ref": "93835825-1405-46aa-86dc-895347f3a84d",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "9af529b9-da7d-45fc-a191-0cbd2d00ec57"
        },
        "item": {
          "id": "6887c171-039f-42c4-952d-64272fef988a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "236cd11b-c005-4c3f-8a0d-8955f46fd6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819ac561-525a-4bba-9813-f9dc5c49720e",
        "cursor": {
          "ref": "01ab0597-d30d-431e-baee-76ec028128dd",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "79485f45-f5a7-426c-85f0-fac9874a88b0"
        },
        "item": {
          "id": "819ac561-525a-4bba-9813-f9dc5c49720e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4c545fe1-3881-44d2-ae7d-35a9c7b252fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c2edabe-7439-4db4-aea6-d014796aec27",
        "cursor": {
          "ref": "0009a033-aeb8-43d5-af95-c1f6f571f1d7",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8046dcdb-9f60-4118-8f04-5ff259092f7b"
        },
        "item": {
          "id": "1c2edabe-7439-4db4-aea6-d014796aec27",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "71193010-b36b-44ca-a142-45d2572150d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8663cb28-cfbb-4f35-be2e-7a1c891d0e06",
        "cursor": {
          "ref": "c6b411c7-cf59-411a-a1ff-5d3e56d95a21",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7f46abbb-ac8e-4bf4-8e93-645907301bec"
        },
        "item": {
          "id": "8663cb28-cfbb-4f35-be2e-7a1c891d0e06",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "296644bf-05d1-4812-bd11-3d4a0583fad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d671083d-7801-4df8-be04-19e0b280cfa3",
        "cursor": {
          "ref": "87b2928e-9ec2-4246-871a-5e4b0884ce58",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8030741d-88e6-4523-9302-c103d70a2960"
        },
        "item": {
          "id": "d671083d-7801-4df8-be04-19e0b280cfa3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "348cfb8a-0428-415c-8b55-57e59b67c7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae6dc29-6536-49ae-bafc-a4e7b238737f",
        "cursor": {
          "ref": "6f762d4f-6fd9-40e2-8cdc-16de80dbbe50",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8bc6c8f8-3438-4583-9050-45923a3e5f0b"
        },
        "item": {
          "id": "bae6dc29-6536-49ae-bafc-a4e7b238737f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9f4899e3-1b99-444d-8a69-8883e9b2ee29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c3b83f-3912-4fb4-93c1-a49ca546cc93",
        "cursor": {
          "ref": "ca043a6b-7aa8-4b5d-b2f3-657cf199a9d9",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7ccfe3b0-66b3-492c-9399-c68a9a96d0ef"
        },
        "item": {
          "id": "01c3b83f-3912-4fb4-93c1-a49ca546cc93",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "14e42f02-dcbf-4964-8bcd-7a01a60ca809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db82195-e9a7-40bc-bc15-217d9401ff40",
        "cursor": {
          "ref": "1d78a892-d9f3-48ea-b984-61c9dc9079a2",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dd2dfe14-6557-4e24-b93b-100b5657ddcd"
        },
        "item": {
          "id": "4db82195-e9a7-40bc-bc15-217d9401ff40",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0feef76a-014d-4546-9748-4c86a082cc0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f07081f-65eb-4b65-8644-2903776788e9",
        "cursor": {
          "ref": "82112e92-9d94-46b7-834f-aec5d3fc3780",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3284b1ec-3fe8-4213-a86d-04e40188c059"
        },
        "item": {
          "id": "3f07081f-65eb-4b65-8644-2903776788e9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "14705d8a-85ee-422a-a917-085f2e96ae7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99978e42-6ce1-4d70-b37f-7706efe74686",
        "cursor": {
          "ref": "5c31e0aa-afbf-4974-bed8-9fb615d94262",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1386381d-a036-4266-ad96-6b560847bdf0"
        },
        "item": {
          "id": "99978e42-6ce1-4d70-b37f-7706efe74686",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "a9b8dbf5-6864-4fd9-93ff-4398ee9e03fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08d51045-ccbc-405d-a154-9deef196f0e0",
        "cursor": {
          "ref": "df0ade61-46a0-4b81-b88c-f2751c5def8d",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "de0a3eaf-5b01-4d67-93a0-a63ad6be1080"
        },
        "item": {
          "id": "08d51045-ccbc-405d-a154-9deef196f0e0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "ace4e632-d9bf-4ab1-8f29-1032bcbf433c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bfd2cb5-df82-42d7-a8a4-07881b5d789b",
        "cursor": {
          "ref": "4dc4cb85-e28e-459d-82a7-7c06b3aeac20",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b9ead980-7539-40b6-854b-ecff1feaf4f3"
        },
        "item": {
          "id": "4bfd2cb5-df82-42d7-a8a4-07881b5d789b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e8f34d3d-99ab-45f9-8dc3-22643d7cf6ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f225c6e1-e811-4346-9d03-91b6ccd85bda",
        "cursor": {
          "ref": "4d67e319-fc23-4224-beb1-de0568e8af68",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3b6d0b16-5fac-4add-9cf8-47ae935a69c9"
        },
        "item": {
          "id": "f225c6e1-e811-4346-9d03-91b6ccd85bda",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f3b670e8-e4e6-4d74-b68c-29945d10e87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7a54621-9fd7-480d-a512-3f47afef49b5",
        "cursor": {
          "ref": "d46d8944-147f-4597-8df7-df77840c65da",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2cfd7eb6-9775-4416-bc4a-215789aed26d"
        },
        "item": {
          "id": "d7a54621-9fd7-480d-a512-3f47afef49b5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0ef5fac8-7531-4da1-9303-4f25e4748571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ac9920-e549-4b2f-871c-cd69a6b10efa",
        "cursor": {
          "ref": "ab229ddc-242d-4549-9615-56fa44958d74",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a178f5ca-4a42-473c-b7f6-76f81285929e"
        },
        "item": {
          "id": "d8ac9920-e549-4b2f-871c-cd69a6b10efa",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "47d1687b-0314-49b8-8279-408fe4d55f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb39751-6c62-45b5-84c9-770b21384e83",
        "cursor": {
          "ref": "c1b77501-c302-4119-a28c-e7546f607d02",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f40d7700-5357-40b0-b789-8ce021ccaa1b"
        },
        "item": {
          "id": "9bb39751-6c62-45b5-84c9-770b21384e83",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "09fb4790-f176-4205-9fc3-bc5531852bff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504ca79a-60b8-47e0-bfff-dec9b3186b39",
        "cursor": {
          "ref": "3afbffc3-cdc2-47a7-ada4-3764c53f30b6",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2342919a-057f-4c82-8fd6-21b1c80af857"
        },
        "item": {
          "id": "504ca79a-60b8-47e0-bfff-dec9b3186b39",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2fca5439-bc72-40e8-aab5-26ed3f2c5f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16a94ea-1f17-4b72-bab0-de6b13cee7f7",
        "cursor": {
          "ref": "383ed52d-de2a-40ac-a197-37adae123d18",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0ef816e7-2e34-4782-aa81-18d9b0789d3b"
        },
        "item": {
          "id": "c16a94ea-1f17-4b72-bab0-de6b13cee7f7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d232428b-9684-430d-b25e-18eb0e09b417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "986ed867-3790-4e73-8175-bc50484aaf40",
        "cursor": {
          "ref": "5dac76fa-fe05-47e5-b101-0e962f2f1e34",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ff8c9eb7-5e66-4d82-804d-e6a4c183397f"
        },
        "item": {
          "id": "986ed867-3790-4e73-8175-bc50484aaf40",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f1519ee6-d0a1-4450-853c-2901b7a043c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06c74362-30d3-4171-880f-261734816cbd",
        "cursor": {
          "ref": "9201579d-53cc-4cf5-a2c3-772776c3a85d",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "be4f722f-f641-4005-b6fe-b0dfa28f2928"
        },
        "item": {
          "id": "06c74362-30d3-4171-880f-261734816cbd",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "eb9136a4-2f2f-4270-a3b3-8b13aa3ffac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e5e8ac-7258-4a5e-9d90-677491b8994e",
        "cursor": {
          "ref": "80b7f2e1-e6b5-4b48-8dbb-3be9b46e9bcf",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f9082097-0e63-45b9-86e0-2a50521f3c5d"
        },
        "item": {
          "id": "43e5e8ac-7258-4a5e-9d90-677491b8994e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b4b67c31-dbb2-48e7-9d13-3d7793118c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "469855a8-e02c-48e4-b493-f185e93469d6",
        "cursor": {
          "ref": "9abe4ede-f0ae-45b0-9083-663853b7f601",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "96cbf316-8cb1-4d9c-87ac-620dcfbd9669"
        },
        "item": {
          "id": "469855a8-e02c-48e4-b493-f185e93469d6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "301adcfd-9c25-4e4e-8e72-faef342a4050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc696459-cd27-48a4-a872-b4694103bb5b",
        "cursor": {
          "ref": "827c5d42-f4a9-4315-adfe-8967521f4f01",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2e5ef101-2416-484a-96a7-eb01d3d4a1b2"
        },
        "item": {
          "id": "cc696459-cd27-48a4-a872-b4694103bb5b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8bed4028-cd95-4bb0-9ccc-57111bce1285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08519d74-0d31-4101-a844-77034324f8aa",
        "cursor": {
          "ref": "659619c8-0e8b-43ef-9a02-0809409af574",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "08f0166f-fe07-4ffa-9176-3d3c5bbf3b3a"
        },
        "item": {
          "id": "08519d74-0d31-4101-a844-77034324f8aa",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "30fd2cbe-e9eb-4edd-8494-d5ed94616166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e07bc19-88fa-44ea-8552-40244e8febbc",
        "cursor": {
          "ref": "aea2d583-2557-4d44-8b17-954fa17cf7a9",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d7cfbf22-dcd8-453a-8a08-f73d02fcdcbd"
        },
        "item": {
          "id": "8e07bc19-88fa-44ea-8552-40244e8febbc",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "660d3903-847f-49e7-9098-9aebefc27b9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a26e4c-c214-4aef-b83b-cfdcb3cc8633",
        "cursor": {
          "ref": "c28622cd-5e6b-4756-827e-905e7deef6e0",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e200ec83-f06f-446a-aa25-e26bba764f2a"
        },
        "item": {
          "id": "29a26e4c-c214-4aef-b83b-cfdcb3cc8633",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "734b8554-8e2c-4d36-b3ea-b204c75ab7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2593ea34-d9df-4dd0-8338-0c73c5d7a85d",
        "cursor": {
          "ref": "00cc2d1d-a0f5-494e-a49e-62ee1523b687",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "811e09dc-4558-4509-b24e-471ed088e545"
        },
        "item": {
          "id": "2593ea34-d9df-4dd0-8338-0c73c5d7a85d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "01a9202f-17e5-4d1d-9aa4-1b71e985aa8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f6a6fb-1e57-4f32-a304-2c4df1e47cf5",
        "cursor": {
          "ref": "ff9fa22f-06ce-4dfa-945e-7035c57816f9",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "92cce0a9-137c-4844-90dc-155bd9819db7"
        },
        "item": {
          "id": "a2f6a6fb-1e57-4f32-a304-2c4df1e47cf5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d84d222b-0734-465c-8bd8-66d1f33e95fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983f0bc0-77b7-4281-af12-a8f75ffc75ef",
        "cursor": {
          "ref": "6cbc4a52-f84e-4fa1-a3dd-f852702f8a23",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7e832a89-c238-486b-8510-85323c7217b5"
        },
        "item": {
          "id": "983f0bc0-77b7-4281-af12-a8f75ffc75ef",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "615eab41-48df-4a4c-a638-4d2fd8eaafcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c739d7e-bc1d-4b75-90e0-e4a8e7414fa5",
        "cursor": {
          "ref": "29d51e10-ed6a-494f-98f7-2e7e2bec7698",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f959adc7-7a2f-4698-9804-b4faac9e3411"
        },
        "item": {
          "id": "5c739d7e-bc1d-4b75-90e0-e4a8e7414fa5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f56915a2-9529-4c6c-9559-a5974e72531d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8039d12d-d07c-44cd-900e-ddac5c377057",
        "cursor": {
          "ref": "0d886669-b1d5-432f-98b5-74c877cb0911",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "434d98e4-93dd-4271-8282-3806472edb44"
        },
        "item": {
          "id": "8039d12d-d07c-44cd-900e-ddac5c377057",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6b7a3b43-dae4-40ac-b600-8b9b392cc417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e78ba44-dc9b-426c-b587-3afc58d32a5d",
        "cursor": {
          "ref": "86d68de3-49e9-4dd0-8a8a-9e2229feced1",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2de3dc98-772a-4c6a-b941-d7ec3fe10130"
        },
        "item": {
          "id": "3e78ba44-dc9b-426c-b587-3afc58d32a5d",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e435bff8-7a2c-4f05-aa09-a5782d00aa6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f95162-7716-43c8-b604-4fae4737ea52",
        "cursor": {
          "ref": "81471d63-f279-4600-93e0-161f41074baa",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "49b3c612-c109-483c-81af-41958832e86a"
        },
        "item": {
          "id": "49f95162-7716-43c8-b604-4fae4737ea52",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "aa8088ba-0779-486e-9917-838049ec04b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1353f556-a7c2-481b-b2eb-2ae04fb259d8",
        "cursor": {
          "ref": "f59c03ef-2a4f-4216-bbc6-1f520ea317f8",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a8edc007-2fba-4e90-86db-9f518cb6c534"
        },
        "item": {
          "id": "1353f556-a7c2-481b-b2eb-2ae04fb259d8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ed3a8f2c-a126-4bfb-a1e1-730b69507a89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "41c8cb73-cd42-48b6-a9db-3d19d22560a8",
        "cursor": {
          "ref": "26648f54-d3d0-479b-b210-d73f422d155b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "4839977e-2471-4729-9ebd-18725a294ce5"
        },
        "item": {
          "id": "41c8cb73-cd42-48b6-a9db-3d19d22560a8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "024dcce2-6939-4299-86f9-69c11b4c4866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c2f04577-d1b5-4047-a815-924b1c6a6e35",
        "cursor": {
          "ref": "87bf4b37-7369-41e9-ad89-40558d535e89",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f9a0d48c-d35c-4524-805e-a331101cf487"
        },
        "item": {
          "id": "c2f04577-d1b5-4047-a815-924b1c6a6e35",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b33a244b-8b30-4d07-9e9d-3de5fb803220",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "62575495-3c9e-4e69-b438-8cee6d38e7c3",
        "cursor": {
          "ref": "555ed828-9cc7-4d77-a150-1a9737b3d88f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d50f3c4f-f181-49a3-9fe8-063d591ea90d"
        },
        "item": {
          "id": "62575495-3c9e-4e69-b438-8cee6d38e7c3",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e7865f3b-316e-44e9-a7a7-b7f3b60120b7",
          "status": "OK",
          "code": 200,
          "responseTime": 2210,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddfdb5d0-a99f-49dd-af7f-52b7a2eff451",
        "cursor": {
          "ref": "6dc15681-f37f-4649-bc09-a4f9bc154d7b",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "63b346ed-3be5-4879-b20a-354c7f3f24f4"
        },
        "item": {
          "id": "ddfdb5d0-a99f-49dd-af7f-52b7a2eff451",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "85fefea3-faec-4123-8110-9fe548c2a9cf",
          "status": "OK",
          "code": 200,
          "responseTime": 2299,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f4d2c4a-a63a-47c4-88af-29fb552485a8",
        "cursor": {
          "ref": "9f5c66a8-5657-41c2-9d83-2bf952be0ca8",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "42a84fc5-2f0e-4b9c-b928-7232647807e2"
        },
        "item": {
          "id": "4f4d2c4a-a63a-47c4-88af-29fb552485a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7001bc0f-f9ef-464b-b771-e66a6fd29a0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "4f4d2c4a-a63a-47c4-88af-29fb552485a8",
        "cursor": {
          "ref": "9f5c66a8-5657-41c2-9d83-2bf952be0ca8",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "42a84fc5-2f0e-4b9c-b928-7232647807e2"
        },
        "item": {
          "id": "4f4d2c4a-a63a-47c4-88af-29fb552485a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7001bc0f-f9ef-464b-b771-e66a6fd29a0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "4f4d2c4a-a63a-47c4-88af-29fb552485a8",
        "cursor": {
          "ref": "9f5c66a8-5657-41c2-9d83-2bf952be0ca8",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "42a84fc5-2f0e-4b9c-b928-7232647807e2"
        },
        "item": {
          "id": "4f4d2c4a-a63a-47c4-88af-29fb552485a8",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7001bc0f-f9ef-464b-b771-e66a6fd29a0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "e3031f68-e6ea-45cb-997e-0c93dffd2f88",
        "cursor": {
          "ref": "9693ae06-ecde-43c3-b030-886f94448ce5",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "254915f1-4a83-4dfc-aedf-a2ee0bb570a3"
        },
        "item": {
          "id": "e3031f68-e6ea-45cb-997e-0c93dffd2f88",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "64ddfdd2-1061-4f06-93f1-5a227e328488",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "6b3ab58f-eb12-457f-8079-2db2e503544b",
        "cursor": {
          "ref": "603c39e3-076f-413e-a621-b34c65b2a303",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a89e85cf-e215-4834-9252-fbf585246fc3"
        },
        "item": {
          "id": "6b3ab58f-eb12-457f-8079-2db2e503544b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6876d29f-4363-481a-b864-7f6cecac0e19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "6b3ab58f-eb12-457f-8079-2db2e503544b",
        "cursor": {
          "ref": "603c39e3-076f-413e-a621-b34c65b2a303",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a89e85cf-e215-4834-9252-fbf585246fc3"
        },
        "item": {
          "id": "6b3ab58f-eb12-457f-8079-2db2e503544b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6876d29f-4363-481a-b864-7f6cecac0e19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "9dc05ba3-04dd-4bdb-8fb3-c6411344f4a7",
        "cursor": {
          "ref": "3950081c-47e3-413c-87e8-eb7191fb56e9",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b130ea60-122d-4756-ae28-aa8e141b8593"
        },
        "item": {
          "id": "9dc05ba3-04dd-4bdb-8fb3-c6411344f4a7",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "6bfd7286-422c-4bf7-99bf-af9a7384b2f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 200,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "066c9b9c-174a-48ba-a248-a6045f1a6993",
        "cursor": {
          "ref": "f394898e-2778-42b2-a325-e4c5e1a61eeb",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "66654e6c-32d0-4e4e-91db-d8f486acd00d"
        },
        "item": {
          "id": "066c9b9c-174a-48ba-a248-a6045f1a6993",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "eea3b83b-3c8e-410f-8e74-1dd454de61e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "066c9b9c-174a-48ba-a248-a6045f1a6993",
        "cursor": {
          "ref": "f394898e-2778-42b2-a325-e4c5e1a61eeb",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "66654e6c-32d0-4e4e-91db-d8f486acd00d"
        },
        "item": {
          "id": "066c9b9c-174a-48ba-a248-a6045f1a6993",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "eea3b83b-3c8e-410f-8e74-1dd454de61e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "5909d915-5cf6-4701-a018-b8971aa4d5bd",
        "cursor": {
          "ref": "2c304cb0-5ae8-4b3c-8555-adc6bec45e54",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4978e515-5a71-428d-896c-3fc2cd18edb0"
        },
        "item": {
          "id": "5909d915-5cf6-4701-a018-b8971aa4d5bd",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "38a95e36-068b-4e2a-9800-496b5ec0c2b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 92,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}