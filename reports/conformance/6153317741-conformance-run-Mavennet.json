{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ab98f309-27b3-4330-aa27-27af7f17a82a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6716398b-3e0a-4818-bd79-f9eacd52d688",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f393e720-2c7c-4b8d-a75b-6fee6acc18ea",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "762fca84-c97c-4b71-a379-21378485bb5b"
                }
              }
            ]
          },
          {
            "id": "72bad53e-da92-4413-b7dc-16567474052f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2423d46d-ff0d-49ce-a69b-92320cef3f27",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ba3b4689-995e-49fc-a8aa-38d8d1e15974"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2f09122f-cc3d-4c18-9cd3-a69d968d7513",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f341e63a-1141-4e6f-8386-d956b7ed6e8d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b2d8c216-ecc1-438e-b0be-37db39e1a8d3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "10f5635d-2c58-4d8f-83ad-9df923ece38e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d40bf9f2-8dad-43ab-921b-d8330afa49a0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4897b47b-f58c-4d14-91c2-b086e67f8c2c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28c72d37-77f9-4130-8f07-43d262c75c36"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e2b693b6-90db-4ae4-b7e1-3984912c4c62",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "15caaf76-707e-4489-b0aa-cc321cbf4031"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4468a717-ccd8-4910-9200-7a2a4e307f0d",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "2ed2df8f-c942-468f-97bd-be962271439a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5be5048-1d06-4d8d-8a75-4bfe277f01b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5b38af7-4712-4e86-a797-4c7235b07486"
            }
          }
        ]
      },
      {
        "id": "d43aa634-ca1a-4a77-a38d-560c44c280f7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2e9fc141-1564-45a2-8b2e-b2eb5902de78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3b6d5a60-1d32-4afd-bb3b-cc71a25b15f2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c8cc2aa6-3008-4f15-bdd2-de0c54debd0d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e518830f-9f9c-4255-b099-5c1a5662fdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a5f5748-463f-472d-9061-eac83b7a6d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6a4512e-1dcc-4a2f-ac0a-d612138fe030",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1e243a-07f9-4a27-a8dc-5637eb1ce52a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2014657-50a1-4037-ad2d-dbcbfab3c394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ebd4c0-0df3-489a-abb9-2b8f96719f27",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0dbed7e-e401-4ce0-8046-dad64b81f21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22c0ebb4-773f-4fc2-9edb-4118f2c05b5a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9941ba70-a3e1-4b9a-a3a9-b646544b96e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "522bda84-b0e0-4349-805d-29a3ed61b9a7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dedbe945-267a-408a-96d3-25b1b0e1c87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8842abf9-8ff5-466a-b567-43169a88c206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0477bff-f340-490a-851f-5b2654009a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc97fc5-1d8a-4c4a-b468-60bffd3d800b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c97b434d-5775-4612-acf3-969147ac264c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "123e7662-784b-4cab-baa7-43ebdfd18d09",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2fb8637a-e040-4ee8-b7b6-816cbc5397aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "a59ccae2-75f3-4ae7-9c1b-9de1cc0a3280"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28a4c9bc-7ecf-4e4f-a4e7-b10344a9db66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "71f1e4fd-5b41-4492-88d0-7eacc98045de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77f22e83-a1c7-445c-b9d6-9ca13ce4803b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2058c30-34a5-409a-83bc-29915f5a8136"
            }
          }
        ]
      },
      {
        "id": "6abe6cee-a4dc-4460-aaca-8c978b7fd002",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "d8ece409-0197-4eaa-a28c-d30e16f7f02f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cde384e1-f548-4c0b-925d-4efcdda79d62",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c38f15f2-17a2-49e9-a8ce-8487f82b1651",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a3c47cd-920e-4a8d-9e82-c36340e74972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d4d8f06-b1c6-4b8b-ba64-9ad59cc56b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808cf340-f47f-4f3f-9dbd-cf3951b8e524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23a797d3-91b1-44a5-a70d-2282c55887db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53d3cc72-0d6a-4b12-9f8b-a506934b1f92",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc3f674-d6f0-4503-8466-851067d68749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102f57f7-a57c-475d-967f-95b41d6db568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ee405ba-fec0-4b6d-bf5b-76d13a4a1ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a04d28e4-651a-4c53-ba2a-ad94288d45f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b492a7e-5e3f-4aa8-89c7-0a576b80f46f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f30afb6-72f3-4c0c-a2ec-c8797b3b4d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "864812f3-461f-4ebd-bff9-72b18d0dc215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56855b5a-f4cd-4140-a427-ef0b15333471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00789625-2272-4b3b-94ff-6c17e3cb263e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d237e6-f648-4f9a-958b-de9141a195f2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7ca10f-c968-4f13-b11c-2f0dcff2adec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eac4c8d-e35c-4eaa-9d44-deecea97cb52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c96ab2-db4c-43d8-9c29-35036ddb8599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e539c23-70b8-41df-bc5c-008d024b620e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1e9fc3-f66e-48c6-b254-1c14eca5cfed",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b57442-2ba0-4f27-95b0-99371c70fd1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b293d4-ca5c-4206-ac90-873b9203791f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9fa139d-2109-40a3-ad31-c0c3b066580d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02b8ece7-a4b0-4994-86ba-965f9b516fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa9a8cf-b9a7-432a-ad4e-fbf77ccfd390",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7db7fee-da9f-4a7e-bce8-2ce03d3b85de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431d3f2d-b3fe-4a7a-ad56-80ce61fce4c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5d1644-7a37-411b-a52e-75c2979b09a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dca25015-d841-43d7-b2e1-28a75022f429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058d0795-a68f-4faa-b4af-67b9e4c0975f",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dfdefc-7141-4636-a411-c12bf052b662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b482279-9681-4d8d-829d-716329ad86c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7920de37-c95a-4dbc-9cac-14422158d4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e99d7866-3a1f-4554-a095-004849efdb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f19c94-a441-4c00-84c1-886c6d83ddef",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ff0ddfc-3302-4e2f-85ae-160d373e9dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc882606-3f5d-4128-b75f-1282dd8d463a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf58d9c1-f072-48dc-91de-e071841c8e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3e6c42e3-43c4-4362-a907-f17dd0ec7b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba3aea9-b2b2-4e37-bc0d-f2b6a069e8a8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cc1755-e7fb-4fa7-bc99-31ed98b7d399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1951630-4b6e-4ea2-a6c9-8f12f1f175dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9c5d05-5688-47ad-8d4f-89c7f90ed32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7372fb65-a79e-49d3-a594-1b2d6674be47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2ac701-42d4-4931-b0bb-3d69fcef1d3a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "495eab29-809c-42eb-be34-783b524a217c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdf914f3-9d03-4581-9925-3f6b04eefdb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61698bf9-49f9-4496-9474-38b81c6fb519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "59bfe67e-aaaa-480e-aea0-6778cec52591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e29702c-1e03-4ede-8465-d7b90edc2b86",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c13d0f6-7cee-4fd0-a6b3-460d80c2c255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ad24b8-3603-4fb4-afd2-dec42dd2eca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "463abd8c-0992-43e0-852a-13b14268c24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b94c3c44-f0b0-4fff-bed2-27a62dbc4937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6c395f-aa58-402f-b5d3-eaeba5b85378",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be72cb8-13ee-4f0e-89ca-fcd81e14a771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a99bf0-52be-45ec-ac5c-bd3d1ad50230"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daaed970-3719-4c0f-bb83-ff691b8f80fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3051c79-fd76-4f50-9839-f108d218ed41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7de6357-a8d0-4572-822d-5f7945c1f880",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8336941e-bc9f-49cf-bac0-5e03fbc1a3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429de68a-8485-411b-bed5-18d2857d140e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cbc2770-a7f9-4bfc-aa0d-451ebe6487bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ec6feb8-ad13-4658-bb8a-22e21bc87f7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "891a4f0d-c2fe-447d-8090-6402553bab20",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fce426-bf91-4ef5-8ad3-b2215ada27a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9462648-c87c-4cdf-b13c-4c6b09ca8f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ab6a8c-84d6-484b-95e6-5b4bc726be9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27d55f53-fa79-485d-805a-00e4347c8be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a87ef25-1f86-411c-b8ae-0898307d1865",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14d9acad-15da-4630-92a0-14ecb58a8476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f98448e9-ac80-4c7f-b5e3-d044c50670dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaba54cd-d7ca-4ee4-b4e3-3391c2153771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f45d61e5-1a76-4860-9246-5091d3b4b24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44117365-2d9e-48b1-92fa-6830e26d7ed9",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599f10fd-61d2-42bd-9f39-d096c7d44d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eff34cd2-12d4-4c93-97b8-c8019ab3185e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ef4fda-e3b6-4f7a-bba8-8f0f089c2a1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c9aad69-21e5-457f-8196-28224920c2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100869bc-3ef7-4958-b294-7780108ba3e9",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559c9251-32e1-4cf6-bc4e-cfdcca6ebce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0731595-7d47-4bfe-86e7-fcfcc4683832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06cb725-faff-4e36-963b-a5e495f0bafa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d01df3f-f73b-42a8-9da5-aa985d924bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348b7685-8979-421c-8cc2-7e316804ee3c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4621bdd8-0531-47bd-835a-8ad6ca796fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0875555-bb45-4bc1-b710-047a608ad953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43f3adf-f18c-48d7-aee2-307f20df446c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "c69281f7-bed7-4053-96a2-9088c50f557f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83428992-ad6a-4d39-869f-870bf633e9df",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4272d6-76a6-4a43-809a-33cd571f5c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0b21a0-3ff2-485f-8179-39bb616e1c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e66698-de62-4b38-b198-b82c985adcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd9bd23-6076-4533-86b1-1625060cd7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f6731b2-2f9e-4f3d-9d1b-ef1b2f647f0c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b884e718-4fd2-406f-bf44-32057162acce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de18b17f-251c-43cf-9545-639afd71648f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322dff4a-4811-4d65-9c6b-ce67598bdc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff75a49-6ca8-460d-9e0c-d5da5a179ae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bf01bb-f243-4c01-9c80-d687739c4d57",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87904ef1-e7f5-4972-b815-6f4fc7933c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e3ac6f2-e757-49f0-840e-68cdfcb1572e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdc471d-12c1-48a5-8399-6f9986426f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ea07f69-f1b6-4e28-8a86-7b80d3bf02a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f8cb3c-04f6-4d4a-98b9-9bf7889d4878",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9b0d50-cadc-4b2e-b86d-75ce79488fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49f0ef37-b1d3-489b-b37a-2abc6b06a1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d65eac-8a26-4db8-bbb6-c2c61508fcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b93d10b-829e-4e1b-add9-075f683df08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bea4191-ae9d-4d05-9235-829234c50894",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3deb0902-6a2f-4ae4-a2cc-e694337f05a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f33e560b-3210-40fa-9458-30075942f606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e43a9e-21b7-4d9c-9afd-0bde68b92386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37817501-9824-4537-9a4b-d81d5fe5c827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef8b835-b613-449c-807f-e84b026edc89",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa21830e-6501-441c-835e-5b45c08cbad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d679e3a-6b8d-4e32-afcc-1628f2820888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9547efda-d7ad-4efc-af05-3b24fe25e303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a459b96-d1d5-4dfb-9b4a-c748f0b7ed7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bf89e5-a83d-4aaa-a4db-dc34545c005b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b509182b-a29a-44b1-aea8-db2d8fe61aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93654f9e-a604-4794-9161-d1937de7a74b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75767e3f-8b4f-4ea0-98e8-ad0395f0b12f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9378e04-4567-4796-8403-49c6e505aa67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2eccf90-539f-454a-927a-a6840064c9a6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d81c02f-8b29-418b-af49-7e443fe48194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb84bc9-cd67-4379-9e80-3480b7da59d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8257b709-c7ff-430b-8154-6f97ce812247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e965833-227e-40bf-be9c-a2ec4f96edb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd380ee-4fc8-41ce-a1e8-25ce6fdb7e4f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136793fd-676c-44a2-9bd3-db758f841f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05190d16-6887-472a-802c-c8e3b2f4e1b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6162f9-4774-4055-a47d-c0f26208dab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "62db35d7-25a4-419a-b614-6dc22dbf11a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a042fe3-3a8a-42ed-8a7d-d681b725a0bc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e041d97-0af6-45a7-90fa-6478d7da013e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549217c1-632a-4cd1-9e74-e792545a5ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f74162-074e-4810-b272-d3702e2ec23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53d697ee-3238-4616-816e-abb073f19a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "823b1151-adea-4e2e-b2d1-63c89a671cad",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd1b07fa-d567-4a86-bd47-f8f72249132c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783f0f6f-07fc-4a89-acca-3a92e0196a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4c6689-4d35-4112-87e5-6db4e96fd1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7b12fb9-1ca1-4126-b9b7-9e2ac97105ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a985af48-fc51-478f-beab-efbf44a7a72e",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c39698-04ad-40ae-9ee9-889fef9fad6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99793a1e-1a91-40cf-9e97-adb27fc3075c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1073549-a261-41df-bc8d-0b41e55f8d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "293d6644-7a9d-4e3e-bc81-26c412834070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cbe4b7-1731-432f-abc8-f3cf07c9b940",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b4ee4a-8cf1-4b1f-bb77-5652bf29a0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6603e2-bde2-47b3-9a98-14536404c030"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16bbe758-b703-42cf-8ebb-d6f774e7ddd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4862e0c3-7857-435b-9b2a-4aeeda6980ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4d4341-93ae-4d15-93d4-e066c4a4ee84",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cd9af4-2ba6-4604-beb6-e9c3e78e6b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b239b3e2-17dd-4884-ba18-e5a49059a604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c430f0-a99a-41c1-8a5d-950a47c32632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "536706d6-1c15-4626-bd04-e82b01e3e56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ee72a5-134e-4f89-9007-70e588232edd",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0edef5-362b-4a88-b660-3ffe555dcdc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ad95a5-40e5-4e66-be8a-2855eecff51f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7636ba-a758-48b7-b886-ddc75535072c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82c9436d-bc30-4181-9f5c-e4e423566130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13c365b-8c2c-4a35-9b74-8c49c0451461",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab05a70a-e262-40c7-a0fa-7726ba5c4b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013b8caf-6bc8-4fc7-bcd3-07b8207c7bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e05c722-8d3c-4d4f-96f8-9fc2e089b044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a404de-2e02-42c3-95a8-b073aa0e790c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74dfbcb5-e1a6-4a65-9bf0-0644e8e13c02",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ac4d25-2cea-4217-8b9c-35a4ae4e6f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8af0e1f0-5aff-4c9e-b311-47992b0429c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f1539e-1e8b-44a5-9829-f8318a39f6dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fbd3d8e8-0ce1-4464-8a11-1048796a15ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd63067b-9c97-4e66-b10f-0d84e6270600",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5de395-b00c-4968-8a0b-299f7e772dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ccecbf9b-bb9c-4a3a-a305-1893d384d7b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d271714-8044-4cf3-bff5-7e3f2ae19372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6071c92e-1295-47d9-a4f4-0ac715336d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceba5bf6-ac9d-4871-b25a-1167112884a9",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf29407-9914-436f-baea-a4a41a393424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b653bb-cad6-4112-b804-61fe9959ac20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84da2294-bc89-4335-a2ab-1168bf3c9e57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb4d602-35e1-4af3-8275-5d99276cdb55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4eeef1-3434-4c1a-a0f7-87e88f3f114f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7965cf-53a7-455b-bd0e-b38b3986f049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b34a7e4-b4eb-4160-a212-79da6d047fc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ce3f59-cb74-4c27-91b8-2734b1d60631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb90312f-1def-4a3d-806b-f7dd90b89870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13a61e5-5b0d-4ad8-a749-99b9ce0e3566",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acaf5480-450b-4539-8a32-3287840e710c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cba1b44-6133-4fa4-b8f2-0920a0d36ded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3643918b-8105-4587-a291-da5bf5cbf2c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3397c71b-0583-4970-bfe8-2c6c42d6fc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f9ca64-cf46-4eb1-932e-c871b8d5b75f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065305c0-2ea0-4ab3-ba23-a57bd6aedfa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53b3be3-d0a5-4f57-ab6c-b394a2cf48ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fa3a3b-8de3-4ded-b749-7841ac19d2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1b2020cc-beaa-41fa-8b02-9c04c2eab557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92c46fec-7dbb-4398-a8ce-2599517a1634",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e590a0e-b41f-44b0-8b3a-a1cbbd02c0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f5f3c7e-6723-4a4c-9d95-83ee47389bc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accaf742-713a-435c-87a0-013824aa37b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "3724f3a5-a38f-45a4-8093-65cd156d2308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463f4f36-841e-464a-9536-c7e1372293f8",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8a0adb-78b7-4018-9e1e-f7634cee49eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5dcafae-8514-4252-8898-b081b9361336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e5056f-4ff4-4e77-aca8-7d832cd44d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "73b394f8-e35f-4877-98bc-dab75bbf84b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea721a3-0459-4815-9f22-62020141b39d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "369623ce-a10b-4811-8a08-0ccbde9b9c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6ef957-5908-4023-8821-a106940bdb6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fd53d8-ecd6-4be1-b98f-5a62fb207f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9fde85b0-1c36-4dfa-99a5-3020759af22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4dc42c-a484-4da0-95d7-df0a467f1ccc",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f71946e0-10cc-4b53-86e6-c7375ec2d4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c768aa0e-4c88-494a-99e9-f27a35fa42f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "189d6b71-c890-4258-b2df-5bae9fae2518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f83ac47-4323-42fd-bd4d-0016ecc12776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287accfd-1260-4596-9ad5-9e839aefddb1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6e3caa-23c6-44ac-860d-7661e05cc3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44c9a057-a477-4ddc-acd3-a8a103780378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37220da9-e493-422c-b2da-09bea13fbcb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c26044dd-33dd-4bef-a58b-9c00ddb156c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc24272a-9340-4e2f-9602-b1affd260d47",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bcacbf-a76e-4f00-966a-6152fb6d49b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5849f688-6037-49ab-a23e-e68217acfbaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61895f5a-2dea-4ea4-90d7-7c2f2642a887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd903091-8354-43ac-a8de-881e8511c4ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd856ce-1905-4b9a-b094-6edf66a5c0dc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "389322ba-2ce9-455a-b92d-b85bf745d19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f719ac-b737-4a76-8707-df8289b77166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d8585b1-4ddb-4103-9d1b-5b08c641a265",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3156e444-4458-462c-a0c1-fd62f5fa4c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4957d7f3-ec2b-40f8-a43f-bf0eb5243ad8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adfe007-3c37-4577-a242-68c913f79786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9ac4dd-ca8c-4896-8d5f-d9f15982395f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fb241f-587d-47ee-910c-78d3d2dc025a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5433e90a-2b5c-43fe-9426-3cc3f6038f48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb13b8a-24fc-443b-b8f4-2931cedd4618",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958cf54f-47ff-4e9c-bf84-075da0f05a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba21cfe7-b05f-4be5-b61a-b857bd39a1a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f94afae-f8ee-442c-a4d5-5d6f4cf1ec35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "014e41fe-e46e-4cdf-96be-ee1f933cfeb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce1063e-ba36-4974-bb4e-f6575b9ce187",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0669933c-f793-46cb-acde-7c8cc67cc1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a24e240-900f-434a-9181-ace66c8fea51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ddb5bb-e85e-4944-be1b-f69e44458d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f306e65e-cfa9-4f23-85a9-e9fbb62f9c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc17eda1-cadc-463e-8ce6-ff48ea16edc5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35a3589-8a6c-4a60-a923-49e933dd93e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "314ef1b4-6405-45a6-ad28-cd7228cd7192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15373fb8-7b1e-4447-9079-04cdabea9d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "cee90a82-68f9-4832-bec0-1391977466b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35c977b-2630-46fd-9aed-466fc18d53e8",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1db5cc-e795-49ad-8a41-7840ef46059e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a23d75-f9c0-4e5a-95c8-77fec828dbb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0997ee0a-2390-4b21-8417-dbd93c024f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e85fa846-36dd-4385-b7f6-aa3bbd58e69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27b9b6f-3d6b-4ba1-b475-45a4e5185fc2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30c5a03-775b-4897-9346-64352dc385ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42b0369-2da5-48a9-8223-a740647be41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87aaeee2-4304-425d-b729-4c62e4f6fa02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d09a195a-9537-4207-8499-872092e41808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3d666d-5257-4319-9968-760d7e46c25a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "756644bb-30f3-4680-a4a1-06611bdbd518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76fdab28-2c52-46e0-bd4d-40ca2e9a4a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668094d7-4c6e-4bc7-9045-92a82ad8341a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c250619-8e0d-4291-aa9e-a39f5f18f454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46faf052-96b1-4b6e-ade8-08670a61c9a6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f83073-35ec-4f3c-b05c-cdfcd1b574e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eded643-cc8c-4331-b8fb-552181059d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c447b9-49c7-4a37-b247-1fc47a5eaa70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d69fbc7e-b879-48af-b3fe-8a0b164de6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9034b17-6ba8-4707-a3ea-be9ec8a6c844",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5896b758-3673-41b5-b996-7149d5952895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d085e6-77a4-4fe2-9f53-ce4f50d3b7c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68675c89-d82d-4478-bd68-92dfab556658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5aefef79-8359-4ebc-8f1e-a8bfd49410ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89ed53c7-bbcc-46b6-845c-1c2bdb5441bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6daa77f-faf8-490f-8375-c5b2cba76326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e7c0f9-983a-45a0-a782-4b68ac2c9e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08470aa2-512f-4d76-8661-da441545697a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "91ad065a-5b0f-439e-85d7-ecdf37a78a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "319d40b5-da71-41a6-ac2b-886f2c8dfbfa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c878b3-b646-4e9d-8fe7-f263a09d8ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02540139-65a5-4f7f-ba4c-4663eb57f8cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc0bc36-ffe3-49a4-9718-6a67a9e92ffc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b222f1c7-353d-45a9-a6ed-fbb207896bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e951aa-46f1-41c6-8670-8ea240a805f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de1e755b-2791-4ff7-9307-1e663bbed811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44a427e2-3244-48aa-9508-8d9e79a1b322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d685f66c-d6f7-44ee-80f9-b655c05136b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d73c057-28b0-4bcf-93a3-3022e49794b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e93a6b1-af09-4b1c-884a-ae7b83ffd35d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "816d08b4-5a35-4b64-9d64-a0e30969b07e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09ce1ce-1520-4cc2-ba4b-849b7caa8e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70e3d59-09d4-47b7-a634-bee626e09c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "876ed135-ab0a-4e86-8363-ca9dd7f5e909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d68884-094d-47f0-9307-49580e2380b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222df1bd-0cbb-4d56-854f-c40813ea3992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9466fd-78e9-48f7-badf-14a85d236d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb3af83-a2b1-446e-9502-d4eddef491fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d106a2a-3211-46ea-afd6-e28e39f1c169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce448c8-6fab-4a78-9872-2d73477e521e",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7651a8b6-a292-4f51-9809-f55e19b1112d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fafde513-608e-4171-9e44-09d4ea941a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283c43c3-4886-48f6-a65b-8b1e03e53307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0478fe34-bdca-405d-97c3-02d2d52d7524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5ed487-e648-476c-a0c3-541a070979b8",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879d23f7-a144-4388-ac96-44dfac646270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b7ab76-d4a1-457d-b599-2047e26df5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c95e0d2e-74b6-4a76-8618-abae491aa26d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ddb2fa-f7b7-42b1-939a-0de6e309ed03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cad262e-31f1-4026-9dcf-763179a55f71",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3611413f-75c8-4171-b650-e362013a4bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eac20bb-6a1c-4824-a9d5-a42eced9e867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34da307-7155-4b25-8485-dd69dd17fcbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47e82ad3-6a07-455f-be80-5deed3ea7eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b0414b-c53f-4695-95cb-c80ab277f655",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d725593-1dc6-49fc-a192-16cf6d743200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa86849a-2422-4877-a1ee-10850a58c5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821e011a-f327-489d-a519-54b6021d31ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a59e124-968d-4bdf-a802-25a8a04bda9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c17846-26dd-4e58-9375-d3c6c1d4982b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d74107-dac2-429f-abc3-436b509a0a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c6f755-f84a-4ae4-b896-5503f64333a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ff8bac-253c-4612-822b-d43212c40bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffde5711-cdbe-40a2-8461-39f190735d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599ad630-892e-45fb-a1e5-d91beda93c24",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d570d31-5c3d-42fb-b38a-658c2e0ac17a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a635775e-e079-4b41-9714-314283cbc45c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410bf18c-fd30-4394-93d4-3d60ef1578aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6283c97a-ba89-4c9f-9fba-b8dc500bfe78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83be64cb-d6b2-4654-a261-13d935a99fda",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3f8f16-1f94-4efb-a38d-6f5c4bca6291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43def18-54fc-44a5-9bc8-f7b3c303b357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40740881-b2d9-4712-8243-b8a4fd8328b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b22297d3-9360-4df1-888a-bbc7366097ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b70034-dcb3-45df-b682-dadd59f80ddf",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13cabd0-c3f2-419f-8564-8bf3b7ba3bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a73508-175c-4a9a-9510-e9bc5811f03c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5393d91-807f-44d1-91c7-ae120aa366e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3127d1ed-9efd-4a4b-94e3-de8a42f3d8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5aed589-e508-48f3-8e3a-4618c22c0d47",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c95a028-2374-41a2-b664-46d25e065cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71725e82-6e14-47db-8387-423d4eeda92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fab233-efbb-427e-82a5-d7ba42ce7979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fcb8161-c15e-44d1-a7ee-7921bb7f71b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d41194-204d-4965-9a83-4a66e87b3c7f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a18a466d-9e0e-4bad-bfe8-c56f7438b12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0701087d-abf4-4643-8c5f-b9e02d474409"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd2ea07-a5b4-4305-ae94-1387cd62123a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcf3798c-22c8-4397-a156-e34564240817"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761f9061-1a97-4e9e-a861-f6bd3de89e3f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c32253-c617-491f-85f3-ce25a63c3298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61841403-b76a-4df6-b14e-fbeb5fc97a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "533559c2-e72d-424c-b159-4610d9f648ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c09f1b-7e61-42fd-aec6-60c2f29d30b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6bcf598-17fe-474f-8344-1a5f9c64091c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa3c5192-99ca-439b-a9b5-bde317e0521c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb750f2-f9d9-44cf-9dda-59b4f5fcc21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41f89b3-ffaf-498a-8a63-074589c9e999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "995d80ad-bd30-4980-a831-013f083017d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e40bf3-b3bd-4d0f-bdb6-50ad160c8dd5",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62982a9-5fe3-4218-8ade-fd7422b9232f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "838122b4-c848-4dbe-ba18-271976c1d8eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d379822f-1cb9-410a-bcbe-05c942b3cbb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ad143a-e087-427f-bc51-9e885214f6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ae7bf65-5a52-4fc3-94aa-d1b368cdf52c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52a3685-bc4d-4a6e-93b1-9ae8e178a997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ec9b664-7de5-4c18-8dd2-12e66ee9ec32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b68545-9073-40eb-bd96-1e989b5cec40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba7dcfd-c5c4-4089-a68b-39a2d76ad41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fb2e3e-3904-4e8f-8893-e7313fbd15af",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f8ca82-b1e5-46ba-be36-f9c5821b01f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71db2ef9-c31c-458a-8a02-d8ee5bedf68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63267643-ea9c-4243-a64f-d8bac62c8199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dfb74dc-6f3c-49de-8e3a-fe0cf8c891cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8698c23-ba06-4748-b318-99607570e1de",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5495404-d4a7-4bba-b755-d66fa3a90614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1589cbc-fc9e-4704-8e8d-b48703863837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e369e9-ab27-4f66-8e39-410102356c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0809740c-c419-46c3-9b8a-9f191646884a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb2b93f-d0ee-4204-b8ea-d22ea5e387dc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e1f984-b840-4328-bff7-8ce8304808bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9739130b-263b-40cd-bad5-b1477d973613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abccefff-baea-415e-9c71-b5ba017c228e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "465c9b04-4552-48fe-888f-5bc63a5af27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f266395a-03b2-43d1-88a1-b60b644f1f39",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be191ecd-43b8-4f01-80bb-6da1d8e48a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fd931ae-ce08-4621-a35c-7fb71033b1be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2ee431-066a-417e-be25-7b1b8b74ef4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39adbb0c-a296-427e-9e11-a0f23d7ebbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d310e4ba-224e-4660-8f2d-abda1bf1cfb2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7dce41-0a1e-49a2-a289-871fb3d17405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701dfc99-89cf-40be-8363-babf3010f3ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b5cf33c-0a38-4ac9-9992-196597deb062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "73a9b335-37bb-4bd0-adc1-03c92d6ed1a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacde816-b1cb-4650-b482-0f3bf1cfb7a5",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05b9e99-6590-4a0e-83b6-d3e9a89b9620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4722fa55-5269-4098-b006-be8f0a349d9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3f581c-42b1-41b4-8c4e-48037c0edfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce0cba7-112e-48d5-ad02-492e0a737f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3408f20-d341-4399-941c-0d8672b81555",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd8df39-3ffc-4e44-b50c-b536eb6d78ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e85553-97d6-484e-a9ed-8e8baf5d7acd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e57274f-8ed0-481f-9966-23bfddf0c679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4859e26f-72c9-4074-b4de-1e6b2a6d83d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83d6abed-c686-4658-8895-ae1abaa3b16f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e68550e-5355-4caf-9a4d-b84db2b84e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716350e2-8f87-49f1-b87a-8b0dcd32a492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98008ae2-c2ae-4a61-bf54-55445ecf35ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f41baea-d55f-4be8-97de-f6de41898a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eccbc61-1853-4b0f-a1f6-375ff601760d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60459c52-a7df-4fb5-803f-ebbea0a082fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "887b50c5-a44f-4130-908a-941d58485be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e3e24a-a778-4950-aba4-1a018f6519dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1031b599-03c0-4de2-957e-af3e0fd2bc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c07a4c3-0f38-4168-b887-e6733a72f5de",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "449ac309-9d97-44d0-a949-ed29f5777ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cc489a6-f775-48b1-ae7c-9eaa92c9622d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ba3f2e-5356-48a3-8d8d-0921a7e2f938",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bef19455-8fc1-47c4-8534-54c57faaa2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9741d4c-e87b-489c-8c17-46477eca2557",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3d934e-7365-4b03-8e88-923bf8577806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00c81ca-0e9a-4aed-910e-b795c1a18e84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02bffb7-b0ea-4b23-9e44-efc444f49775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "076109e7-2862-4499-adfa-a89b5b421e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6abc8a5-a61f-405e-b296-6a4b6f06b6d1",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f851d60a-4ae1-4990-8740-72371ca4fb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "353954d3-81d2-4376-9ed9-70d3a37a4da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d0dc2f-201b-4742-9133-8f0602c0c386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "370e5669-b1e8-47a0-893f-8db46cda20c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a929d8-1f55-46ce-89e0-71bf4b2824be",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c93c27d-d2f9-449b-a20d-3781e542a3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f14ac32-472d-4180-90c2-f5c59eafa3c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531c8660-20a9-4e67-b09b-c96b76dd4f0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f0c69fd-da6d-4e80-b257-d659310afd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0133b00f-8107-4523-9a7b-4d8b6c221a65",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7a999b-0fa3-4eef-a3eb-857ed3ba0b81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac47610-234d-490f-a2fb-61482e7b8413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e80c8a-adff-4d33-b60e-d2a94998d09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e18a7161-62d5-48d8-8af4-68c126ed045b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "109c00d8-9adf-4fbe-80d9-be1e4aceb440",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a6ebe4-b542-4bfb-8e6d-4a51b9fec727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9ed032-5e10-42ee-bd9a-299d0b3c6c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a30f3b-1206-4908-8f48-63815a9feeb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca256c4-a9d8-42dc-b70c-ea669f7cbf75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d96686ed-21b6-4a05-9789-080fb01cfe56",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2255b86-70bf-4249-8355-da9687cbf7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea108607-5d0e-4558-b32b-d92e85f10534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231319df-adf8-4e73-a936-925e6faaab3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cecc8e8-8acc-4239-99e3-029997c25ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261bcfba-5fab-4923-98ae-8dc1904047fd",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a5a1d1-b1f8-470d-8674-b12651d1d98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "04368b15-3dd7-430d-b7ad-087519d3acdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254d8195-f0d0-4fbe-ada6-022f9d4e5396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2d5bd9-a322-4879-bd0e-76af1fcdbaf0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6471ab12-ab9e-42ef-81ff-97a533b1ee87",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7096fdbf-5644-4a8b-8225-3b18ee1624a0",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a181dabd-8b75-4000-b7e6-0b0a66b7435b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e21b0646-f2cc-4dc1-a792-ef84bc39f7c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422eb2db-c780-4374-b0bf-c680c4523827",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63649ed6-72fc-48af-a6ae-68cc4b27cc07"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df30090d-504b-40bb-a561-892eb8945f90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0717f0f7-fb58-4f66-ad68-0c726cceef16"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2655c938-890c-4fff-86a7-a4a0c0543d2a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d48e101f-b4b6-4b2a-a7b2-eb36597b7ac6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09fff9b7-2ea6-4907-9956-36379615e5ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a4c0e109-43fd-40de-bfb9-4ffb86c17b53"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6e867ebd-13fe-4f43-85d0-7ca0f459d468",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ec9d04a4-6593-4fcc-bd3d-462cdf34ca5a"
                }
              }
            ]
          },
          {
            "id": "ae066ff1-385f-4bb9-b72c-75d984386572",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a1c73dd9-20c9-43e7-9d57-12751665f0b2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "06d89f21-6dfc-4aeb-8880-fa3f7b364ccb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cb7d3332-f694-4dde-8605-3a457bdce9ff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b868a57c-36b0-4e0d-a308-ae921ea75b29",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9f40317c-4c28-4147-bf28-a2a848ec03aa"
                    }
                  }
                ]
              },
              {
                "id": "8f37eda5-89bb-423d-823d-fdb4b5fa7cb7",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a105be8a-cd9f-48aa-8114-fef50fcc3850",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8ab67a55-d5e7-43dc-a571-369fd5dc52b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ef0d1b7-4950-41fb-8dbe-b86807689bb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "89d5b80b-18aa-4200-b40a-6425572fd314"
                    }
                  }
                ]
              },
              {
                "id": "7759f047-5a6f-4288-a22a-07b3996bf1e4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb3c5af2-7a23-4b6b-a488-902b3b5c041f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75a2f6a4-c9cc-4c5f-b408-e498ab580466"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce94f983-a958-440e-8476-1ad9db6c1238",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02ef361f-8330-48a3-9eb9-8aadea4740b6"
                    }
                  }
                ]
              },
              {
                "id": "5cccde28-8d1a-42ad-a8e6-5aa5bbb82cff",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4788cc3b-f550-47c4-8a45-ea1dda31efa2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91c0195e-716a-4986-8231-da989ec62a06"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ba42631-2164-4259-bdef-0b4048906ee2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "2489bec2-d036-4010-8a4a-714a9acad2ae"
                    }
                  }
                ]
              },
              {
                "id": "4f6fac5d-232c-48c3-ad7a-d1b29e276ce4",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c99fb10-8775-45c0-b7f3-e62d6da3e21f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdb5b66a-e12c-440c-b6f2-8a3b981a108b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc8eee10-5e63-4d38-8427-2f4ecef45f8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "77bd683e-c3a5-4320-9e53-d7eeea3bc0ae"
                    }
                  }
                ]
              },
              {
                "id": "bb103bb3-bca6-44c8-935f-8174976cd166",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efa6d142-7479-4140-bc4b-1565e901ea98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04e176e6-47a3-4def-93bd-9a5e04dc4874"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ac52996-992a-491a-bf61-dd26e218b973",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e2f93ec5-e7b3-47fa-94cb-9b84ca0ef15d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "90cc36be-cfe6-4ab5-8a05-6771be8c68e2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "76de739f-f967-4072-8e68-09ee99a64d37"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0569e12a-9df3-4bb2-86bf-f23c08430aea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "862e07d7-31d4-40c7-8703-af2389417739"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cc8e2d7-f575-4d78-93f1-f457e1d2aedf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "14bffd7b-6ea9-45ec-b277-0b563cc9d082"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "430919f8-73b9-488d-ab83-8a40c72e7edc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37d71b3d-1f70-44f1-a83f-f027be6b5d36"
            }
          }
        ]
      },
      {
        "id": "99ce3182-8aad-4f69-8b2a-860293dfd9c1",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "532e35ee-5360-4ae5-a0f7-d932acca64f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9fbea2c9-4677-4456-a4c2-d0e4ab72e74a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0f60246e-5d9d-45dd-905a-56939399c4fa",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4326cc0-e3c0-420d-85ec-5575307be443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a030770b-38ab-42b2-ba44-944cda0e072a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c0d468-06e9-4fb1-b582-9f91722517aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "83aedf1f-c881-4814-bb7f-412fae2d338d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fbac11-9db7-45d1-b820-881a6e203d62",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74e36b7-14cf-4337-8cc1-b8237d3489de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0ca59a-9f2f-4d5d-8757-25a1cd010346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad2c679-5a44-46f3-927f-624e2ae60591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "04d55c7e-3ff9-49de-9ac8-2c4417d4e1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "352b998c-119e-4ce7-97ab-8f23d7d0a97f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22a2ce4-af22-4ebe-ae20-6e607370f570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5aa4e5-7d67-4d84-a749-f00f75c616e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ff8726-1df3-4277-aaa7-723cacec6b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e10069f-2708-4a5c-b1e4-6ab33bb43031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17324f96-ea5e-497e-826e-1d7969dc74c6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf9289b-dc52-4ad3-bc8f-97417da5371d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b581b9c0-1df1-407b-9287-2f6908673f61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69598208-4d07-4e10-86d0-23b7a2ae067c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "221f624e-69be-459e-8598-5d0cdc362746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8903d44-3039-4834-b9c7-e1cf80645ee0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56236b70-84ec-42a5-b66a-1167b50d6a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a263afd2-ff6b-4959-a005-4e1a8e74e111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ef1e61-4d87-45ae-b3ce-4c7cbdcf897b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c45f88ae-fa01-400c-997c-e09ca08c7ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b7ddd2-d5f5-4ef7-9622-106b866a4faa",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74f1542-156c-4fb0-905f-2a03c41b9721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3661c9be-92c2-4155-a875-4bc570af79b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed424752-d8db-492f-9d90-2414474324de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea25c019-9fde-4971-96c7-1f22a7ff4939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927d8597-8068-4a63-a281-f37bf2c6cf14",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c30febd-cb34-46a3-b1dd-b5c82812273f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceeab0d9-558f-497d-8663-d727e4cb6a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ef829a-02a1-4d43-8aca-2525958afd30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c12351-fed1-4da5-a471-684cb2253f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "993f1a42-12f1-4861-b53b-64bc3bf23a59",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfcbbce9-563f-4343-941b-33fc76274d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a7340a9-6c9a-4aff-a11d-36d516edffc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc846a5-4478-4ad8-b7b5-0bf4bc213846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9088b48d-320e-4153-b92c-071bbc6964cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c35d88-c93e-4628-912f-243d4f3b3986",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33889269-6edb-492c-8f92-f822c7ab3217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f173543a-f29e-415b-9be8-9e72de989189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d15b546-6015-4608-8e80-d8a6e9f57030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf7a53cc-1c0b-4b70-b910-1570e753b275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdb3c19-1dd1-47c6-bd1b-9ea9c5cc0462",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "842c4b4d-1e8d-4d63-b8eb-82458eb32b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f07d50-a80d-40a4-ac3b-10fb442091fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9a2276-3ec8-47c4-9fbf-1f9b63afbed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "769d1bd9-7d1a-40b8-bc02-b1ee18bb1d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918822cf-8c70-4681-bbc5-6df6f3207c28",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e53511-211c-4395-91b7-5989619ce5ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0233aad8-2c48-48ac-a7c6-a5e2b9952fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061af6a8-6637-4da7-b88c-2c04e3fb9f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ded881-c0a6-4b84-9e08-f14da7cd3c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699a9795-3ca8-42ca-87da-413212652467",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5913345-b2d3-4504-8d7e-675aeb974a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bacef306-a54e-477f-b57f-46181aa17a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfa1d39-b7ba-44d9-8fcb-51694090701a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb4fcdb-0fd2-4a25-b053-8363f456a990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd606bbf-b4d9-4eec-a894-a336c3f0f750",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e403ed-e0b9-404e-9a00-3d04e5e171c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd706ba-ebfa-47d2-9521-6fccd71770e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d5fb46-9484-4ae4-8c20-b8451315aae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "180ddb67-eb2e-41df-b6ac-0dddecc5a441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07cca587-b466-41ea-aa12-463528e13a41",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5e402d7-91df-4ddf-88a4-7f8f68be8a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b104db3-c509-413d-8191-0911e03ecb8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44e5669-d50e-49c0-a009-62713f42d5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "856129f4-1748-4488-8d6d-51b30e357bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9fc42c-4c21-4cee-b6a1-d4a8719fe5e1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cd7ba5-9aaf-46e8-b5f2-3647e898ea80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1079dfc4-2717-4884-94ec-f8d092c49daa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7536137-9e0c-443e-b1c7-18da67ea35c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "42881bad-05ad-4e8a-abea-c3e7ac1dfd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514e1738-2194-4ac7-ab66-691c1f4d895a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b5e202-c105-424f-9487-331253203c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb07fd6-2215-4e16-832b-d3be3151cb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0500e59-2600-4652-aeb7-87127833e222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a7dff8a-b85e-43e9-a25c-4752b9b7e01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9892e168-4e31-4441-8c08-7dd64c3b35b8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082023d7-0ee5-44b9-8ad4-e244b3eabc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59275dec-3ced-48a6-b264-3d6b9ff830f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a8a82cc-052a-49a3-b51b-2a3900e9e961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb828118-f655-4194-8657-0fdc87af6679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "081dc85f-eac5-4c5a-8c9f-4d1e0bd1f826",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b07514-db18-4746-a34a-7a96d4f4711c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "547d6eb0-e554-48c0-a747-3d2c4342f6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49562611-a8e6-498c-8fee-a9c9b17e4b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "91963e8d-5478-45fe-a97e-b0d7960b7aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba120a12-192d-4091-af19-dd65fd69d01e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bd2ced-f7e0-4d04-a673-5a1cad3ef53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae1c1d2-e0b3-4146-8fac-bab068a67d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf36762-a4f1-4bb6-a2ba-d57a11cea229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70b49c6a-7b9e-463f-bc52-92c93e10840c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cd6fb1-746b-4179-82f3-bea8d269e676",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb6cbe6-325d-4030-b3d3-33c44b2e50f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c885799-a79e-4202-91a7-3bb2e7567559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e516e855-168e-4b88-ad5c-ded76cb98b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39cd08a9-451c-4e22-9f7f-5db6b72e3f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd82068-f25d-471d-a65c-09dd727e3f87",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4843e4f-7297-4ce6-93b8-47ad0549ade5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50683e95-52ff-4245-a895-8b3d4ceb70db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f529526-45a5-4123-b31c-28efb279f94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdfdf188-a21d-4bd4-9b0f-1df4e46f0eaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef80f66-ac11-4e3e-8c6a-26a66f8d20a3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "366bb036-14b1-454c-a6b7-c9a7e9ee5129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7892b95e-b15d-4358-b6c5-7dc91af2ce79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83f8915-e9c9-4d8f-ae4a-deba0109f34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86dd958b-ccc4-460b-843a-49075798fe5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730b01e1-c75d-4096-9118-f9bac2e77195",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6dd43f3-abf2-42ba-9f18-aaf1b77a0f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf89959c-2bf9-470e-9aad-dcacff9051f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c39246f-4d18-431b-8a12-ec5d3e08abb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "626b5e12-4f67-4a55-bedb-2a0e9af2bd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd02c53-bb34-4aa1-8a02-cda04e0499c3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15052770-d45e-4d27-96f4-ad6746cb3c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2187238f-7553-4d55-9ee5-e1d978ed5c3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1208be1d-6662-4b53-b3b6-5144fea9dbbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88c61744-27ae-4da1-9cf3-4f7758638adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d73a1c48-7023-4134-a525-8a0f6e194047",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "308abc30-a886-4ea9-8596-4179e0397004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6424319f-a340-4675-a9b0-a8da243e2418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0f4543f-0a2f-4376-a679-0b6f156ce30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "094c68f6-aa92-476b-b672-53237f91080d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3be38ab-d205-4a03-84d0-058587ff91ee",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33cf058-14f5-4ba2-9313-dfccb9352d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4519fa8f-86f3-4e79-845d-1b3ff35bd5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f6c44d-d219-44af-b113-0c59f11cd965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5bf8ab-0453-4c28-85cc-218acac44d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2c3d25-1cc6-4606-bd06-95d7d40bf766",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f236a51-989c-4183-8692-17927f3f83c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6200a9c-2694-4320-bb85-5c65b7948df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85036f9d-226b-4152-b8fa-2bf35c6deef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8e23a80-8e46-4018-9517-c768f5fafbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1de519f-21f6-4e97-8a12-f9db0295ffe7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dea9bb66-1d1e-4370-8183-40ba6c384a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf27420-e4f9-4e18-b1a9-bfe4af23d083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af3078cb-3c48-4776-9450-61d7485176a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a24adf8-2309-41c2-8450-102d48fc4822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03728e7-0c16-4dc1-8827-d9de0049c434",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acdbac03-f477-4043-ab09-8267b9027ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d725a0c1-32de-46b5-a9a3-5ad5567f7575"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c65473-fc32-4665-83c0-69df3399cfb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a78a31c8-58e7-45bd-8853-4fd1e75d0295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ce5fbc-d8b5-47ff-b527-56743c1a5190",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e09185d6-e1c9-42a8-b2ec-abf669d1dc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4cc917a-6482-43ab-ba33-8349d5d9dabf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dced189e-d451-497a-87be-14b2a4942ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14ae706f-8de8-4310-a286-d2395a89f550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45106a7b-73d2-4668-8f79-5b66d91dc1d2",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4d8014-31b6-416c-a6d6-772bacbef7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb7149b-c9d4-429e-9894-bc5ed8cdbe89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449943fb-a46c-4675-a5d3-1241263b4197",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c052fff4-7d7d-4022-9793-a19a90c5e77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c2f72f-1e46-4187-b757-8a162c288da2",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "169795a2-fefb-4a58-a418-e1a250b09b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bcc2f80-a644-4324-b878-c7e53f92ae4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f8898b-52e4-4a6e-b457-7576b89efcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "632f44a2-673a-4e80-a3f6-13ad2dbf71bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "95ed84f7-ce42-489c-8762-de762b46159e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61460d05-5cef-4b84-a9e7-8a17f50bdf1a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df02b67c-fb7c-4d6c-9ea3-75d35a222520",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "48da1320-9746-483d-8fae-a92f56c81084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87a8de4-ef88-409a-aff2-3c31517626fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e832af53-48dd-4ae6-9aaf-fd1f9e5e3ccd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3dd620c-9caa-4fc1-8cdb-67d7a46bad41",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40329738-464a-4ce4-a8de-4e0ef6ebc9ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35f1ba23-6152-49b3-9965-0342bfa57bcd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec085d30-a64a-4f0b-835f-088d7d1175d7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5a30efa-4485-4f7f-887b-e0b397b24a9d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7973716c-d97c-47df-b37a-488a23629e57"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac6e0408-d2f2-4f86-8ea0-464c9aed8ebb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c35fd04-2d17-4c74-8bf7-18e7626cebfd"
            }
          }
        ]
      },
      {
        "id": "9b1eeeec-1f52-4ec8-898d-d31197a27387",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f4e29ea4-5b64-4d7a-8253-1a3a3cdcb357",
            "name": "Negative Testing",
            "item": [
              {
                "id": "866cb2b0-9842-4da9-92dc-4698550cea30",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8a3637ba-9457-4575-970b-69144a936d85",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7753d99-f41f-4800-b340-19cba2affa74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a70e943-2c67-4b9c-92b6-69712ea0b145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64a80692-1a7b-4bb8-aa6e-463021b8905d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "01a84cd6-d95b-4700-bffe-b634841c11bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac126abe-6670-4f64-b1d2-53e839e9b147",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f806e992-b332-4714-97f5-85e3f56798db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2e92011-c3f5-4339-a523-adf063e6ffb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fa3c44-126e-4979-9fc2-5cfeb6638c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa10ed15-d017-46a5-9779-81c4e55fb175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7735e2-fe2b-4441-b263-dee55b4619b7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ac0c57-bfeb-454e-8c46-1c18f3922541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f26820-31f4-4cee-a853-ceafea9ee052"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5565454-6399-4863-886b-91b572386727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca811126-8210-40b4-994e-210e5997c86e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d76621c-44d2-416d-8d84-f636de5287c6",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb309bb-862d-4c4c-8228-ffcbb3d88d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb57503-4a6f-4042-99c8-46ade25938cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e02a0ca9-f5d7-4f07-ab1a-84412d980cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "52ba66ef-a6b6-45a2-b5d4-597d1c4310df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f63ddd-c7dc-413f-9cc3-bc0079c6a8ff",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5c4cee5-8134-44c2-88b0-f47321168d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0360787c-5507-4f72-bbcd-53b5d8e396d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b40a47-99ac-4bc5-8abe-d6ec72f4bae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3d0224-4299-441a-af22-61f0a82787ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188e6937-34f2-45de-a825-2a30a14aebaa",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c29beeb-a3ef-4c5a-9575-958f72c4b16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f7a9414-b225-487a-9d7e-c899bc01478d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490a72be-2222-4998-bde5-43c61d35f139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "907337ed-9951-4dff-b6d9-6421610278dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9b513f-8c3a-40c0-a44a-9885adf99b4e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5f204c-25d0-4cb1-9c77-dc086d835a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c471b1b-d767-4f31-a21a-ac9ad96e6bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcc42608-81a9-42d9-b51d-da6918658903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cda51630-7dee-4d64-9c87-a43cffe280fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082bb989-4797-4b8b-9106-ae67daef7d5c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76748199-9050-45c6-9b8f-7f343576beaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9625bff5-8c8e-4415-a59e-8552a28bfc9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf74fa67-46d2-42dc-a86b-2ff49b173487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb38fe2-9252-41f7-b477-a8e07bc05533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504dae81-5924-4199-ab88-c846347758ec",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f53c2b-7578-4a86-a60a-bfa395efa7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b4799f-eda6-46f3-af25-97ec544ccc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d88f136-9ba0-4e18-aea8-3eeb1fc0520d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dea71c5-e4d2-4e1d-aff2-0eff10772ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d657e439-4cfb-4fa2-b3d3-0cbddd13e853",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8815a778-ef0c-4349-bf28-3c989b485e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9c0ebe-aa57-4a90-8730-1147b152b5d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4546b189-ea4c-430e-a5dc-73c9f4488649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f3d6dc-d99e-4bd1-897f-55f69c283c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16114c89-f06a-4b34-b819-2544f2fc6939",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3386fd1e-832b-4be6-beb3-b22c0079f296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0353f0c4-13cb-4947-bf25-c16ce9d42817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f910e69-2fd2-4b08-bb26-3227bdcb9959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "53a8501c-66dc-49da-a637-2e130e4a09f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf5d5d7-3d8a-4df2-ab8a-4d333d2aa415",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0375b185-2c35-4b5a-b06d-eb669431860b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd426e30-af23-4cee-b22a-6f549e469302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d6589e1-9560-4d42-8e38-f847497c66f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c629fc3c-a018-4b68-bf7d-fc7f20b11558"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03663c87-7396-4a89-9be5-1343f3ac5818",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77341793-643b-49ee-ade9-ce04b326de41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d9b1a2-d202-4a81-9b6b-4fd7e781a502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a59a90-18d6-4edb-894b-7f45d6403e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6faf8183-0aa2-4f54-8326-9b4b1a5e03f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c98f34-d793-45ca-96f7-be4948172803",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754c1ad6-d3fb-4951-b948-9069f9c632c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79934f8b-8342-42b3-a547-7dd60e8b1179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5209a818-cf5c-40a5-92d2-cd9a28a8ea00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "d67f9b2a-0f63-4c57-919e-733eb6622b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b204bec-971a-4bbf-9624-6691f8c11cc5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2c2c32-7c48-47c8-b192-60bf7a9b8dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93336a38-31af-4354-9fe3-4c4831f5d3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e36676-a812-4332-b67b-bc76c12026f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d380f9a-3b4d-443e-8652-9d99128750bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a1a61d-ab87-4805-8ce0-ab7dbcacd1ba",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47effbc2-1d01-4be9-9c4a-4e9dec3856e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f19b7a-2451-4d00-be88-c19c76d5f867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ab5881-5d94-4127-85d2-181f6f91124f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "610d716b-f9c0-4dff-a0dd-ee579ec895b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6b1f8c-fe56-4c81-8191-af955d5774fe",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74c7326-dc3a-42c2-81ee-939e7be8c828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "705f6aaf-759f-4e2d-95a9-f4c709f2ce87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7359eab-b117-45f6-b55f-328fbb98f0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a20f4d6d-076d-4695-8b37-f39b3fafa7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea50b594-0ecd-4a08-8cdb-dca1d67ddf23",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05f7df6-7738-4973-a71a-030a28fb138e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18369f85-45d0-4edd-a001-7b5ad395a847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae45bbd-45b2-4357-8b06-ced1f23090d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "39d1805b-2495-417a-adea-db81111d70dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d870a11-b458-42b5-8831-04ed621854cb",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f07d6d-2d76-45a1-ad22-596a259f251c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913a5d6a-6385-46d1-9413-28abe64eb3d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fa12ff-3e9d-4bd3-9331-7dc052871b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17bedccf-7792-4fe6-8d24-c8a8cf55effb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da99aa4-7f8d-46df-b92b-46f81928c51b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee72b396-e4cf-4e8b-9b72-3e8d94bc8505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a09b4cb-fe50-4e7c-921f-90645c5928c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05a5073a-f579-4140-983b-442e13052dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9bb8322-30e5-4f5a-99a4-39ff0c9b4324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c7fdcf-f345-4ad3-9aa7-14b19ea02ede",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "556a1f4f-b3bb-42d4-958a-9e50f0a79301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251c8cf6-cc52-4e49-94d8-f33b58c58ff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0398c1d4-46f0-4561-a9a5-3a423938d7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6ec1995-24d5-46a1-ad0a-16ec891c0e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8081247c-34c2-4345-a894-1143c9af6329",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84608deb-17c2-4eff-9e51-6ab9fccea29c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823085e2-f9c6-4562-85a6-974c5f209e7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a781593-3c07-45ac-9ac4-706c85df4d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8975d43-fd0b-4a49-bed4-edf07e0a7b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cdbd1e1-d8df-4911-8cef-a4911d6b2a9a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be31e2b-c8ac-48df-a8ac-e7e528fba3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f315e43-c632-4482-a1c7-7b276af8696a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fee6825-f7ac-499f-b643-464fc7390cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c79a570-9dbf-4147-afdc-661b6beb99a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a476e00-cd16-4aa5-b4aa-244b920b1029",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d1beb9e-2f96-416d-a250-f9763210a9f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3959d30-3e4c-409e-9aa5-86441ee96b60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36279177-872f-43bc-8ba5-326dcbfa2bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bcb50f2-f0c5-47b3-a530-b0d6f42c6052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "748c7401-29de-445a-ad28-60d7ac9ac926",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601c00ec-7d95-4c0e-857a-06531e4157ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10079cd8-ecf3-4169-a3bc-3b707c5ee9af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61a1cfc-8e68-4537-9e78-e996b8b955c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a48c2e01-2bf9-4b20-a24d-d24beb8c92d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ce7adf-44c0-4bec-83f7-e5f3c569bf8e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f63d62-aab4-496b-8cc8-920aebb97304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f4ff06-bd42-4e36-a464-7219e71b55a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb305e8-cf61-489e-83d5-6a44aee91b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "650129ff-7c6a-4134-8054-031994ab2dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f957a6c7-9769-428e-9558-66ce2b02c17e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd81a8f-a382-4a49-a61a-799144a8e44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625d9559-925a-436a-a6c7-d33ae2e8c034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0b08c3-deba-4cbe-841f-1e036eb1d571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a418585-ddbb-40a7-9caa-9bdd84ae41de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5440e7-5442-4992-bc9f-b1cfd739b188",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e271f813-05c8-471e-88b7-b7835ec58f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8fe3499-99db-4b23-b5f6-0c707dfccd62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecbcf94-5f73-4ad3-95e7-1e92f5da0bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b2c9d5-5deb-4a5d-a07c-10198e9e6fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd57035-224f-421d-a2b1-43f5b725abff",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e741b42-e40b-4b98-9ca6-ba5fbd55267f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08abc659-7cca-4c6e-8a31-9a9b1fc7f603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22e4e0d8-42a7-4d4d-b0ad-0ad66b7ebf1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4a73cf0-b087-4495-98b5-448ae25c417a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2fb8a48-4885-42bd-8635-87cd35f48ebe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0da721af-70c8-43d4-8a6b-294f23bad04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65c47b4-4aee-4f88-9461-ba7ab2993ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80554787-5671-4da4-a12b-13a7ac09d467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd2138f6-f7e5-4b74-a36e-263f0d9141f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621ba54a-ccbf-45db-a1b4-7d705b324545",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71bead38-44a4-4045-8478-b534df59b011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9f2aa7-9ffc-42a8-b27a-882915549041"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32eb3f61-c05e-43ca-a5de-27d3ef9dd954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1f65321-8fa7-44e9-b872-f220591461ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3563850-a3dd-48d4-a7e6-7d3986e6313f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea4521c3-3b4f-46d3-b2b3-79153841b241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f848bc-730d-4280-be8c-603340ec55d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88b9a6c-0980-4a81-8c48-5906bb5f7327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57aee4a9-b4f7-4bf4-b154-6c542a90bb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83c51c6d-1d90-4839-b4c7-6673fd0393e2",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5e6078-ecb1-46d9-93b2-7ded2074ef1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35623994-42ce-4a57-b064-b7f437ef7d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbecad56-7a2a-4657-b8f1-4bbd33c179e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "870c3975-ba4a-4323-ab92-58dc9fa49718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ba74c8-f14d-46fa-a12b-49ee149ed55f",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9a22f8-8b81-44ed-94d3-85a6cb9fa130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "860228cb-2b54-4832-9e9f-954e56b956a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca73975-e9ae-421d-9a7d-b20e241747fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfebc83d-05c5-4b47-9ec0-53c93d67fa2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a79e5ae6-775f-4ee3-81c5-f1b890f2446e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5789ae-cea7-4b9d-8b4e-8e683c1de422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba446000-3ad9-4a3f-92ae-6362328cb757"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef067ae3-3bf2-4c39-bc79-7cde1608b8ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb5188cd-b4e1-4e51-9fcf-a6eedde02fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaff643-aff2-4eae-8a15-a8cc702ea0c8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bd2db9-15ed-4fb7-9f3b-5414205c58fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4b3bd7-52c7-4561-882e-7439f7a805ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bd77a8-9b57-4c77-9268-d95a2b240345",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a70a8813-28d5-40ec-9622-ca53468c0404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87d1e36-3260-414f-a81d-2597bcaf7b1b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea86126-f80e-4049-a590-f9ca5f7a959d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa8c3fde-a39a-4d86-be94-9ad3b91bfef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15011674-99d3-4659-b8dd-cb7e08446248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e66671a4-7a1d-4eee-9a75-4e36701ee83f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8ed6532b-b6d8-4027-a772-fab194145ce8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "beee0fc7-e5b4-4b4f-ab09-99c5d7ee8fc7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1773f82-889d-4f91-9256-218fdf81a15c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "164e1209-dfd1-4efc-bd4c-715f57bd7c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21dd5a8-8a5e-4213-a04d-3639aad9052d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f901fd4e-2b56-41ee-893f-0a79231b16e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9f44248-3804-4c16-8580-8f9cacaef5ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc95c289-d97f-4d41-99bf-59fcf2ee8a20"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e4fd68c8-c2f9-4e61-aaba-119433be5a7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8172208-29ea-44a5-b58d-f75ce15c82e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1bafff63-54bb-4fa2-98b0-b43e80ae101a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5834827c-1ab2-41d2-a03e-e6342d39bc64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "370ddfe0-f765-464a-8009-014ac354f06f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de14a1fd-ba03-4911-9772-0776a72c7232"
            }
          }
        ]
      },
      {
        "id": "f28fa40c-e604-448d-9a6a-ab772ce940b1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6226aeb1-fb45-4b03-8394-dcd3e2c1c5c6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f6eb881-14a8-4277-98a3-e59c66ff3402",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "abc0964d-f6c3-481e-a467-0706116dda09",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3f6e71-50cd-4f44-a85a-85482564c4fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca5ef62-6958-4215-be0c-9a59341b967b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e52dbab-f23f-4d9a-b522-7c55e18e3260",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea728b66-d8ac-4b51-bf09-f2664fd06713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7439c1bb-cf07-42e2-abcd-7dfc81748b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ea9556-0843-4da0-b34d-5b2ccdc6a406",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c0274c-24c3-464c-8a0f-8952bd75e249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849311c8-5a4c-437d-9f2e-bd630a5d816d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050180f4-904a-4f94-8fc3-fca042cf763f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6588cde8-eee1-4992-a5ba-0b89a2b9c1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fffcc41-d161-4ed5-ab69-b6e12f00ad8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e494b8-0420-4693-93bb-1845befed09d",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd1c0f6-93fb-497a-885b-644bbf5dfe87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d57d97-1f09-4d90-96e5-404b33ae8c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ebf077-c9b5-4376-8624-9a611866f3bd",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150cb95b-20af-4da8-a4b3-d6e95de338cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c3ba201-9079-4e01-b280-d72ce1387716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab69841-01d7-47ab-9e4e-6cec27e69b72",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdfa5126-d3d0-4825-b507-81ea740ceb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6899b30b-51b4-434c-b695-2bc7a50970aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134e15b3-dc30-4b8d-b647-3f2bd130779c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1e59097-d628-408e-a57f-eb543c2a5ede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c41f1a0-2ccd-4327-9700-54808d9ed671",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d46aeae-b654-41ff-a4fa-0e4d35b616c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c28662c9-8e4a-4e4e-90b2-c1c9096f94a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61da419c-3c1d-4638-a9bd-ffb64838f6d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e822d5d5-5078-4353-af07-7b6f43717dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8981b8d0-1b1a-4430-bb38-c0f93622b3a3",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6a5312-7015-4ac0-b5b7-81aab9619a4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8eb626a-a80c-466e-a9a8-1e8df97014f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb2573d-984f-4482-b317-8e611f2a645b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa1b2f2-9d5a-4cd0-8e8d-86f68e1b776e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dde821-def8-47ec-8463-8f6eb1494673",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0565b9-2bc3-415a-8a7c-119ee8848b8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdd06e8f-18f3-4fca-a87e-adbcad2a9f3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14576b02-c866-411f-a675-e4ffb46e35f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fe89b9b-b439-44f5-80c3-8f67e6fe84fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e66ae0f-db64-41be-abb2-7e5cc41e9a75",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6a4c8e-7e51-4fee-9162-a4d762bd6367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74246a48-ae11-4fa4-b59b-a426bfd50bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7835cb48-3f26-4835-a907-44348bd8954a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77dc192e-0f8d-4f95-8691-e1080d67b3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6519571f-60fb-41a2-b956-23eef70dc4e2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7a4291-ce5b-49c1-a68c-f2f0cb8307fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb461e31-24aa-477c-aca4-8638b96259d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a42a33-d389-4b1e-a5ae-115b678c4b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcd9cd2-0e72-4e9e-86f2-81186726e26d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b14555a-c119-48da-87a3-2ae4372281fa",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d55a2b-3ee8-42bd-a071-bec5b9b8c4d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58ebe1f4-8382-4284-b4bc-072fcb129d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "596c79f9-ee95-4cef-ae56-75362123ec9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd36851d-c5d7-43e9-b4e3-7fde6a4e6da2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c67480-601b-4144-bfed-01bf583d9aaf",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca118d4-b3f0-4abe-b8a8-98cf6d082cac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0ad1f01-06b3-4318-92df-5582547f70a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d66817-0ae4-46fd-8aac-69a741d1706c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb55b88-e12d-4840-803e-d5e616da46a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc7b2c9-d3a7-476c-8aec-c3629becfcec",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f20b8e3-e144-47d9-80fe-4eaae3ede7f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d76b70-0ea5-4b69-98ce-ee54658a0e62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2853ec52-0e8a-4921-8130-8f8bfab71983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c6b4fd-2074-4baa-a464-4ef488d09165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76887d32-8fdb-4dfe-b65d-5ea2d40a4e91",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2627aa3-de51-45b0-8998-7709168e32f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53465c3d-dfbb-4b1f-978d-2e4be1d3b7e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b628450b-89fd-4f37-ac1c-b4baf19848cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73654e5c-3832-425f-a0e4-f8461138a3ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9219e7f1-cc87-46dc-b8de-343a6054cccf",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaceb5d3-5c52-4181-9049-7ba6e6d08301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4159c27-4f33-44ab-ac20-d33dba843857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dc0870-3d1e-4fdc-947c-cc0f32709722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4b8e76-2086-4952-831e-6be145b931e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f81783e-455c-4366-a48b-333e2b90a2a9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746bf94e-7ef5-4733-b0f6-7ae1d7142d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8f5ee2a-2cde-405d-8170-fe705dd3ad5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a19422f-6364-4d65-ae1b-846f5e297089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98369495-d241-4224-b425-aa90efa8bdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09817ef-ac69-4f21-af37-fb30752a1c0c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5b4cefa-774a-4ca0-a321-bd5ec1cfbab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce3320f-85ae-491c-9b37-9bc1b2653588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99091977-76ea-407f-a350-5549a25fed42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d97d13-78f2-44e7-92f7-947c0b39d054"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b47d51-65bc-4ddf-af52-c4331ca1d8e8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8fae83-03ad-4a63-9958-eeb8e7763cb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee5ff33-bba5-4110-8d9e-e8826092d1b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8fc7e5-0c8e-48ab-a625-a32295c64e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b4cb73d-ada7-4a7a-bcef-62063d710ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25301ccc-e212-4716-8791-b37e88763415",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e641d5f6-bd3f-4539-8325-d57caae9fe05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dac075a-6faa-4294-a732-05e0bc81b23f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e33e56cc-d9f0-4c10-97ca-07a1133de044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fba4650-2c51-4040-b685-5a8de26909fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad005b9-3028-4696-87b7-28560e5869f9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fcb92b-cbbc-4716-814f-aee6482ebc1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27ab1f7-39a5-48e7-8261-4643706b18a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88e4d45-d285-4a9f-b5a1-4e6df81b8686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf9c288-9941-4e03-b823-cdf65c9e812e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e5331f-256f-44be-b8c9-a2ef72f18e3c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ae380fd-4291-49e0-8e02-5460f5c31f21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae13d39a-076b-434f-8178-5bf8741aec13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd71bc56-806a-4c18-b35d-03b5b1f59418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5efe151c-ceb4-484f-a6d2-436f9f79f94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5835b271-8738-4163-ac6d-dea83ae28faf",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e3953bc-0fb6-4c4d-bcb9-3bc3abbe44f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51e97a35-11dc-4081-adaf-bd8a39de57c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414bd33e-739f-43a5-87c4-8af6c2da3c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62f82f69-b5de-4946-bbd3-a25535275216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf03a73-c0f9-4abf-8240-afd49efa32f5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a602741a-3dce-482a-b66a-80cb43816b71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bd06d50-e638-4c94-b194-35b71a482b05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fda6ac7-2e68-486f-9e02-ca53575646a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f2fa99-1631-4511-9be9-7a9016d0713f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cd9954-2cae-4b87-9c39-39fdd7f43b94",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6834dcb4-42e5-493f-820b-e1980d064f6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7611f597-fa5c-4f3e-ac3d-56c9c3179dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1a0146-2742-40ea-81f8-bf9544be298b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95cddbc4-2d85-4c5c-b664-e31b82b39185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6233a6d-1800-4f68-90fe-8d0d903b736c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c01e3b-ac5c-4199-8037-3109adfdef20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a09ceece-6766-4fb6-9127-921acbdae946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42fb2c6b-f25a-474c-8078-49a73576806f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa8c7a0d-25f0-46d6-ae76-09c8140f7a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063f4384-1077-4576-9e40-0d69c65373b0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e031b442-337e-4c08-a34c-193ac7ca0bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d11a57-dc0a-4792-a95c-c80276bbc2e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deac3e82-84d4-4c77-b3bd-db2fe5e79c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8337cc6-1631-456e-9c88-670dea20d6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e60236-c350-417f-87f0-34275fde79e6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76b99dd-dc1c-4100-ab73-f97db398de3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65d2254f-e4ed-4fcb-aaf2-615b53ab1d37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "243facdb-bcbd-44b5-929e-d534dca245ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f108e125-5998-44c7-ac33-4bfd71d9fdae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4691dfc-2f7c-4154-ac31-3a702c1960b8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e52e989e-544c-4cbc-b61d-3f469a51d856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f79e6c86-32b5-439c-a60f-f88bec31cdda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9be8025-92dd-45fc-89f7-cdd328ee6943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e9a8e0-b61d-4b74-a338-6ffdd9728d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f66372-3349-4053-aa77-a0c41fb7602b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad0daf9e-0a5e-420d-b6f2-c409b44479c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df3aa05b-35b0-430e-8bbe-1cdf68f5c3f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab200b8d-cbc0-4fa7-a653-226b0ca8eef7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13115891-5bb2-4b90-9534-3d87e492a232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a22db754-2746-4f8e-a2f2-c515fc368bec",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "333e7c60-711d-43b1-9dfc-79c5aa73859d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "992c5e42-7249-4db3-9724-b3574c2f3aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea03a8c-253a-4e28-865b-1286a1bbc0cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1bc1975-1911-4321-90fc-160eb8467037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471f8769-c598-45d7-b436-c831be7dc0a5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33cb5a5a-d4b0-4d31-a39f-9ff60db1bff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3f5536e-5104-48f2-b096-acc7994eb448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56704d01-ffb0-4c37-b1cc-02e77847594b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d33aace-9750-4353-9416-a37a28ee211a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef6d930-4438-4163-ad50-8b5ebd43f114",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6a823c-1c41-4f1b-a2be-988a3e482c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a502281c-21e7-4229-a218-1a05cbaa554e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9db58f0-6be2-43e1-bada-f9a42d60e328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd5be8c-442b-4eaf-bcd4-7f160efd1c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1f93ba-76da-45b5-a8d5-c1a8bb8ba416",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c545255a-89cb-4ec1-ae2b-41802ab93d1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f786d16-7d35-4473-8801-865cf477e49a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e847b6b-61bd-4a57-9071-4407e3360c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693445f9-dea3-4de2-b74c-035164aac46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37803d85-68e3-4e37-a92e-406a948f4cf5",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cede7a43-4b90-4621-a9e9-cfc1a6f888aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0892fa6d-b3a0-4be0-a276-03b37a75446d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6766cfe-be37-4713-b910-29ef837f2c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc6cf684-a212-41bb-a62b-4a487f30f4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09dcc75-a512-474a-bab6-65175f61e1d0",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43d63fb9-a4ec-4f8f-93c6-8ed31c62525a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f054ed-8a90-4873-9298-cc6e0fc203ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "029de9b8-c17a-40cd-9fdd-3079d86f8af4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b8aa0f-e151-44a8-a48c-cdf584fb4d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2e135e-ef38-4a52-8287-8c48958cf53b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14c551d-c74a-4ee1-a597-e5c12afb03bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63492fd3-be5a-48a3-ab2a-d19e0c173493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5350537b-c260-4695-9e7b-0a052ade7f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48d6be6f-77a7-4f24-9060-556fcbdcf385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "466ccec5-7abc-43d7-87d6-b9ca8ae83ffe",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6869442d-6c5b-4363-89c9-e43e34a52ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941a7cce-5186-471c-9b12-6de071cdce5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd0a43b-5f16-46c4-9531-70bc8502d79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148e75e0-2805-47cc-ae50-32b87f3d7a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e227e15e-c0ef-4196-b8f9-d5e865683777",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68695114-9dfa-4e57-ac4a-2fdcbd501e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a1dd01-c0c1-4197-a64a-01d90970c659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5219e290-43d2-4cf4-b3b3-19b101f17aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0123b5f3-4358-4341-8774-9202b03fb5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39da7e02-bc07-4b6e-9863-80696f1baa4e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5840270-0b90-4e80-a2a8-68b113d70f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44db557a-d504-41e3-8329-d6141528cc55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b72d2f-a419-4beb-839f-12beee54aa76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b77c6c1a-0baa-4ecc-8d5e-b7cb962a888d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec939198-76ca-41f8-b841-6c6115708417",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1562602d-ecb4-4caa-9f18-6e061eac8eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "124e7bc8-825e-4409-801d-f41b1413b1c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee95543-ff5f-4f5d-8eb2-111103b66b98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7e2cd8-ace3-4be2-a71f-04eac8db69a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3ad82f-a658-40bb-9f16-281b4a413b21",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4ee482-1514-4779-9947-cbc6ebbd80e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bca2b6b-210a-4981-8ede-dbec5e751745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec261259-91d9-4b40-a42c-8edd1e2fdcaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5b1d34-5e57-43be-8b70-886017759fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3da814-e7fa-4f36-8822-3f32a4be44c1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c48d77f-d62a-4fbd-a760-75eaf8019eb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "329dad29-6f40-4028-8fa8-fd44d3633bb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2a9691-76c5-47e9-a95c-04e86f8967c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a1050b2-574f-46c0-b13d-3140c2764a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7668f30e-e993-4f6c-bac7-e55c8e0d42de",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0e072a-c016-43e8-84ca-2236a175b2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae50618f-cd54-409f-b084-da97e6c3cf38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1202d08f-04b7-41eb-b3bf-98136ad2b5a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8cbbc89-0098-4c6e-8809-ba3506e140a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845090de-007d-4b1a-a00b-af42052f9437",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1f5764-347f-43ca-9be2-0341dbacbbed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38c7becc-ffd8-4029-bac3-2bbd8ab7c6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb96f3e6-c822-4830-81ea-1d8d14c1cf40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "431daa52-29b9-494b-a353-dd03d9ba389f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3115d17-18c1-4d91-9fd6-2c2a82db633e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0592258e-9fe0-4956-8d5f-449b980ab3e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3441c3b-8832-4fcc-b934-56cd39f052ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc8c593-a267-4250-9286-5c661451b86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67c807b4-d490-4301-9853-03cf6954781c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7deb46cd-78ec-43e1-a2f7-fe5b031df49f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13128c9-18db-424a-b42a-703330699072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe324298-afb8-4433-8dd5-84a407b82280"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdacf68-e26d-4e6f-8f9e-798fa5966aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9edb78c-ecfd-4af4-8240-514052c6ea69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e42137-ab1b-4051-98e4-bb8f65194256",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d57f9d-68a8-46a7-834b-be53661b9443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a363abac-e5a2-4532-8abd-a309ff88089b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b509ffb3-8ed2-4a03-ad84-b9008600642e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c51d4d-3f53-4e56-89c3-e856b6a6fc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07d15f8-97f0-4e56-9296-a53aff26cbcb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27f5d23-d887-40b4-b7cc-52ac55fd87b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ecd0c9f-f1b8-49aa-98bd-b6406623ec5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb1eb84-fb78-4fd1-a28f-e8fe304f34c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50d92fc7-d25e-4fbb-a64e-7c35acbface8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b144a7c8-ed3e-49ab-833d-96f180d48477",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f81c69-f5a4-41cb-aedd-729f893f85ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a65e2e9f-c4c6-455c-8783-4c8d4ce7060e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8b36dba-32cc-400c-b662-586e37393e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97288ddc-0b27-49c5-b2d2-34e189b7c34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f1c575-a679-4dbf-851b-4aec92308208",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a734c5a3-75c0-469d-ab80-ccb673db7e6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311acf75-ea58-4411-b3ea-793596dff858"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7348ddbc-05d8-4389-bd89-c727eb7cb9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0950fdd9-79f1-49f1-8972-32f574c7c808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d61bab-1135-4b02-bc88-97a043ca6b33",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0a309a-a64e-4083-a463-019138d1b0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0515220-621f-4680-bfc4-ac9b6ca256cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7ec7de-b264-406c-aece-ef927c24cae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82cd5b1e-5a96-4b8d-9945-f9e1398f6949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ed764e-8022-49bc-8d72-5833599b4f99",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4fdf6fe-fb3e-433b-a8fa-ad54519a8501",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f611f9-d15c-4527-9fe0-703c26fffa3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b706bc0-86e7-46d1-9de8-0a72a2422d53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701471be-a692-49bf-9b56-ff97319c3406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb97ebc-a467-4b1d-a1e2-eee7a9b4c491",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a51dc8a-8762-4bd7-ae6e-2b5d306d71cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f99163-5f8a-4d75-b59d-b69cf97aafba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9203cd5e-f2a8-45a8-b59a-41992b0706bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e64cd65-e39d-4955-8f27-d921f7ca913e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71701c82-3b43-4dc4-8265-3ab3381ebe0d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70fb114-7520-4b78-a19a-35b7f40f989e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efd90b4-d756-4df7-8430-5150d659819c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "663cfb52-5e9e-49e3-934c-8522e895968d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a00ecb-8b02-435a-96c1-319f142ae3e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4541abe4-c1d2-425e-919b-301e6e295d04",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5991b898-0e2d-45cb-9bca-fc1d4224b16a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f125d155-9ea6-4c0b-acc5-e6678ebf4c35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15a2892a-70d6-4e3b-9403-0050a746cc40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "821af80f-bf20-4070-8cfe-1094ef248436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83185d6e-dc30-4e08-86fd-ddac920ec589",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780c2aae-2d23-4269-b335-7e8aed0bf575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c47deaf-7994-412f-8c83-66c7ca4d3b89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff60a26-663f-423a-b978-af8622405add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "447d9ff0-85b8-4646-9fe4-ecfdf021e057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f85b753-28df-4cc9-a7ec-58c148f6a5ca",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0668a6-7d75-4ef5-b531-656be2b874f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b08afa7-fcdd-49d6-a747-f7bc3b83e7ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73985355-f77c-4080-abf5-0e4b8039a191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17adcd5a-bd6c-48ec-b721-79285e60e2b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd11cb9f-857d-40b0-9f45-ad354fe2b8aa",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94292d7-a572-44ad-a799-f75d1aa6c735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f87ac422-7ff8-4af6-b75d-79859568914b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2f261cf-a738-494d-94d3-36d97496e19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2671c1d-f7e4-45b1-9ead-5f055922b808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfce08d-2679-435e-9424-2d2dd3411f51",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b114896-791f-41a7-8abb-45a87f5c24f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d59b50d7-61a9-48c5-8bf1-2e2e6217ef5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0409af05-4f41-4ab9-b3ab-66d534bd9b6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1006329-0395-4d90-9397-e83294ffe553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf636dce-81c5-4346-8904-94755cac43de",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9603134-1510-4357-9959-495b8f6fad24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "508d36ee-09a9-4d15-9c74-c9b7d86ba50f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3fb633-4d05-4e9f-b28b-0163e19a95b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "583d0dc7-0d16-471b-ab52-f57fdff6e392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b069651-4316-4e65-ab72-418f47a2bf9e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e000cc7-d9dc-4467-a86a-80f81193e89c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4900384f-f8fb-4b65-a8ed-3477459b1cb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6488ac47-8eee-49f3-ba3c-6710be777d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa72a21-62b0-4dc8-98ed-0704dd0f42be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "331eb46e-5e3d-43f4-99b2-ce3e56646a66",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8650b6e7-8af2-44aa-9300-a4374285d9c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68e0ecc1-e9d3-4946-932a-ef8ba84ecc10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0363b7e1-90d7-4faa-b4de-a230ea8b49f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf52dd0-1bd6-445e-83ba-2ab1c9c16fc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f168359c-9bfe-4180-b89c-88a323bbe97d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7766ce70-3b1e-404f-938f-460f51bbd405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46511e1c-9fa9-4634-84ba-dc3579082724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d657bdbb-bfa9-4753-8dd7-75b35f8b32cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420d2530-e4d7-4afd-a658-ca46d4197a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e06550-ee90-4ea2-8e8f-ef4c68e2c877",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d781fc0e-76ed-4954-8f56-b0c88984b4fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0257dbd6-f705-4a0f-92dd-a6294112d86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8352a05c-26d4-4118-9f9f-d6f950ade069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b03c64-a00a-4633-8031-f09a65f13b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e326c2b-b7a2-4c3a-908d-02d481c1ddf3",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070b6a20-c708-4a7a-ba04-84052235785d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72b65885-d119-404c-8824-9c17a88a1070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cef16f5-28ae-49ab-a7e1-ef916d654008",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2735b457-1d5a-419b-b424-bc7c03b00a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f07323fc-5fe3-43dc-989c-32ad84db873b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142519b1-4bae-408f-afcd-0ee8dff0b462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8f732f9-a131-47b5-a82d-142d64d09895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294407d3-7aaf-41a5-b25e-b891fce05b18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869d2ce6-3b48-49af-9bff-2875a816955b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6e29e79-db6a-4e59-88ce-4ec3050af466",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e62ae009-f34d-4aa5-8304-fd86defc5f1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3b64b23-4b6a-49e2-b611-6c713f54d0f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18284da-7f1d-4629-9d77-92b2d82ea69f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a5b37ba-2af3-4886-b85f-9c4ab8ff0770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bf29a1-3067-4117-9482-0fc523bb1fbf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "960586ae-a632-4eb7-832f-979433c73d81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3243c5c2-7b40-4abc-b793-c6858f3d8416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de78a115-e5a9-4c58-9b0b-cf93c54105c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9ab7aa-2067-493c-8ef7-611b4a853a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a94c9ac-e66b-448e-87f2-ef59ebeab69c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b354a8-0cf9-4858-95c0-f943a9cfe5d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e4f67ee-9a2d-4bf9-a42c-8ba1d1486def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c49f408-8cfa-4f25-aeda-f412fd2feab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c514a65d-8aee-49fd-9afb-e2e6fde814d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa0c7b4-ff2e-47c3-ae4d-b8737dfb2127",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a332a55-5635-40c9-9d45-14173954c172",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb2984e2-2c65-43c9-8493-7ae799123c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f01a668-ee5e-418a-9c0b-dd206dfd691e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d26524-9f93-47d9-b362-eab68b7c950f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee08e055-bab1-4867-a670-667a6fdc2de9",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe2f427-9ef2-44e8-b3df-72641d500976",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad6b2b37-c2a6-4946-a590-929f8ecef865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4506f37-9dda-4dfd-9858-f3539f476f41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b9c751-e510-4d48-af99-18dd108c67f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be481000-0d0d-40ce-9221-51e35d50e65a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "329ff82c-8ac1-40aa-b1c3-6c988ff0aef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a0c569e-81ba-400a-8ecf-fe63d9205735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d811d27c-cbfa-4912-a7bd-867fefd0623f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3703de8-0653-45ef-a2fc-da6095cc9adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac25e553-f28e-4c83-8b70-5201412dcf90",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d694a3d-8dee-4bc9-abb2-15c23c795666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "338665dc-d9f2-4c51-b44d-df25cb86ee1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec85a9e-2272-4d49-912f-7625550c2a14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a458a3-165f-44d5-bd02-e3c81397f1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdc7a45-bc04-49fc-86c4-692ffe759c66",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca71ca98-607f-419a-8dfc-41f043a5f274",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fe72acf-4a40-4c53-9cd9-253c3508b49a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3ce67f-afbe-4c14-8954-4e659a0a6893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1fe75c8-8c1f-4b5e-b9d4-722dde4c620e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e46a2921-b110-464f-9b11-5364105831ca",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5af26a3-9583-414b-b5b4-3ac6cd387e0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6448ad96-9064-43d5-8b89-071be9f9a9d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ae4b66-f83b-42fe-8368-1d4f5ad14e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669008bb-788f-4258-a48c-4def217cabb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70795456-ab5c-43c2-a368-8f9102b9bbc3",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06150ce2-e7f9-43d8-bbc3-81b6d341d07e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edd3b775-46be-4a64-9736-c64860224fee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b395e0-341f-4169-9a19-e0c54330ce28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd17f863-5d28-440f-a232-143b2dc54122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cd8a9a-250f-45f9-91de-3e56529fa84a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1352670c-734f-467f-86ee-27e1f0dc8563",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41efc5c2-6157-4147-a000-8e4944dd77bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "586f402a-1be7-4275-8104-37bf24997c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6699043a-7c2e-46a3-accb-f7c17d7f4275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e3b7eb-33f5-42f0-b437-ccd7c0969af7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90da3a92-65bc-4722-863c-516d51440265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fb66a9c-bf1c-43d6-a56c-e6c290e6b01c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0017ff3f-9364-4752-90af-b4a14119b07a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "798d7d33-ea7f-4282-b891-f2037b29e53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9820464d-6ac0-41e3-8f3c-2b6925923da0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b75cfe4-8667-4406-9c0b-b1f114d977a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f4229f5-5adf-4b20-97fc-3a390b35ce11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "964d38a0-0562-417f-9d70-8e229172ba17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8aaaf84-c6e9-47f9-bd55-ec3b8bce3643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5feb0e-14a9-46c0-8fcf-f70260b37b53",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90384605-c6d5-4ec6-82ce-409d2ec579a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "555df7ff-4020-4e33-b849-5124ef2df4e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecd2801b-e43e-413b-98ce-0f6015445391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfb2b275-4490-46c3-a56c-7736504ab7c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f16002-f17b-4a65-87d8-66ba1f7cc618",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9377afc-5534-490e-abb1-20ea98c02067",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e605f10-48d5-4dc6-8c62-6bc6e5dbb6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399406ba-af06-4a3d-98a5-fae3fab1724e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fa7ed38-c67f-4328-b828-30c40aa38cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936bb9ae-3b7f-4764-a3d1-da39fe2170c8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebf17b3-e3b5-423c-80d7-0c6f1db54657",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f2d27e5-897c-491c-bc33-d4a76e377a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa62d69a-fa14-4918-a1fc-9be45956655a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ed81ab-a5fc-44b7-a02c-de9e2d45a026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0050c512-5be4-48ff-ac6e-a673704bb17e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca835fc-4431-4bcb-b667-fe3664d55e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eed6c4ae-df42-45d1-bf3b-69d70988d6db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca3a004-a7fc-4f0a-938a-3cb65ae87db0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5a1761-6d26-4d37-974d-111d921cf6ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f033b67-eec6-4b09-84e0-893a4627149d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67b8680-82a8-4fd6-a83a-ae2c31efd9ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c715345a-7c0c-49b4-819d-f4d6bea43888"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96083de3-a275-4376-b1f1-00ac6ad882fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b18a877c-2b9a-4bb4-8c6e-1ede82704ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e95cf1-22ea-45f1-93e2-cea8c0fa0bfc",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b50bc0-d08b-4471-a91f-677ce232bb20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8dedaf0-4536-48e8-ad90-989b96b9ffa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dd49af5-cfbc-4b56-9393-c6e699806ef1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6be63319-d782-4731-958f-ad53739bf7f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9131b81c-bf72-4bef-97b9-de7787cb9de0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dbc0d6-5582-4afb-ac0d-55e3ddfd44d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fd5711b-e86e-4b92-bd65-e862b9e34de2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a55cea-9c84-4a7f-a066-ff2e50586a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6cbe95d-96ba-46bb-9ca5-f423e33bb42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e607c486-c363-4a61-bf27-4af03c3c2730",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812df9a4-fc70-414b-ae46-aa7b8e0c0293",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b18341a-844a-42d1-bbad-44f7f3fd8f66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e0fb53-10fd-4960-b923-f9eed6fda1c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0784a144-823b-4c42-897a-4d8d30eb039f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a1cc21-7d0a-482d-bbdb-f2b321be7541",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bba3802-64f6-415f-9b63-a6d96605a65e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2375ab59-d4d1-461c-921c-8801850a2b47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e8a70a-5b84-4a56-8b6d-568cbac2ed73",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf98641-f899-44da-ac41-f58e1da970df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9413d3a-3413-479f-a364-db3029bf8495",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c944aab-a516-4211-aa57-f101d5a1cf44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3c8291b-9339-444b-b84b-6e10f1e1ed0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f84b65-6c3c-4c7b-aa4c-70929ebd375c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f44c797f-25f5-4d14-8f16-78223befb782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e7dfb3-d7af-47fa-9e74-795225f29f9c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a449aa2a-d88b-4658-a9aa-273c914e2096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66c3b1df-abe9-467d-9eab-05b619dd2ab8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a199c2-421b-4b85-bd64-8e4959188c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96f561a2-7ff4-4fbb-b29f-d8ffede0e5e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6219ed0c-58bd-489a-959b-595d18c93d68",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc92c35-309a-45d4-851c-13b416397d34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7077faab-28cd-48e3-9869-bab4b3ea065f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cb8884-c862-4856-8bac-97eba67f8c6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51adc10c-efab-4761-a083-d8835d04eefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "562bd857-3564-4cbc-8fd4-f263809365d1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc9d766a-adc6-4312-80ee-f22fba1f9ea0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "490dd8aa-004e-4efb-8e0c-0057a6d42d24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd3ac70-fe58-498f-a7c9-707160bac52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe80fd69-acc9-435a-bf04-8e98a459c8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c361c8-3c8d-4708-ab53-471f66b99418",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfaf8b4-db87-4871-bf07-adf9d180d2e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "edc4c803-68e0-4f8e-8ead-62fb6ffea9a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "328e7e9b-9705-44fd-88e5-ac949591dce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b16d96-36fc-4f18-8f1e-49af161f33e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01d8d4f1-b2b5-41d6-962b-66eb42026898",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca91806-237a-46e4-8015-c6a91dbc838b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cc8c801-8102-403c-b3f4-c8caf824aef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36518a65-ee16-4a55-bf3a-793361734696",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52612df5-935b-4323-a437-efa07cd17428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b9fdb1-ca02-4d0c-94aa-2c48c1f7a2bd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321c891b-4fd7-4241-a575-0d8827acc0cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4802d570-1316-4a40-b77d-d1447160bf19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33a2aec-dcf7-48e3-b2f3-e571ef838e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b0e6a6-cb3e-49a3-b909-78c89c15e010"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa9a5022-b5e2-4f4a-a08e-07800dcda690",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5731a1b9-1e29-46e8-a84b-68763af65fde"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b211a55c-e505-4ae6-9f38-e1f9927e4f42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "216e5918-ccc3-4176-96b4-de2f26030076"
                    }
                  }
                ]
              },
              {
                "id": "ce6c5588-ffd8-4452-b7a8-188c7ba22298",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dbf770b7-81f4-4ef0-b930-ecf4d645a8bc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3ce62d-5e50-42ad-bb1a-b56581744da2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5ff77430-887e-4099-9011-5e7f5643dfc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80493aa4-5e15-4e8b-97ef-68d87191533e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd36d910-1ec3-4152-9942-51529cf06f50"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3af810e-a3c9-4354-b90f-bd64f2fa3b9f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad981950-66d2-46ab-a8ba-dce280613193"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a28c547c-e08e-41d6-b627-01caae510c96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9661a1cd-fc47-486f-886a-05f4bfceab76"
                    }
                  }
                ]
              },
              {
                "id": "44d27c5b-d1dc-4fac-a42d-8d3a543658d7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f0f43af0-e17c-4ecd-8c83-382cd2fadeda",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935ad76d-d409-44d8-9cc0-a808002455ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "3a9d4116-5fd5-4ee4-b173-d6cef5d669c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecb6b3b4-2233-4a66-a508-cb963ad33833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363eebab-95f1-4a1c-9e7d-8782610ba929"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f054c30f-c849-4203-8269-5ccbc6355e36",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62c849d3-036f-4f16-beb2-23d5af0e2eb5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28094505-9579-43a0-a6de-ff85bbc4fc5b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f2360226-daab-408a-b5d4-3d5b858b7ad8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06158d51-acd0-4166-a499-c148a04b37a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b86a7335-d0e8-489d-99d2-2a48a7ec86f9"
                    }
                  }
                ]
              },
              {
                "id": "8e3f30bf-c01d-40e5-aaab-ed8a987e0948",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af3becbd-82e7-4263-ae91-f3ef2e8df5c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "85f37e93-b8c0-4cfa-863c-d259aeb8f1b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa672b67-8e97-4bf0-ac14-f172ad1a440f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b273d36f-9252-41ec-be2c-d73715752bbe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67a92ecd-2447-4d2f-bcbd-cf10d6c620ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "deeea0ac-a349-4f7e-8f9e-69d6dbfd2cb8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a1e35ee-0556-43e1-b1f2-1395dc73d7f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30f00bc7-6453-4e7e-aef3-7e1ab0d0ae10"
            }
          }
        ]
      },
      {
        "id": "469ad8c8-0faa-4818-a66c-0505b522ee75",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b0121beb-2f4a-4a37-9221-546c854ab51e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "caabebcd-5dca-494e-a9dd-5cae7220261e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11b33efb-63b3-4104-b36c-d3265219bd8e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73e343ae-0dd7-4a90-9581-680aa30b1ef0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "24a1817c-53d8-422f-a085-ce070a1f46ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb3c849-f64a-4784-a0b0-7332ff9f2a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5b6ec96-d894-44b7-9b46-f40df9563345"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7354fa1-1e9e-4542-af95-648b1dfa23b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c2ee505-15d9-49b3-829c-6f0b0b021354"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e00dd56f-a314-46ff-8be2-f19d36d686e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19d40bcd-1886-4e94-be23-6e2e39c83052"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a0d44041-91c7-41d1-83ed-a28346e32fb8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1cdbb238-b94e-49b9-82f0-90ef1c297d88"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16ccc405-7fbe-4c2a-9478-dc85f2df559f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e6fd3f65-1e75-427d-8dc6-a898e6ca003b"
            }
          }
        ]
      },
      {
        "id": "842b3659-7efa-4890-aece-f5609db2e54f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ad035353-255a-405d-ae33-22682fe57f3d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cd232afb-e675-4716-9249-13586beddf96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3f596dc6-4c97-45bc-8a68-b5382a0365fb",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0934ea0b-78a1-447b-9dbb-d5d4af715dac",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64b7bf6d-ba78-425f-9c76-840047e55a11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af601407-c640-4eb9-95ae-5635cc92e324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81ba95e5-89f8-4076-9c70-e041dac5b67a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2435d68-3d09-4794-a9d3-d8b76b97bd61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49cb49b5-1227-4096-8a37-7867f94a58a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc7b3bb5-0b55-44e0-9121-711ed6b41bba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "71878c9c-057a-4171-8ad6-d2873cd0fbc0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "360939ad-5720-47f8-84a6-6ca9b6627450",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "00f32855-efbd-451e-9ccc-63769e1d1d1b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5965207f-ad04-4695-b1b7-584928cdbef3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d9121ab7-9ede-4faf-b94b-71fb9a120a55"
            }
          }
        ]
      },
      {
        "id": "6a8e1baa-7740-482f-9e78-0fa5bde71f38",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5e0caa3b-5c5f-4aa6-bb6d-df6b96f9a891",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9013ea05-64a8-4b56-885f-2cacd0ddcff1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ca93f05d-72f4-4d85-b238-5041bf351d7d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adb5596-e4da-4288-9435-d8e043619d3b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77bae324-1e86-4930-b783-03e4c6904478"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe9a392-a19e-49e6-a649-18d67b9ea92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "666e31eb-3e43-4280-a679-1863350e54bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58f4d3eb-d89c-4ca3-af21-f4ca6dea3721",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57d095dc-3ecb-44ca-997b-3238005c47ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0a58d1f-7455-4a0f-aedd-3c1a98e13bf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0c3303e-f3c0-442c-8cd3-4f41208126e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e976194-d217-4fea-98ae-735b1dcc6340",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f86f5aa5-befe-4a6f-bcdf-1a1f3f46b2f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1433420c-d9f7-43cd-88b5-640a35ae442e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51f814fb-336f-4638-854f-fc02e81261d4"
            }
          }
        ]
      },
      {
        "id": "6d061860-5d31-44c0-9156-9f22aa670640",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd320d99-af46-48ad-b598-525ed834addd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "59dcec2c-b1f1-449e-ae52-5883aaffeb03",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "83249c52-e290-4ff7-985f-509d3dd115fb",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7e0e05a-6c2e-4a76-ae5d-64a15d8833af",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1f12365-4178-4a81-b825-3794cc100007",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 51
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 144.13732394366193,
      "responseMin": 19,
      "responseMax": 2018,
      "responseSd": 319.06327270183425,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1694478679663,
      "completed": 1694478733746
    },
    "executions": [
      {
        "id": "6716398b-3e0a-4818-bd79-f9eacd52d688",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "93e68d5b-538a-499f-8e38-adaad3d39b57",
          "httpRequestId": "21a0b536-5c4b-402e-a73e-05f1888594ee"
        },
        "item": {
          "id": "6716398b-3e0a-4818-bd79-f9eacd52d688",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0b9b8666-3545-4135-857b-97eb79dd3789",
          "status": "OK",
          "code": 200,
          "responseTime": 109,
          "responseSize": 0
        }
      },
      {
        "id": "72bad53e-da92-4413-b7dc-16567474052f",
        "cursor": {
          "ref": "359fd60d-a756-4d78-b531-a821864ef686",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8b271132-beeb-4a46-b8ff-69908aa26f42"
        },
        "item": {
          "id": "72bad53e-da92-4413-b7dc-16567474052f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d463df7a-6f30-40d3-9ef3-df779509ec33",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "b2d8c216-ecc1-438e-b0be-37db39e1a8d3",
        "cursor": {
          "ref": "14e9c2a6-cf87-4876-b77e-fbe1618f38d8",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6b89ab57-f01d-4db9-b411-3f65b74e5b68"
        },
        "item": {
          "id": "b2d8c216-ecc1-438e-b0be-37db39e1a8d3",
          "name": "did_json"
        },
        "response": {
          "id": "bc6ac63d-b945-40da-9b0e-f86fd369fed3",
          "status": "OK",
          "code": 200,
          "responseTime": 318,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cc2aa6-3008-4f15-bdd2-de0c54debd0d",
        "cursor": {
          "ref": "76e8e7c0-3f64-40cd-abe8-37efc2976c29",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dc2d569e-0087-43a1-a9b7-2dacbbfd42c6"
        },
        "item": {
          "id": "c8cc2aa6-3008-4f15-bdd2-de0c54debd0d",
          "name": "did:invalid"
        },
        "response": {
          "id": "c3184035-e041-443c-949d-7c3732884e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8cc2aa6-3008-4f15-bdd2-de0c54debd0d",
        "cursor": {
          "ref": "76e8e7c0-3f64-40cd-abe8-37efc2976c29",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dc2d569e-0087-43a1-a9b7-2dacbbfd42c6"
        },
        "item": {
          "id": "c8cc2aa6-3008-4f15-bdd2-de0c54debd0d",
          "name": "did:invalid"
        },
        "response": {
          "id": "c3184035-e041-443c-949d-7c3732884e89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6a4512e-1dcc-4a2f-ac0a-d612138fe030",
        "cursor": {
          "ref": "d533e629-2d64-4a53-8615-f56661281bf5",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2528052e-0968-4971-8be8-425c001aa047"
        },
        "item": {
          "id": "a6a4512e-1dcc-4a2f-ac0a-d612138fe030",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "763f4b1e-bd45-45f3-a911-4f29e94c1a15",
          "status": "Not Found",
          "code": 404,
          "responseTime": 114,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ebd4c0-0df3-489a-abb9-2b8f96719f27",
        "cursor": {
          "ref": "6c1381ef-02de-4d7e-ae8e-4166019be8a5",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ba882b39-5385-46d5-b8bf-0f1d61c91bb0"
        },
        "item": {
          "id": "79ebd4c0-0df3-489a-abb9-2b8f96719f27",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9f678c5c-a186-47bd-aaa6-e7c58b727e45",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522bda84-b0e0-4349-805d-29a3ed61b9a7",
        "cursor": {
          "ref": "ca2ed580-14d2-432d-84e9-a505b4b0d3c2",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "161204af-400a-492d-8e9c-899c64a3cf28"
        },
        "item": {
          "id": "522bda84-b0e0-4349-805d-29a3ed61b9a7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1c2e4c14-418d-4936-ba36-35b3548ae7b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123e7662-784b-4cab-baa7-43ebdfd18d09",
        "cursor": {
          "ref": "902bb6a2-d73e-4759-8b15-fc3c565421ea",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "3ad192ca-82dc-4f3b-91cc-bf7e8fcea330"
        },
        "item": {
          "id": "123e7662-784b-4cab-baa7-43ebdfd18d09",
          "name": "identifiers"
        },
        "response": {
          "id": "be1ecb3b-b4d8-407b-a27d-9c343f89e1df",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c38f15f2-17a2-49e9-a8ce-8487f82b1651",
        "cursor": {
          "ref": "8706e050-edc6-4cd5-95cb-1b560b684d44",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ff89e99a-1aa8-4d9d-82ac-b8e07b5f8860"
        },
        "item": {
          "id": "c38f15f2-17a2-49e9-a8ce-8487f82b1651",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a7c87977-342c-45e8-b480-1353966155cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53d3cc72-0d6a-4b12-9f8b-a506934b1f92",
        "cursor": {
          "ref": "afbc77f8-d0ab-4f8c-8d4e-7f1aa1d3741e",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c72aa2e7-cff9-4bba-b1da-587ac1dbf83a"
        },
        "item": {
          "id": "53d3cc72-0d6a-4b12-9f8b-a506934b1f92",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4471be56-0e9f-44cc-b5a3-e7b7b38ebc32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b492a7e-5e3f-4aa8-89c7-0a576b80f46f",
        "cursor": {
          "ref": "93b17066-6b9f-408a-8026-6b40f00d4eb6",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "36e25fa8-35b2-41ed-a5fd-82226373ee59"
        },
        "item": {
          "id": "6b492a7e-5e3f-4aa8-89c7-0a576b80f46f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "103288f5-90c0-433f-97b9-fbecfa38483d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d237e6-f648-4f9a-958b-de9141a195f2",
        "cursor": {
          "ref": "8d4e0323-c107-47b2-8b17-12ef45bfc873",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fb5e7357-06eb-4750-9188-f5584127a737"
        },
        "item": {
          "id": "67d237e6-f648-4f9a-958b-de9141a195f2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7cc0550d-1041-4137-ba1d-f3fb626777ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1e9fc3-f66e-48c6-b254-1c14eca5cfed",
        "cursor": {
          "ref": "badb83c9-b42a-4e9e-97c4-9cc43b7865b9",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f721ba93-e9dd-415f-b7ce-0d86a06a03d7"
        },
        "item": {
          "id": "1d1e9fc3-f66e-48c6-b254-1c14eca5cfed",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "24e447d4-861a-4ed6-a4dc-50081711b654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa9a8cf-b9a7-432a-ad4e-fbf77ccfd390",
        "cursor": {
          "ref": "6b850130-848e-41a0-9b27-071e49c8d7e3",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "9ff99936-5bb2-41fc-b60a-94e7ea734091"
        },
        "item": {
          "id": "daa9a8cf-b9a7-432a-ad4e-fbf77ccfd390",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "cac40839-62c3-4e7b-8bd0-6cf8891420f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058d0795-a68f-4faa-b4af-67b9e4c0975f",
        "cursor": {
          "ref": "94efeab8-d6a8-434f-9df5-ab780ca25e99",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b513a3f5-79ff-4d0f-961e-a3d816fb76bb"
        },
        "item": {
          "id": "058d0795-a68f-4faa-b4af-67b9e4c0975f",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3de63af7-8257-4164-9888-cecbeba73fee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f19c94-a441-4c00-84c1-886c6d83ddef",
        "cursor": {
          "ref": "7ddea1d1-9843-4cd9-93f4-c7a73e27d13a",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a0b8a309-35dd-4248-9316-e6f936c2cd08"
        },
        "item": {
          "id": "36f19c94-a441-4c00-84c1-886c6d83ddef",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f31b0f36-8ee4-4bb0-8dc5-d7ce1074112e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ba3aea9-b2b2-4e37-bc0d-f2b6a069e8a8",
        "cursor": {
          "ref": "ebe996df-6f24-44cf-a339-e576d2f74082",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f8f30c12-8912-4320-92a8-472ea083fc25"
        },
        "item": {
          "id": "7ba3aea9-b2b2-4e37-bc0d-f2b6a069e8a8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8ab5fca1-7e1f-43f0-bbbb-640e0b59c445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2ac701-42d4-4931-b0bb-3d69fcef1d3a",
        "cursor": {
          "ref": "5f041ac0-740e-4564-8f82-4d6d05ae6ac1",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "538605ca-3532-40ea-ba10-676e204120c7"
        },
        "item": {
          "id": "ce2ac701-42d4-4931-b0bb-3d69fcef1d3a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1ecffd77-f2b2-4443-b12b-2b140b43c2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e29702c-1e03-4ede-8465-d7b90edc2b86",
        "cursor": {
          "ref": "21c9e8c6-734b-4346-9b4e-949a059d3bc1",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5babdeff-a985-46bf-a5e4-8edd517607df"
        },
        "item": {
          "id": "3e29702c-1e03-4ede-8465-d7b90edc2b86",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8dfa60bc-84f5-47f1-8ce2-ceacefce2bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6c395f-aa58-402f-b5d3-eaeba5b85378",
        "cursor": {
          "ref": "1a4520af-496f-45f7-bba2-787f6613ad5d",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "da4a21ec-41dc-4f1c-8ec6-069f6844c6f7"
        },
        "item": {
          "id": "4e6c395f-aa58-402f-b5d3-eaeba5b85378",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b3d9100c-fa4d-42f6-a99f-26fb0bd94d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7de6357-a8d0-4572-822d-5f7945c1f880",
        "cursor": {
          "ref": "6bff17e2-0b28-4526-b68b-386d054cf219",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ac134877-2659-4e42-b001-281108477d67"
        },
        "item": {
          "id": "f7de6357-a8d0-4572-822d-5f7945c1f880",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "4f3dd0be-282c-4dc9-b6e2-1552390fb3a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "891a4f0d-c2fe-447d-8090-6402553bab20",
        "cursor": {
          "ref": "8a914b9d-8df2-4e09-b109-1474315e3318",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "be73c99c-2b80-49e5-88c6-a85ff677bc44"
        },
        "item": {
          "id": "891a4f0d-c2fe-447d-8090-6402553bab20",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f9af54b0-8422-4d8c-8b18-ae7a94c7a9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a87ef25-1f86-411c-b8ae-0898307d1865",
        "cursor": {
          "ref": "f1196377-2d17-497b-8190-b5d65d2e7d5d",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "00d52ded-7788-45b0-8aa2-901c75e3ebd7"
        },
        "item": {
          "id": "3a87ef25-1f86-411c-b8ae-0898307d1865",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "2397e04c-dcf4-4266-936b-075b90890d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44117365-2d9e-48b1-92fa-6830e26d7ed9",
        "cursor": {
          "ref": "9c66fddd-6a97-444b-b464-5aff6a01f046",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "5e9f0049-e317-41f4-a9b7-30364a281c34"
        },
        "item": {
          "id": "44117365-2d9e-48b1-92fa-6830e26d7ed9",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "23fb14ed-4142-4050-b729-16c42c6358ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100869bc-3ef7-4958-b294-7780108ba3e9",
        "cursor": {
          "ref": "295e41b8-f211-4b4b-99df-45ea5f81fbc0",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "63b05e67-bbca-4d7a-aea0-f887ecc2d8cb"
        },
        "item": {
          "id": "100869bc-3ef7-4958-b294-7780108ba3e9",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4895d2f5-579c-427e-8c66-94b1b263fae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348b7685-8979-421c-8cc2-7e316804ee3c",
        "cursor": {
          "ref": "f372a803-7a4c-487a-9e76-437da18955df",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "df67ac79-1c3e-4917-95b7-ad35980c95f9"
        },
        "item": {
          "id": "348b7685-8979-421c-8cc2-7e316804ee3c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5f4cd477-b1bc-4d06-9c43-682baa6ee220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83428992-ad6a-4d39-869f-870bf633e9df",
        "cursor": {
          "ref": "7f4ffb37-3b4b-46d3-93fd-090710ec4f20",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "21915bc1-f75b-45a8-a8b4-78f1e13336e2"
        },
        "item": {
          "id": "83428992-ad6a-4d39-869f-870bf633e9df",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4c8a5b17-c46d-4d58-a9ad-0ffe2103d753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f6731b2-2f9e-4f3d-9d1b-ef1b2f647f0c",
        "cursor": {
          "ref": "3757891d-a852-4a9b-92eb-e3d853147590",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "eed3c354-888f-4f32-a2b4-e90e684b5062"
        },
        "item": {
          "id": "6f6731b2-2f9e-4f3d-9d1b-ef1b2f647f0c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "746a91f3-29dc-441c-83d3-186a73d2e84d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bf01bb-f243-4c01-9c80-d687739c4d57",
        "cursor": {
          "ref": "39b58f2a-cf25-4e64-8e4d-b9f81a34a327",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d2b894ea-fb34-4eb2-b622-68f9d2fa9186"
        },
        "item": {
          "id": "26bf01bb-f243-4c01-9c80-d687739c4d57",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "03ecad10-28bd-4584-9bd2-5ac2361f14f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f8cb3c-04f6-4d4a-98b9-9bf7889d4878",
        "cursor": {
          "ref": "e7d54413-1c5f-4331-bd6b-6186a04e3ff7",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0508633f-b8a6-49ca-99e4-cdd4d6284a78"
        },
        "item": {
          "id": "d0f8cb3c-04f6-4d4a-98b9-9bf7889d4878",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "29568485-6626-46a9-8679-d44edb17d07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bea4191-ae9d-4d05-9235-829234c50894",
        "cursor": {
          "ref": "2bd279be-49ef-41f9-b2c0-4f5f81bc12cd",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "12602b35-1d87-473a-9aa9-d6c9df166c7b"
        },
        "item": {
          "id": "6bea4191-ae9d-4d05-9235-829234c50894",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "9056c8dd-2717-4a0c-ae79-1807d721b9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef8b835-b613-449c-807f-e84b026edc89",
        "cursor": {
          "ref": "d2bf5c9b-0d7c-4dea-aeb3-66ba0a4cc51d",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e6a8f335-1f65-4801-b5f4-9c39bcf0f4fd"
        },
        "item": {
          "id": "eef8b835-b613-449c-807f-e84b026edc89",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "bd6f460e-42df-4e75-8f8b-7054a6b9b001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bf89e5-a83d-4aaa-a4db-dc34545c005b",
        "cursor": {
          "ref": "f659d958-de2d-433c-b930-f0968e52da7e",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f3fa9ad7-5cf0-4aa2-8b66-7680952d7315"
        },
        "item": {
          "id": "79bf89e5-a83d-4aaa-a4db-dc34545c005b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ab75542c-b24c-4b96-b098-3d467bdf3945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2eccf90-539f-454a-927a-a6840064c9a6",
        "cursor": {
          "ref": "d50d1f58-4e78-4424-bd81-a24e120dd5b7",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "9f1b8a0e-8c04-410a-9427-e8f9e2b492dd"
        },
        "item": {
          "id": "b2eccf90-539f-454a-927a-a6840064c9a6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "121ee276-5619-4314-9356-2074ea006c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd380ee-4fc8-41ce-a1e8-25ce6fdb7e4f",
        "cursor": {
          "ref": "0c72ea47-4f76-4cd0-b301-6977999c824d",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9ad53f1b-3e59-4571-b319-55ed41b05e81"
        },
        "item": {
          "id": "bbd380ee-4fc8-41ce-a1e8-25ce6fdb7e4f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bc447c07-2749-4ec8-a911-cab9e9a989d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a042fe3-3a8a-42ed-8a7d-d681b725a0bc",
        "cursor": {
          "ref": "c2e60d24-5975-49a9-9b35-34b3e1e697ec",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2169c1bd-4638-4e8d-9429-3909e2dc1cd5"
        },
        "item": {
          "id": "3a042fe3-3a8a-42ed-8a7d-d681b725a0bc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f0027466-6ec1-4033-aa6f-75c9b406ace9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "823b1151-adea-4e2e-b2d1-63c89a671cad",
        "cursor": {
          "ref": "957fbdcb-331f-4ba0-ad85-ce491b90f156",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "7470ad20-79c1-40e6-a959-1f56b65bd7be"
        },
        "item": {
          "id": "823b1151-adea-4e2e-b2d1-63c89a671cad",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "46eecbc9-1ea2-4696-854c-38f378f43e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a985af48-fc51-478f-beab-efbf44a7a72e",
        "cursor": {
          "ref": "01ac400b-f91d-40a9-bb07-97fe6798c140",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "4d2a9a0f-ea49-4413-a6d7-93827e46ffb7"
        },
        "item": {
          "id": "a985af48-fc51-478f-beab-efbf44a7a72e",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "625cbfca-fd9d-4581-8482-98c687d9bcaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cbe4b7-1731-432f-abc8-f3cf07c9b940",
        "cursor": {
          "ref": "6f579528-e51a-408f-83f7-92a7ea4e9717",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6a170d73-971b-4c01-8ae9-e63444df76a0"
        },
        "item": {
          "id": "59cbe4b7-1731-432f-abc8-f3cf07c9b940",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "081da5a0-5d87-461a-b257-e4cff9ab2354",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2f4d4341-93ae-4d15-93d4-e066c4a4ee84",
        "cursor": {
          "ref": "10874fe2-374f-427f-a0b4-397ea44db862",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "d81329a7-2395-4460-a128-6f07b2df68b7"
        },
        "item": {
          "id": "2f4d4341-93ae-4d15-93d4-e066c4a4ee84",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a625f70e-5391-4940-843d-38cb77f00a9d",
          "status": "Created",
          "code": 201,
          "responseTime": 2018,
          "responseSize": 774
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "54ee72a5-134e-4f89-9007-70e588232edd",
        "cursor": {
          "ref": "92bd1503-835c-4524-8fe4-c266fb9d23d2",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fe23e513-81ac-48d7-904d-31c0aee5e309"
        },
        "item": {
          "id": "54ee72a5-134e-4f89-9007-70e588232edd",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c378fd9c-f8bd-4aef-bb45-08a68778f0b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a13c365b-8c2c-4a35-9b74-8c49c0451461",
        "cursor": {
          "ref": "deead643-3576-4819-9f69-274f266102ce",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "311a0f0e-a535-4b8a-b70b-80438d984775"
        },
        "item": {
          "id": "a13c365b-8c2c-4a35-9b74-8c49c0451461",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "461bab32-a25d-4c80-bb4f-a60a3537b339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74dfbcb5-e1a6-4a65-9bf0-0644e8e13c02",
        "cursor": {
          "ref": "fb381be8-d915-4bfc-abe4-48d480d17a45",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0c0914a8-4caf-40f7-9367-96282b8d8a87"
        },
        "item": {
          "id": "74dfbcb5-e1a6-4a65-9bf0-0644e8e13c02",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0bbb0c82-76af-40e2-a2e9-a955c2de57e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "bd63067b-9c97-4e66-b10f-0d84e6270600",
        "cursor": {
          "ref": "71919229-7a46-4b34-96bc-296fea2376d3",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d15773be-c549-4abd-bd72-7d4263ab8ef4"
        },
        "item": {
          "id": "bd63067b-9c97-4e66-b10f-0d84e6270600",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d84be445-4ea1-46f1-9a31-336819a93afb",
          "status": "Created",
          "code": 201,
          "responseTime": 1551,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ceba5bf6-ac9d-4871-b25a-1167112884a9",
        "cursor": {
          "ref": "68b99e36-f83d-4b5b-a1b6-51b406383c97",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "82d5b342-3442-43ae-91ac-a706edfccd8d"
        },
        "item": {
          "id": "ceba5bf6-ac9d-4871-b25a-1167112884a9",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e7b125e4-4a86-4971-b0e8-0736f986002d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6b4eeef1-3434-4c1a-a0f7-87e88f3f114f",
        "cursor": {
          "ref": "eb0251ae-dd0c-493c-81db-d36ceb58e49f",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ede0ec0a-bd14-43ed-81d9-476a15586146"
        },
        "item": {
          "id": "6b4eeef1-3434-4c1a-a0f7-87e88f3f114f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7e82f7a7-1a46-4f63-bada-16890120cd4e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1195,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f13a61e5-5b0d-4ad8-a749-99b9ce0e3566",
        "cursor": {
          "ref": "a1795990-db8f-4d93-8210-d5ee59723ba8",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "35d17ce9-b3a8-4055-a07e-37b3ccbe3d27"
        },
        "item": {
          "id": "f13a61e5-5b0d-4ad8-a749-99b9ce0e3566",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bf02ed2d-4ff8-479e-896a-c85604c7a4ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d6f9ca64-cf46-4eb1-932e-c871b8d5b75f",
        "cursor": {
          "ref": "7164e67f-8388-4b54-90a4-0f8c6e9ebd8e",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "39e8c584-7316-4963-bdcf-da73b519df39"
        },
        "item": {
          "id": "d6f9ca64-cf46-4eb1-932e-c871b8d5b75f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cc5ecf1f-94a1-4463-9abd-00b16caec8e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 60,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "92c46fec-7dbb-4398-a8ce-2599517a1634",
        "cursor": {
          "ref": "79bdde3a-ab32-408b-9f51-c3fe16c0157f",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d3052e7c-14fa-4586-9424-90bcb3f6a681"
        },
        "item": {
          "id": "92c46fec-7dbb-4398-a8ce-2599517a1634",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2b2aa770-22bd-4c45-861f-490404e2a253",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "463f4f36-841e-464a-9536-c7e1372293f8",
        "cursor": {
          "ref": "33285f1b-9814-4a46-82d9-a87d72ec3c9f",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f2723723-be11-4795-ab3a-2601d2932026"
        },
        "item": {
          "id": "463f4f36-841e-464a-9536-c7e1372293f8",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4bdd228c-873d-4fde-bd8a-f2e7bcdcd1aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 65,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "cea721a3-0459-4815-9f22-62020141b39d",
        "cursor": {
          "ref": "faddbc92-7934-46a9-a095-454cee11f9b0",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9c3529a9-c121-42a7-86eb-5e7d5eecb836"
        },
        "item": {
          "id": "cea721a3-0459-4815-9f22-62020141b39d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "fd5e72d7-0cc6-469c-9aaf-2f3fc4aa95d2",
          "status": "Created",
          "code": 201,
          "responseTime": 1401,
          "responseSize": 770
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0a4dc42c-a484-4da0-95d7-df0a467f1ccc",
        "cursor": {
          "ref": "c1a8cc35-a5c9-43bc-ab02-d7a125b24c58",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fb7a5ad9-f5b1-4b4c-ac3d-d07f6b4dc281"
        },
        "item": {
          "id": "0a4dc42c-a484-4da0-95d7-df0a467f1ccc",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6cbc857b-3d56-41ab-8e7e-a65b1e781dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "287accfd-1260-4596-9ad5-9e839aefddb1",
        "cursor": {
          "ref": "ff4c2133-d686-4304-86a4-8fc904ad310a",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "bc2f3fc1-b911-4cfe-8fb9-765beca3e0ac"
        },
        "item": {
          "id": "287accfd-1260-4596-9ad5-9e839aefddb1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3d2505ce-d7c9-48a2-85b6-adf2ef4eed34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc24272a-9340-4e2f-9602-b1affd260d47",
        "cursor": {
          "ref": "bdcf6240-a85c-4c91-9fb1-88c304b28772",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "d12bfb98-77a0-4ccf-bbee-a6ad4a066acc"
        },
        "item": {
          "id": "cc24272a-9340-4e2f-9602-b1affd260d47",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6dc0a638-23cb-4987-8745-cadec684f495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd856ce-1905-4b9a-b094-6edf66a5c0dc",
        "cursor": {
          "ref": "8c215eb8-a710-4b0f-96a8-a2883f607d73",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9f577101-6cb4-43d4-8b0d-869721a2a4ef"
        },
        "item": {
          "id": "1bd856ce-1905-4b9a-b094-6edf66a5c0dc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3219634e-c838-4de1-838c-413e880f592d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4957d7f3-ec2b-40f8-a43f-bf0eb5243ad8",
        "cursor": {
          "ref": "ee8fe68f-5fa5-4be0-adcc-b4b526f093d6",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3b7a6958-6c4a-4379-841a-64c966c0b021"
        },
        "item": {
          "id": "4957d7f3-ec2b-40f8-a43f-bf0eb5243ad8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "18005b2c-e247-4251-b70c-97be00282688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb13b8a-24fc-443b-b8f4-2931cedd4618",
        "cursor": {
          "ref": "07826f52-d5f2-4f24-bb22-803316569f13",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cb5ccfc7-2df0-4e6d-b4bd-df7f5fe3b828"
        },
        "item": {
          "id": "dbb13b8a-24fc-443b-b8f4-2931cedd4618",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "66750ce4-eb0f-4302-a0e5-727e035830c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce1063e-ba36-4974-bb4e-f6575b9ce187",
        "cursor": {
          "ref": "12d9ee00-192f-4afa-8a59-b2c855d183ab",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b772dd2f-4038-4862-a75d-7ea6e735eb7c"
        },
        "item": {
          "id": "9ce1063e-ba36-4974-bb4e-f6575b9ce187",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e22708be-a0c1-41ee-b859-3adcdf066388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc17eda1-cadc-463e-8ce6-ff48ea16edc5",
        "cursor": {
          "ref": "8a2ba429-115e-44c5-bd4d-e11488229c94",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "dec44a96-c866-4f09-b7cb-cc2bc7590d5e"
        },
        "item": {
          "id": "fc17eda1-cadc-463e-8ce6-ff48ea16edc5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8d0ccd66-e11e-409c-9092-4829ce735191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35c977b-2630-46fd-9aed-466fc18d53e8",
        "cursor": {
          "ref": "4ac8a921-3aec-481f-99a5-f30e2b97ebd4",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5960ca7e-3e0a-471d-9756-44570ebb3ab0"
        },
        "item": {
          "id": "d35c977b-2630-46fd-9aed-466fc18d53e8",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "73267dde-24d3-4da2-a2f6-70fef97d3a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27b9b6f-3d6b-4ba1-b475-45a4e5185fc2",
        "cursor": {
          "ref": "a29deba2-5a93-4884-9ea1-1d83c755c71f",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "de7e3af9-12d1-4c36-835d-3e565872619d"
        },
        "item": {
          "id": "a27b9b6f-3d6b-4ba1-b475-45a4e5185fc2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "563b5250-74d3-4c59-b327-14fa48740e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3d666d-5257-4319-9968-760d7e46c25a",
        "cursor": {
          "ref": "d14ee584-d5d7-4fa8-9067-213f99c079c1",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "574fa2ca-4bb1-4c49-b3c3-2120374c116c"
        },
        "item": {
          "id": "9c3d666d-5257-4319-9968-760d7e46c25a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a73916c5-c3dd-4034-b22b-12dea7b99dd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46faf052-96b1-4b6e-ade8-08670a61c9a6",
        "cursor": {
          "ref": "cc28c405-f992-4cac-b788-96ee367553dc",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d972fcfd-97a9-48dd-becc-478ea59f5eba"
        },
        "item": {
          "id": "46faf052-96b1-4b6e-ade8-08670a61c9a6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "db49716e-8ac7-4205-a864-fe0bde9ce24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9034b17-6ba8-4707-a3ea-be9ec8a6c844",
        "cursor": {
          "ref": "f5927520-7abc-49ad-86ad-f12bc9ddec91",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e3f8e8f6-d197-4c64-a519-1f9ca3818436"
        },
        "item": {
          "id": "a9034b17-6ba8-4707-a3ea-be9ec8a6c844",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0781866b-cf58-47a3-a098-09c4816ce3e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89ed53c7-bbcc-46b6-845c-1c2bdb5441bb",
        "cursor": {
          "ref": "1819554e-a94b-4bbf-826c-8e8717e727cd",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "42bf2ddf-891c-4ae7-9483-8837575deded"
        },
        "item": {
          "id": "89ed53c7-bbcc-46b6-845c-1c2bdb5441bb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "dc69358b-cfba-4a31-8476-082c8f129074",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1147,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "319d40b5-da71-41a6-ac2b-886f2c8dfbfa",
        "cursor": {
          "ref": "a80d447d-60ef-498d-80a2-532c1ecd93c4",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f0645095-0e34-46bf-819e-98ac903896e3"
        },
        "item": {
          "id": "319d40b5-da71-41a6-ac2b-886f2c8dfbfa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "4838ea30-2b28-4bd6-98ac-ad081cd1e720",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1161,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a3e951aa-46f1-41c6-8670-8ea240a805f9",
        "cursor": {
          "ref": "0f32c3b7-28d7-418a-b32a-17d15e52c0d1",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "80f424f8-fac3-40f8-b069-697e59aa37b7"
        },
        "item": {
          "id": "a3e951aa-46f1-41c6-8670-8ea240a805f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ac13fb59-fcc3-4666-94dd-207d8792e6ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4e93a6b1-af09-4b1c-884a-ae7b83ffd35d",
        "cursor": {
          "ref": "678e3383-fd7d-4c29-a87e-3d02eaea5859",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "12638f04-55bc-4483-b37d-f250c170ae27"
        },
        "item": {
          "id": "4e93a6b1-af09-4b1c-884a-ae7b83ffd35d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "da82f06e-103c-4668-b805-22c9d791b6f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1111,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "94d68884-094d-47f0-9307-49580e2380b9",
        "cursor": {
          "ref": "c3e4f2b8-febc-4b49-82a0-700fb6a58b1e",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "13c8cf71-f798-4a36-82e4-e7dfbf521fbb"
        },
        "item": {
          "id": "94d68884-094d-47f0-9307-49580e2380b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4361a87f-fcb2-442a-96b7-03f97142856d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "2ce448c8-6fab-4a78-9872-2d73477e521e",
        "cursor": {
          "ref": "a6013e5a-44b1-49f8-925a-157b1eae53ba",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "293f9590-c961-46b8-92d6-659a187bfc62"
        },
        "item": {
          "id": "2ce448c8-6fab-4a78-9872-2d73477e521e",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "375d886c-14b1-4d44-9417-4bd1ae502d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5ed487-e648-476c-a0c3-541a070979b8",
        "cursor": {
          "ref": "6bfd7aac-a94d-4e93-aee8-0a1ed064579d",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "da380da7-0032-42a0-86ca-6b692e1e5a30"
        },
        "item": {
          "id": "fd5ed487-e648-476c-a0c3-541a070979b8",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b854a6b6-98f9-4767-9b6c-fd4e1261ce04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cad262e-31f1-4026-9dcf-763179a55f71",
        "cursor": {
          "ref": "5ed1fc65-a1cc-4fc7-9f69-916482f66712",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "0edb0ccc-dc0e-4f5a-beb3-bbaab37ef629"
        },
        "item": {
          "id": "9cad262e-31f1-4026-9dcf-763179a55f71",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a102b06e-9a10-40ae-a304-2c5fa4d32144",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b0414b-c53f-4695-95cb-c80ab277f655",
        "cursor": {
          "ref": "58559da6-3f16-4e25-a2a0-4b74ffc377c8",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8263f11f-335e-4603-938b-d50c9734fb8f"
        },
        "item": {
          "id": "40b0414b-c53f-4695-95cb-c80ab277f655",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "b5bb6f58-c6a2-44d9-8016-bb40899d8b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c17846-26dd-4e58-9375-d3c6c1d4982b",
        "cursor": {
          "ref": "246094d0-4286-4f80-b99a-35234b9df6b7",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fa4c746a-81e4-4903-986b-a44c2bba2de6"
        },
        "item": {
          "id": "27c17846-26dd-4e58-9375-d3c6c1d4982b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a5e483e9-f252-4f8e-b83a-054b05db70f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599ad630-892e-45fb-a1e5-d91beda93c24",
        "cursor": {
          "ref": "8c83730a-89a6-45f6-b38e-d74a112e28b3",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "cfede7b4-dc14-4ee7-9cca-f6f475008a6a"
        },
        "item": {
          "id": "599ad630-892e-45fb-a1e5-d91beda93c24",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "84c33ea5-ee98-48f4-8cb2-ac9e1a3451c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83be64cb-d6b2-4654-a261-13d935a99fda",
        "cursor": {
          "ref": "c59c22a7-e35a-4468-9e6e-67eae81d45e5",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fea10112-d61c-40a4-93d7-be09a3b57bdc"
        },
        "item": {
          "id": "83be64cb-d6b2-4654-a261-13d935a99fda",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "1cbfd095-68e5-4bc8-b679-b406ee015072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b70034-dcb3-45df-b682-dadd59f80ddf",
        "cursor": {
          "ref": "bd328d88-c571-4d3b-bb1c-7de1484b4af9",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a7406960-d627-47ce-b733-cc936207a418"
        },
        "item": {
          "id": "18b70034-dcb3-45df-b682-dadd59f80ddf",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "aefa0186-59be-4877-a857-cdbe27a6321d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5aed589-e508-48f3-8e3a-4618c22c0d47",
        "cursor": {
          "ref": "32de03d4-7ba5-48d3-b6fb-9d948f5313fb",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "18a0d68e-9ae3-49de-9d9e-2eb81eae5054"
        },
        "item": {
          "id": "c5aed589-e508-48f3-8e3a-4618c22c0d47",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a193cd4d-42a5-464b-9067-f880a48123a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d41194-204d-4965-9a83-4a66e87b3c7f",
        "cursor": {
          "ref": "9e3e182f-985e-446e-9e0a-b03ed5e532e8",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2be2842e-75ba-40d8-a7fd-147a67847269"
        },
        "item": {
          "id": "a6d41194-204d-4965-9a83-4a66e87b3c7f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "5468449c-03bc-42db-8291-79bd3e068cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "761f9061-1a97-4e9e-a861-f6bd3de89e3f",
        "cursor": {
          "ref": "fd2728cd-a439-4e90-849e-2f9b0ce5ca5d",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d8c3f837-85df-44e3-b249-98ea288a1019"
        },
        "item": {
          "id": "761f9061-1a97-4e9e-a861-f6bd3de89e3f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9d30456c-78ce-4bde-8f6f-d3b6aaf85fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6bcf598-17fe-474f-8344-1a5f9c64091c",
        "cursor": {
          "ref": "eedbf7f5-1fc5-4796-a144-8c0cebbfb3d4",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "19d32d52-f58c-43f7-8b1f-42d1981203f1"
        },
        "item": {
          "id": "f6bcf598-17fe-474f-8344-1a5f9c64091c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "04ba61da-d095-4ebf-8f39-b47b5fc60c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e40bf3-b3bd-4d0f-bdb6-50ad160c8dd5",
        "cursor": {
          "ref": "57de53e0-d456-45c0-8983-4bc535456596",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a8cf0082-7aef-4ba6-abdb-c46460e640ba"
        },
        "item": {
          "id": "f8e40bf3-b3bd-4d0f-bdb6-50ad160c8dd5",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2e528dbb-202d-4b2a-8f18-5bc2999e6c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ae7bf65-5a52-4fc3-94aa-d1b368cdf52c",
        "cursor": {
          "ref": "07aba21b-a89d-4e1d-9b2c-3360351f52eb",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c4fd8c81-15ae-43fd-bb13-611ecff74fec"
        },
        "item": {
          "id": "3ae7bf65-5a52-4fc3-94aa-d1b368cdf52c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bdd426a7-9dd6-42a2-8f51-4d6d5371f089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9fb2e3e-3904-4e8f-8893-e7313fbd15af",
        "cursor": {
          "ref": "fd4e036a-0d28-4091-a481-3322ba9414c0",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "94fbdd2c-8fb7-4cc8-8801-7e57437d5627"
        },
        "item": {
          "id": "e9fb2e3e-3904-4e8f-8893-e7313fbd15af",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "a5f2fd65-79d1-45cd-bae4-6e80d7cd41f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8698c23-ba06-4748-b318-99607570e1de",
        "cursor": {
          "ref": "583c71e9-b0e6-483f-a6d7-829a88beb4c8",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "11d2124f-5f63-43fb-95a3-325b8aa65514"
        },
        "item": {
          "id": "b8698c23-ba06-4748-b318-99607570e1de",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "cbc46bed-4297-4deb-b2d1-0b78a24fb10b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb2b93f-d0ee-4204-b8ea-d22ea5e387dc",
        "cursor": {
          "ref": "30ed7994-bdfc-4a82-8a20-72cb557f6530",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b2abc69a-084e-470b-ab3b-27b7d3346cab"
        },
        "item": {
          "id": "6cb2b93f-d0ee-4204-b8ea-d22ea5e387dc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a0fcde33-a9e1-4254-ae22-e7e0b9be686e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f266395a-03b2-43d1-88a1-b60b644f1f39",
        "cursor": {
          "ref": "1a403c81-6eb1-429f-bc16-a0e147e690cc",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4d058237-1e76-455d-9b19-030d693b44f0"
        },
        "item": {
          "id": "f266395a-03b2-43d1-88a1-b60b644f1f39",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "be9cd366-a54e-4731-9015-e11d9412bdca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d310e4ba-224e-4660-8f2d-abda1bf1cfb2",
        "cursor": {
          "ref": "6dd9dae5-b9ee-4a21-87ef-7731303e4e79",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "41d4fcff-eb4c-4599-8ac1-b6c8a72b1b39"
        },
        "item": {
          "id": "d310e4ba-224e-4660-8f2d-abda1bf1cfb2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "fa41cb8d-3942-403c-9c46-7b366481d6e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacde816-b1cb-4650-b482-0f3bf1cfb7a5",
        "cursor": {
          "ref": "70270ab6-6591-4e9c-ba31-9b54571144ba",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7767b018-d48b-43d6-ad83-7e1cf5d3559b"
        },
        "item": {
          "id": "cacde816-b1cb-4650-b482-0f3bf1cfb7a5",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5b551e69-1dca-4232-b114-f3f5ff5241f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3408f20-d341-4399-941c-0d8672b81555",
        "cursor": {
          "ref": "9fcdaed1-b843-46f7-a0c6-636c4cfca202",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9cda233f-c8ca-4308-99b3-081954f35e23"
        },
        "item": {
          "id": "b3408f20-d341-4399-941c-0d8672b81555",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "48bcaa05-0300-4e5c-b365-0be794430815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83d6abed-c686-4658-8895-ae1abaa3b16f",
        "cursor": {
          "ref": "c325df5a-0519-4deb-8d82-d2ccf5707965",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3fd30535-32e3-4ff5-8aa3-59631d07df9e"
        },
        "item": {
          "id": "83d6abed-c686-4658-8895-ae1abaa3b16f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "0a84304b-5b4c-474c-92e1-b6f87e22fd02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eccbc61-1853-4b0f-a1f6-375ff601760d",
        "cursor": {
          "ref": "9d84d9bc-d17e-4237-88df-c843e6e6797f",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fdfd52a4-267c-474a-a958-9c4a0431225a"
        },
        "item": {
          "id": "8eccbc61-1853-4b0f-a1f6-375ff601760d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "167b9485-1dbb-47ca-a44c-f9bcfb8caf10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c07a4c3-0f38-4168-b887-e6733a72f5de",
        "cursor": {
          "ref": "29e194d6-37e9-44bc-b259-374e5e38c023",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1e44b600-6daf-4b33-9e44-b9fff6db84f6"
        },
        "item": {
          "id": "0c07a4c3-0f38-4168-b887-e6733a72f5de",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ef8b118e-8f36-4cbd-a8c0-36188bd33ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9741d4c-e87b-489c-8c17-46477eca2557",
        "cursor": {
          "ref": "56bc62f6-69bb-4e99-8a70-8ba6c120df8a",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6f0105e7-ea13-48c6-adec-be8a304ca691"
        },
        "item": {
          "id": "b9741d4c-e87b-489c-8c17-46477eca2557",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "821b1051-519d-44e4-b555-854444b7e021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6abc8a5-a61f-405e-b296-6a4b6f06b6d1",
        "cursor": {
          "ref": "e57f35a9-8ce2-492c-a15a-cccc8b3e648f",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "99c4ca70-ce65-49b8-b800-912cc442e5d6"
        },
        "item": {
          "id": "f6abc8a5-a61f-405e-b296-6a4b6f06b6d1",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "153f00db-a64a-4c4d-a2a6-59447ab3ab51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a929d8-1f55-46ce-89e0-71bf4b2824be",
        "cursor": {
          "ref": "b1ddae4d-4fe5-481f-9763-dfbca0cbb057",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6971c387-8670-4064-a4db-bdef3a517819"
        },
        "item": {
          "id": "24a929d8-1f55-46ce-89e0-71bf4b2824be",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bc91da93-70a5-4df6-8b14-ce24f9e36713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0133b00f-8107-4523-9a7b-4d8b6c221a65",
        "cursor": {
          "ref": "5f23cc07-6f22-46f7-8475-336323280c40",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0f26e20b-dc23-42d8-81fc-ea937dffac5e"
        },
        "item": {
          "id": "0133b00f-8107-4523-9a7b-4d8b6c221a65",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "957514b6-dc52-4649-9f2c-06a20a14230f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "109c00d8-9adf-4fbe-80d9-be1e4aceb440",
        "cursor": {
          "ref": "d9074e48-5944-4a34-a80b-3bfdfa9e140f",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a153e797-6fa7-4a5c-95a7-bf59cc1c7177"
        },
        "item": {
          "id": "109c00d8-9adf-4fbe-80d9-be1e4aceb440",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5827c7dc-3bc1-4b35-9533-c38dc37f0e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d96686ed-21b6-4a05-9789-080fb01cfe56",
        "cursor": {
          "ref": "9d39b4bb-48b9-4eec-b99c-e06432df0bce",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "94f02b50-fff4-435e-a22d-3834e22d1727"
        },
        "item": {
          "id": "d96686ed-21b6-4a05-9789-080fb01cfe56",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8be77f96-e0cb-4092-b910-805d03713482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261bcfba-5fab-4923-98ae-8dc1904047fd",
        "cursor": {
          "ref": "530aa5fa-a48e-4f0b-bfeb-453384e93009",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9a9c5e5c-1074-4171-bff6-c7cde9880f75"
        },
        "item": {
          "id": "261bcfba-5fab-4923-98ae-8dc1904047fd",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "38bd51c3-1e2e-4924-a978-f766c0ec3ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7096fdbf-5644-4a8b-8225-3b18ee1624a0",
        "cursor": {
          "ref": "2d17755b-e86e-4117-b833-b2bef3204e2f",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "9c17877a-b0a7-4aaa-8e3a-2618958b29be"
        },
        "item": {
          "id": "7096fdbf-5644-4a8b-8225-3b18ee1624a0",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6aa8ee80-9869-4926-8555-bbc7fd7db415",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c73dd9-20c9-43e7-9d57-12751665f0b2",
        "cursor": {
          "ref": "c85f619b-0125-4071-91a2-639940bdd462",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "20db3705-c5ec-4915-8acf-a7df6b088876"
        },
        "item": {
          "id": "a1c73dd9-20c9-43e7-9d57-12751665f0b2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "497d9c20-a0aa-4662-8364-e7018773f434",
          "status": "Created",
          "code": 201,
          "responseTime": 1505,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f37eda5-89bb-423d-823d-fdb4b5fa7cb7",
        "cursor": {
          "ref": "632163f5-f943-43cc-a823-d3d3dfdd03b9",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d8c0df2c-8706-467a-b84c-9134022359fd"
        },
        "item": {
          "id": "8f37eda5-89bb-423d-823d-fdb4b5fa7cb7",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d603a74b-4c20-49eb-a102-e7eb176e08c1",
          "status": "Created",
          "code": 201,
          "responseTime": 1444,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7759f047-5a6f-4288-a22a-07b3996bf1e4",
        "cursor": {
          "ref": "106ef3ea-115e-44e9-97f0-d9a014e7cec5",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "fbe9411a-6dc4-4044-9bac-9707cc6dc324"
        },
        "item": {
          "id": "7759f047-5a6f-4288-a22a-07b3996bf1e4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a45e18d6-52e0-4f63-bdf7-9230cc2d4ece",
          "status": "Created",
          "code": 201,
          "responseTime": 1414,
          "responseSize": 767
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cccde28-8d1a-42ad-a8e6-5aa5bbb82cff",
        "cursor": {
          "ref": "2a62ceba-ba09-44cb-9f59-0efaee1e6879",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8ca76c59-3663-44ab-936c-6c3728932cb0"
        },
        "item": {
          "id": "5cccde28-8d1a-42ad-a8e6-5aa5bbb82cff",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0c3d8f64-37b4-4eaa-ab77-4cdce1ab1250",
          "status": "Created",
          "code": 201,
          "responseTime": 1428,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6fac5d-232c-48c3-ad7a-d1b29e276ce4",
        "cursor": {
          "ref": "af24fb1b-1490-4b20-ac58-bc86bfc56e49",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8eb1305c-49d2-4e61-8bd5-d07079ffeb79"
        },
        "item": {
          "id": "4f6fac5d-232c-48c3-ad7a-d1b29e276ce4",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4d65ebd8-918d-4e92-9e87-f5978349f662",
          "status": "Created",
          "code": 201,
          "responseTime": 1425,
          "responseSize": 760
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb103bb3-bca6-44c8-935f-8174976cd166",
        "cursor": {
          "ref": "5c563f97-b4b1-40a5-95b3-42aac9118c0a",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "54c679fc-3526-4961-83af-825142d1f5d1"
        },
        "item": {
          "id": "bb103bb3-bca6-44c8-935f-8174976cd166",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a3973489-6241-4f4a-b578-5a779f164d23",
          "status": "Created",
          "code": 201,
          "responseTime": 1393,
          "responseSize": 1093
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f60246e-5d9d-45dd-905a-56939399c4fa",
        "cursor": {
          "ref": "bf915198-414f-4727-bd33-e31c4324c3c6",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0d45fab5-ab23-41f1-8b9a-c7cb7e3584d5"
        },
        "item": {
          "id": "0f60246e-5d9d-45dd-905a-56939399c4fa",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6f917855-b960-468d-9598-43edd970149a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fbac11-9db7-45d1-b820-881a6e203d62",
        "cursor": {
          "ref": "433ef924-4da9-4ddd-ab92-d606e29eac4f",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "e01ef5d2-f2ef-4f83-a0f4-6774c63691d4"
        },
        "item": {
          "id": "e1fbac11-9db7-45d1-b820-881a6e203d62",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "06ba2096-bed8-46e5-be19-ad89355a9b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352b998c-119e-4ce7-97ab-8f23d7d0a97f",
        "cursor": {
          "ref": "ef1649a7-24e1-4df5-99f0-04bcc6ff16c4",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e63fd291-3e97-4b8e-bc9a-3ed3bfe8381c"
        },
        "item": {
          "id": "352b998c-119e-4ce7-97ab-8f23d7d0a97f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "481fc6b3-505a-470b-82fe-8eb26e61f0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17324f96-ea5e-497e-826e-1d7969dc74c6",
        "cursor": {
          "ref": "caffe05a-c510-488d-a4b0-a3a06a70b389",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "103328f2-c452-45ee-988f-4f867aeb11d1"
        },
        "item": {
          "id": "17324f96-ea5e-497e-826e-1d7969dc74c6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "021208eb-cb1e-4c15-9eb8-cba2199c56f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8903d44-3039-4834-b9c7-e1cf80645ee0",
        "cursor": {
          "ref": "61d9b653-15c8-4b9f-b6ba-ebb4c82bbbe0",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "322740ad-a95b-48d3-9d1c-fdbc39405113"
        },
        "item": {
          "id": "b8903d44-3039-4834-b9c7-e1cf80645ee0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d35f12bf-6ee5-47c2-8b2c-c7b1aa1c35a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b7ddd2-d5f5-4ef7-9622-106b866a4faa",
        "cursor": {
          "ref": "9adf513c-caa2-438a-8f2c-d017a9b9be0a",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "0202976c-236a-47be-afce-357006e64682"
        },
        "item": {
          "id": "85b7ddd2-d5f5-4ef7-9622-106b866a4faa",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "af9f1a91-f17a-4fc2-80a2-feb6fef40dff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927d8597-8068-4a63-a281-f37bf2c6cf14",
        "cursor": {
          "ref": "34e2abbf-68e3-4237-aa9e-a077b7344187",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e284149b-e76f-47f6-8336-0338fbf743ee"
        },
        "item": {
          "id": "927d8597-8068-4a63-a281-f37bf2c6cf14",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0541ef39-3848-4e42-ae30-563cbdc8a05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "993f1a42-12f1-4861-b53b-64bc3bf23a59",
        "cursor": {
          "ref": "c22516b4-e6e8-4f63-902b-a9b45dc29122",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b20bd270-63df-455c-90fb-46a95784ad29"
        },
        "item": {
          "id": "993f1a42-12f1-4861-b53b-64bc3bf23a59",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "629514c5-326d-4382-bce9-bf0c64dd16a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c35d88-c93e-4628-912f-243d4f3b3986",
        "cursor": {
          "ref": "55ba04ba-ce69-4412-b687-6f44aeda00ed",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "567e6839-e168-494d-adc3-a10ee3a7eb7c"
        },
        "item": {
          "id": "b2c35d88-c93e-4628-912f-243d4f3b3986",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dee72880-07dc-43bc-934d-5eaa2f129fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdb3c19-1dd1-47c6-bd1b-9ea9c5cc0462",
        "cursor": {
          "ref": "b1fdad56-962b-4877-af91-8b975d98d3ff",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "af42c113-7a9f-4827-b5db-1c3bf5c77c37"
        },
        "item": {
          "id": "9bdb3c19-1dd1-47c6-bd1b-9ea9c5cc0462",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "28ea39b3-ed53-4fcb-9758-062e3d29105a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918822cf-8c70-4681-bbc5-6df6f3207c28",
        "cursor": {
          "ref": "ca7fa95b-7470-4211-8bcb-5c2f47f3b646",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "168600c8-f163-454b-96b7-1cc4aa195653"
        },
        "item": {
          "id": "918822cf-8c70-4681-bbc5-6df6f3207c28",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a8530ab9-e306-44e2-bb63-0969835b3dbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699a9795-3ca8-42ca-87da-413212652467",
        "cursor": {
          "ref": "35e1cfd4-992b-44ad-9eda-8d0480d87f63",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "37957643-aed8-4bab-9d7f-46aed96d2c6d"
        },
        "item": {
          "id": "699a9795-3ca8-42ca-87da-413212652467",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a283a226-c963-41d2-bd4a-12a088b788b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd606bbf-b4d9-4eec-a894-a336c3f0f750",
        "cursor": {
          "ref": "a4b8c54b-67ac-4aff-a9b5-0008ef152080",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e64d6381-51c5-44ac-83d1-8f3adfbc830d"
        },
        "item": {
          "id": "fd606bbf-b4d9-4eec-a894-a336c3f0f750",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9004bc34-01e4-451a-8ef2-995bf4e94e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07cca587-b466-41ea-aa12-463528e13a41",
        "cursor": {
          "ref": "fa15fc57-5dec-48df-852a-4e561399a7d0",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "1c44da48-95ae-403f-99bd-c3ed084de2d5"
        },
        "item": {
          "id": "07cca587-b466-41ea-aa12-463528e13a41",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e9ef5e51-fd41-4a5a-995f-3fe373a5b46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9fc42c-4c21-4cee-b6a1-d4a8719fe5e1",
        "cursor": {
          "ref": "dd96d96f-6781-4874-8ef2-f7dc1b3ec923",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0f20ae9e-5122-42e8-97e2-9cb1882c7fea"
        },
        "item": {
          "id": "4f9fc42c-4c21-4cee-b6a1-d4a8719fe5e1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5e252eb2-7413-46be-94f8-352012640576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514e1738-2194-4ac7-ab66-691c1f4d895a",
        "cursor": {
          "ref": "9aa4c7b4-9bce-4eb2-98a3-a52ee1df2ef3",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9e67c22b-5c89-4c85-8292-f0b6e5911bd4"
        },
        "item": {
          "id": "514e1738-2194-4ac7-ab66-691c1f4d895a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d314eebb-0168-41bb-9671-297e64d2ae75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9892e168-4e31-4441-8c08-7dd64c3b35b8",
        "cursor": {
          "ref": "e096e0db-d398-4173-8fe2-9a88f086ae5d",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8b3e9572-b2de-47bf-ad0c-eacc6f34f2ef"
        },
        "item": {
          "id": "9892e168-4e31-4441-8c08-7dd64c3b35b8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "acbe01e5-5e17-406f-9a26-cbaa26dac8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "081dc85f-eac5-4c5a-8c9f-4d1e0bd1f826",
        "cursor": {
          "ref": "623df711-382e-4fb1-a0e0-3d5ca696ab98",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "8529f736-d2ef-4ca4-9487-5c188aac7ecd"
        },
        "item": {
          "id": "081dc85f-eac5-4c5a-8c9f-4d1e0bd1f826",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a1fe47af-fa3c-40e2-aa35-90b17bdbeeb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba120a12-192d-4091-af19-dd65fd69d01e",
        "cursor": {
          "ref": "dff2169f-94ff-4e75-92e7-a5862808cda9",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "09d4a46d-c94a-40da-aecd-46d756d0b3a5"
        },
        "item": {
          "id": "ba120a12-192d-4091-af19-dd65fd69d01e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "edb607be-02e4-45b6-8846-d77de5ef3b09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cd6fb1-746b-4179-82f3-bea8d269e676",
        "cursor": {
          "ref": "76288916-6704-4bb0-8c4a-03931b16124e",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cf39ac97-2926-4a5f-b249-701ec8498807"
        },
        "item": {
          "id": "67cd6fb1-746b-4179-82f3-bea8d269e676",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "24615319-04b9-4f43-a992-79287caab0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd82068-f25d-471d-a65c-09dd727e3f87",
        "cursor": {
          "ref": "6455981e-03ef-49d2-a139-aa7ae658e7ae",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6dba69b6-f5e3-41b8-acfa-bde0be322bbe"
        },
        "item": {
          "id": "efd82068-f25d-471d-a65c-09dd727e3f87",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ac93ff18-cc11-46e8-895c-10c4db91e3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef80f66-ac11-4e3e-8c6a-26a66f8d20a3",
        "cursor": {
          "ref": "83445262-4a86-4015-a296-e895cf165237",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "d587e763-5ec0-4d4a-b5de-babfe7a19e10"
        },
        "item": {
          "id": "eef80f66-ac11-4e3e-8c6a-26a66f8d20a3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0447b20f-5f77-4c10-9b9c-c6e514b8ca61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730b01e1-c75d-4096-9118-f9bac2e77195",
        "cursor": {
          "ref": "c9e95a3c-07f2-487b-8b9b-edae1395c095",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0ed18f33-3808-4252-a015-6a2f67ac9f7e"
        },
        "item": {
          "id": "730b01e1-c75d-4096-9118-f9bac2e77195",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "01708d3e-27cf-4696-b542-3764663f00c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd02c53-bb34-4aa1-8a02-cda04e0499c3",
        "cursor": {
          "ref": "ddbf34d0-51cd-4bf1-a208-a7297af4fc15",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "eb233c25-db5a-42a4-972b-1d4356e574ee"
        },
        "item": {
          "id": "4dd02c53-bb34-4aa1-8a02-cda04e0499c3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ff3334c4-35af-483c-9cff-3d94dbc5e844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73a1c48-7023-4134-a525-8a0f6e194047",
        "cursor": {
          "ref": "6b93c4e1-e04e-4f12-80a6-c12b3e26f3c1",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "847dee49-ee68-4ab6-9e0b-f976e8f897e8"
        },
        "item": {
          "id": "d73a1c48-7023-4134-a525-8a0f6e194047",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "469167f4-2f94-400c-b89d-30d19a353e3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3be38ab-d205-4a03-84d0-058587ff91ee",
        "cursor": {
          "ref": "6f20b98a-baaa-4460-ada2-158f8efa8986",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ac957af5-d8f4-468f-88a5-32f5c21523c4"
        },
        "item": {
          "id": "c3be38ab-d205-4a03-84d0-058587ff91ee",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "48d196ef-b635-4229-a00e-68de512563d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2c3d25-1cc6-4606-bd06-95d7d40bf766",
        "cursor": {
          "ref": "9ca353d5-0ca8-49ce-badf-fcc9c3ce408a",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1a3a2500-86b8-44a7-af50-10a5bf93401c"
        },
        "item": {
          "id": "7d2c3d25-1cc6-4606-bd06-95d7d40bf766",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e41ea4c1-1893-4d3e-9803-4158da66f587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1de519f-21f6-4e97-8a12-f9db0295ffe7",
        "cursor": {
          "ref": "aa148ec7-dd0a-4f8a-85c3-843ca1f91adf",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c83a4d1e-cfd7-43c5-97f4-80a5ff2dd672"
        },
        "item": {
          "id": "f1de519f-21f6-4e97-8a12-f9db0295ffe7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6581a44c-54e5-4af0-9198-511679b98a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03728e7-0c16-4dc1-8827-d9de0049c434",
        "cursor": {
          "ref": "ca4e08ca-3124-49c5-b4ce-839e47c9a9bd",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2751d38d-f783-44f0-b2b7-f587a229c169"
        },
        "item": {
          "id": "f03728e7-0c16-4dc1-8827-d9de0049c434",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b282b37e-1c62-4c13-a8b6-a47f0263d3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ce5fbc-d8b5-47ff-b527-56743c1a5190",
        "cursor": {
          "ref": "567f4f4c-9163-4be2-ab1a-8993656f46f5",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "66f351e8-84a6-4398-b2c3-c836ff2297d9"
        },
        "item": {
          "id": "02ce5fbc-d8b5-47ff-b527-56743c1a5190",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "40b635d9-8b2e-4ca2-85e5-24599bd52d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45106a7b-73d2-4668-8f79-5b66d91dc1d2",
        "cursor": {
          "ref": "dfcdef5c-633f-4cb7-bf1e-f86901af7a60",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a64571f5-5885-4ca7-9f93-8f03fcf8365c"
        },
        "item": {
          "id": "45106a7b-73d2-4668-8f79-5b66d91dc1d2",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "4cf737e4-4ff8-4ec5-b1aa-8012b49000bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c2f72f-1e46-4187-b757-8a162c288da2",
        "cursor": {
          "ref": "5e164046-d896-4bef-b457-a0243201a420",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "94e34451-e596-4afb-b48f-698f0b92354b"
        },
        "item": {
          "id": "90c2f72f-1e46-4187-b757-8a162c288da2",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b1c93753-d4f5-48cb-902b-42d446ffcc1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61460d05-5cef-4b84-a9e7-8a17f50bdf1a",
        "cursor": {
          "ref": "120c68d3-24ef-4fb7-a8cc-0558a7f93e5c",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3d9f8a59-3240-42f2-8ae5-830a37361412"
        },
        "item": {
          "id": "61460d05-5cef-4b84-a9e7-8a17f50bdf1a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "eba137db-db83-4ac9-a481-60946e7bbfa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3637ba-9457-4575-970b-69144a936d85",
        "cursor": {
          "ref": "41e7a503-dcc7-4fe2-8c62-97d54af55eec",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fc2d6e5e-1e58-458d-a83d-a4db2904172f"
        },
        "item": {
          "id": "8a3637ba-9457-4575-970b-69144a936d85",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "de8b1473-1dc7-41b9-bdfa-9de8f6c193ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac126abe-6670-4f64-b1d2-53e839e9b147",
        "cursor": {
          "ref": "85657f8c-8296-473c-b62f-36a642f60277",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5d315c2f-14f4-488a-9c49-36b36c77a5e5"
        },
        "item": {
          "id": "ac126abe-6670-4f64-b1d2-53e839e9b147",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ea8c3121-6967-4a31-b78b-e1ee7f4ebbbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7735e2-fe2b-4441-b263-dee55b4619b7",
        "cursor": {
          "ref": "58a057fb-6470-4026-b43f-dd4dff3e6b1d",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4b4cacf2-ac37-4a92-aaf5-4dc7f55d91f7"
        },
        "item": {
          "id": "9d7735e2-fe2b-4441-b263-dee55b4619b7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3cc16975-cec3-4824-9f47-c616f2f3c6a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d76621c-44d2-416d-8d84-f636de5287c6",
        "cursor": {
          "ref": "b8cb77af-a800-459a-b3f7-e2ea6a08caf6",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "ebb927a3-15f8-46fc-bca9-df45e0ced455"
        },
        "item": {
          "id": "4d76621c-44d2-416d-8d84-f636de5287c6",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f39be350-9f38-492f-9bd0-41ed0817cc3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f63ddd-c7dc-413f-9cc3-bc0079c6a8ff",
        "cursor": {
          "ref": "5da1f195-928c-4b47-aa93-d1030ce199fd",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6f60fc8a-2838-4296-801d-f76da7dd510e"
        },
        "item": {
          "id": "40f63ddd-c7dc-413f-9cc3-bc0079c6a8ff",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9444020b-eb5b-4c0b-9466-468611b37b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188e6937-34f2-45de-a825-2a30a14aebaa",
        "cursor": {
          "ref": "2d9ca0f8-f3b4-4459-83c9-9e905fb0c86b",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ac05e996-aaf1-46d0-bdd7-cfd6e63bc848"
        },
        "item": {
          "id": "188e6937-34f2-45de-a825-2a30a14aebaa",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fd628d7d-809f-456d-bd66-c5f84c5fb7a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9b513f-8c3a-40c0-a44a-9885adf99b4e",
        "cursor": {
          "ref": "13a49df4-2694-4b91-adbc-96b05aa0562f",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d5dad0e1-f191-4235-a6c2-9ac01a89da8e"
        },
        "item": {
          "id": "4d9b513f-8c3a-40c0-a44a-9885adf99b4e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5e79645a-066a-4dbc-b309-d885cb86af93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082bb989-4797-4b8b-9106-ae67daef7d5c",
        "cursor": {
          "ref": "6fffda9e-c0a9-4414-a51c-09dc75de8642",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "346cb370-2366-4c8b-99ae-1b77d5ae4184"
        },
        "item": {
          "id": "082bb989-4797-4b8b-9106-ae67daef7d5c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e5aae8d4-9619-479e-8095-2bb4cc53ef48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504dae81-5924-4199-ab88-c846347758ec",
        "cursor": {
          "ref": "73131ff4-31d2-40cd-ab7d-bed2a60a7529",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "bdd7ef67-c18d-4ce7-a8d1-6ef781399249"
        },
        "item": {
          "id": "504dae81-5924-4199-ab88-c846347758ec",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "7d72d637-c443-4b6a-a145-5011ac54888a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d657e439-4cfb-4fa2-b3d3-0cbddd13e853",
        "cursor": {
          "ref": "9b76e84c-89de-49ff-b9ce-eaffdc160033",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bf774cbc-43c6-4de8-8203-b725de54166e"
        },
        "item": {
          "id": "d657e439-4cfb-4fa2-b3d3-0cbddd13e853",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8d4a710d-437b-4e55-9263-8f4fd9131401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16114c89-f06a-4b34-b819-2544f2fc6939",
        "cursor": {
          "ref": "e14e4c66-cc36-4cc2-97b4-5e50d4230846",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "adc549de-6d17-4b8a-869f-5b2b03563c04"
        },
        "item": {
          "id": "16114c89-f06a-4b34-b819-2544f2fc6939",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "22de71ca-ea26-44f0-ad7e-bcb858df6ce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf5d5d7-3d8a-4df2-ab8a-4d333d2aa415",
        "cursor": {
          "ref": "20abdae8-7f82-4862-a728-25b34c68be52",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b15aa6cf-1fe4-4fae-831b-897b035af335"
        },
        "item": {
          "id": "bcf5d5d7-3d8a-4df2-ab8a-4d333d2aa415",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4e719b5b-d019-4dcc-b514-fcdbe0563d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03663c87-7396-4a89-9be5-1343f3ac5818",
        "cursor": {
          "ref": "2f02ea5c-cb8d-4776-8f3f-509ac345fb12",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c5be7982-69a0-4643-a9bc-36ffa0e60864"
        },
        "item": {
          "id": "03663c87-7396-4a89-9be5-1343f3ac5818",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7ee93182-558c-41c8-86f6-34cc27ee7d16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c98f34-d793-45ca-96f7-be4948172803",
        "cursor": {
          "ref": "24c86fac-bc58-4768-979b-8a9ae901f9f2",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "05208801-9516-4fa9-b448-dd35fa824f10"
        },
        "item": {
          "id": "26c98f34-d793-45ca-96f7-be4948172803",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "512f4ebc-fc02-41c6-bc51-49573792723b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b204bec-971a-4bbf-9624-6691f8c11cc5",
        "cursor": {
          "ref": "7180d3d1-28da-456d-87f2-e2aa650176f8",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "646a3602-406a-40c7-a470-1cecd2b610ac"
        },
        "item": {
          "id": "2b204bec-971a-4bbf-9624-6691f8c11cc5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "26aecda8-2907-4754-b764-0813e6eb8f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a1a61d-ab87-4805-8ce0-ab7dbcacd1ba",
        "cursor": {
          "ref": "a788d0a2-6791-423a-90a4-12f609e26034",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "95d88b50-ad91-414b-8dde-7477802e63a4"
        },
        "item": {
          "id": "99a1a61d-ab87-4805-8ce0-ab7dbcacd1ba",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f8753bd0-a1a4-487d-82a0-c6aa265907b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6b1f8c-fe56-4c81-8191-af955d5774fe",
        "cursor": {
          "ref": "af844c50-7175-4420-bb81-c03c507efff7",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ac027943-a851-4d39-b835-f6018599198c"
        },
        "item": {
          "id": "6e6b1f8c-fe56-4c81-8191-af955d5774fe",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c90d5a07-deda-4b25-9b1e-60488f2961a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea50b594-0ecd-4a08-8cdb-dca1d67ddf23",
        "cursor": {
          "ref": "e355cbe2-ec89-4a29-b9e2-ff7668a9d748",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ec64ae35-a15c-4995-8483-9d578125a9c9"
        },
        "item": {
          "id": "ea50b594-0ecd-4a08-8cdb-dca1d67ddf23",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cfdf4218-18fe-45de-8d1d-47555c86732b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d870a11-b458-42b5-8831-04ed621854cb",
        "cursor": {
          "ref": "84972813-7485-4e0f-8052-7b6ba9d8ece5",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "be3f57a7-4044-415f-b712-41b0ef193c84"
        },
        "item": {
          "id": "6d870a11-b458-42b5-8831-04ed621854cb",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5a88a3fb-30f2-4540-8733-e4afe03517ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da99aa4-7f8d-46df-b92b-46f81928c51b",
        "cursor": {
          "ref": "d6feaf31-83e7-4767-915e-35937e0db9b0",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d27918b3-5bdd-4b27-bd83-5e6f5ce38b7d"
        },
        "item": {
          "id": "7da99aa4-7f8d-46df-b92b-46f81928c51b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4cdc8891-8e2a-46c9-9a5a-53be49e66083",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c7fdcf-f345-4ad3-9aa7-14b19ea02ede",
        "cursor": {
          "ref": "64eb2737-71ac-4f72-a787-076e2023ba57",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e8dc2f41-c0af-4110-8189-2e1148e57523"
        },
        "item": {
          "id": "51c7fdcf-f345-4ad3-9aa7-14b19ea02ede",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "611ed687-4a77-48bb-86e3-90f76fd8ca26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8081247c-34c2-4345-a894-1143c9af6329",
        "cursor": {
          "ref": "265b360b-db57-46f6-8e98-a91396e93961",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3fe39088-6990-49bc-bb2a-e8e12fa4c949"
        },
        "item": {
          "id": "8081247c-34c2-4345-a894-1143c9af6329",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "68c11a63-172e-484b-b165-1c1d8d2eb078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cdbd1e1-d8df-4911-8cef-a4911d6b2a9a",
        "cursor": {
          "ref": "2ad4f36c-650c-4881-9638-c58be25eddf5",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "63633cc2-1223-4ce7-8514-1c16c3cd9a4e"
        },
        "item": {
          "id": "1cdbd1e1-d8df-4911-8cef-a4911d6b2a9a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "712be499-8fa1-4756-9bbe-4a3c8a0210ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a476e00-cd16-4aa5-b4aa-244b920b1029",
        "cursor": {
          "ref": "78632c34-836b-4542-bcd4-ecd8ec09d80b",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1b6c611b-3151-40bf-9732-7b4e9c118dad"
        },
        "item": {
          "id": "5a476e00-cd16-4aa5-b4aa-244b920b1029",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a0f2c7d6-5270-4b05-98bf-504fde3938f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "748c7401-29de-445a-ad28-60d7ac9ac926",
        "cursor": {
          "ref": "2ffda665-e76f-4836-91e1-75d105438b8a",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "adae830c-98c6-4527-be64-cdbe32f829d6"
        },
        "item": {
          "id": "748c7401-29de-445a-ad28-60d7ac9ac926",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d545f184-1149-40aa-b453-d4fa4a312b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ce7adf-44c0-4bec-83f7-e5f3c569bf8e",
        "cursor": {
          "ref": "02819918-7b17-4f64-8d01-1c74eb355166",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c1f504cb-1ec0-4f28-bc48-2b50b5da7001"
        },
        "item": {
          "id": "b9ce7adf-44c0-4bec-83f7-e5f3c569bf8e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9effda49-f28c-4d5f-8d84-d30c98196cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f957a6c7-9769-428e-9558-66ce2b02c17e",
        "cursor": {
          "ref": "f53b5c63-5891-4114-9e85-3ddc047c08e2",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0fadd8fb-1953-48cb-87ba-df2239967f86"
        },
        "item": {
          "id": "f957a6c7-9769-428e-9558-66ce2b02c17e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "878509c5-5e09-44e9-a2f2-3a809da7445b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be5440e7-5442-4992-bc9f-b1cfd739b188",
        "cursor": {
          "ref": "cdeac256-ba7e-482f-abbb-20818138b2cf",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "bcb061b3-3f54-4863-b0ec-331d4401a9bb"
        },
        "item": {
          "id": "be5440e7-5442-4992-bc9f-b1cfd739b188",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5ad7910f-552f-4fd1-91f5-c0ba08e5539c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd57035-224f-421d-a2b1-43f5b725abff",
        "cursor": {
          "ref": "c06c7100-e2c1-4a77-baf9-b9f2435177bf",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "afdb72c5-76ca-4130-8698-ea7ada60159a"
        },
        "item": {
          "id": "acd57035-224f-421d-a2b1-43f5b725abff",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "daf7d515-1137-419a-ba50-9735942e7932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2fb8a48-4885-42bd-8635-87cd35f48ebe",
        "cursor": {
          "ref": "bcdc78fc-2fbc-4c81-b729-e5b87b4195c6",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fee40c38-167c-49ef-bcc2-ced47a1a296c"
        },
        "item": {
          "id": "a2fb8a48-4885-42bd-8635-87cd35f48ebe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cff6901c-1a38-405e-adbc-9b06a035b90b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621ba54a-ccbf-45db-a1b4-7d705b324545",
        "cursor": {
          "ref": "ba60a716-613b-4646-a3d8-a4897ec84b27",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9093307b-5db8-4639-bc18-e0a8183d2324"
        },
        "item": {
          "id": "621ba54a-ccbf-45db-a1b4-7d705b324545",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e1bdbeef-dd28-40f8-83aa-ac5854968cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3563850-a3dd-48d4-a7e6-7d3986e6313f",
        "cursor": {
          "ref": "f167d622-142f-4627-90ac-f6f3fce54317",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a47d7755-f6c2-4078-aca7-b1e0118aab5a"
        },
        "item": {
          "id": "f3563850-a3dd-48d4-a7e6-7d3986e6313f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ac784c1d-5f93-4629-98df-922afb23c89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83c51c6d-1d90-4839-b4c7-6673fd0393e2",
        "cursor": {
          "ref": "c9b128aa-a646-41ad-ac86-d836ea8ab14b",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d1879041-7a63-4d2e-a266-1f2ec72de8e1"
        },
        "item": {
          "id": "83c51c6d-1d90-4839-b4c7-6673fd0393e2",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5815b3c9-a449-48b1-a787-0754fd105770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ba74c8-f14d-46fa-a12b-49ee149ed55f",
        "cursor": {
          "ref": "4599f9fb-c51f-4d05-b023-f6fc939ae1d2",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d708bddf-1552-4270-b110-a0030357f839"
        },
        "item": {
          "id": "f9ba74c8-f14d-46fa-a12b-49ee149ed55f",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "cc387060-41cd-42ad-b935-3e292c905fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a79e5ae6-775f-4ee3-81c5-f1b890f2446e",
        "cursor": {
          "ref": "59243075-92e3-42d0-a4cd-6c358cabafe4",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "79a48839-501a-4ebc-8f1a-a5f4d7308f73"
        },
        "item": {
          "id": "a79e5ae6-775f-4ee3-81c5-f1b890f2446e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9cb8b60c-43cc-4e84-ab0a-d5f6fcaa6275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaff643-aff2-4eae-8a15-a8cc702ea0c8",
        "cursor": {
          "ref": "3a5a4c66-40a0-49fa-a992-f1acfde86dd5",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "187f102b-188a-411b-afbf-a67d4de236d0"
        },
        "item": {
          "id": "2aaff643-aff2-4eae-8a15-a8cc702ea0c8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "d2c8cc4d-116c-455b-ba96-62355f5a38d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87d1e36-3260-414f-a81d-2597bcaf7b1b",
        "cursor": {
          "ref": "e1bd0cee-d464-4536-a288-966cafa35a33",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "a7714192-cd49-4eeb-962e-b9a5345e7749"
        },
        "item": {
          "id": "b87d1e36-3260-414f-a81d-2597bcaf7b1b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "aee61d92-4038-482e-8d95-32988ceb37b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beee0fc7-e5b4-4b4f-ab09-99c5d7ee8fc7",
        "cursor": {
          "ref": "299389e4-b3af-44a8-93e0-75a25c1f98c8",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "5940ef10-5ba8-4063-afce-e14885f62653"
        },
        "item": {
          "id": "beee0fc7-e5b4-4b4f-ab09-99c5d7ee8fc7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6c6df92d-4e7f-4af3-80ed-41a762c559c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc0964d-f6c3-481e-a467-0706116dda09",
        "cursor": {
          "ref": "0069b17f-e5e8-453d-ba61-8a5525f1228c",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e369a7d4-5f84-4092-b170-becc54410cca"
        },
        "item": {
          "id": "abc0964d-f6c3-481e-a467-0706116dda09",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8685bbd7-246b-45e8-8e02-756e6238d155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e52dbab-f23f-4d9a-b522-7c55e18e3260",
        "cursor": {
          "ref": "8dbc99d5-c4f6-4a14-a6cf-4dcacb4d90af",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "5ec69f0a-3d51-42a8-b51d-3362b7a7325f"
        },
        "item": {
          "id": "5e52dbab-f23f-4d9a-b522-7c55e18e3260",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "51e4e801-cf88-491a-b3df-46fedfdfe997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ea9556-0843-4da0-b34d-5b2ccdc6a406",
        "cursor": {
          "ref": "e81ffeaa-cc6d-4e77-8270-fedfb3856f57",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a16fbf75-8ed8-4eb7-9191-77aaf63974da"
        },
        "item": {
          "id": "97ea9556-0843-4da0-b34d-5b2ccdc6a406",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d6fbe532-2059-4265-93ce-bca3434fe3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050180f4-904a-4f94-8fc3-fca042cf763f",
        "cursor": {
          "ref": "c26a7a93-91fa-495e-a71b-bd7239291856",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2f1c4f46-5a23-489e-a6eb-95268033f4bf"
        },
        "item": {
          "id": "050180f4-904a-4f94-8fc3-fca042cf763f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b92c7941-150b-4179-8c4b-8f2dc9b99a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57e494b8-0420-4693-93bb-1845befed09d",
        "cursor": {
          "ref": "3d1a2d5e-c29d-408d-a206-efe19094bae2",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d95747fb-5b89-4605-b272-19b84b5e90b5"
        },
        "item": {
          "id": "57e494b8-0420-4693-93bb-1845befed09d",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "d11962a6-cfc5-45d7-b0c2-ba12cfa3c4e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ebf077-c9b5-4376-8624-9a611866f3bd",
        "cursor": {
          "ref": "0129c12a-432d-440d-8875-456236b7bd59",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "faff9f88-8942-454d-aea3-190af960634c"
        },
        "item": {
          "id": "f6ebf077-c9b5-4376-8624-9a611866f3bd",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fb611ebd-2d39-4cf5-b0df-3235d8c3561e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "bab69841-01d7-47ab-9e4e-6cec27e69b72",
        "cursor": {
          "ref": "f2fe171b-3bf7-4fe6-8732-c3dd0eebc77a",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "971759c8-96b6-4ea1-8fcc-a4a9f058a40b"
        },
        "item": {
          "id": "bab69841-01d7-47ab-9e4e-6cec27e69b72",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5959c3db-a8b5-4a58-8cf6-cf9c5babd6c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c41f1a0-2ccd-4327-9700-54808d9ed671",
        "cursor": {
          "ref": "5e0ad6f2-bc7c-42c4-b751-7a481678234d",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b66d6560-2311-4415-972d-6076a7194920"
        },
        "item": {
          "id": "6c41f1a0-2ccd-4327-9700-54808d9ed671",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ee8ca377-3965-43db-80b1-525f2a15b481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8981b8d0-1b1a-4430-bb38-c0f93622b3a3",
        "cursor": {
          "ref": "e2805014-4100-43b1-9b96-cb14b5d2b211",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "041d23f8-e245-48d0-8d3f-8f3c55e1e915"
        },
        "item": {
          "id": "8981b8d0-1b1a-4430-bb38-c0f93622b3a3",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8cedb75b-be34-4ef4-abbe-080842df2861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4dde821-def8-47ec-8463-8f6eb1494673",
        "cursor": {
          "ref": "8430e673-16bb-4c37-9b5f-e09b55ca9848",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "748186f7-18a4-49e1-a63e-df0434e8fb71"
        },
        "item": {
          "id": "e4dde821-def8-47ec-8463-8f6eb1494673",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "05f91ef6-d4de-40bb-a64e-246a78c1f06e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e66ae0f-db64-41be-abb2-7e5cc41e9a75",
        "cursor": {
          "ref": "93d5a9b6-f92f-418c-acb6-03b39eb2f44c",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "4a09f1d7-9e48-4b4e-982e-8f4d811a6906"
        },
        "item": {
          "id": "2e66ae0f-db64-41be-abb2-7e5cc41e9a75",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "21bcd20b-c9b3-4967-a856-7ce8f16201e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6519571f-60fb-41a2-b956-23eef70dc4e2",
        "cursor": {
          "ref": "963b717f-9069-4d36-9db9-4c8740f8ee9a",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "66c17ce6-9faf-4ac2-8828-4cca60b09b3c"
        },
        "item": {
          "id": "6519571f-60fb-41a2-b956-23eef70dc4e2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "e3472e02-bbfd-48fc-96f0-82f49abe268f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b14555a-c119-48da-87a3-2ae4372281fa",
        "cursor": {
          "ref": "3c957b46-b4a0-4010-8839-a908d5bfb144",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b7125b9a-8772-42b6-8fb9-5fefa9309d8d"
        },
        "item": {
          "id": "3b14555a-c119-48da-87a3-2ae4372281fa",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7debf872-7afa-4b62-b697-d23c20521026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c67480-601b-4144-bfed-01bf583d9aaf",
        "cursor": {
          "ref": "7cb6fefb-94ae-4910-a433-e41d5b11a453",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "74308878-51ef-4eeb-9709-0c468d63cbaa"
        },
        "item": {
          "id": "10c67480-601b-4144-bfed-01bf583d9aaf",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a3712174-4d77-486d-84c9-4dd6eb2951f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc7b2c9-d3a7-476c-8aec-c3629becfcec",
        "cursor": {
          "ref": "48cd5099-51f5-44bc-98ee-4569cd66b1f8",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2715f4d2-c8d4-4db1-934f-312972150178"
        },
        "item": {
          "id": "cbc7b2c9-d3a7-476c-8aec-c3629becfcec",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a5581227-7a27-4c52-911b-d277833d2a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76887d32-8fdb-4dfe-b65d-5ea2d40a4e91",
        "cursor": {
          "ref": "fc91dc39-1d52-431d-834e-f9d0908a7ebf",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ec96fab0-3285-4880-9359-1dfaa30df251"
        },
        "item": {
          "id": "76887d32-8fdb-4dfe-b65d-5ea2d40a4e91",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f04b75ef-777c-4d5f-8ca6-00fd6da39164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9219e7f1-cc87-46dc-b8de-343a6054cccf",
        "cursor": {
          "ref": "ad3f5309-3a91-413d-ab65-5e1b82a9a226",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ab8618f6-4d67-4de3-b16c-7be9e94afa97"
        },
        "item": {
          "id": "9219e7f1-cc87-46dc-b8de-343a6054cccf",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b772cb57-fa5b-44fe-b7bc-dce2950f0b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f81783e-455c-4366-a48b-333e2b90a2a9",
        "cursor": {
          "ref": "9d8979fd-1773-45fa-83e4-84fb2c2cc778",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7685058a-117f-4ffc-9a0f-cf54738eb5a1"
        },
        "item": {
          "id": "5f81783e-455c-4366-a48b-333e2b90a2a9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "79d6a0d2-46bf-4c3f-ac68-8d4b281a6eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09817ef-ac69-4f21-af37-fb30752a1c0c",
        "cursor": {
          "ref": "68b74a93-e19c-454c-af19-e94bf93b36a6",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "3cb2ff2a-3a77-400b-8a7a-18270bb71a29"
        },
        "item": {
          "id": "b09817ef-ac69-4f21-af37-fb30752a1c0c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6c34e3a2-f5bb-4c36-83b2-202249bd4b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b47d51-65bc-4ddf-af52-c4331ca1d8e8",
        "cursor": {
          "ref": "5ccab621-2f6e-4155-bac5-ccb6a7c88793",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "adaab9a2-c073-40b2-834e-9fb51c167c47"
        },
        "item": {
          "id": "53b47d51-65bc-4ddf-af52-c4331ca1d8e8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "3c97cf5e-1088-4c57-afc3-802b1c42364a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25301ccc-e212-4716-8791-b37e88763415",
        "cursor": {
          "ref": "da2c1f23-f11e-417e-a966-a6f1c9a2d930",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "60c5a58d-1db9-4ff7-a506-28eafd0bc364"
        },
        "item": {
          "id": "25301ccc-e212-4716-8791-b37e88763415",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5652cee1-d0d9-4783-8ada-464aa5ce7c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad005b9-3028-4696-87b7-28560e5869f9",
        "cursor": {
          "ref": "822261ef-9ec1-451a-9ef3-7c8cd7757b66",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d141a98a-2603-4cc8-adc0-5aa30b4cfe08"
        },
        "item": {
          "id": "8ad005b9-3028-4696-87b7-28560e5869f9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "58879b0d-f633-4cbe-9e93-2744442306b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18e5331f-256f-44be-b8c9-a2ef72f18e3c",
        "cursor": {
          "ref": "27a33edf-b203-4ccd-8ff7-3aa63cdc7b6e",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "2607c02e-d0ee-456c-972b-f065b9860396"
        },
        "item": {
          "id": "18e5331f-256f-44be-b8c9-a2ef72f18e3c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "788eba1b-c3b6-491d-b4b1-9438e826192f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5835b271-8738-4163-ac6d-dea83ae28faf",
        "cursor": {
          "ref": "665e42a4-5ec9-4df0-b841-66ba0d13624b",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d02c5bdb-0492-4aa8-9b7d-b3e0f9622ee7"
        },
        "item": {
          "id": "5835b271-8738-4163-ac6d-dea83ae28faf",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a7c89027-1ca3-40bb-9a0c-0f98d1bf2089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf03a73-c0f9-4abf-8240-afd49efa32f5",
        "cursor": {
          "ref": "bedae249-7364-471d-8e9e-fd8fa5d977a2",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "641d262a-b36c-453c-91f0-dfbcdfcc8f7b"
        },
        "item": {
          "id": "dbf03a73-c0f9-4abf-8240-afd49efa32f5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "15636af1-2c7e-463b-ab40-2808f06ab175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cd9954-2cae-4b87-9c39-39fdd7f43b94",
        "cursor": {
          "ref": "c511a41b-2594-45b3-b9bd-070e45aae75c",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "67bc0ec7-c940-41ac-a06c-35230a8afbbf"
        },
        "item": {
          "id": "f8cd9954-2cae-4b87-9c39-39fdd7f43b94",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "513cf547-4c93-45ac-9740-4b414a3c7ee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6233a6d-1800-4f68-90fe-8d0d903b736c",
        "cursor": {
          "ref": "09cf2ca2-8bb4-4183-a3ca-6f57121944fb",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "18b82e16-0f9a-44a9-bfd4-68bd2f06c1ec"
        },
        "item": {
          "id": "f6233a6d-1800-4f68-90fe-8d0d903b736c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "98960cc8-03f9-4f24-b5df-cc51387b07a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063f4384-1077-4576-9e40-0d69c65373b0",
        "cursor": {
          "ref": "75e11a24-4fef-460c-b323-d10e496a30d2",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "db220214-14bd-43dc-aa0a-aa6486a41b86"
        },
        "item": {
          "id": "063f4384-1077-4576-9e40-0d69c65373b0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "85c4108f-dd22-45cf-bfc8-95eb52146903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e60236-c350-417f-87f0-34275fde79e6",
        "cursor": {
          "ref": "0c60402c-f042-4902-b79c-a2e12b88458a",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "eea79a1a-25d1-45a3-b25e-2df35c7981bb"
        },
        "item": {
          "id": "94e60236-c350-417f-87f0-34275fde79e6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "36a74687-2879-4c5a-92a5-7d7695536ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4691dfc-2f7c-4154-ac31-3a702c1960b8",
        "cursor": {
          "ref": "4869c782-4949-4593-a884-4d0d715f086f",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "11debbfb-4f8e-4871-ad90-172ab2ceb520"
        },
        "item": {
          "id": "c4691dfc-2f7c-4154-ac31-3a702c1960b8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3cbdeec1-5b86-4bb9-950a-4f25dd4d9b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f66372-3349-4053-aa77-a0c41fb7602b",
        "cursor": {
          "ref": "0cb426a4-fde7-430b-a559-1ce61a4b2cae",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "205e56fb-9266-4c5d-9830-1762cfeba7a6"
        },
        "item": {
          "id": "99f66372-3349-4053-aa77-a0c41fb7602b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e49491fa-a80b-427c-92ef-eda098029b0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a22db754-2746-4f8e-a2f2-c515fc368bec",
        "cursor": {
          "ref": "5d2d814f-e935-4e8f-9f37-900086f61ccc",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "11cf63a9-3b61-4316-81fa-d4c89eb9c6d3"
        },
        "item": {
          "id": "a22db754-2746-4f8e-a2f2-c515fc368bec",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1c06e5f6-0393-446a-9143-7e877ce31e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471f8769-c598-45d7-b436-c831be7dc0a5",
        "cursor": {
          "ref": "b1c7cd9b-864e-4966-8c34-df3242205c5d",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c109a510-28ee-490f-a286-a99dd5a126e6"
        },
        "item": {
          "id": "471f8769-c598-45d7-b436-c831be7dc0a5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "82bf0d39-886a-483c-80b0-140493ea3b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef6d930-4438-4163-ad50-8b5ebd43f114",
        "cursor": {
          "ref": "71a25ea8-f83c-4ebe-a67b-dfdddbb1f457",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d5767d36-8072-426d-8fc9-841b4eacd028"
        },
        "item": {
          "id": "7ef6d930-4438-4163-ad50-8b5ebd43f114",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ad745f5d-7d83-4ec4-92e1-191d28dffe0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1f93ba-76da-45b5-a8d5-c1a8bb8ba416",
        "cursor": {
          "ref": "95990589-0d5a-4fec-bd5f-ae8c72cf7487",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "17c8f7d8-7f62-4ede-8cb0-2de74f568017"
        },
        "item": {
          "id": "ad1f93ba-76da-45b5-a8d5-c1a8bb8ba416",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6afb11ed-625c-4481-8f78-531d5a468a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37803d85-68e3-4e37-a92e-406a948f4cf5",
        "cursor": {
          "ref": "8509cc7b-854b-477e-9ca6-450b78420637",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "cb5c2e21-6946-49a3-b4b5-961fc59fddfe"
        },
        "item": {
          "id": "37803d85-68e3-4e37-a92e-406a948f4cf5",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "2ae7f6ca-2244-4312-8b75-3da39ccc9bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d09dcc75-a512-474a-bab6-65175f61e1d0",
        "cursor": {
          "ref": "2ff557d3-44c5-43aa-b9d0-468df7a99ba7",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "cf219b70-2e9f-4e28-83aa-f7c8fcadde63"
        },
        "item": {
          "id": "d09dcc75-a512-474a-bab6-65175f61e1d0",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ec1f0a12-a045-4eb1-abd5-c915e93a326c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2a2e135e-ef38-4a52-8287-8c48958cf53b",
        "cursor": {
          "ref": "ca116c93-2174-4bcc-9a7f-6a706f530236",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "16258e44-ea9d-4e8e-a775-788977da40fc"
        },
        "item": {
          "id": "2a2e135e-ef38-4a52-8287-8c48958cf53b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2bee5e90-7459-4a65-b2a8-b34456e03080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "466ccec5-7abc-43d7-87d6-b9ca8ae83ffe",
        "cursor": {
          "ref": "bf14e717-7c44-419b-aaa3-81e7a8fe6d69",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4a936718-cdc1-4279-8636-1d9b97e1bf3d"
        },
        "item": {
          "id": "466ccec5-7abc-43d7-87d6-b9ca8ae83ffe",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "04d583ed-aa6d-49a8-88e4-72219e39c7e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e227e15e-c0ef-4196-b8f9-d5e865683777",
        "cursor": {
          "ref": "a1e19f42-39c3-448e-9af5-39cf714dbbe2",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4b9b736c-8eeb-42b5-af80-b0275d940bab"
        },
        "item": {
          "id": "e227e15e-c0ef-4196-b8f9-d5e865683777",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0ecbfd79-929d-47ca-a933-a47af300f529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "39da7e02-bc07-4b6e-9863-80696f1baa4e",
        "cursor": {
          "ref": "97ba9e4c-fc8e-44a6-991e-f6fc5bef4ca5",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "2891fd5c-2d3d-41ff-948e-c3f914c63a28"
        },
        "item": {
          "id": "39da7e02-bc07-4b6e-9863-80696f1baa4e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "819e660b-fe80-499d-9d94-9b8caec2b72b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1095,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "ec939198-76ca-41f8-b841-6c6115708417",
        "cursor": {
          "ref": "509d5ec9-b8a2-475f-8864-d1e78902e3a5",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "2b527a5b-b091-4fa1-9db8-7f8b9ff58961"
        },
        "item": {
          "id": "ec939198-76ca-41f8-b841-6c6115708417",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ebe3b5d3-7dac-4e2b-8da0-8557607e2707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "8d3ad82f-a658-40bb-9f16-281b4a413b21",
        "cursor": {
          "ref": "9d5cf1e4-dff4-467b-aba3-53042baedbe6",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9b40eb7c-9acd-4858-9df8-8449aa18d546"
        },
        "item": {
          "id": "8d3ad82f-a658-40bb-9f16-281b4a413b21",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3a2a1db0-950d-4673-af94-8d51391956c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3e3da814-e7fa-4f36-8822-3f32a4be44c1",
        "cursor": {
          "ref": "2493d873-e5af-4ae4-af15-cf89842c8861",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "784458ef-7319-4b40-baa8-207d1e8ada5a"
        },
        "item": {
          "id": "3e3da814-e7fa-4f36-8822-3f32a4be44c1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "868e904e-2bb8-46ec-980d-ef391fa65b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "7668f30e-e993-4f6c-bac7-e55c8e0d42de",
        "cursor": {
          "ref": "292ecb41-72ce-42b1-b0a2-ecd54633cf47",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "063636d8-410e-4f32-bb12-a026e671bb16"
        },
        "item": {
          "id": "7668f30e-e993-4f6c-bac7-e55c8e0d42de",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c5370691-9373-40b5-8ba4-0092266a4e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "845090de-007d-4b1a-a00b-af42052f9437",
        "cursor": {
          "ref": "f8c98991-dbd9-4d9a-ace9-5c6f7899e125",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "2f84813d-5e88-4ab3-9a89-f0fdd5478bfb"
        },
        "item": {
          "id": "845090de-007d-4b1a-a00b-af42052f9437",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f5505a7c-2183-41e4-8991-29ff9ae72f5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3115d17-18c1-4d91-9fd6-2c2a82db633e",
        "cursor": {
          "ref": "e1a86c79-8542-4301-a5c0-27a4f0e45536",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e5137039-5bfb-4f95-aabc-6e5c43c33025"
        },
        "item": {
          "id": "a3115d17-18c1-4d91-9fd6-2c2a82db633e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4e4db75e-59ba-48ed-9e81-1b4411ccf0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7deb46cd-78ec-43e1-a2f7-fe5b031df49f",
        "cursor": {
          "ref": "4e2cd94d-b50c-45f9-8e08-87c6db12becc",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "416b5645-583b-4aa6-9f1c-5e6bdc4c0ffe"
        },
        "item": {
          "id": "7deb46cd-78ec-43e1-a2f7-fe5b031df49f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ff4f2dde-4565-4f82-a946-ad1243f5dd54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e42137-ab1b-4051-98e4-bb8f65194256",
        "cursor": {
          "ref": "f8bfe1c1-b638-4a62-bbb6-7120a10fdd3a",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6d13a032-db17-424c-bd06-054d8def8259"
        },
        "item": {
          "id": "c9e42137-ab1b-4051-98e4-bb8f65194256",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e472b976-f69c-473e-87aa-f8e15ac44b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d07d15f8-97f0-4e56-9296-a53aff26cbcb",
        "cursor": {
          "ref": "de632435-d15b-4479-87ad-6512ad896308",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d537b73b-277d-44f3-9910-9e6bceac4d28"
        },
        "item": {
          "id": "d07d15f8-97f0-4e56-9296-a53aff26cbcb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6e8a5155-3a2c-4205-b930-d96e05e95f4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b144a7c8-ed3e-49ab-833d-96f180d48477",
        "cursor": {
          "ref": "2d09ea8e-0a3d-47ec-8024-5ebe7bae8424",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "d0c105e5-2792-4c4c-a0ea-e0caa3cd65ca"
        },
        "item": {
          "id": "b144a7c8-ed3e-49ab-833d-96f180d48477",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "260fd9bb-c3ca-4d84-8b0e-d39cba504157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f1c575-a679-4dbf-851b-4aec92308208",
        "cursor": {
          "ref": "5bb84623-2d6d-4c0b-8795-0fc7b7b80f54",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b98c32a9-0575-45f3-8864-5ea7dfc87f16"
        },
        "item": {
          "id": "c1f1c575-a679-4dbf-851b-4aec92308208",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "42ed2bf2-5f56-4870-a3cc-e59f60633d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d61bab-1135-4b02-bc88-97a043ca6b33",
        "cursor": {
          "ref": "da511ccc-f832-4deb-aa91-d1132470f260",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "07d01d38-7c29-49d6-b550-4f9c2cebca2d"
        },
        "item": {
          "id": "58d61bab-1135-4b02-bc88-97a043ca6b33",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "099aeeb9-0de6-4ef1-a8b3-eaf14fa18d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ed764e-8022-49bc-8d72-5833599b4f99",
        "cursor": {
          "ref": "d3b9baff-43ef-46a8-a0c6-4735c658632c",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f8dc75b6-c664-4bf9-a9d2-90360af8ef95"
        },
        "item": {
          "id": "72ed764e-8022-49bc-8d72-5833599b4f99",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "244fa2db-5095-4cdf-b401-6697c23db821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb97ebc-a467-4b1d-a1e2-eee7a9b4c491",
        "cursor": {
          "ref": "94bf29e1-8855-4af0-a110-75168d7d23cd",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6345c117-1b21-4f38-affd-e39265fe246a"
        },
        "item": {
          "id": "4cb97ebc-a467-4b1d-a1e2-eee7a9b4c491",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d33c8c65-567a-4f89-a969-122a057763d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71701c82-3b43-4dc4-8265-3ab3381ebe0d",
        "cursor": {
          "ref": "7e5c1886-b28b-41a1-bbf0-eb16396bf8b3",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4c985adb-4d44-4090-a522-34ce1ca69b2c"
        },
        "item": {
          "id": "71701c82-3b43-4dc4-8265-3ab3381ebe0d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5686bd5c-59b2-415a-875c-e8f33eeae609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4541abe4-c1d2-425e-919b-301e6e295d04",
        "cursor": {
          "ref": "3fea8e1a-27e2-4428-b8f9-fe8ab96c08b4",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ddd46913-f687-4dd6-b921-4e220a1adb6c"
        },
        "item": {
          "id": "4541abe4-c1d2-425e-919b-301e6e295d04",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "939d2dae-5dc6-403c-95a0-8b118b4eab6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83185d6e-dc30-4e08-86fd-ddac920ec589",
        "cursor": {
          "ref": "2d7bcf2c-0cd3-4b0c-9cee-0c6513cab3fc",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "239887ee-eadb-4f89-8ad9-ec39f7efb102"
        },
        "item": {
          "id": "83185d6e-dc30-4e08-86fd-ddac920ec589",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4082c76a-69e8-417a-a745-9e633a4dcbb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f85b753-28df-4cc9-a7ec-58c148f6a5ca",
        "cursor": {
          "ref": "61b6ba61-ed5d-4cfb-87dc-35bbb6f3656d",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1a4d850c-7092-4830-bd61-f086b55d79f4"
        },
        "item": {
          "id": "5f85b753-28df-4cc9-a7ec-58c148f6a5ca",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c839e514-b032-426d-903b-6c5f551acfc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1144,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "bd11cb9f-857d-40b0-9f45-ad354fe2b8aa",
        "cursor": {
          "ref": "6210b4c8-5db5-4cab-97a9-3a67926e2c5e",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b62c5f37-c529-4678-ac93-495d37115cb0"
        },
        "item": {
          "id": "bd11cb9f-857d-40b0-9f45-ad354fe2b8aa",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7375aee9-d0fb-4903-9eff-2368f3a801a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1118,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "8cfce08d-2679-435e-9424-2d2dd3411f51",
        "cursor": {
          "ref": "3e39762c-9ae2-4cbb-a201-0311ba654b29",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "aafbbfde-bf15-4f48-8f5e-bd9e9f7d3b8d"
        },
        "item": {
          "id": "8cfce08d-2679-435e-9424-2d2dd3411f51",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e54a3aed-72ae-4b20-b268-cd14e28f3be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "bf636dce-81c5-4346-8904-94755cac43de",
        "cursor": {
          "ref": "8fd020a0-3a9b-4f6b-8a0c-c03d71ee4307",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5fae761f-ba60-4d3e-9a30-2f4d59733661"
        },
        "item": {
          "id": "bf636dce-81c5-4346-8904-94755cac43de",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3f4e9075-25b6-48f3-9929-971285e0dd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1084,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "8b069651-4316-4e65-ab72-418f47a2bf9e",
        "cursor": {
          "ref": "a79561e4-295f-4243-b1be-4f2f26eca58c",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ed3e2d5c-2f55-4aa4-96dc-6cc21734ef1d"
        },
        "item": {
          "id": "8b069651-4316-4e65-ab72-418f47a2bf9e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "957d5434-f5c9-4895-ba3f-5db7aa8b0e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "331eb46e-5e3d-43f4-99b2-ce3e56646a66",
        "cursor": {
          "ref": "d27e607c-adb7-432e-b90c-3756a91aad1e",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c7a104aa-28e8-4cdf-8a50-30dd87089dfa"
        },
        "item": {
          "id": "331eb46e-5e3d-43f4-99b2-ce3e56646a66",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4502382b-14d8-4fad-a496-843ff7bf242f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f168359c-9bfe-4180-b89c-88a323bbe97d",
        "cursor": {
          "ref": "1e609427-a666-4ea6-8d5e-b38034047b96",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6436e29e-0169-471e-a9bb-f6deb770e596"
        },
        "item": {
          "id": "f168359c-9bfe-4180-b89c-88a323bbe97d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7b0b716b-2238-4fed-bf96-d844df41e447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e06550-ee90-4ea2-8e8f-ef4c68e2c877",
        "cursor": {
          "ref": "e6549f19-998c-4392-a031-5943bbb81a64",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "b550a788-805d-4afa-b638-4556e6268d9c"
        },
        "item": {
          "id": "92e06550-ee90-4ea2-8e8f-ef4c68e2c877",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e029e837-9c9d-4167-b838-5ed99c00adae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e326c2b-b7a2-4c3a-908d-02d481c1ddf3",
        "cursor": {
          "ref": "a09b4fe1-fb04-4a00-819d-0f365d66ee85",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "deaa317d-6d06-421b-be27-a760fcdbb92d"
        },
        "item": {
          "id": "5e326c2b-b7a2-4c3a-908d-02d481c1ddf3",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "000d1a15-1348-4abc-b61c-df13bb471c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f07323fc-5fe3-43dc-989c-32ad84db873b",
        "cursor": {
          "ref": "55e9d0e1-87fa-47d1-959a-f1bd001545d3",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "28e23686-b896-471a-91fe-3fb405287fc3"
        },
        "item": {
          "id": "f07323fc-5fe3-43dc-989c-32ad84db873b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d1e72dd7-ec02-4fa0-b4df-c0b5b39562ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6e29e79-db6a-4e59-88ce-4ec3050af466",
        "cursor": {
          "ref": "939727c6-3182-48f3-b12e-f38e9a587d08",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "004d5864-8fa6-4988-8034-409a15471eea"
        },
        "item": {
          "id": "d6e29e79-db6a-4e59-88ce-4ec3050af466",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f03d769d-2da2-489b-893a-851a888e5687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7bf29a1-3067-4117-9482-0fc523bb1fbf",
        "cursor": {
          "ref": "0825cb72-3aa8-4ced-a324-3d61b004be58",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "11b97eb2-3d58-4d03-9113-30913697bc77"
        },
        "item": {
          "id": "b7bf29a1-3067-4117-9482-0fc523bb1fbf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "535f7dc7-56bf-4f7d-bbac-62f7a75d5b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a94c9ac-e66b-448e-87f2-ef59ebeab69c",
        "cursor": {
          "ref": "1cf4b0c8-ddf7-410a-b53c-62753e00699a",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bbfe1e50-8871-4973-abdd-a9bfb6f6b5b7"
        },
        "item": {
          "id": "2a94c9ac-e66b-448e-87f2-ef59ebeab69c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "981a3e0f-cba9-4c15-a3ce-cb24c7dde62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa0c7b4-ff2e-47c3-ae4d-b8737dfb2127",
        "cursor": {
          "ref": "6c79339b-3e0b-4618-8b9e-39814e78eafe",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "9f78ed47-7f13-4ce2-abe9-673c7bdb28aa"
        },
        "item": {
          "id": "faa0c7b4-ff2e-47c3-ae4d-b8737dfb2127",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "949b7a69-1f2f-4d42-bf8c-7bef586d0afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee08e055-bab1-4867-a670-667a6fdc2de9",
        "cursor": {
          "ref": "08ed6330-081c-46b9-bcd5-41ad957eda27",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4b547f9e-e58b-471f-84d0-142d56678d44"
        },
        "item": {
          "id": "ee08e055-bab1-4867-a670-667a6fdc2de9",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b807c6b6-a28c-4495-a9a4-c86da41715b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be481000-0d0d-40ce-9221-51e35d50e65a",
        "cursor": {
          "ref": "84453b5d-c73b-4dcb-80ba-9c4845833fd4",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "1ba96eea-b951-4fd9-9bb7-2204153b6119"
        },
        "item": {
          "id": "be481000-0d0d-40ce-9221-51e35d50e65a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "64ddcaef-d7ac-4e56-99b3-06d04ae399bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac25e553-f28e-4c83-8b70-5201412dcf90",
        "cursor": {
          "ref": "2d9ccf4b-3e1d-41a2-8db4-b8ff1bce0a3e",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "edabcb34-7fb8-4919-a257-254027f566e1"
        },
        "item": {
          "id": "ac25e553-f28e-4c83-8b70-5201412dcf90",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3502c494-8ffc-452f-b4f1-5339bf39748e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdc7a45-bc04-49fc-86c4-692ffe759c66",
        "cursor": {
          "ref": "282c0f63-25cb-4681-ae29-b311e25880b7",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "57c6076e-6479-41af-9ab2-45c363c298fd"
        },
        "item": {
          "id": "1fdc7a45-bc04-49fc-86c4-692ffe759c66",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "70e9f0bf-17e1-4843-ab8b-472e71fc7077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46a2921-b110-464f-9b11-5364105831ca",
        "cursor": {
          "ref": "7f12d023-1cb9-490a-8e5a-5dfbffff126f",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "ab474fad-943d-4082-8345-f769b26a0f71"
        },
        "item": {
          "id": "e46a2921-b110-464f-9b11-5364105831ca",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "249d57b9-b128-4905-aa18-dc66c97ac4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70795456-ab5c-43c2-a368-8f9102b9bbc3",
        "cursor": {
          "ref": "00a0b0d9-a1a2-481c-8ad9-ff5840247bf9",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "187bfa07-6fa0-434e-882b-a37e2f71fb29"
        },
        "item": {
          "id": "70795456-ab5c-43c2-a368-8f9102b9bbc3",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1f07cbd6-daac-4e91-aeab-facac40dcd5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cd8a9a-250f-45f9-91de-3e56529fa84a",
        "cursor": {
          "ref": "7f6c0ec8-b0c6-4bd8-9781-6eca4d813e9d",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d96b2859-8c6b-4e59-bc0a-600666e6df2b"
        },
        "item": {
          "id": "e7cd8a9a-250f-45f9-91de-3e56529fa84a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ffe5ffb0-cdbf-4dfc-b634-ec809c9703ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e3b7eb-33f5-42f0-b437-ccd7c0969af7",
        "cursor": {
          "ref": "ff499d7e-f530-47ed-a481-ca12b2711d07",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ec6dfedf-be91-41d0-8abb-4d753704b515"
        },
        "item": {
          "id": "30e3b7eb-33f5-42f0-b437-ccd7c0969af7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cfce47f5-a14b-4111-80a5-8d0f4701bae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9820464d-6ac0-41e3-8f3c-2b6925923da0",
        "cursor": {
          "ref": "3bf92f4c-e057-4ac2-998d-0e72f1c49403",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "70a40400-1a0d-4200-9108-f7907be23ccb"
        },
        "item": {
          "id": "9820464d-6ac0-41e3-8f3c-2b6925923da0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e4ace778-a4cd-4d2e-9cda-df9f4ffcc964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5feb0e-14a9-46c0-8fcf-f70260b37b53",
        "cursor": {
          "ref": "e6c38eb5-dce0-4d9f-b2c1-4bd23e171555",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "82899ce4-8043-45b2-8981-e36a9564914b"
        },
        "item": {
          "id": "5b5feb0e-14a9-46c0-8fcf-f70260b37b53",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0ecedd8b-d00e-4c9c-be22-e391ee225153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f16002-f17b-4a65-87d8-66ba1f7cc618",
        "cursor": {
          "ref": "a77b0c83-6b98-4b4d-9d08-6fb63b5488ba",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c9c56a33-714c-43bf-a638-08bc1e28eb0d"
        },
        "item": {
          "id": "a0f16002-f17b-4a65-87d8-66ba1f7cc618",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cb92c482-9449-450b-b30e-7f45bb4444f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936bb9ae-3b7f-4764-a3d1-da39fe2170c8",
        "cursor": {
          "ref": "4182ff72-3359-4dbc-ae32-6563c8c62603",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "815063a3-8a8c-482c-b079-e83265baca31"
        },
        "item": {
          "id": "936bb9ae-3b7f-4764-a3d1-da39fe2170c8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "53415450-1ffc-4eb3-918e-1ab2164845f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0050c512-5be4-48ff-ac6e-a673704bb17e",
        "cursor": {
          "ref": "a979b5bb-558b-4e1a-9aa8-9f256cc37d6d",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "254c38af-ff11-4d4d-90a1-aca1d089dd72"
        },
        "item": {
          "id": "0050c512-5be4-48ff-ac6e-a673704bb17e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "31a71afe-71fb-456a-b46d-a31e305874eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f033b67-eec6-4b09-84e0-893a4627149d",
        "cursor": {
          "ref": "e78bbf4c-3bff-4735-98d3-c41f213e24e6",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "92eea61f-e152-4634-937a-b26f84451126"
        },
        "item": {
          "id": "2f033b67-eec6-4b09-84e0-893a4627149d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f7f481ae-8f68-403d-96ef-a95c24d88bd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e95cf1-22ea-45f1-93e2-cea8c0fa0bfc",
        "cursor": {
          "ref": "0b0c2ba8-dd48-4047-abd8-745f560a8c44",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "dccbbc31-0df3-4078-a5a0-8b883c6cd074"
        },
        "item": {
          "id": "e5e95cf1-22ea-45f1-93e2-cea8c0fa0bfc",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a3bca2ca-5bf6-4590-8796-af57969f2de1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9131b81c-bf72-4bef-97b9-de7787cb9de0",
        "cursor": {
          "ref": "022e69b7-630b-4473-8670-c73f27815057",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2f004d05-87b0-460d-aa1f-de0ece15f6da"
        },
        "item": {
          "id": "9131b81c-bf72-4bef-97b9-de7787cb9de0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "51af89dc-5147-4d67-afbc-aa0fef253eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e607c486-c363-4a61-bf27-4af03c3c2730",
        "cursor": {
          "ref": "5080f489-3a98-435e-8cee-87d5943b0cc0",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b6b7bcdd-8ff8-4eda-bddd-e5123f94c152"
        },
        "item": {
          "id": "e607c486-c363-4a61-bf27-4af03c3c2730",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cb4581f7-cadd-4e35-9464-71ef5f4a0a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a1cc21-7d0a-482d-bbdb-f2b321be7541",
        "cursor": {
          "ref": "327ef10d-0a6b-4d70-a4e2-fea8045a5b55",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "bdd19fe9-b659-44af-86ff-d48772fad028"
        },
        "item": {
          "id": "06a1cc21-7d0a-482d-bbdb-f2b321be7541",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "000819fd-3c6c-441a-971c-0279cd3324c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9413d3a-3413-479f-a364-db3029bf8495",
        "cursor": {
          "ref": "045c8402-b11e-4db6-bc59-0cc6efefa35b",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "6d821874-ad7e-4e6d-92fc-f4c052b04a53"
        },
        "item": {
          "id": "d9413d3a-3413-479f-a364-db3029bf8495",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d4921f9b-fe48-4807-b1fe-bc255dd96833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e7dfb3-d7af-47fa-9e74-795225f29f9c",
        "cursor": {
          "ref": "7d2cd9be-e92c-4773-b752-3729aef0f1f7",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "b5935df3-70a8-4f3f-8e8d-0f506a965ab4"
        },
        "item": {
          "id": "a9e7dfb3-d7af-47fa-9e74-795225f29f9c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5b0f363d-2936-48b8-bb89-889cc47475a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6219ed0c-58bd-489a-959b-595d18c93d68",
        "cursor": {
          "ref": "345fe08d-769d-4e3d-8db9-3c21ea9f6007",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "926c56f2-5601-47de-9774-7c9a4b923b78"
        },
        "item": {
          "id": "6219ed0c-58bd-489a-959b-595d18c93d68",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7d337c9e-cfee-4c14-a36b-48e81648b458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "562bd857-3564-4cbc-8fd4-f263809365d1",
        "cursor": {
          "ref": "fa18f9a4-ff69-4a91-bfb5-7438f18000a8",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "4a4e0cff-b14b-4031-9260-7e663d5acebc"
        },
        "item": {
          "id": "562bd857-3564-4cbc-8fd4-f263809365d1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "10b49a2b-eff9-4abd-a500-b153eeeb5ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c361c8-3c8d-4708-ab53-471f66b99418",
        "cursor": {
          "ref": "ecbde94a-b48c-4970-88b2-ff1294230482",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1f9c00c7-4e1e-4bd8-98b2-385641c5fb74"
        },
        "item": {
          "id": "90c361c8-3c8d-4708-ab53-471f66b99418",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "733e798b-fddd-4ccb-bde5-c85947058053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01d8d4f1-b2b5-41d6-962b-66eb42026898",
        "cursor": {
          "ref": "bc8e44dd-fc1b-44eb-96c0-893e392815f0",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e70b3e36-e34d-4f3c-ba62-d073e870b28e"
        },
        "item": {
          "id": "01d8d4f1-b2b5-41d6-962b-66eb42026898",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0bf03fdc-81b9-41c5-8523-85e2c82f836e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b9fdb1-ca02-4d0c-94aa-2c48c1f7a2bd",
        "cursor": {
          "ref": "a40848bc-38ca-49d5-b832-fb3db8e31f29",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d78b89fc-d562-4b42-8537-50db5d3aabdb"
        },
        "item": {
          "id": "b4b9fdb1-ca02-4d0c-94aa-2c48c1f7a2bd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "0da7c0be-90df-4a41-a5e9-942dfc985597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf770b7-81f4-4ef0-b930-ecf4d645a8bc",
        "cursor": {
          "ref": "8caea109-37d1-43f7-9231-2303b25a7d9d",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "dd31dae7-317e-43e1-8f96-7f46e4f6f473"
        },
        "item": {
          "id": "dbf770b7-81f4-4ef0-b930-ecf4d645a8bc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "808a59d4-6cdb-4d85-bd76-a77a8d1498eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f43af0-e17c-4ecd-8c83-382cd2fadeda",
        "cursor": {
          "ref": "4a50963b-2536-4a97-a6f6-db337d6cdf7d",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "aa28cb76-6279-4b06-98eb-2f2620fe3500"
        },
        "item": {
          "id": "f0f43af0-e17c-4ecd-8c83-382cd2fadeda",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "89e9b9e5-85de-4963-bdfa-7279cc76156e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "62c849d3-036f-4f16-beb2-23d5af0e2eb5",
        "cursor": {
          "ref": "8ee2ad8a-b319-4e94-945c-ab149a8a2ebc",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "aff5d50a-eff9-4d79-88bf-8b85c453020a"
        },
        "item": {
          "id": "62c849d3-036f-4f16-beb2-23d5af0e2eb5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "522dd6a7-6fdd-4e6b-bb82-0d5b76c99cb9",
          "status": "OK",
          "code": 200,
          "responseTime": 1180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3f30bf-c01d-40e5-aaab-ed8a987e0948",
        "cursor": {
          "ref": "17b02b28-13af-4bac-b1ff-4b43ca38bdc3",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "1fafe330-ced5-47ac-a022-59b01eec14ca"
        },
        "item": {
          "id": "8e3f30bf-c01d-40e5-aaab-ed8a987e0948",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0f14c57d-d693-46ed-b679-789a3a7a93e0",
          "status": "OK",
          "code": 200,
          "responseTime": 1137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b33efb-63b3-4104-b36c-d3265219bd8e",
        "cursor": {
          "ref": "dfa2324f-df47-4a31-8d82-f7744488261c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ceace243-96c7-4019-a485-e1736d3be669"
        },
        "item": {
          "id": "11b33efb-63b3-4104-b36c-d3265219bd8e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ea75e0c8-1f94-49d5-b151-2ce9d7329d7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b33efb-63b3-4104-b36c-d3265219bd8e",
        "cursor": {
          "ref": "dfa2324f-df47-4a31-8d82-f7744488261c",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ceace243-96c7-4019-a485-e1736d3be669"
        },
        "item": {
          "id": "11b33efb-63b3-4104-b36c-d3265219bd8e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "ea75e0c8-1f94-49d5-b151-2ce9d7329d7b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f596dc6-4c97-45bc-8a68-b5382a0365fb",
        "cursor": {
          "ref": "e1a74236-557e-48b1-90ff-31ea04738cbf",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "5c0de8dc-2328-493b-b2f3-338f0ed6c113"
        },
        "item": {
          "id": "3f596dc6-4c97-45bc-8a68-b5382a0365fb",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f80a96a6-200c-44c0-a0a0-814b34ce5cf5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca93f05d-72f4-4d85-b238-5041bf351d7d",
        "cursor": {
          "ref": "abdb3de8-84f6-4dd3-af04-bc6d0b93d0f8",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b9b7b812-ed89-426b-9265-a524417bfcdb"
        },
        "item": {
          "id": "ca93f05d-72f4-4d85-b238-5041bf351d7d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "caee650a-2fa6-49da-9d16-63b04e082f83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}