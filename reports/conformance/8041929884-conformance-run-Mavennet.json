{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ef3539b2-b78e-4d2f-b8be-237236eef1c9",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ad1376cf-4ab2-4166-abd4-d27a41718ba4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "64ce03c5-7305-4ca9-b980-463d6557f584",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5ae2aa2e-e86d-4442-a165-0cd9ae03bd0e"
                }
              }
            ]
          },
          {
            "id": "65d7147d-6ddc-42ba-8c9e-b896eb5e7e76",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "056238aa-302c-4352-80b5-1306b161fb14",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3e19da79-8167-4865-aca4-320509f2f821"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7a0afa1d-65fe-4313-b205-7a2beb75dbfd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "db78b196-c1a4-4c1c-bcc5-a168efb0c184",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8489c570-c8c9-43a3-a0f3-b51639f10e0c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac329fd0-00a4-4bdb-8c99-7c07753c639c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c2da344-3882-429a-b70b-9a7df320e5e9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d8ebe6ed-25e0-43be-b06d-6990294003a7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4f156bc3-a3f3-4361-a2db-3107fd02ddb4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1c7deb51-69e2-43ba-9321-959d2ed7c55f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c2d03e9-c55f-4037-b6d4-ac4fa314bd33"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2890886-616b-4991-a9e8-2078d1dda548",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a80e5720-ae23-45b6-b5f6-226abad88e0e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3475d29-8c19-48eb-9891-820484f5e73b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eacfbdcd-28cc-49ad-81c6-a0f7d2839a75"
            }
          }
        ]
      },
      {
        "id": "8e6bfb7d-5a8d-49c0-b566-8e1fae9d997e",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "16697277-e45f-440a-ae6e-c0079a860a34",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6f2e7a94-cd16-4ec2-9f38-9b109428e96a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "75521e99-afa8-40ad-ab67-0fcb3e95fa82",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8415f470-c128-4c4b-94b8-988a3c0823da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a355695-0986-46e9-a9a5-6872d14b02c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675ed2ff-0cca-4112-b29d-7ec6f3ba4cf2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6509bf-f364-4c03-95d6-c25449a0855a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8643213-624b-4e40-ab5d-5e046b3177d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a270825-bd29-4c10-a08e-0337a385c343",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2531580-1f24-443d-bfd1-142a2072d1ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4806d80c-9f61-448e-afbf-b0473f66a869"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5d14741a-eeb9-452d-acf1-7155d356f673",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5bd6943f-b552-4115-9a3b-a765b32c363e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f6d80f-8720-4134-9198-35cd3c747e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c03943c1-aede-42ed-9a03-55a6dea2267d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6aac05-20d5-41e8-98e8-b95d4720a83c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd617eb-c009-4035-b40e-d50b0cd778cd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8d13b67e-28ec-45c5-b342-aac08eb312ad",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ffdf00d-1062-49fe-a62e-a60103b1a8ce",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5bd139ae-7e3b-4da0-9dd1-a8780f891072",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1ca5a437-5fca-468e-bdac-fbf9c4bbbd43"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "76dff389-9538-4f89-8328-5b62bb881045",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "49e90e68-ee9a-44c7-87f5-1e13894d97de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21b67895-a289-4a98-be8d-a5ce5d5633b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cee46d6e-b0db-440c-95d6-4d49fbf6cda6"
            }
          }
        ]
      },
      {
        "id": "5093c14c-b1d2-423e-8292-69b085d58d3d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "910d9c51-9fc0-4b7f-bf9e-4b36673751b6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5453f08-838e-4d7b-94f0-81933db00f96",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0c249815-2780-4947-a3ea-2ff68ef21865",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a0a3c4-8e1e-4526-88ac-5eb6aa06c0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f126eef-db37-47e5-9ed1-02546c412eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28a7b56-7fa6-481b-b1a9-4540ce9f5396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02d2ee69-2cff-42d7-b0d1-1e4b19106f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac47e8a-a0fb-455b-a40e-b831106ac143",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4651b28-815a-48f2-bb97-d4c2b6d253e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3680f7-86b3-4413-bcfa-574ea605a3b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3149cda-f9a6-41bb-aa3d-a3ac381e64f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36e0d2f2-ee7a-4d78-aca2-fe8cff773db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896b4758-bf75-4d19-b5e2-0ba5f529a21b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea54760-b8bb-4af9-a819-1f1e65c03b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7636b2ce-1759-482b-af8a-e9d9253e6b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c5f26e-3db9-4be6-8180-1608ad4c38f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b906212d-81cd-482f-bfb6-1d10b314e312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3719d243-ba47-4471-af9f-3d6300692a0e",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "912b77f3-c112-40bf-947b-fcf831550f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203e453b-58fe-48b6-a124-f6862b04f10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260ef9a3-a476-4b35-b0e9-a31945bb95b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "281f7771-8c83-47be-a2ba-2514e4765903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e35725e-a91d-4a6e-aaa8-07e6288ab17a",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12517936-0690-4c75-8f65-954a6295101c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a8403e-8646-4f83-84bd-35cc1e2e8d0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93dfbe75-c460-4335-a280-d8dc25b6a31f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e2906b5-e493-4681-b4d6-2a276d4e037f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "256f9734-0943-4029-9c7c-e6feb3b0489f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cf6b12-1ef1-4ed0-ab63-eee6c5d3e707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc7e81fc-fcfd-45db-b4ff-fa42d27a020c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73d61af-8fb1-47e2-81fe-ace7f0c3cd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5eb85798-a75c-4ff5-b48c-e618993260c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "530feecc-1a94-43e1-a722-815ffa0cebec",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c4fcba-175d-499e-a532-a92408a0c9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75ba7ea1-fdd4-4d5a-b3b7-37a2ea1b75af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3885569a-826a-4899-97bd-f9a63d88586e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "419bba03-4567-4c20-95e4-8ceb1299a7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45071f22-83b4-4620-8590-52cf9f7ce355",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a434a612-8955-4273-8fee-0948b65d0464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "244233c5-844a-42cd-8223-f39577995d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06eba13d-c587-4518-90ed-e0501552a3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "912658bb-eb8c-4bc5-baf2-c8750b92884f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b1ab9d-08f6-44e2-a6c2-3704df51e512",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90bdcce1-9f8a-4c0b-894c-fdf6b0651c3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40d480d1-9149-4841-a504-7e0652416825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f81330-47ae-4d00-8c19-1be77e8f2387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "546d528e-c1a1-4c5f-ad4d-97115d28ab0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75089bb-8ea2-4867-bfbb-e0920e6f2805",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a690948-1f6e-4275-b2a2-2568e53bd1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a1cb39-46a5-4942-9dd1-cb3f5a18d4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8216a1-04a2-4617-891d-39c4fd4355b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55f97c80-4afc-4809-bf3f-5ac3b0fcee29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7158689-1c84-4e4e-abd2-b7c716ea53d0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "190f55e7-a00a-43ee-8593-c23de4efc6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aebfec6-ffc5-4068-bc5d-a34c46cbedc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804fb280-6b38-46ab-82d4-c036338f528c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed068c2f-bc83-4832-87a8-a065a8aca1c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e3f0f72-12b0-40d2-87af-fe800fdca225",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c30bac-bb8e-4bae-8f17-912c74ec44d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad25f5b1-3053-4812-8135-6b31cd67e3d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d39cbcd-d7d2-4465-9944-02a265b1efc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "323726d4-5016-4b0f-babb-5d517d1bb48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84509780-c9b1-42a7-bf9e-9f29ea8fbc19",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c318b81-5187-4683-9122-4c4855dff9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7b97c2-3366-49ca-8bed-1f8d39bfd939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135c48ac-f2b3-4ea7-b052-0afde3636ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcddda7d-b943-4676-a770-367afcec1fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31a8fab2-437f-4f3b-83b0-129f92155f06",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39e27db-3c98-4107-b2fa-1a8c41493d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9155d554-1213-49fb-86b3-2dc9b2e70dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90664fff-b1f8-40e9-8416-ebed91ad1611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1258c60c-7c46-497e-96c9-c46a9ede6811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09cf7be8-c4f4-4b90-b0bf-aee683840ccb",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "441ea226-6140-4e3b-b622-3447f0c0631a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4fac9a-d798-4226-af43-5c7349db45b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c04a10-84eb-4422-9329-808cc957ff7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bef412f3-0913-44cd-af24-7df333e55734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373267f1-5135-4760-9d65-41ea6651886f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6312193c-1308-44d4-8c40-08258001ff16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db0e84dc-a340-4068-9619-5b734a43b86b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f60cc07-1858-4527-be0e-9c9d373d69a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc73784f-9e9b-428d-b8de-139d42226cc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73cd79f7-6dfd-4bcc-b4db-2f86b6c6915c",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71be33d-13c5-4a3f-93c3-c55b93bde631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb7c851-c46b-43fc-b3e2-911136799176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8423647-f313-4819-8385-8568126690b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6238ccd-d481-4acc-8db0-e62f06f8a489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70495d5-331e-4324-9f77-9cc3dc88d038",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3149d5d-baed-4336-91a4-796b1e19a0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4967c81-b504-433d-8f07-292ba78c6978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a8a230-28f4-4eab-8f6d-75606ff75252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "85dfc1df-aac1-4128-97d8-77217598688a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07d96b49-a5f9-4a8d-bf41-7bb18f4f5c1e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3a038a-f1ff-47bf-9e1b-986cce68097d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292abd93-ea79-4ac2-a315-e00dd606da51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5272a53c-3651-453d-85b0-d4790ec41af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8986fbfd-db69-4f7b-89a3-2691706e01d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed9219e9-660e-49fe-a1a1-9f2dbd9d5363",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4297218e-e940-4841-8961-977eca8c15e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae7cb2a-8ccf-4afb-b842-9c114479e2e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4b32b04-872b-43da-89e2-c5dc93f2f0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b424942-248b-4ce5-8836-aad2aed49e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96d73746-8d98-4526-b707-3e2391982d7b",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313aad54-45b1-468e-952c-4042cd27803c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ccc111-9d22-4f15-ae7b-6a7ded81310d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b8bc7b-9ff2-4a6d-9b28-a43c4ae9be01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "37a97eb9-4ae0-4936-bc4b-9a345b0d43f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e501c6f7-df11-4f0b-b38f-1c2fdc4a5076",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39838a45-85b3-4298-9860-a52f953276fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4af8b76-d4b7-428f-9e7d-456372e1f96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2385f7-80b1-4171-8c3f-24b1dcfa2bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "59c6457c-6287-4eba-a1a0-3ebb881b210c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5d1958-7d1c-4389-b6ff-d3ddaa600458",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70088095-135f-402d-91f5-581abe660a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "947f0d1b-2812-4037-acbd-2d4457c441a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef3ce7a-013c-4152-9c6d-24e261ca71bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6aaf66bc-36cf-4b05-b947-065b2c36e960"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563a04cd-5a01-4fa7-b84b-ffd969ce3201",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06322a2e-d670-46ed-9b7b-0aa1c3722d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93cd3e2c-dd54-478e-abaa-0a88e49a1217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a1ffaf-d883-4a92-8174-1c7edc8794b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bcf46d3-689e-47b9-9b18-ca05a38ef77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87a6fc4-454d-424a-bc63-abec01264301",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "686305c2-ed15-4af9-94b1-195ce5104fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30f48ac-5535-4478-a8e2-a88e140bbd11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e97ca3-6ee9-4e66-b89e-eb91d525e74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b199e5c-00e6-4f6c-b3c4-f89b7736e2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd56297b-de71-40e1-99b6-998768697019",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf80fab4-c35e-44f6-a268-906901393a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b067fcc-7d56-4e1e-bbc6-87bde495080e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57ef351e-008a-4595-a602-a952a5f8976a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd63128e-2f33-4e1b-89fb-f79226fbdba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0a6cb2-b72a-40f0-af44-4da8fa1a98e3",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3417ce0-53a1-4a92-a72d-6c9ee3659688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43be3736-e65b-42c8-9a6c-2df875bb5165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291ab26f-82fa-4448-a708-b0770ada38f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31e746fa-db42-422a-a470-eafc5d5e3bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86749ef1-e3c7-4ce4-be77-e909e26b5998",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bbd4eb-f6ba-455c-8643-31a9b25b427d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75533321-57f2-471a-a309-aa063f7fbdb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53c0227-b81e-45b4-b3cf-2b3a371cf7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "069585c3-bb10-4ada-9d3f-ee8d5ca6ddc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978e6655-93f5-4283-8763-8565daed79cf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c737e84d-74bc-41d3-bf61-db02a367ba8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57e74e4-2fd2-4169-8182-f9b338e9cae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e386b17-fbd6-402f-8c21-9cf36e8595fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1794149-e4c4-48b6-920b-24476866cf05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e02cd47-744b-4896-ab70-ff3d60abeece",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa38543e-b1be-4e5a-8592-3edbcca95b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87c1a208-c591-4f99-8c9d-179f73d5325e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be7094f-ed2f-4e1c-a44c-be9f660701e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b60cd413-380a-405e-a1b8-5c6c210c170c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1aada9-3b2e-41d4-a26d-c67ea034244c",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf1cb73-401c-45a8-bf03-46b11d2e585c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12723b6a-77d8-4293-87b2-8e562a4f456c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8caac21-0df1-40dd-8123-f71cfbc54362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f587231-fd24-44cd-bf5f-f133928620cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb9053b-9e49-4fb8-92ba-5ea7a9ef1564",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb85c061-2209-4706-b40d-a3e88afef766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e83187-1712-40da-8219-06c183038994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9339062-1202-4849-82ba-5c3e8256d5dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea631a24-e993-4d78-86ff-a06f82f91509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ebb4441-c368-4974-beae-71c8ae6e084a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fe8d17-5375-4038-b771-2b8e25848e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f555bbf1-d0cd-460f-8ff3-0f363cf32f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89180d0-eb04-493c-b6be-50b548f7b2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0cc91a-b548-4d9e-8f9b-17a2823893aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d538d0-4098-4a92-a941-588d952f14ff",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94009f60-6885-4679-ac08-67653f2c3776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d6a8037-7308-4876-b4f2-f4919980f8f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f935c1-5cbd-417f-b172-1278a24d9a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa4453e-6b95-4e80-b37e-8e06939f8baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1b379ee-22e1-4b43-8ba7-5ecc12e68449",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42a7a682-7deb-49be-a89d-98a715dca741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f1b890-10a8-494f-820d-065a1795338a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3369faec-d4fb-4050-9456-a0317863e74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d827ac9e-a817-4812-aa32-4c0efc01b295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3edeee3-dafc-49c4-8dbd-212bdaa0e71b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03848192-05a2-4c0a-9078-87090d83d490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c510f34-b09e-491d-b61b-75f2fbc710e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a59a1b-1bde-4a4e-b653-359f934f39cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77daafe9-09b6-4d11-ae6b-f5ef81b60fff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bfac35-0d3f-4e44-ac51-6fbbac8d4783",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54456129-a888-4b52-acb3-a1856df8ec95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfc1e457-c4d4-4226-840b-5939362b6592"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3ced54-ee72-4537-810d-16eb7af00ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6ab4fd-1389-40ee-96c3-e4f5f0c4ba7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc1e823-bd53-4e21-be09-849437e5a821",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce421c8-7363-4278-8cd6-35c062721cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72024e95-eb5f-40ee-969c-663583e4dbf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234ad3e9-e32e-4ef2-b8bb-0b8e75c901c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "695fb60a-6582-40b7-971b-dcd13df7de17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4f035a-4e79-41d6-a6bd-c661cd23be93",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5025ed0b-eab3-45a2-81dc-5aa50e3bc6d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e21710b2-c503-4b76-af41-36a199d842a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd8acd4-2ab9-41df-aa2a-9909fa2882e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fad451f9-bf20-428b-9b32-c1c9020ed04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74678446-55d8-4613-a72a-8b9430760ceb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942e2a93-7e4c-47b5-a25a-29ee99e69933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f5f223-5579-4559-8305-d551de171128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d4acbd-d7a8-4df1-8633-3446159d6825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d52ad8d8-bfb5-464c-b85a-fb387ffb13d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "853d9148-460b-4504-aedf-1bc06ca1c702",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b0495e-005f-4a2f-970a-368e6341891e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f4075a1-c957-41db-acd6-c958df85f393"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6c22873-e5f4-4014-b967-162bb3f5421d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b59d5f9-f673-42a7-aaa4-7aa81566b70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9ce90fb-f7c6-47da-9132-7553658b0731",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46ae209-3e2e-41cc-9e23-a7769d9c72f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa713520-ae71-40a2-b51c-55e30afcd2d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d3ee78-8f7b-4bd7-ba8d-591d7415b016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd76634-0350-42d7-95d7-c3ef5cb82d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32661a0a-666f-4e22-99ee-e5bbfa20c478",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c487813-9dbb-4ef2-9f3f-9eee733c22aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9648f6-d65f-46fd-a6b2-a5720bd43940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99912018-ccea-4df4-8d97-841f11190c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4d1fe7f-101e-4a0c-91aa-1392463c790a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17512bb8-4698-45b0-ad11-ffcfd82dc83f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde62590-7bef-40a9-80d8-1c2aa068a7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d405ce-113d-4bb3-aa6c-74ab0b5b1a3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee4d4e3-96b6-4a63-917f-bb90347edebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "de0c2a8e-0549-4829-b35e-f3af0c965840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15defa94-aaee-4cf5-9d81-576a140c4fcc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446254f2-b5f5-4c59-8838-ac0cc26ccef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9d280f0-8fdf-4457-96d5-a2402d566789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976b452a-29eb-4e1b-824b-97f8f4cec66a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5645f42c-357a-4b44-9a06-4878cfafcc9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a14dabe-71bf-4632-9f75-ee0c77180717",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1e251a-19a7-4e3a-97fd-f7f8ff98b4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a9c79d2-5790-4744-af14-3977e42a1292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1abd481-863b-4c65-8d9b-6424a1e7e631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67d9ce79-0372-47e3-99a0-82179acfc108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a771ac20-723b-4599-9091-b2dcb64e6a03",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6b100a-15cb-43c0-8407-e0a61ae2b53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f203bf-7758-4ce8-918d-a543be0914db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4f35eb-1c1d-482b-a227-4c8f6d1f1abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87c232ec-4a54-4569-92f7-02c87d466ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5372c55e-d843-4770-9e8b-740779b77ac3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc01ee09-1e33-497c-8eab-3d14e8108055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0036029-4412-4e6d-ada8-9f06ed6c2de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eda9c09-974b-432d-8bb6-ef35a2bd9351",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "189167e8-8ab6-4222-a030-34d328af4247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0050f7bb-828d-40b3-929f-82fefc6e0ae1",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a05e876-29a1-4d5b-b949-54f788ad4d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4682cd2b-b8c2-404e-81f6-dadbec3cb649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2cf4576-bdc7-444d-ab81-fe8be2fe81bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9d43e50-e35e-4c21-a15f-49e3c501935c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc22ce6-b606-417c-9b25-ef49ae71fe7c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c62928-5b89-4693-88ce-9f511a7fb763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e5488eb-4d5d-47d1-8af5-be83a62fd6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d73d11-0c82-4952-a9c2-f67c9c36aa8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25285b4b-87c3-4d8e-865e-e6403c33c017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c21fc2-24a1-4e9b-8b92-66c0a78faae4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6857228a-7fee-452d-91e1-8fee85602d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6b2281-1980-449d-8f07-fe367d86bda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3870f9cf-c926-4ee5-b19d-b14bdfd0bd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "63a8e065-ff8d-4478-8db5-12a4b0bc4f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e47fdd-ea38-4074-b4ff-237d0116661d",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0230e2e3-ac6f-42f4-82c9-6818d4c6fe1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d13ecd-2d5d-4c80-a677-31b16ea849b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab13497-10be-424b-b700-f7be4f645cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ddd44b3-e0dc-4505-b778-53ceb4cb4029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbeaaa0-3c6a-4816-88ba-116c8c6ca12a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2869f40-9389-4469-b777-af2a53725676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8bd072-bea6-47f1-827b-9ec8d551f4da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24192125-4eb2-46fc-8610-eb908c36b888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "76738d17-7c86-4bc0-8cf2-ff8641bbde95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd90f32d-66d4-441e-bf7c-782bc70fe963",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "313a24b3-c3f7-4977-ab39-8d6986bea8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa1305d6-09cd-4f66-aacb-e3da8ede6755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef65f58-325d-48f1-89fe-cbb6a43aa046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2b78e7-7914-41b2-a16c-8dbfe6caae9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ae214a2-6ab7-405a-b7cb-33f470ad7f72",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a59c71-f1c5-4d6e-ad2f-bf920a7a72ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e8bdd76-1413-485d-b0f8-624307458710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c01feae-461d-49ca-9481-04a25d50ba43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "435ee25c-6154-424a-b326-f0e4754325e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e236449-7ac4-46ab-a7a4-94f3cd4d4303",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdc90d7-0b8a-442e-8808-9ec98ddc0bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e810e7da-698e-4b28-80c0-6b2cdf4203d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2782a50-31a4-4fed-8dfb-2bfd55219f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d48114-3e54-4e9a-aebe-ac35d4b45899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a956225-6c5b-40cf-b746-560db3d837d8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494cba13-88b4-4401-aa22-5b924aca3e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "807faa08-4f8b-4bde-a6fb-b9ab88ef05f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233889f6-494e-4eae-8a41-763f03576b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e569504b-0e00-49fd-ae1e-9acf17eb1c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8f599e-f33f-4def-8833-f48615a503f6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb37e5d-2243-46e9-9897-3cea9df40254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3ee1ba-62cc-4b14-9195-1af7f10fe87b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4febbb-43fd-4aac-b76c-63457d6d0300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f09a93-3f97-41d2-aafb-2b86a038bd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4e971d-2471-41ba-a3e9-74ba41b98973",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa3eb68-6b5c-4d91-a7c7-ade211a488db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caa5b134-109a-4be2-a490-9ce3138e5323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35ae3587-9fac-4458-a99d-81dd2088a8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b76bf5e9-d3e6-4c90-ad8d-4e8232bf9653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8901a322-1ed0-4fcd-bb78-27789444ddcb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8152e5-13ec-4f7d-ac31-6e0ed027165b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1da91fe4-42c5-45c7-8082-ac684e2e1b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5f2db0-8275-4805-bdb7-d001e6e5e176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5058b2-541a-4113-b3fd-160ef9cc1616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae673dc-748e-4427-80dc-8b0927cb5cc5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05bad98c-4d84-4b6d-a325-4bf7d25157e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ddd6d49-129a-43b5-a437-1f5eda4b244d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "718d7708-47eb-4e60-9ee6-84637fece449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2b53519-b40a-4fc5-952f-66b1b60150fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5485ea08-1588-407d-adaf-595cd7aa462f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9356ee8a-4e1d-4fc5-b25d-430ec23171c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe267da-8c2c-4ae5-a0b3-bec79f1e675b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a747ddef-2eb7-428d-bc05-1eee0e79146e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe9718ce-6b13-413d-b3ff-b5b3d840a176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af34e0f-c0eb-4826-b316-7d42a5c7bd08",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2b4418-b445-4789-917d-4f354ec8f7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f2f5e6-0233-44a3-968c-8fb8e37ab296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77094422-07d0-47ad-a486-6c73872cabdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "23441fb6-e6f0-4180-9d9a-b70e1eb29723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62d667b-97aa-429d-bd84-20aab7b44a49",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eeae365-51f3-42ea-ad34-7f39ce8604b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2284ea-377b-4c44-b1be-467e236e441c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab19c37-0044-40c6-a711-ff634ca8a1e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d9e09ae-dd5f-40f5-9cb6-ca485d346fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a533554d-6562-412b-828c-491d7160bae6",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87e07bc-3bcb-4be3-b9f9-12077eae4903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cdb523-c370-416a-8bee-bf20dbaa7f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676286cc-47d6-4576-baea-729488c82b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce935e4-ea04-4308-aeb1-fd8daba6db14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d6f0be-51a2-441a-94fc-faffa120a6df",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3050d16a-9acf-4799-9aee-018ce11a2b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efca94b-be0b-4f6e-ad39-7dee60491729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65355a5-87d4-4045-be8b-20fbb4c374c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8cf794-8938-4482-8e9d-3a0f5e91e7d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcea7100-bca4-48b6-b1df-5bedfc347a3f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bd3bf7-40e1-4e10-be66-cfc46083bd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65b203a-83ce-4457-a708-320f067fc672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae9f2f1-6412-47a5-b799-63526524bc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0c815a-0adb-46d0-8af0-6089131b7608"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f490f9b0-4f98-492a-a38e-5f4d258b64c0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ff1735-8e6e-4587-9fa9-734ae5b019fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18e4e4e-7ec3-4c89-a7fb-151738a229d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b21dc49-2acb-425c-9fea-334f813c3bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "29b491c2-8639-4a11-8db0-dc89e8ae8511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff20112-8a9e-4c1c-bbb0-3755c02479ca",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de662a72-f799-4ffd-8856-f43c49df2597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e739b7b-b055-479a-a0c7-42bdcc445b5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fecbc127-5441-41df-90c6-89532302d342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffd7ed8-1e37-456e-a834-b8f3374275e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7934465f-f8ef-4fe0-9fae-fdf56c8da0ed",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c05f56a-8404-4d5f-9979-773d21a36805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0411f3-4bbc-449c-a2f0-dfa1fd82acd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2090605b-cb40-42c9-bf22-845ef6fcc066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d03a868-30ad-4ccd-9d01-5ac475e52e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7348cab1-2875-40b0-a38e-12607f6274bd",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547a9acd-d2d4-47b7-b88e-35bc6439c5b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75772391-5bd6-4c73-ac6d-172d15193394"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2f0b16-fee9-40cb-a960-f4d5e9b4727f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5d6183f-fa74-46b0-b619-03f139c76396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7f967d-6b6b-4665-8db9-4adaadcc6624",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f464ab88-e756-487d-a40c-71aa664c03b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c2a5868-fa68-4225-9583-b7bb35a1c0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbe7055-ae7c-4b99-80ec-e8227d504b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "36f0fdec-6b9c-4202-a87f-90b2caeace71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d307d9f4-0d4d-420a-9224-d5d196713af5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886fd9cb-bb77-4254-8aa6-62e5765b1daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f047519a-fc50-4fa7-a87f-9a0efc3b73cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c776223c-ba93-4e5a-813b-cfa2441bfd96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ded9ec2-e147-43af-88f7-11ffc4cd75ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd77496b-d8fb-4d0d-a4bf-f344d62f68a7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95346f2-f603-4224-89ae-6ce411b4b18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f32eb22-6001-4dcc-9647-b0e68cc7bf3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54066075-d2b7-48b7-b92f-0346d30b2cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "437850e0-a946-4de7-aa9a-42775113eb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d5f9b1-dec4-4060-a3af-661ee7a41acb",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33de342c-5c21-4bcc-a479-087e97d722af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ddbdc14-0d27-4243-9e57-98fc854fa296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ff6fce-7558-4941-801d-91292b27c624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3457fb85-daae-4ce6-aae2-88856540d20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99238a31-a411-4aad-aeb4-c61716796896",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "053caa0e-6b46-48ee-8b17-acd0a3ecb6c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "601812c5-fcb4-47fb-8f66-7f71188ef354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344239b4-ae3e-47ac-bae4-b54d232db51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d93b84c3-622a-4412-9f83-a82dda6aad3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0f7e82-4613-4d37-aae9-a561a12b382b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3a5c5c-ee1d-4e98-ab23-50a14837f5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87824aa1-0af3-49af-89e6-c88efd417ef7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d4777f-3a68-4d87-92aa-5c60932fa125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c848697c-a462-41de-a26c-b186414727a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae0c913d-e330-4e08-b2f9-4a6541170040",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26fd019-1d47-445a-a53b-d0ab2e8163c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "394a38c9-cd17-49bb-b8ad-b97f9de6b98f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278f40ce-ea4f-42f8-84d2-2d3bc70ff2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "136dd373-d6bd-4d58-bbb4-3db55b125481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87c7e56f-f506-4353-8e98-b361f5d7e373",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd9f130-2fbe-4c90-8602-c2f756d74022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9a8992-6110-4abf-8e66-5ec4d11c879c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d40671-1bd7-409c-adf4-af42c00a515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe53c9b-10d1-4e10-876f-6625b2d84be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f6dc99-7fc9-4567-8864-aee08db61e80",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8d24a6-4718-4690-abbf-f497e6722ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f3c4b1-37d0-4c81-876a-84cb7442566d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7981a9c1-267c-4dae-9538-db13d9afb8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ace71374-2f1b-4017-9ae0-bca8d22f096f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e3077c-3bb6-41e6-8266-f27da05005c3",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dccdda83-f1c3-4f88-b6a6-7ba4d35132f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86bc4750-7586-4719-9d33-7c99deb668d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3368246c-81d5-4931-ac32-3025670c722f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "28ed7d7d-ce64-4baa-84c1-01c11b85f866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807a122d-0078-492c-b45f-e818964f04b4",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695ed8da-e583-4952-bd59-e92f4bf555bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07d559ce-295a-4141-bde1-bdb3ae5578fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e27a6cda-7627-4b72-8c8b-b5dabd553e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "77198ef2-ce43-4e8e-9443-3d35f037cf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d320bbd-0686-4272-ba7d-9f58e1aa1847",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90c00b1-fec3-4ae8-9c2d-fa530b0566e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2930d3df-e79f-4493-9f7d-fa3dbb6775bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44070709-f8c6-4617-8675-7d0d7b93c2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26903f33-ca57-4823-8746-7a99d9a35cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c81e8ba4-1a33-4ff7-9fb0-4ce0dde7ac82",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73cd117a-c3a7-40c7-ace6-3baf273530cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e516d123-96de-4e4c-9e25-c3d9705943df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150af021-c3ba-413c-b515-c5eaeb4293ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "48a193bd-3389-40cf-9922-2864631e12a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41a57b02-1e0d-4b40-b075-2fce8d29ad87",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22b8cd66-24ad-4099-8c85-151a1e26f808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a220458-963e-4a81-9818-ec5c66ddf5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a600c08-2429-4d06-98dd-68b33508e969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "027684f2-800a-4684-8eab-8fae496af211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83fbf7b-8bca-4845-85d0-57876288becd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88407412-55ca-4a0a-9953-f4beacbac0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02d98e0a-11ee-49e9-a68c-dba282ce1f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5c70e6-ff54-4b96-a255-715ece439b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac4774c8-cb8f-479b-8f49-dda2252daa92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2e5923-2fe2-4a95-9d63-3d15683b2d5b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3b6c7d-3e16-4ab8-b8d1-31474b22bd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b93104a-1e70-4c8d-b915-1805ee071451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4cc33fe-3095-4ba6-b76a-8e1adfa1ec4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0da57308-e993-4406-a1ea-02e60c1bde26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574a0a42-c424-4245-89da-76824b4de2d1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f904826-4c37-4072-8aec-75d34c20c9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569cf2f5-0b61-4feb-8f5b-fd9fbae2bae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4feb50c-e3bf-4dea-af72-9615efbe146b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1a36c20-e233-4469-b03b-cd0a3ff9917b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a528480-ce42-4c64-8f00-8218844b760d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0aae1ca-94d2-4dbc-8545-c5bc192615b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "256d0345-86fd-4684-b18a-b9830aa83b6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc52e69-8ed4-48f3-8152-7ff182c2f6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1310442-a072-4067-a7f0-0eb784811779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508a1aae-a9f8-4a20-b14a-8c3d89e39ae3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ac4ef2-a44f-49e9-afc1-c89f9d80431e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db8c9f57-b1dd-4255-87d7-4e0b5ce3e934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e100a0d2-8b29-4be5-8f47-e1ebac773936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf037ea2-7c34-410d-8ab3-f37ca4109185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a734c3-76a8-4684-9cef-dd6d28c12d4e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8abed8e-f812-4a12-9846-8a311cf681ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e473d946-c89d-4688-8515-4ed98ad253ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edb8022-9fd8-4f3d-a471-8ea762fcebdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "13f95d32-23a3-44b2-a7ff-9edb2603d9f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152ccd5d-b72c-45b2-b672-d367d8dab653",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4716a49-e211-42aa-b5f8-be043282a61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e36f8194-781e-46bc-a170-9cb376727c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a1ff84-a7dd-4142-b81b-222080fb7fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fce4c7f-1ae4-4be0-93d1-0d2437a6c364"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "30a6f00e-7022-41c1-a7b1-5bcffb5d8db4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e1c292eb-2408-4849-bcd5-fd69d5f3b5fb",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e207bd9-e712-46bd-8d2f-10616e15298e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "da5f95d1-4925-467a-8b69-1b08d4b37a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21c5206-5282-479a-8b53-4f30936ac7b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a21e0ab-dd11-404b-9096-33f7d32212ba"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4d016c6-1ef0-4c8a-9c00-1ee440b41041",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6e236a5-2b87-4c20-9cb2-4952e2a59968"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "088f5771-4abd-4fd2-8105-34da152100bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e35e1c0-650b-4cd2-addc-68ffeeda6efc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "084227e6-af81-4f91-99cd-554e115ab95f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7cae6bf7-e796-4c1e-b41f-86b9eed6210a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ea741328-4b77-417d-8a12-8505d4030eb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "477895f7-f4c6-411c-8180-b064c63a9132"
                }
              }
            ]
          },
          {
            "id": "45240ef1-8b01-496d-98a5-8b27792cde1b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "909d716f-1518-4813-aa34-f5f1321fb6c1",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "26effd5e-5a3b-40a2-8d12-e59e55d06d60",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d13bcf-c66c-4cda-bdb2-35b7564f38df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f658bbd8-d90e-406e-8e93-141a237df23d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8257fde0-cb30-45e5-b2d8-f851e3468921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01ffb00-4ce7-42a3-a264-d375b7c323ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f09c2001-a450-44d3-8c81-3ed987c60561",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eae02f80-9f58-4211-b0cd-6c8357b1df1e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "06fe1789-6e3e-40be-be00-ef090d405d2e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aef0643d-cb7c-4ad6-b6c2-6f7665c86f7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "14c144d7-6f4e-4e49-9ca1-aedfc218d1dc"
                    }
                  }
                ]
              },
              {
                "id": "4cf1d134-12e8-434b-989f-ed5023cb984c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6fe2368e-c491-48a0-96f2-55cecb535394",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3854ed8f-1170-48ea-a808-fe5ffec948b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e938a4a9-f7fa-4864-9014-3deae148355c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7321f47e-3a6b-4833-beca-1d49fc66e73e"
                    }
                  }
                ]
              },
              {
                "id": "b663d77e-660e-4a73-8382-5cf944e2e171",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "594bade8-d9b3-4c68-9681-3dac420c95fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1062896e-bfd4-47f9-bd9b-d4320a948564"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7fd5518-b413-4a13-a4ea-ec5610f2c49b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "830be7c3-7eb7-4ccc-8274-36dc32664c48"
                    }
                  }
                ]
              },
              {
                "id": "4561efe6-7ab7-439e-8792-019a55b417ba",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "80b7b00f-5779-4b20-ae6f-807caf9881ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23e652f9-a158-4a39-bdf7-0fbe65e04d3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec6f54f3-1795-419b-9bd6-9faf3ff57e04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "27b502b7-b63e-4404-a4f1-72c585febb09"
                    }
                  }
                ]
              },
              {
                "id": "3e21c4fd-87d4-4d9b-880d-06efa1747be5",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fae8ad4-715e-44d2-8dc0-35d663ff3ce6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b701199c-53a0-4470-a211-1edd5882d8db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28dfa8ab-f548-4ad0-aa16-c1ea9082d122",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ae9563f2-d4e0-446f-b996-73f958581438"
                    }
                  }
                ]
              },
              {
                "id": "80e9aa52-01df-4427-8920-0e09465638f3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24f08cac-f1b7-453c-bdfe-543ff07304db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6886e2a5-7061-421c-af6f-eaa57d92ea4d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0085798e-7e39-485f-8bf2-374f4dbb9a1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fdbcea08-9d0d-48be-b182-360417b0782e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c3496bc8-df79-4e72-b169-8285045fcfda",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "834ce1e4-2775-43f5-9553-f90b3fc7662e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ccfad36e-7b1f-4321-a1c1-88aeb481bd07",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2cc49696-2930-4a59-b742-05eb29151830"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d35afca3-882a-487b-9353-631fb3ec1b36",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "75a20629-cb47-4862-b9dd-dd19af7b98e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba1f12a2-6700-4a62-9b71-84c95d16faec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c66aa01-e2e6-485f-a410-7ece3a63bf6f"
            }
          }
        ]
      },
      {
        "id": "548f95e7-de21-470b-8eb3-0d560b5f019b",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e69e2800-c3ad-4f0d-9645-5039feed38de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa6bfbeb-50b9-4764-8fc9-ed42b385a0ab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f9580245-c26e-4537-8aa9-50ff89e8edc4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db4f0718-99fd-4a37-8120-b17d6840fae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b423f7-83a7-42a8-8909-86b0f826d08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be008290-71ec-4c2e-ac8f-0bd1f19fba02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c3d3d92-eba8-40ff-b7dd-cbb8c3cfe70d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8fd97c-02aa-49a1-a28c-ab66b45cf2cb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859990d2-5891-4655-88be-08bfff1afea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0668fc84-221d-4b3e-a944-57864a104111"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b0f0e0-2ad5-4a91-a900-77c523b8e597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "125701ad-d2e2-41f7-8594-be47eead5dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44ca0a9-5a84-43c2-8689-81f630af5dd8",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c047844-e812-4648-8a12-23f7c76801a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd6c44ad-b30e-4e18-84d9-6769b00ce805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc723ad8-ad4c-43a2-b964-5c5c6014429d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a368b09-14e0-431c-adef-cc2bc39c9b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43e5678c-df97-4559-810c-120e21da5cca",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c133b2-a48a-4b35-af2f-3e0186f52485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251cb5ed-34ae-4298-a0ea-b588edd358c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65bd1068-abd4-4a70-bbe5-34cddc5733f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ee48411-1206-4823-94c6-55a2ac8a1809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91e489a-fd53-48e7-bc1a-1178215949d5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d7901a-3ded-4b16-8bff-b0a3f9bae786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f376a8f-e72c-4dc9-9c37-e4609aa1c089"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e104aaee-38d4-41b3-b5db-d75dafbcb9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2272ca0-b68a-4f1e-a373-fc8eb0942dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b6926a-e12c-423e-be37-bd50db499059",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb27e2f-44e3-4e37-86df-be046d0549ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5fa88b-42bb-4e1e-8ed6-d7f30e907d4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b61d71-bac5-4ab0-8393-9629d99d6f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a67cba51-deb7-4679-97d9-03935895ad45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8416f51d-bb99-42ce-a7e0-bbd521cb41aa",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00b080d0-c5b5-488d-9236-94abc690a983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9f92191-07a0-4fea-8631-c0f3c5b6fe0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcf1bbb-cf3c-432a-98f0-289262de83b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f39c6c6-57c6-4555-8b8f-020174273d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca46b804-23bc-43fd-88a9-2ff7ab981a00",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6317ea-7eea-4877-9b1c-e54ce51ea7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02a7d329-5276-4a95-8662-a645af3040c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58590ded-4247-4914-812d-c064d093a0b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b75f63ec-8b83-4c92-909b-c396c59d0d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6783ca6c-d472-43bb-8fa2-93bc9ef1201f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b914bca-facf-4855-b7c7-03caa6bc411a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273981ec-3595-4b03-ac41-812daa59a138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa52a2cd-252e-4206-8acc-9e291609a783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18947c38-06aa-49e3-afa4-5fdc58e9f0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d76476-ea74-469d-bea3-1bafd30b7f80",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8897235f-ba80-4f35-a7c5-95b5662064ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5902b3f7-36f9-4a83-85d4-840754afe6f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b36993-bbcc-4dd9-beba-dda513364a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e83dbd-15c4-449b-8550-c935847da665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f890e629-79b3-4a22-b29b-6d70986fca9b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef470ab-d509-4bda-9cd5-ae1db803f405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621baac3-2054-4813-bb75-0004ea4d9db8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe1037b-c994-4aeb-8e4b-c264be5e721a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1d18fe-d94c-4af2-a3f1-93eb08acce52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b843fd50-b0b5-4b2e-9bbf-ab7046145d05",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a54e10-9fd1-45b0-9565-6d02e2d583cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adba4854-1ecc-464f-95a0-61ad6d9c5aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e0c63a4-9d86-45cf-b9cb-fcbf78c5313e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9870bc21-d321-4d69-a3f9-fb0dfb5ac6a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62683566-96b8-46b5-a590-b6d07e3f70da",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5899f1b6-ec54-46d0-a89f-070d8e65a3a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f99cedc-c20d-4dc6-9cad-8f9d6cb0df65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3752fd0b-346e-43bb-be5e-fabcdd3a839a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceeca87e-eb79-425d-97a0-ae83ba48a215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add43866-e6b7-4b2f-aa29-1023f3022a17",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fc58a4-dfbc-4e96-ae45-5f5ef96b8c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caadf38d-5785-4d87-a94b-3b92971ff368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716b2bfe-82f2-4e06-996f-e19e8d33d355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e0dde43-cb47-437a-baf6-3e01f20fb3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd13949-e946-4eb7-a178-4f729e1bf1ae",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd32d8a4-09d6-4ff1-8674-2b9fdadd73e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3edb60b-3123-4700-852e-4feea5ab8aca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b129f1d-0cfd-4bd5-bae2-128d6e4cb1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ce12ea9-ab95-4c62-9b37-9fb22f4ac83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2662f56-c6fb-493c-bacb-b8fbe5935752",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94013cca-0076-4328-b106-c69c478d7bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "528febb6-b1ef-46ff-832e-d7e0f01b72a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a76e8de5-3682-49ce-aac6-53fbd9dba942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "678e1105-beb7-46e4-8497-2286dd1d79d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16094056-1ff1-40af-8783-6fe389a9d364",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcee6a6-de03-4296-8e91-37e6729cd942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a341654-3276-495d-b58c-fa5c3a844b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570f56f5-7b42-4608-9f48-6f2b32f88e31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f75cfc1-da00-4b3c-9c8d-c1cfae8c0014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b3f1ee-286f-410d-92c8-4c85d9f83191",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "697d7413-102e-4f6c-9c49-82d3515a6ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d49e16d-f807-45d8-b71b-e33a6d6be24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1fa0c9-eceb-4eeb-895a-577aae6ad06f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e96d8636-1d4f-4887-8a0e-5d7f2c699d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cec7caa-de06-4051-96bb-fe48c39adace",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec54abd-a9cb-417e-9869-c1d130bbf91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6560a52f-7c65-4b46-a689-923146fd5e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a39f2e2-a4ba-44ee-8615-95582b2f438c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5717276b-1a2c-4572-85f1-b37ab8df023f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4297abb2-1f71-4597-ba32-a149d6f0c1ae",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fe618f-2289-4c72-926f-3e643d9d81d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbc999c-a5b4-417f-b3f9-4e840b49d547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26028105-8a4f-486e-8d2c-85929a51d987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dabf237f-29fe-4a7f-a35b-9943bb85bfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f6b8bdd-a12d-430b-9e0f-7df66449be56",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89cebef4-dd14-4bed-82a8-3340c10a82b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23f1e228-abf0-48df-bcf5-ee9f69870307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ead32d6-2eaa-4691-aa0e-54570101ea03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9339772d-c08f-4189-b080-41f038fc9d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8939c0-1aa1-496f-8163-dede7844257c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0142f682-00b3-40fd-add3-15c1e538fc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103b8f82-8b56-4420-b211-a9c77141eb23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255ff73f-afdc-4591-9f88-f5f27888ffc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98d0529e-c2b8-4b9b-8b24-e7205227fc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a281419-35ca-46f0-a299-04293ec09be1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee5ed26-0c04-4c7a-a60d-c3e8d2688c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a124f7dc-531f-469e-b8c7-2be36ef715f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69c56a2-e2f1-46af-a10b-94943a9165b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1f1c4b-f477-4bb5-a6c4-273a20fa04d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf7720a-d480-4ca3-8018-abc07d264424",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb65e099-4026-48c3-a991-ba0de163aa7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8709b901-78b2-46ce-bd99-3c459b86a2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670a152f-51a9-404a-859a-07f633f02610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e704bb9-b6e0-4d3c-a3d2-0cfab6f5f650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a910d9d3-87e5-4460-b8db-96842c11c6be",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfb3b84-c535-47aa-a1dd-cd180d3c638c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e3745d-1226-4ae3-8201-b49cfca0f7e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e5a688-ed08-423d-b1db-418075655978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3561fc8-dae4-470d-b499-5109f5323a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151f2bde-b44a-4cdb-adfb-6807b6a3c61b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e77023d3-46ab-4040-98b0-b59e40135957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01972caa-d6a5-43a9-babd-22f3a7ce6019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff4c21f-9f87-4591-865c-9954a3490e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2765350f-fc88-4e12-b1d9-6e64f8bc8c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78916c90-1915-4cf0-90eb-26698da6d6bf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4923a6-f22b-46fe-aee2-73ee773db883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7c3821d-5196-4b03-abd8-0e0635911a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5cd39b-e478-4b53-b1fd-05727849373e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5e4bb7-c2af-41c9-bffb-094f18d5a8c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eef31182-da63-463d-b8db-74db9e95193e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e325fb6e-8dc2-4a9e-8a84-c47651a30ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273a3ccb-4b91-4c2c-89ca-cea734a032c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7939d62-09f3-42ca-b453-7d77ca3c4ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b07314c-10b7-4501-bfe4-570943e9cafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f446dd6e-b38d-432e-ae59-b069037a97c1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "123990de-1390-4c16-9aa1-eef149168a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be9eb7c-6c7b-4e3e-9bc5-55af99ea6149"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3cb78b-07fa-41c4-8ad0-c342337056f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94241fc7-f01c-4b31-8c8e-2607e3bde6bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c347c8-f4b5-45ed-8579-923d33db5b65",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd827e9-0fb9-45d7-a90b-69ffa3bd0e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "264d7967-24c8-4e55-a64d-e7e3f1b002d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fcb570-0f7d-492f-95f9-2192bba28275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29236bee-1061-468e-aef7-e2c603e2ada6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a41a50-7363-4fcf-a226-4d5a8d2fdc78",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30debf5a-3a7a-451e-a36d-51d40535b3ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5029cfba-0290-461a-b557-87a94b01a195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7aa23ae-e09c-48c5-af0c-93922c6a9f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd67aeec-f524-4968-b383-2c162b4453b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86760c75-61e9-42a5-8239-bce93bf1346b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08c51ae-c432-481a-a63e-cd57f5e1005f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8242d53b-0567-4759-a358-d70add92844d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a256259-3083-45b4-94c2-44ee1089f001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0be3dac8-66be-4af0-95bf-bcf650ef28db"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "875593c2-7b70-4ae4-a3e6-15ab1da55456",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad4bee0b-f017-442f-b046-ad70fae6cb6b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc154612-bcef-4932-b0d9-2288b2381fb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "218b581c-a9e3-4cdd-bcb9-0837d4afadb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5acabf7-2ef4-4824-b19e-46648feec397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f31f4915-7855-4adb-91d5-ac1ce1f43ba5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1aaf6f05-16eb-479d-9965-d1fcc8c1ad8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "591fb201-92f2-4b74-ab84-4e9105d5d837"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d113e499-1bfb-49d7-bce4-53271ae5e3f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cf593f87-70be-4abc-88da-f40e3014105d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cfe283c-0b63-4124-817e-7a171f97e043",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "20a8fd86-b3e0-4b40-9999-07c7d376fe73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5393519b-825c-4766-a594-ea72b7c5c2a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4017f302-9aa3-40ce-9fd0-3c744f45ad9d"
            }
          }
        ]
      },
      {
        "id": "2e1d5831-aceb-46f6-b1a0-40873131dc6a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "2a116837-835d-412a-94c2-033ee50acf01",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f6c0ccb-2817-49f7-a719-37ea6dec43dd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "61dad5a5-188f-4f7d-9b62-26012dd1100f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de66321-98eb-486f-93b9-d16a782e7c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef187bab-efd4-46e6-a5d2-655d300c529d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adad05b-af41-4a31-abcb-6ccc33e8d039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ea4ba99-e84c-4c92-85c3-17a67751f7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c7f7f5-3628-4eb7-a27d-60917f3c6d9a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76d3c2e3-2716-43d2-bcc9-82ce5063cac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df7565e3-c1fe-4f17-9c70-3f041451520b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fd96f7-f901-4054-8feb-e4388ab58813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6366e2f1-a485-429e-bb4c-6847db6fd5c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a724b399-a1e9-46b4-867e-7d13ed1346e1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0ccb0b-f1d3-4095-8e59-f6c8e054b3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb52093-1ef2-4b62-9506-728ab9a9f626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ea3229-8b63-4e56-b0af-fe9440fed259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d003ae16-0406-42ef-8cd5-8e6b5056434f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1934bb3f-8c2f-4cd7-8ee7-d7e7e06655ee",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "facb9c04-5599-45c9-b914-15f18923ea8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b106ab7e-97ea-4674-a8fc-afbb8a7c0017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6184204-6ddd-4f55-8d85-87f4c2fa59fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c03d243-3349-4113-a4af-9d352fb4507c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38bf9d9-27dc-4339-b876-cb272cca6d3d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6b84b5-d177-4f73-bd5d-07ad910a0304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2879b676-4325-45e4-93e7-ae38ddfd861b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f0cf94-3b38-4f12-ac1a-7db07634d9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05f78b81-4679-44fb-b0ec-80aa0b294888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cdf1c1-383a-4301-b9be-a943ea37e3c1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec07ccd4-ccc1-4f57-aca5-f3f59145abb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d73cf8a4-6049-4670-8d4f-366672a2dcfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bc1998-ae4a-4dce-a6dc-c5725f1c7a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "acbc6439-ecf3-465c-9ade-b9e836190f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa29723-62f1-47b8-896b-e08f79a30ca3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e27a7ab-08a0-4279-a2af-7d2b05b6ae6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "983461ac-8987-467e-8159-bfd97b602df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9057d24-31db-47a0-bfb6-7ddfdc721f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf43a06-d13d-46c1-8176-866804cbe3a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66f05770-07c1-457b-bd57-610572fabafd",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baddb3d9-e01f-436d-a16c-99e422e48667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1db63ce1-3e79-41ec-938b-7741ca806099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31014429-11a1-4763-9a20-20a85777d272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "901cf017-e9de-48c6-a028-4537f4c84b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1cea61-79c0-4b45-a266-5a7d0afbfbb9",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccbc209-b57c-4e8c-abed-ba9327488b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b68b3ece-3f73-4d2a-9c68-084fbc316c48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2499d51e-d076-456f-9ee1-5d4e09d9a638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a7fa9b1-ee29-4780-9f90-5f111182e248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3113f65-959f-466f-a0bf-6c85d85ade18",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4e9034-1d20-4ae6-bcbb-0c100a03ab02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e85b63bf-ba7c-41e8-84f0-38d28d33eedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277976b4-33ba-4acd-86ff-4de668aa08e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e08b210c-b470-41c9-8db2-3a1f611a21d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a27d6c-6775-42f8-a901-8e379fac8e50",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f22fe51-ec20-4cba-bf52-f407eb375669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4196d20c-2bcd-41f2-b47e-bcfd2b68164a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05dd1843-08f4-41bc-a11b-350297277a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3b118c02-7d6b-42e5-b02b-4938c6220d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da0b566-a549-414c-a31c-152337f681db",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a02c456-7d7a-424b-b1c2-b9bc46fbc2e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72bd97be-65b1-4d0b-b105-93e8e727b095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97a24cf-6bb0-495c-844d-1fe584b9c146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12aa4e6a-c363-4c2b-a3ef-119a428e7191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2f6b8c-17f2-4700-86f9-4caff7a75b2e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1058175-de7c-4a3d-aae9-3b8f7c7cc903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116cb273-9fa9-4ac6-8bc6-b166ddce3b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71ae89d-0139-4cbd-96c2-850a55726e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1be05622-5ae3-4c09-b866-de295c8dad82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a1def9-da9b-4277-bfc5-833ace373a8a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a69808-01d6-42d5-8791-95c634afc04e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7e50c9-4749-4130-9e6c-f270ccf80037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc68c0cc-30e0-47fc-8081-7f412fce832a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef6cefe3-22d6-42fe-a14e-58797c06904f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8af1a6f-8573-459b-98c6-a194246e281d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4db10621-fff7-4464-899d-5c1883969390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cafbf13-93b3-45a7-858c-7f35f6a2c12a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7ddf61-9208-403f-b0d1-2a7cc169bc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "da7165d2-ecde-41f2-ab1f-668f9d01aaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1348b4-58bd-4937-9f9b-9f4f1ff1f4b7",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cae023c-1e5d-4d26-914f-25d3a6362d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f38490-69b5-4728-a34e-9ee9d003cbff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d647149-1d72-4051-85e0-d96879c7a9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "9782435d-12dc-440a-9348-b74b4b059998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2f7cd7-8b4e-406b-809d-2df6f249d495",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602455d7-4493-431b-bd91-6c381d391929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d3f5ca-7963-4cc3-955c-944847140091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "646bef34-9b7f-4e35-9118-2c843ef04deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "139fd0c4-a838-4818-8bdc-d5ce3d76c8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02e8600-5cb7-4188-9288-f40fab17d08b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f091bb5e-9cc5-43b7-9e06-0e6fb3409211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0bdfba-452d-449d-9f4f-37dd9d393f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a945e3a-8427-44b9-bfd7-02a91c1fd293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4769f20-56c8-4db5-a6a4-721781f8bdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed30e611-c3e3-4607-a006-a92a3e3e7735",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec372141-4b94-468d-8484-2d1c1ff92292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b486c3a1-d8ae-4742-ad64-4a431eecbf35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeba06fa-e09b-4cf7-a444-7a3f99cd0dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c62df98-bfa6-478b-b023-7504227bd232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1c0786-da07-49ff-ad39-332e3dcc265e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398f2e6e-4099-4fae-9de9-5c0bee2f227e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b03d602-3e38-4b70-a18f-90ca34faac75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e64055f-2cc2-4b2f-8673-62aa81a6ea1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7604ac58-7d0d-42ec-adef-e1cb33be7d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea87691-2686-44e5-b429-0cbc60111552",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c4a898-bd0d-42ee-ae21-f163e14107ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a301d6df-020f-40cc-b61b-c314335ab3ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9f81d12-addb-421d-b918-0a2ab9b3285c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01f15e59-dc28-4ef0-a12d-49f88bdcd253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff352646-aa13-4d46-adbd-4abe7c203f89",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98021277-5955-4b58-a071-cacbaa6c5d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c749846-0f96-4be6-9751-e7477b3d98dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f1cda2-62f2-4d65-884d-45c38a09f001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0f61ad-2fa7-41cf-8c8d-8ef4a48e8ad0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3db860f-0185-4fe7-8dbe-1cd0821f59fb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce82f3af-19b5-4fec-809f-49f52fb6402f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4621c50-649f-4666-908d-c10cd6039961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feb5e6a9-bc3f-4656-9652-feda43cfc03b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20c9b919-595e-4fd7-b5db-1ac59d82afde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e26ce00-9491-4154-945e-6210eb9d9e56",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c94c18-e1a0-4120-8e9c-2b0ce5484a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d8d3f5-9270-4196-a4ed-3c81c630ed8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e94e13-17c5-4f73-ad30-9db6f7fa370d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "637e8c50-1c21-46a0-995a-1ae8f0f064dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2dd7ff-5929-4c9c-aa5b-e90536bfa642",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e9a8481-85d2-4a4d-8bcb-7b7bee72030b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d703454-d04c-4b04-8277-f0d29b75fb28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041ebe31-d1d8-4ac5-ab36-81dd423b5d37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a0201c6-deec-45a9-96e0-3ec678848239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d1c2921-ddd0-403d-bb26-e68db5f3d8f8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af1e8fb-bbfc-4bdf-b872-408e4c4e465d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8b8ada-a50c-468a-b5ac-c49cf8fdc550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e720f45e-93d2-4be2-a56b-b493f12cd503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39f658f2-42c9-41d1-a490-2d460315173f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075961e8-b345-4f40-bb26-304f52acfba6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad2b9d0-2d6a-4190-a6f5-4cba4f233d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6368eea-31b7-4e22-90ba-14199b2ead2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090f4538-ba1b-4942-bef4-6e0acc3b8590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "997305ca-8fbc-4910-bf77-fe69032494e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce36581-ad50-4ab6-8f2b-6c3d046992c0",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce75814-75e5-48f9-9ad4-718e12dc085f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08fc7592-7adf-4c22-9484-3fd7d762d1bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea42f549-3ad9-4aec-a463-2d6b477c88af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07868df6-aa67-428e-ada0-7ad6ee55dbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5271e34-5219-4d60-b98c-a0d508fb9c08",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a587fd-ffd6-44bd-8605-b62fa6ebeecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9bfc42c-4825-4cc8-be45-1937065b1882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b69d3c-2666-42bb-8c39-890df7b632b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f572d9a9-5076-4e39-a617-ac134a142417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de8172a-f261-461b-a5a8-f5fe2cbb182b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a823fdf-e821-40ba-917c-39b4a6f5fe18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916d6022-96b8-4a52-bac1-fa302e5118d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a772a887-2467-45c0-a94e-ab2cf5472f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27961dd4-edfd-475f-a3c8-72cf18e781bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8298235b-09ed-48ee-bf2e-1ef6694b5fa8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cee0e1a-2e16-4a97-aac4-3a804a4d4b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2a10be-a3ec-4b36-8345-6d76ee233880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d23534-6320-4621-8772-e7baa1486fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dbcd09b-22eb-4e8d-aac4-b81ac90db65d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8707e59-79cc-464b-897f-547c203654c1",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1d519f-88f5-4151-baa3-771f37def2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1413a7c9-4eb1-4cea-b117-d69169293c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c5a443e-9213-4e59-adf7-0e7c3f872280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bcb3324-e8b0-40ef-82d3-2d508a18c317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f2eab9-4273-4639-9856-d6b69b2b1177",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a57b2f-88ae-4064-a4fa-e4606d3ad94f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f2148e-623f-45c1-8ecc-7a474952bb85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d34cf85-3e56-46d7-9742-9a850f78f8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f54c281-4c10-437f-8931-5e3909d7df81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb345d1b-859b-4eb3-af2e-92b10a88ae06",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cf794c-4e38-4e03-8f96-f84706979b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c38512-cbf8-408d-aead-b770d04e2b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd2e96c-0004-4017-b12f-3f3376cab7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32512195-6517-4591-8a11-c936bb36f73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c15e915-3b30-4b37-bf45-5c3a44e982da",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57bf533-0ebf-4594-83e3-eba215215cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3521cb0-e2a2-4e88-b3a7-38374a584c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fbd32ff-98f8-439a-83c4-1e84c5b5ade7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d042eef7-a6fc-4106-94d8-c44c39851409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29a0dfb-8371-4c68-af73-2eb495e2c8c0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100540ee-973b-451d-8c3b-db32e0b558e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2e6872e-5a78-4950-930f-32375a3a1f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f600f75-1114-4f8c-a95e-58c3999e77cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "091f0034-777b-4afc-a070-6327856ce758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b064003-9187-4a2b-98ff-c8d260aa5e9d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d72925-0d3e-4264-a135-155c14bb53a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9edd8951-8550-4e3a-aa32-fea1d492426f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a59210a8-8d3e-44c1-ab63-e1462982e2bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "549a6b33-2ce1-4c02-a95d-44b194ad41de"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9aaf5afb-0245-44f2-bcd5-62a5e3c1d241",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23373002-117f-4fc1-94d6-3d09bf5a79a6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d29b78cc-c276-4ea9-b0db-846987de0b8f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "92f954d2-cfe1-4b72-aed9-7c5d0d12fab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b0fd45-30a2-4373-a844-4bee6f9ab4e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef39e246-b14f-475e-9e39-33f7f2fa6e35"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "380efc16-823a-4496-bb88-85c8327374f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8315f056-1919-46f9-aaba-888dc2012140"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1790218c-b9ef-4438-82c5-4f514cccc729",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f2a7c76c-101b-49ab-8990-28df783ea3b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e2d1239-a07c-4307-98fe-b1b699b30449",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3e62adaf-c227-46ab-9a9b-27b36e2eec23"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e3302cc-2de2-48f5-a566-dabb99b860e9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e49821f8-ba33-4df9-b31f-00da8bcfebb5"
            }
          }
        ]
      },
      {
        "id": "39a47beb-185c-43da-ac14-e8f941522ea9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5c22689a-0217-4b2d-bd1c-c016a645e3c9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0393bd5a-7685-42b8-bfab-e582be0a3c6d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aa22a514-516b-49c8-8351-1091bee31987",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae04ee1-524e-481f-be12-89a5f5e5eea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e264313d-7180-4a0d-9ead-7a99be5fef61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6856d294-97ad-4f1c-8a18-fd1d1a6f6d5c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b216fff3-b9fd-45d2-a73b-c63954364170",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8777da98-aec1-46d3-a160-0878431f6e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a767b7c6-5f78-488f-a20a-2253e164914e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba638bb3-3981-48cd-919c-287d77915f26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d05ac1-30be-454b-807f-430f27efd938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24b2ea1-2596-4f1f-816a-afa466c88500",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b661a1-721f-4ea7-8291-0251f8b0756a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "240ca0e6-b1ef-464e-b4e7-3e8bb744647c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0af8625-dadb-49ae-9284-5277abf30ab2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b5c903-1d73-40cd-bd40-7e13ed6a13e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa12be6f-37ce-4d69-8f9e-2aa7c7a11f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d585782-1bbf-41a4-af9b-63175a2b1344",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22adb07e-6967-43d8-9420-82f92c6fc1fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93de181-2204-455b-a96c-ed9f65ac4b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a090f31d-e2b5-4295-b94e-9f9331414817",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9e5fdd-2213-4d93-97ea-b7a6ad13abad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca63ece6-42ea-4462-a96f-5b371821e808"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b18ee9-5c30-40f0-a07b-9bd614e7ca95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "757a1743-0320-4308-b87c-db88fe101231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5025abd-0259-40ce-85f5-572203f2328c",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03388ca0-d6eb-444c-b9c8-e705bfb253b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2215094d-9257-48fe-8842-b327b0bc27ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "004faecb-71d8-4ad8-bffa-25d78984d883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa8d284d-6970-4c68-b61e-870e8da74d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27fe0faf-a4f3-4aac-a644-582f34b6d3a4",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46297643-2339-4b88-8208-36b953171a47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f070db1d-5f04-4a6c-bde3-ad311a87f978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7edebee1-a111-4862-89d5-9650452b36b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa04ce33-5f62-4ae0-a93f-8b7623ca37a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cb3b5c-ae0d-453d-81c2-bf2746237a3e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd2abe2-b8d0-4ca1-8072-666f8c7c69e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f473d17-d0e0-4e29-b9fc-2bef710dd325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c38092bd-6784-46b0-b60e-d3dc07dfe1c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b12cb9-2c42-444d-9bcf-4b7b57edd75c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5931328a-b94d-4af0-beec-0b999f126f25",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67aab856-52e1-430c-9a73-092ddb394752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18d832f-84b0-45e9-89ab-7ad988fb898c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0545d43c-8327-4f3a-9d57-366cbbe205a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a99c25-1469-4900-91e4-79efc48d50b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1118eccd-acf6-4165-a371-f9fec6d71dc4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828979e9-6cc8-490f-8ccd-4ebd7eeddc99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75080bba-adac-4cb2-9691-ea7033d62793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b262e303-cf3c-4fa0-8fe6-9149cca45ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a622b81a-8cc4-4fbc-9861-a16ab04b1719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f08d949-f4e0-424c-a892-39096c6cecc1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f005bd5-9df9-40ea-a65e-4dbe977b90f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8123ae98-3fe1-41f8-bc37-01db62902240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "025f216a-394b-442d-977a-908a306c9884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1811ab08-f33d-42da-85e2-ca925efbb766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e8b69b-2925-4683-ad75-d9a8207f5a50",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebdded4-e017-44f4-a34c-c2ea3d2f78ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb7f5725-7b03-4ec2-9d3f-e9cc8a21721d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d4b0bd-013d-4b47-be09-12878f0ccc90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f64534d-a38f-4c51-a8ee-9eff8b8410e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0903388e-d11f-4608-af1a-4e29e1197361",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2525dba-5c78-4070-b382-bd3ac198605b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dbb7f5a-2b2c-41ac-b487-ca5b3d697a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba6a19f-683c-45a4-b603-ad90c4dd098d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "629f01f2-7fa4-4a4e-a84f-f28abc95891d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067222ff-265e-44f8-aa22-5d75b9320f30",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "764c1347-11ac-455a-b1cd-1e085a0fa24b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e6195e2-e416-4e8c-ab21-c042fba4dd0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9447ba99-9a35-4452-b958-c54bb2e8f97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac3d21f6-3d3d-484e-9190-f0573e6d5d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922f2e14-7698-4310-82a3-66cc9057c382",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74cc6c43-741d-4be5-85d8-eee8b23322fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b6de84c-348f-4356-af3d-97e2ae726ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "455d41e9-f403-4393-bd9e-6ab002a6f33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d28b1b-f756-44e4-b205-4e7bdc17fd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828da7d8-218d-41c7-b1a7-f63a39fbe7d5",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d75a91d5-11a2-4541-9c60-ab2c9bd99e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24666b47-4962-4ad8-adb7-d544af14468e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b37d3173-cc90-4da3-b80a-fb76ff7e1e30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35b482f-6330-4d11-a250-e58f3782ece9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69eb53ce-e130-45ed-91af-718e807f0215",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2653855-349f-4119-a38c-d85f1cc3c28e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f65837-94d5-4851-9252-f921583c3000"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "885ced2f-10e9-4ae6-9197-a0b8845cf190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c98901-4e34-4505-8e4a-fff14ee5ead7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559f8fdb-ccd8-4b3d-97a1-e83f67312322",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0b732a-451a-4fa3-ac60-045dce465b30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c921d73e-4da2-45f8-ad1c-c55b0eae8844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ac8de7-883a-463d-9ec3-72fb997a87d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778e492a-b5bc-4254-a380-7cdb158ed1bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644f5fff-68c8-4898-9286-955cd2a66c0b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b235c2-3022-4757-9fd8-11476278d28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6ce260-99f9-43c0-9f15-a747c858417c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f42ab4d-f472-4482-9ea4-d75b66c29db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93cf5e7-49d4-4a4a-9475-4ff104d95f2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d45d8e-0215-46de-bfaf-e097aebdd1a3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03602a8d-77a2-4390-ba5e-d5da70ae2c13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da89aa11-e47d-47c1-9a7b-4343114a0a10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf9955d-e1d3-42b7-89e4-4b16348ef304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73685fac-1189-4095-bc81-08a1abf94a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ec7319e-b5ca-4d8d-a73b-48327e3c2a76",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2f6641-f4a4-476f-8fdc-ae0b7b05e2e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a0221e4-b6ac-4dd1-97de-d3d98009907c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd5d037-9012-4911-9e36-cdb4d2c83f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e62f090f-308e-4ef6-b63f-f53977c5011a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cc8745-483a-4c45-b5ce-52284b3a42cd",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ffcb6a-a4b0-47b2-be60-a5c2ca963407",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2b435ba-a60f-4664-a9c2-8d05bb5af815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cff3aa-4bdc-4ec1-a304-e8bbeb2126b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c184e26-480f-41a8-9be1-88631943e5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1daa9a03-1d56-454f-90aa-c7ac8e2d6a81",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ab6b78-afcf-46e7-9909-11b7431e9478",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ba0c1e7-834a-44f3-8860-95c47f54cb87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "379a4fa1-d311-4f5d-92b4-7c37e31a6902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "152ce428-c367-4349-bd67-4f41fa5a3e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5df9d2e0-1c5b-41ad-b717-dade87fb623c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73ee1760-c586-4275-90a4-9b219dc26d27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ae31930-1712-4e09-9729-028322466da1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e538a8-c27a-4337-9150-fc0e584761a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944f350e-2c0e-4de9-b337-88a73d8a1eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3db13b-862e-4eb2-84dc-e7d07fdb6521",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43812077-7e58-4649-80f8-3a3eb0faf9c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ae617f5-665e-4502-b26b-9b6d269220d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4110f7e3-a84c-46d3-abb7-70a7cb4cd6f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b5d69be-f0ad-49ac-9ac7-6b7e7cc45e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeaf127-24d0-422e-aea1-b96ca4db8c2f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f8508f-9722-4ad3-9eb9-3da7969fe0e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eede448-3c3a-4788-b4fc-56043d3cb2bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9500f29b-c8e2-46d9-baf1-3b8cb72a06ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fafc2f0-16b6-49d8-a53b-d6bc7b737595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105d6ed5-626f-497a-85a7-2a059f27b767",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b40893fc-a694-4714-b8cf-2089df08cb9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb3cb41c-1f2d-4327-a568-2041a004a700"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf85cb07-51e2-4a8a-9b3a-453d2f09a2a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d81d095-b5cf-4b0e-a257-242217608a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def2775e-ccfa-4854-85ff-26003b30d9f7",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38fb9556-36ac-48ee-8fff-171ffba2f701",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33bf8aec-4f7d-4f4d-b83d-ca1b894196db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acae9a9-2269-4147-87e8-f161f51ea575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8389567a-73b7-4774-a580-32f21198da6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437db3b2-9c8a-4fa2-9d42-0e9bb03acc8a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b751646a-1344-4ddb-b525-aaf031c6ee8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bc41465-c185-48c0-9776-6ef71b2ad160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b60bb3d-37e5-4666-8fff-9c362024c763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e57fe572-c989-47e0-bcd4-777a0c9e6b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b9cda6-9bff-41c3-b232-0a086b5a82ee",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1329b89-cabb-48dd-9160-0b5ff5dd654b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c7ec8e5-07e0-44d5-807e-68f2abbc9d63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74d5ebc-5da0-43cb-91a3-01e91fb60e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fb2072-7511-423a-a55a-2c71662005d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91c358f-bc47-4549-8192-38afc47fab83",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44a32c52-7562-49e2-b87c-c4e41bef1500",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19284ee6-fd7b-4b1c-9496-caeabca80e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8479ed4f-2fc4-4328-a751-d25dcd0660b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d8d817-566d-49d4-874e-017188547d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ada5b6-89b6-4730-9840-8c7a1ee3b1ff",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8093b15-4157-4294-8ab7-91def83352be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ce7a382-e235-4b0f-bf37-9332697cdf34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f20ceb-6aa7-44f2-8ea1-11ee13726fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5afbdbf1-8482-4014-bb1f-10f67f01fcf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3afc39-5508-407d-bae5-c2696e0f82ae",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb1263a-8c06-43f4-b1cf-df3b971799fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b134bf-318d-42a5-8c0f-19aab4561197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79cf604f-8ca6-49b7-89cf-8a15787d1cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d310495-9452-401a-b544-feb07152a3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3e9cd5c-c1d3-4843-bdff-6a56d2e2ed9d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa703104-458e-41d9-8a03-10abd6ec8e38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137401fd-9d7d-4f58-8992-c0f3f2b0c0ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00df7a0d-0e73-47da-984c-89612a90427d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c29360f-91fb-4a4f-9f71-ce58e0a7bb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3820a9-ae6f-4941-b762-83f7e230d8b7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2690ed9b-af4b-4c83-93ba-23a4e5797897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1c1dfe-7e55-45fb-95e9-bd699dcbd838"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e77c6e3-6476-43fb-8ae7-dc57e9814422",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58c03a3-5343-451c-a165-e5d86a9b1704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f7fa1b-0f64-4384-ba95-0fe0f7a4cdc7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb258dc-dea4-4956-abce-fecad70d854e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6d9daa8-6cac-4280-83ae-f4927d805ee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56ea40a-929b-4217-a8e4-a545ca604e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d71061cc-9e85-4e6c-9470-401c4be0329d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1abb6b9c-5775-4383-bb7f-4e5a016cbd22",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01710375-99d8-441f-9aac-f78c23450cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae7b39f-5b94-4498-8e84-e3a0c25ebca7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25be48a2-2c30-46a2-9b1b-a9ea630d7473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fe21cd1-a40f-4dc6-bbed-b90e79b51104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6de028d-3880-43a3-a302-46bb90fc52db",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8113185-63b7-4a8a-bf59-6f99a7168b37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae9d819-9696-469e-937f-8c4d22a2c85a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f18cdb4-b557-456e-b6cd-658c7d1185bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dfd9bd3-d54e-456a-a56a-811bcbf849ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c12460bd-8bc6-439c-b47c-c8d2d7bd6a0b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd91585-3b90-4390-801b-a56c1b9f0744",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10b941f-2ac9-4bb7-ad9b-44cb47406223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c21ccac-42f9-431d-b4bb-101e448ab8b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0346630c-304d-4d62-b358-d6c748aed931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27cb209-715c-4b34-a22c-1f67d054eb1d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e0247cf-7241-4db9-8724-c76d72cd33d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebbbac7d-b51a-40fe-a173-a14e75c86aff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ed5592-5446-4884-8a55-6f93a69a509d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c68e44af-ab4b-4860-9fa3-23788f1ca47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df50b626-9790-4427-b017-c0e0c2963c83",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50ebfc7-9c10-47dd-acac-31b059c142d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b132170b-1494-47d7-9f16-530b651e9705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f03c080-948f-46dd-b4c7-fa48e310b66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f872b4c-65ed-460f-aa3f-778a66bf530c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d65a2f-c87d-44d0-b942-d83ba77e2e63",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ff9305-1c96-43b7-a85a-354296768cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0195038d-40bd-40a2-8827-b7b55ca1d934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c5651d-ad9f-49c0-bf0b-d8301d2feccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbbc203-993c-4274-b8f7-52be3742b87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddd24d6-d141-4edc-8314-bf29a8726993",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee2e7f6-da89-4309-9857-13e657f5c6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b73b6af-6055-409c-be9b-21fc6727fcdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7acb20f-b989-4a35-8dff-15b19c9121b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c54aa2f5-1df0-45cc-9430-fc2065e7e603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ecc440a-9a47-486e-912e-441fad1c8044",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ac736d-b93b-4edb-8b28-70e82594c359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884196f0-7fd7-4ebd-803f-34b266dc830d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a0f134-07ac-4350-9ee9-2093adfe1439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb0e132-1ec6-4243-904d-cc3fae65a080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df87c2e-2b90-4e04-84a1-3bda3fe0d9d6",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13709a3-ac9c-4a49-9337-a5a5474da668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51ebca6a-562f-4a76-b400-9590a696c7b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec3acc0-6f01-4b52-a076-e4b7653883e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ae5225-414a-4e98-a1ec-267dbac42103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6043fc3-38c4-4967-a5e4-927df1835321",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9f6c34-91d4-4ae7-ad57-3d9f7e05003b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53436bd4-b793-4ddb-a408-80ef31fe5654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e581469-e7e2-4291-b41d-17b50a507f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a0cbde-5f16-41ec-90c9-25cc0689fa34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d199a251-437c-42e5-a4e0-3232cf860fdb",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e083a3-0d61-4044-99b0-fedad54fe003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "530f6c76-102d-4de4-9127-7005b0222acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dd6db1-d638-4a39-aa1a-5d1e25f10d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "634e7005-7e73-4698-bb09-2f94f559766b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9a9dcd-0d3b-4a40-a3ed-9c26c54f1893",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac77a7e3-af9c-4fc3-8683-ddbb81461214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f13f01-7117-4e1f-a43d-413c6d79b5e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10659d04-01a8-4d0f-b6b8-0f07fd1cd1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ae43aaa-3ee5-4ce6-85f9-3bfccb753ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a97fc1-cded-421a-96a3-598fc27b3a25",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0993f3f7-dd00-43a6-9bab-d3964e4d5442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0004b3-fb9a-44b0-a93f-12106425461e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598eb2e9-c1e7-4453-9533-3183faede88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a145f4-58af-4123-ad62-01db43a900c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86c1f61-224f-4bd3-887d-93d9f7344c4d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32383e7e-3143-4bce-bfbe-cfdd5b175ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec12a1f9-dc8f-4d55-b3ce-93578c5f572d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba949b75-c841-4344-a432-f015a3d8ccbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5ef5bf-8c5b-4daa-9d58-e8e84c63d622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1faa166a-311b-4816-bbb2-dafd950db784",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca421c7-d85a-4b21-acce-3fb79368fc86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9920326-773e-4160-930d-9414694e2dc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a75f0cb-bbef-440b-944f-c4c5512c4d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd3f9e53-3dd0-4b32-bced-b537954c7fec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d3dabe-7658-498e-b560-6239c4423366",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb2dc98-1fbd-48d7-a6ea-55b91367a600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdac785a-2d62-442d-82dd-4a7e898dd138"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d4aa6a-136a-4305-b5ea-aafc3f602f4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "339a153e-67dd-43ef-bcd5-00b859a7de67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f17539c-705a-47f4-9004-fdbb4fa75750",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2abc0c-d491-4d83-9e8f-fb6239091201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "270f7486-03e0-4058-8db7-1e71d9b1b2e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aac97e2-935f-4136-830d-f117d3e5db12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41e12ffc-441a-4aa7-a660-599b64d67ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63604cda-5441-437e-92ec-c20145e10f61",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b674910-32ca-40eb-8e5c-4bbd7903e4a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "068c5c17-8952-4c5e-a7eb-b633e7c35941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f24df4-6b9b-4ff3-95e8-65bac93ada2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56afa3df-997e-47dd-a010-db15a9a73469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d85d22c-70f7-429c-ba09-e9ab1a319925",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6610d87-435f-46ff-b412-08c1689d9ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71cc986-81fb-42f6-bab7-f4376622e4a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687a5d26-6c68-4af5-9807-24beb831fb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a8fb6b-b98a-4457-8ce7-18dd2a4b7581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a662f989-a313-4c0a-97c4-95b4198d4d4b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b641a58-e377-480d-8338-0124c6303588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031f3fb4-5879-4ae4-b491-a51224c5a7a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ce58567-2164-4255-8ee8-2f27dd084e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ca8876-a2a7-44a3-95c2-2b260b42d845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1977ee71-a27a-49cd-ba47-8b8017962f45",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6988a758-6c7c-4425-b6ad-0765441f0a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde9e2bb-3ad4-4f48-887c-ed179bcf85fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227a6cb3-b6da-497a-9c0c-9be39c703f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c25cd5-556e-46b4-b7a1-4c63bd341220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d46784c-dc83-48b2-ae75-9e588daac53b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93eddc7f-f8d4-4567-99c9-78fd3506b95e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad364113-49e9-42df-995d-b58a40ace277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e8c2ea-36ca-4d41-92fb-b2459216007b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce804fbe-ce45-4d7f-9735-5c86bed0d7cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41b445e-4958-4244-bf7c-7faebca0df04",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479694db-1e6b-4ac5-a43c-d69c87dd26ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e0867b-a34c-4921-84c4-e0f6605f5da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d69041b-9e74-47c3-9f11-aab94858290b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ec2056-413c-4e49-aff4-1f330253a767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d48bbff6-329c-48c3-82c6-467d0542b13b",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a911981-f255-41a2-a1be-4b6c59d2a339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b73b398-2604-4b49-90ff-005f3148b047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36545206-4015-41d1-9054-d66532808498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9446c737-5e4d-471b-b771-97c1904b59ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa53cf1-346c-4db7-b992-d9ae46703e42",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e53809-748b-4501-b1c8-e3bf642e3290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3f103be-50a2-4cff-9012-1f26ff99c16f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a97c2d-f753-4380-8a4f-7db6cc976762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b157666-04f8-4ff3-a6a3-8684bcc49cc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88b053c5-ff14-411a-a2d8-3b4987e82bb8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3174396-e912-44b4-8f0a-83204e28a2bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "affb5f9e-4320-449c-aa62-b310a65f59c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b2973f-009e-426f-82b3-23b053ccd182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5babefb6-f699-42f5-9fe4-2270edc19267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d72750b-8fba-4829-9d72-12809fa36902",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a48d6c-7997-4966-9aa8-86eabee938c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9be170d1-cd94-4b08-89fa-94ab96295645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6546e6f-349c-4caf-a3c4-ab3514db1d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "234b0028-16ef-46c2-9a15-45d126aac737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b5fc7a-a40e-43df-8b7b-858533501119",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fba8a2a-32b5-494b-8fa5-58a299574c9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9233a540-efbd-4b55-a779-23070c126ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0798965d-58b9-4fbd-996f-2ff0b90cb100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72c1cc70-8743-4f52-8d52-1841a92e0d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f229846-a9f8-4a2c-ad60-290afc744894",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fe8fd1-ff5d-4d4d-b86c-f5b55f81d9f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01569fd3-24bb-4a14-93bc-741f324f0514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edb659a-5c1c-4c2a-98cc-502c57589106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836be24c-c6da-406a-a1d1-f1cf9a7552cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5244eb-9116-417c-90cf-8853cc6e4ee9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c8d3ff-9013-4de6-aad9-aa0ea8b0393f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad283e92-4fec-4d9f-a96b-362c0435530b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b4ffbd-b82a-4b24-a8a8-82286d3a716e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa70854c-0360-4542-b9e7-ff281ccb3e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d4b598-c2ed-4e3f-9af0-3040f1a2719b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac69a866-dd39-4a59-82ca-5dfef19d6810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cb1617a-a773-4c12-aa4d-34757d8d52c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd910c0-bc7c-4adb-8463-d58aeb9588c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499ae074-0594-4b3d-90f6-5882053b6c77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9a4302-2a0f-4a17-ac96-d9c4ec2b0d7d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916a6161-e1bb-41dd-95de-914a3a24b149",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfed6bb6-f954-4f11-906b-1a96c435f818"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b89a8ca-ccac-4ff2-a806-8c5d6ec2e9ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4969c65b-9f1d-4a6f-b37d-346bc686c771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b339a9a9-a72f-4798-9ebb-983e525e4acf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e8b170-7117-4959-adc9-fd9dbad95d28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "455222b7-d7e8-46af-8e49-ddb4184ee992"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2e082c-662d-4b28-af17-0d0081818ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ba9511-45c3-489a-974b-aa3bc0f93484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0bc5e2d-65f8-465e-bdd5-ee7aca364b6a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da233c92-bb48-4230-b7c8-5ae8b681389a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9d3bb09-fdbd-4006-8801-71b801368571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd13368-0656-4ee9-9808-bb23820d0726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b8de8d-1d1b-4836-96cc-51cc41599f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270f4ac0-6145-4b13-8e9d-07bf2b9f8cae",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b206424-bef4-4a4a-91c7-d9c9ffd67648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05528b03-2962-4725-8ac6-19ccc44b2a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0a7712-6cb2-443e-80b1-2ce519cc0f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19497e9c-e506-4d7d-bcec-163e0c21dadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5f9f9de-ff96-4c29-90ab-577755d9242f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9ced0c-30e2-4e9a-86b8-207435e9f3b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b01a7c-12c4-4fc4-a017-c6da4d71afa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34b325ca-76f7-4908-974f-fab4be1bf376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6408d499-c54d-4095-beaa-140758abcb89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20dd9de-b624-415a-ae7f-52b1d42a1459",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438ec2e6-51a2-4444-8c6e-4bbcd8636167",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4827df5-a1e8-4375-8a35-7e1beaff1c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f64297-b4d2-45c8-8f80-37357da275a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d569b26c-7a00-4c6d-ba22-6a78fe1dd7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd4f5015-6dcd-43ca-8bbf-30fc3dba3f44",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bd20e3-a53e-41c8-940c-0c946e092840",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5cb1b53-e8fc-472f-81c7-d8329abba20d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a98df5d-888b-4c68-b703-48e5643a8fcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac28f0de-24dd-427b-8d75-d04396bf45a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918fb9e3-9483-438a-8e72-a29627d4245b",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c30521-4950-481f-aeaf-39decdc9e8b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f0faaec-e1c6-4d19-859d-20644a4585e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8873859e-13b5-4fbf-90d4-6ab2defc9537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea139209-8d10-4806-995e-9513b5e631dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4bfaa6-aa78-4776-bbfa-247ecda1e8f4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a07e561a-bb51-43e8-b68d-4c348ad3bbb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "665b39dc-874b-42b4-8a22-d33852765077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5f1bad-6594-4ab9-bcc8-b6854d0068e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad59db0-f113-4622-940b-28b57bed15aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca97b4a-bf19-4751-8b51-bc7b2d5b8118",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e690dfaf-197b-44fa-bd3a-c42ffbac09e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d787fbc8-99cf-4ab2-9f58-17fddc2330ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d407a6b4-263d-490e-bf01-2430715813b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8151fd91-101d-4176-a82c-704d16622777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb56009e-723f-441c-b619-4e94732ef41d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e91dd1-36af-4383-986d-10b15e193f19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fe81ab7-c3ff-4218-b83b-f67dcfab062e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "063e920a-8434-4e65-8d77-507c37150923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e68beb7-3f22-4f4b-a314-0911e14d9973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af54e71a-fc57-4ef5-9108-b4861fb2b1d3",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66e1e21-fa35-49c8-84b3-1c596650edd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfa53a1a-0f83-4782-a0d7-a487484d8631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb187dd9-ece0-4866-aa5a-a27b30e8adbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73280436-ee76-44b1-bbdc-2b42ab37fbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "230128b0-2b52-4bb3-8b3b-12173ddbb44e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd65a9c0-d882-4ee0-b2a6-7ce833439f77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc481e69-b321-42fc-97cc-45110563851b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de2529f2-4176-42d8-a8bc-03188547a633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c28e354-127d-4d6e-b6fb-1919252b4769"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f8eceaf-3196-43be-9579-500ab68c4da3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa4a20d-e4b3-44d6-8a01-74d468777ff1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "250c87cd-0aec-45a0-a005-181a5163f481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5add74ab-fab6-4559-bf84-801b3945ad9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ba859d-8aaa-4d48-823e-c8291b25f5db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4ee404-0664-4ada-bdf4-c18993beba79",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288cd2a0-b990-4369-ace9-eaca2735546c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e81edd2b-6f60-4189-ac7c-535d6c7ae219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e347b0-0d85-41e4-a368-40e3b4e8bd68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ba6a66-1155-4fa1-9cc2-dc3cb4e7e157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46e02b7-3706-459d-81c9-8e6e8d609afc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642fc620-2120-40ea-a4cb-1bdbf5cdb2f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29274f19-e613-4478-baf9-c80a0e077279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fcc16d-6043-43d7-94e2-3b981f27c7d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a3bc37-e2ef-4a8d-b04e-025b8171fb9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc34d81e-0b9c-49b5-b20b-18547045b04f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bda950c-4dc5-47aa-8e36-42a4e8ef7fdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39b7c96a-9e38-4f97-a53b-f0fc51f9ebb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39b37d7-8139-418a-8da6-b904763ead4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "054c1db5-42cc-45cd-b7af-97b528ec1702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66a2bc5-60bb-4f55-b1fc-9b87889a4f51",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66aadf97-8fbc-48fc-90ce-4a28ebe1bd05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c90d99c5-fcbb-4b9e-8504-4a27b40dd993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "859a3212-0f9c-4f6a-9985-b734e18832e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696aa0b0-6004-44d7-9192-cc495b673cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d95bb6-cae4-462c-b966-92cd8d6efe0d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b38bcb-f0b1-494d-b245-2cc3f89a9c83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd052db7-de5e-4aa9-bf8c-ea370f8cfb79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f5ce83-cb75-486c-9f32-c7f5b50d5e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e96a56-1669-4d0b-82a5-d27ba0d4d635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b0d3dd-9715-4595-93ea-ad7d0fdd55e3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879ae795-c4bb-44c4-a440-2fc563bf6550",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "666872d7-6fd0-4efe-8bdd-af1acc051346"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6928f640-5cf8-48fc-b803-da6fdfecf61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24126490-360c-4949-952f-f81c7322b34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cada08e-6d04-4b7e-8546-8cee5b13153c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e542f4e-5aa1-43e8-9b41-3c0cf670d2f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "371c14ad-33ab-4cca-98eb-7e233b31c4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76dcab9d-e3f3-48f9-b4e0-56c0599c03e0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beafed53-a3e6-4eba-a93b-36699e644ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933cb1fd-e5af-499a-976a-6091bed6ecec",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66be403-96cf-46d5-9b7d-07991579e4c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fede9f4-2e7b-425b-bc1a-e1f141f846fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b2d4e0-4308-4a43-98ba-d50c990fa48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda8f017-602f-4b63-8d4f-78e904d8ae8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3e595f-27df-49ab-bb0f-1bd499b7d5d6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9eaeaa-e536-46f1-9b6a-5ad01f62b491",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8947889a-4b65-4d79-8fc7-646f255bdf01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07e4c89c-97c3-4978-98d8-3f1a70698b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd82e827-4536-4a25-8d91-582791b03316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6142b59e-d2be-474f-bb2d-2c77ed68eb86",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b52fef7-0cf7-4ac8-a23f-3f54f31bf6b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2edb594-f8ae-4abb-b7b6-62a10d778938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a38abea-de37-42a6-beb6-83b0b123482d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702897a2-6242-4708-8631-cc0802a1276d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb4b903-78ac-49dc-a4ae-4f5c0ad6f32f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7071b88d-c41f-450b-a2a3-33a2f5a0dfb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f9ca178-9ab8-4953-8129-8fe2ae9b3561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22733b72-61eb-4782-8dcb-5ab948e57b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53cfba80-243e-431f-9b49-9b6eaf7d2cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08909b89-c70b-4b62-9767-362705fb96b9",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a88000-7384-4efd-8f4a-e1df3bac3ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88f1f020-5a12-4d9e-b7b8-75df2ef7ff3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c30da7b8-fd4d-4633-9da8-ce56be77b361",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323b6011-749a-40b4-b7d0-8e5b91c47d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903ab942-c76c-4f4a-a5c3-63b920495f34",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0f249d-c68d-43f8-b3ab-78f9603907f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22c1e84c-e117-4af8-a1c8-693d339fac1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4895c93-525e-4ae2-9d1b-947928c9da7d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dde8694-6c0d-42b9-9d4a-d097e6317267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c39872c-e228-4db2-8ba9-436d6ab3d717",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee174dc-5920-41f0-b8a7-4e28f61e6541",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2889a35-b298-41f0-9099-5314af29950f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22801b94-8a7d-49b6-9c12-e322c113dd19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9139695e-13da-487d-a090-b67b16732e9b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16f6891f-36e6-448d-bdb4-22f2453383ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75cce556-0f20-497f-88a1-31ff4e63123d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f687abc-6137-476d-bd40-96742cdbe9ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "73318395-eace-4516-bbd6-64862e5f90c6"
                    }
                  }
                ]
              },
              {
                "id": "00c538c1-ccfc-4124-94e3-c1c5d5147556",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ef9f20e-a78a-4221-a35c-7c9d43af6503",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5151f76d-4b38-458e-a54e-78a1c0cb29d4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "07af193b-5fa1-4242-aaf4-3f9cfa3e3dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e3e5ca-838f-41c9-8541-9f8a3d1deee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4ca451d4-3a42-4094-8e33-5fab60ab1770"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8ccf927-9f82-4112-8a29-342956c222f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef26b987-8aa5-40a1-9448-1248df030f80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b02fa9c3-2137-4aea-8551-16c1331ceba9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a810d7cd-868a-44bb-a7db-cf1b59e8b959"
                    }
                  }
                ]
              },
              {
                "id": "9bd908f3-800f-404c-9481-3e2e9fe28837",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cb1c8f60-7764-47ab-ad41-8bbdba934d87",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fea032b-eaa8-41a4-b042-d852dcd40667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fe50c203-2434-413b-8871-bc42200fcf93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054dbd08-e93e-47aa-a40d-a154b3f71f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e137a3-04c9-48e7-a9f9-ad7bd37ab886"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c9a164d6-aa03-4b1c-baec-c8ce640681b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0bf1b066-e814-4476-aa68-329f24e7e7d0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ad93482-b2ad-4fa0-932a-f02ef4f060eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "fb49aa48-b97d-4084-9ef7-e17d464a2562"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5151298b-2c5e-4f25-88aa-97d3b7cc06ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16daf8e1-a1b1-4fb3-9189-08eced5a7bba"
                    }
                  }
                ]
              },
              {
                "id": "1b3ee483-56bf-4314-9542-2bcb6b9d4e15",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4edc19a4-e8fb-4e4d-9883-ebdafa7ead1d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3091b35f-56f3-4924-9066-1ddff12778d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "af25e5bb-cdb5-41c2-95e9-b10955a9203a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f297b40-79e4-4dea-9fa1-e2d513bf6345"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e34e7f29-7a5a-4008-9769-c3ad16a74874",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c34dad75-7a87-4c6b-8dde-8b07f3170ac7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05b463a5-ccca-41b8-8dba-c51382f37364",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4412846-f57a-4a22-ad42-7e07aae9d373"
            }
          }
        ]
      },
      {
        "id": "747e8305-6190-435a-8ddc-f7abc35ca73e",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c615ee88-b651-41fc-9777-9479b00df1f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "77629370-1551-4a24-9372-23b0a191ef49",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9d91909d-bc34-4c86-a4d4-348c3b8ebd97",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f175e64-7947-4826-baf0-c272f3d34ec1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dd15f66f-20a0-4e32-8ec8-f231e8112d75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccd0824-31b2-409f-85be-178d6700efae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eabc1c80-132f-45d1-86fa-2aea7e54a932"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "031a43b2-6340-4740-a258-812b30e16e7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b90aa466-3717-40b2-92b9-cf64112e0b37"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab432cb9-284e-4976-a244-70634605bb55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c6240c16-cae8-4c4a-b44c-ff5a7f3fc149"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2718fb16-910f-4473-a440-4296cdc53ada",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5442da24-770a-44e0-bfc8-1cf8757a9717"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c6d5b2a3-1ede-4a8b-851e-b84f9928b003",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c2e8b2d-f198-40bc-b991-cf802303e507"
            }
          }
        ]
      },
      {
        "id": "29a271f6-98cc-4173-b195-1d5dca617638",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "eae44bde-5f4e-4622-9439-b07f4a4330eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb7db406-5f13-4517-a686-89ca05259174",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3a4532b-ca60-4857-b210-1a7088a25503",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66996315-fc08-4e81-8713-5d46225b01ea",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f66146c-815e-44e4-9db1-c0902cc131c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88855037-747d-4b4c-98d0-43b33d912d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82e6c297-cd81-4710-a20e-f475b5f97ead"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "daab8043-a4df-4616-9422-35cccf59df69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cf886a8-052c-4d70-b769-a4aaa10b9228"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2574aeb7-e9c0-433b-9049-9fba394c1b79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81245803-dbef-45b2-a3ce-b147739d8da3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bcc908f-3e19-4e74-97fb-c4b4cb697725",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b3600b9e-173c-4c0e-badc-824c51083731"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "829c042e-e034-4516-a86c-6c71c2df2da0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52b57cb6-5ac0-4207-be2c-3fe43a0a6ac8"
            }
          }
        ]
      },
      {
        "id": "cc7843fc-f83e-457b-8d41-aaa399f7fb1f",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b7db5182-9364-4899-b748-5209c3a6f154",
            "name": "Negative Testing",
            "item": [
              {
                "id": "177e7d5f-50dc-40dc-93e4-190e695f4218",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "96ceb903-1e02-472c-b83a-e1462d9db66d",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ff11c4e-c229-4a71-a73c-f8b959b4f4f1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa6f41e3-3d13-420e-9257-b821bd3dd3df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef647c6-cee4-4480-92d2-6f76e5160a5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc6a57ab-49f1-4e2d-885b-6535edc7086a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5d341b6-3ba6-4021-a4e6-3a205b33ce9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86c529a1-30a6-4961-aed7-7811330c055b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bbb3cee-91fe-4b61-8819-bff40b3c3ddc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fd94183-2091-4920-be0b-f1baad32d102"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d44f6dc9-364f-4766-8392-854bc88fa503",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b8b4d0de-836c-4452-af9f-e84535cd7464"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "95c13f9d-a83e-40fa-8816-71867023db14",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "010e7264-65dd-4129-b3cd-0e78ba24e6bf"
            }
          }
        ]
      },
      {
        "id": "c075e6cf-f9d2-40e9-81f4-0e727573f845",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8e0324c4-1637-4870-a073-b61d1be36eef",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cb159c5a-b908-4a75-842f-5ab2e1c8fc79",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7e26a270-26db-4c68-9e6e-a6e5e796b3db",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3518c967-aa76-48ac-a657-487bf88ef9fb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22a96596-5635-4cea-a49d-cc3cc581a6c5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 60.48771929824559,
      "responseMin": 5,
      "responseMax": 541,
      "responseSd": 75.65436657931708,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708907726485,
      "completed": 1708907752850
    },
    "executions": [
      {
        "id": "ad1376cf-4ab2-4166-abd4-d27a41718ba4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8c03252d-cb8f-4433-95ef-ebc3dfc53c3b",
          "httpRequestId": "7d3c25d8-83aa-4ac0-bfb0-e5cb82cb089b"
        },
        "item": {
          "id": "ad1376cf-4ab2-4166-abd4-d27a41718ba4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8681e1ad-d5bb-48a5-9bb1-3486233921a9",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 0
        }
      },
      {
        "id": "65d7147d-6ddc-42ba-8c9e-b896eb5e7e76",
        "cursor": {
          "ref": "4724af55-c299-4726-be48-571899e41737",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "dffdb2f5-cf43-4463-b6f7-f22825cb00e3"
        },
        "item": {
          "id": "65d7147d-6ddc-42ba-8c9e-b896eb5e7e76",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "be78cf80-6f49-4e2c-8b64-fda756153a0e",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "8489c570-c8c9-43a3-a0f3-b51639f10e0c",
        "cursor": {
          "ref": "e4d06563-e705-49a7-b5cb-2931a37e3bd7",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f16444ba-cefe-4fa5-842a-8edd2b0f80f5"
        },
        "item": {
          "id": "8489c570-c8c9-43a3-a0f3-b51639f10e0c",
          "name": "did_json"
        },
        "response": {
          "id": "5acf5254-1563-4a11-a7e3-1ada432071de",
          "status": "OK",
          "code": 200,
          "responseTime": 289,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75521e99-afa8-40ad-ab67-0fcb3e95fa82",
        "cursor": {
          "ref": "7020b3bf-083b-44cd-a905-910bc0e7ba79",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fc389a30-82d8-42d0-8926-4f8ab7984b7f"
        },
        "item": {
          "id": "75521e99-afa8-40ad-ab67-0fcb3e95fa82",
          "name": "did:invalid"
        },
        "response": {
          "id": "7d07383c-6c43-43ce-a689-f65c3088ad93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75521e99-afa8-40ad-ab67-0fcb3e95fa82",
        "cursor": {
          "ref": "7020b3bf-083b-44cd-a905-910bc0e7ba79",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fc389a30-82d8-42d0-8926-4f8ab7984b7f"
        },
        "item": {
          "id": "75521e99-afa8-40ad-ab67-0fcb3e95fa82",
          "name": "did:invalid"
        },
        "response": {
          "id": "7d07383c-6c43-43ce-a689-f65c3088ad93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "675ed2ff-0cca-4112-b29d-7ec6f3ba4cf2",
        "cursor": {
          "ref": "f64bfda5-416a-4c33-a9a2-f29db0adf6c4",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "10e54e3a-6342-4e61-9979-22e56424feb9"
        },
        "item": {
          "id": "675ed2ff-0cca-4112-b29d-7ec6f3ba4cf2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5bc8a6d6-1b1d-4222-b6d1-2944a470817a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a270825-bd29-4c10-a08e-0337a385c343",
        "cursor": {
          "ref": "136c5cf8-bfa6-4264-a8fe-b6f6654e0875",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dd58584b-eefc-4c47-af85-519b45642967"
        },
        "item": {
          "id": "0a270825-bd29-4c10-a08e-0337a385c343",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0bb0326d-ea1c-42f4-8a4a-f357f39a6978",
          "status": "Not Found",
          "code": 404,
          "responseTime": 43,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bd6943f-b552-4115-9a3b-a765b32c363e",
        "cursor": {
          "ref": "b8574ddf-c95b-4b11-b2e6-7644dc04ae34",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ec56fd15-e7dd-4359-a3cf-256e259f9699"
        },
        "item": {
          "id": "5bd6943f-b552-4115-9a3b-a765b32c363e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "8ac96f93-5e16-4a50-9235-959692b249fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffdf00d-1062-49fe-a62e-a60103b1a8ce",
        "cursor": {
          "ref": "4bb16fd9-345a-4bac-97e7-bd0228806a66",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e39b381a-6555-45d4-8925-3a34314d9172"
        },
        "item": {
          "id": "0ffdf00d-1062-49fe-a62e-a60103b1a8ce",
          "name": "identifiers"
        },
        "response": {
          "id": "00cab443-07bd-4f53-945a-1e0f4479f709",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c249815-2780-4947-a3ea-2ff68ef21865",
        "cursor": {
          "ref": "ec028310-fa95-4c80-b358-0736e29151e3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5b230a0d-c9ea-421e-8298-9ac8a48fd590"
        },
        "item": {
          "id": "0c249815-2780-4947-a3ea-2ff68ef21865",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "375c8082-4dae-4126-8293-4d7dd1604b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac47e8a-a0fb-455b-a40e-b831106ac143",
        "cursor": {
          "ref": "598952ec-af6c-4948-8b0b-c6aad2c14bff",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d0bdb1e6-5b56-4cc8-bda3-f2cc31370db2"
        },
        "item": {
          "id": "eac47e8a-a0fb-455b-a40e-b831106ac143",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b4c47cc8-7331-4ba7-944a-2aef12e04524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896b4758-bf75-4d19-b5e2-0ba5f529a21b",
        "cursor": {
          "ref": "8e8b168d-f2a2-424a-9770-b1e66a977485",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "74e5ecc4-cf47-4f98-95a0-67927fc7bdd3"
        },
        "item": {
          "id": "896b4758-bf75-4d19-b5e2-0ba5f529a21b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a238090b-367b-4eaf-a013-abf139b4782f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3719d243-ba47-4471-af9f-3d6300692a0e",
        "cursor": {
          "ref": "4a1154d2-bc84-4f4d-8ff3-2bf273192b27",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "77e480e2-145e-4fda-b53b-70bde7f6afb5"
        },
        "item": {
          "id": "3719d243-ba47-4471-af9f-3d6300692a0e",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "6d00c8c7-1810-433d-8ffd-5280e6c43e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e35725e-a91d-4a6e-aaa8-07e6288ab17a",
        "cursor": {
          "ref": "1dd2cc2f-3a4e-4038-9d95-96bb8cdc3b11",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a0d48793-703b-41d8-9e74-014e0a027bbc"
        },
        "item": {
          "id": "6e35725e-a91d-4a6e-aaa8-07e6288ab17a",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "5c538757-85f4-4e11-8385-1d5f1f7919c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "256f9734-0943-4029-9c7c-e6feb3b0489f",
        "cursor": {
          "ref": "334f6270-7514-485c-861d-c1b876d541d0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6dcbd589-25c5-4437-8a78-01f2e145bf77"
        },
        "item": {
          "id": "256f9734-0943-4029-9c7c-e6feb3b0489f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "c0ed03e0-50a5-41d6-8b8f-e91ca2724df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "530feecc-1a94-43e1-a722-815ffa0cebec",
        "cursor": {
          "ref": "6eb708ee-9506-4a8b-9296-e6169bc9168a",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "06d15d13-5f75-4023-897a-43b754fba06d"
        },
        "item": {
          "id": "530feecc-1a94-43e1-a722-815ffa0cebec",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c1346659-3032-480c-a3c8-57bc0e0e54f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45071f22-83b4-4620-8590-52cf9f7ce355",
        "cursor": {
          "ref": "fbe2492c-1fa9-4ffb-9b16-9dfd1f838a83",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "935309ee-0dfd-405a-b844-6dced0abea67"
        },
        "item": {
          "id": "45071f22-83b4-4620-8590-52cf9f7ce355",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "55145390-c902-4033-a456-7977384afc42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b1ab9d-08f6-44e2-a6c2-3704df51e512",
        "cursor": {
          "ref": "4091b66b-576a-4f50-9911-6380a7ec194a",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6913492d-136a-4e63-9c6a-4d0bc56872c2"
        },
        "item": {
          "id": "d9b1ab9d-08f6-44e2-a6c2-3704df51e512",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5a5e5c4e-9a5c-4416-830f-39ecd0a2544c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75089bb-8ea2-4867-bfbb-e0920e6f2805",
        "cursor": {
          "ref": "10214d9f-70bb-4448-86b6-301bf076d078",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "71eff336-f39a-4190-8b0d-2efdd704076b"
        },
        "item": {
          "id": "d75089bb-8ea2-4867-bfbb-e0920e6f2805",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e5a964c7-56b5-4986-a64d-5ccd7988c3bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7158689-1c84-4e4e-abd2-b7c716ea53d0",
        "cursor": {
          "ref": "ea284434-3c4e-4ab5-acf5-806746481f77",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2d22d34f-65df-4063-983c-abfb14b08088"
        },
        "item": {
          "id": "c7158689-1c84-4e4e-abd2-b7c716ea53d0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d5e8d53c-cd48-47da-a836-b01d5ed13b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e3f0f72-12b0-40d2-87af-fe800fdca225",
        "cursor": {
          "ref": "846acd2a-693c-4426-9172-a9fa72fe8477",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "68b2cd7d-f86b-456f-9dd8-763d75f77ad7"
        },
        "item": {
          "id": "4e3f0f72-12b0-40d2-87af-fe800fdca225",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c65ddead-1fb2-4eed-9f5e-e8b5d411d19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84509780-c9b1-42a7-bf9e-9f29ea8fbc19",
        "cursor": {
          "ref": "ae761856-26bf-48a4-bb64-90e662e7078d",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c1ddb13c-47f0-4719-829a-f7ab9a9976d3"
        },
        "item": {
          "id": "84509780-c9b1-42a7-bf9e-9f29ea8fbc19",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7e8d5689-7ac4-48ec-bf46-5d90607fd349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31a8fab2-437f-4f3b-83b0-129f92155f06",
        "cursor": {
          "ref": "5bb66365-313c-4786-a453-dec12bfc3622",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9cbf6e44-4e0b-422f-b318-a6e820407216"
        },
        "item": {
          "id": "31a8fab2-437f-4f3b-83b0-129f92155f06",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9bdc4e47-5c58-47eb-9567-cdae86bc85ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09cf7be8-c4f4-4b90-b0bf-aee683840ccb",
        "cursor": {
          "ref": "f4952b64-67a8-4133-b40b-38307b9ba15c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7d4a597e-6a3b-4980-8380-d2cab7774e8b"
        },
        "item": {
          "id": "09cf7be8-c4f4-4b90-b0bf-aee683840ccb",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8b0788d6-f930-40da-b7f0-23ff7a94e87f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373267f1-5135-4760-9d65-41ea6651886f",
        "cursor": {
          "ref": "919ae781-5a1d-4300-ad53-a0368f5f658a",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3f49fb13-c24a-41ee-890e-4e7e5424b3b1"
        },
        "item": {
          "id": "373267f1-5135-4760-9d65-41ea6651886f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3c2f09fe-ef51-44ea-b1c4-6ef92692e48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73cd79f7-6dfd-4bcc-b4db-2f86b6c6915c",
        "cursor": {
          "ref": "bb28cb95-c048-46d4-adbd-5f1492cf6d69",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "c4b6c9d8-da93-44e6-adf4-3ebb957d9452"
        },
        "item": {
          "id": "73cd79f7-6dfd-4bcc-b4db-2f86b6c6915c",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d8d09b19-ae6d-4e0a-b3b7-9251693c6973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70495d5-331e-4324-9f77-9cc3dc88d038",
        "cursor": {
          "ref": "104854b3-856c-4704-ab46-a4e7e56d6275",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "33edd536-49fb-4d98-b64f-98348fb1d264"
        },
        "item": {
          "id": "c70495d5-331e-4324-9f77-9cc3dc88d038",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eb6f22fa-0ada-47a1-9090-890e13c30f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07d96b49-a5f9-4a8d-bf41-7bb18f4f5c1e",
        "cursor": {
          "ref": "4ffd59cf-53d1-4aa5-929d-cc9da1211014",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bbb4fec2-0fbd-419a-b267-611592753b41"
        },
        "item": {
          "id": "07d96b49-a5f9-4a8d-bf41-7bb18f4f5c1e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0d07d933-1b9d-4221-bb5f-1d86b78e1f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed9219e9-660e-49fe-a1a1-9f2dbd9d5363",
        "cursor": {
          "ref": "749867e0-1688-44fd-9464-8ef6c1a2bb9c",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "171d0625-390e-44a9-8392-afd74691f03a"
        },
        "item": {
          "id": "ed9219e9-660e-49fe-a1a1-9f2dbd9d5363",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "604c61d0-e255-41a0-b2d8-8ec139a9d287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d73746-8d98-4526-b707-3e2391982d7b",
        "cursor": {
          "ref": "e0bfecdb-3fed-4183-9ad8-720ebd32dbf7",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "81002874-8e23-44be-9040-772d0696ad16"
        },
        "item": {
          "id": "96d73746-8d98-4526-b707-3e2391982d7b",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "685109d9-260d-4b6b-a8e8-27cdc3c67295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e501c6f7-df11-4f0b-b38f-1c2fdc4a5076",
        "cursor": {
          "ref": "17d1b42b-e6f5-47a1-9a65-d54b033221dd",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8d1ddccb-6c4e-497b-899f-81b28d3db80d"
        },
        "item": {
          "id": "e501c6f7-df11-4f0b-b38f-1c2fdc4a5076",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4c998138-7fcf-4d06-93c3-a5c55a244860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e5d1958-7d1c-4389-b6ff-d3ddaa600458",
        "cursor": {
          "ref": "d0723d55-295d-4e81-9cdd-c183faa9fd63",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7def99e9-dac9-4e88-98b9-b74948114d89"
        },
        "item": {
          "id": "8e5d1958-7d1c-4389-b6ff-d3ddaa600458",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1d68fb3d-c954-4e04-8b53-81f2bdabe2f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563a04cd-5a01-4fa7-b84b-ffd969ce3201",
        "cursor": {
          "ref": "092a0901-f4a3-4f89-b1aa-46a56cd5fb6b",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a9c39a85-0587-4c69-af7f-8e6b8fafc9f8"
        },
        "item": {
          "id": "563a04cd-5a01-4fa7-b84b-ffd969ce3201",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b8b2a61c-70f6-43d2-97d5-1e2c30b4c6f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87a6fc4-454d-424a-bc63-abec01264301",
        "cursor": {
          "ref": "fdcd2322-cde7-497a-8227-9670f3432504",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "71a3ad24-58d4-44f6-996f-6d4e7c9a57ed"
        },
        "item": {
          "id": "b87a6fc4-454d-424a-bc63-abec01264301",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "66a58ab9-ddcf-459a-9870-230d9d6e2b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd56297b-de71-40e1-99b6-998768697019",
        "cursor": {
          "ref": "c8a7bc7a-5082-4c5f-b840-89467842a097",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6c97081a-40f2-45ba-a1d2-18c75a3ccca4"
        },
        "item": {
          "id": "dd56297b-de71-40e1-99b6-998768697019",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b9a1773b-c267-4f17-a123-58a8f35f2c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0a6cb2-b72a-40f0-af44-4da8fa1a98e3",
        "cursor": {
          "ref": "2e54d840-c026-40ea-b61f-a46d52a2e3ee",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "aad2f065-613e-4e8e-8e91-a5caf221885c"
        },
        "item": {
          "id": "de0a6cb2-b72a-40f0-af44-4da8fa1a98e3",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bc76724a-e0ab-4bc7-97fc-707491e02459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86749ef1-e3c7-4ce4-be77-e909e26b5998",
        "cursor": {
          "ref": "fc754108-cdd7-43d5-b845-90b9e8edd2f4",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "89bbe4db-6444-44b4-9518-b3d09fc3ae0a"
        },
        "item": {
          "id": "86749ef1-e3c7-4ce4-be77-e909e26b5998",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "89d84fc2-afde-4bb8-b03d-f11a82bcd3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978e6655-93f5-4283-8763-8565daed79cf",
        "cursor": {
          "ref": "35811aaa-9f04-40fa-bc88-2769eb8b1413",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e94c997c-dc97-4348-87c6-bc2d0b1bc1c1"
        },
        "item": {
          "id": "978e6655-93f5-4283-8763-8565daed79cf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5704b80e-8c81-4fe4-81bd-9e7961c39063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e02cd47-744b-4896-ab70-ff3d60abeece",
        "cursor": {
          "ref": "66a27324-54cf-4809-a4bf-7248049a0b17",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "53f97c54-3402-4891-9bb8-bf5e7cfdce2a"
        },
        "item": {
          "id": "3e02cd47-744b-4896-ab70-ff3d60abeece",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "3e889aae-73fa-4857-b2dd-1d51d57cb9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1aada9-3b2e-41d4-a26d-c67ea034244c",
        "cursor": {
          "ref": "26d767bb-8712-4da9-888a-b47ec71cca2e",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9a4825aa-bd28-467b-adf6-7c760a72cc77"
        },
        "item": {
          "id": "eb1aada9-3b2e-41d4-a26d-c67ea034244c",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b5fe1693-671c-4f39-af5f-b0c235e03871",
          "status": "Created",
          "code": 201,
          "responseTime": 541,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "dcb9053b-9e49-4fb8-92ba-5ea7a9ef1564",
        "cursor": {
          "ref": "ab2b7ee1-0695-4e08-89a8-051f3581fa15",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4a541314-4205-4447-a0c4-f499dd74c4dc"
        },
        "item": {
          "id": "dcb9053b-9e49-4fb8-92ba-5ea7a9ef1564",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6df013e6-889a-4301-951c-9b733ae76f2e",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3ebb4441-c368-4974-beae-71c8ae6e084a",
        "cursor": {
          "ref": "ef5ef437-a885-4514-8b4b-436ad0b043c8",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "99aad549-99fb-40e9-9ea2-c58f9d46ce7b"
        },
        "item": {
          "id": "3ebb4441-c368-4974-beae-71c8ae6e084a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "dc185b10-db12-4fd0-acdd-4c3c74c4c533",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "31d538d0-4098-4a92-a941-588d952f14ff",
        "cursor": {
          "ref": "e3a2c777-4051-41a3-9a37-aad52de22de7",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c7c71181-d621-437f-9af3-3fdd9d5e1886"
        },
        "item": {
          "id": "31d538d0-4098-4a92-a941-588d952f14ff",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "317aa4f1-b2ed-4ff1-96ee-e6dcf67dca42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1b379ee-22e1-4b43-8ba7-5ecc12e68449",
        "cursor": {
          "ref": "70effc03-183f-4bbc-84c0-348779a67715",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e1ce98a6-a4d7-456c-a8bc-0d5bb9228a52"
        },
        "item": {
          "id": "b1b379ee-22e1-4b43-8ba7-5ecc12e68449",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f3f9d9c2-621a-45e3-99c0-4040bd072c3b",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f3edeee3-dafc-49c4-8dbd-212bdaa0e71b",
        "cursor": {
          "ref": "2057e860-68ae-42d4-a1ef-0482fcb2e40b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "19b8e93d-f8f9-4db1-a77b-f27563b9f0db"
        },
        "item": {
          "id": "f3edeee3-dafc-49c4-8dbd-212bdaa0e71b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "467665d3-bd8f-45c1-b436-9f68aac3da9c",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "11bfac35-0d3f-4e44-ac51-6fbbac8d4783",
        "cursor": {
          "ref": "62504453-dc07-4dc3-aab1-fecdc4e8c0dd",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "4c58e058-a173-481c-9254-96822ca09b68"
        },
        "item": {
          "id": "11bfac35-0d3f-4e44-ac51-6fbbac8d4783",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d6d012a7-13d5-42e5-822f-69fee2447903",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "adc1e823-bd53-4e21-be09-849437e5a821",
        "cursor": {
          "ref": "ff899463-ad32-441e-ba7d-bd3a356383cb",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8fec6512-19f7-4119-8175-3a9bba3f46e6"
        },
        "item": {
          "id": "adc1e823-bd53-4e21-be09-849437e5a821",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "86fc4562-4b4c-4d96-b9a2-b403e48e0eb5",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2e4f035a-4e79-41d6-a6bd-c661cd23be93",
        "cursor": {
          "ref": "1cdd5661-fa12-4b09-87e0-e01669963f0d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "857356e4-90ff-423c-b12e-8c859583ccbb"
        },
        "item": {
          "id": "2e4f035a-4e79-41d6-a6bd-c661cd23be93",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "04318f80-666d-42ed-bb93-7c24fe207493",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "74678446-55d8-4613-a72a-8b9430760ceb",
        "cursor": {
          "ref": "c5dc22d4-a99e-41f9-89d6-b5ec8e17c79c",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "af82c6a3-bbf1-4f8a-9747-74e98898229c"
        },
        "item": {
          "id": "74678446-55d8-4613-a72a-8b9430760ceb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "07f0b919-c0bf-4b04-a7fd-f862236fe228",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "853d9148-460b-4504-aedf-1bc06ca1c702",
        "cursor": {
          "ref": "599948a7-ad15-4b1a-bd6b-f1daafae43e1",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7c718d3c-3986-423b-a930-d28c655f7574"
        },
        "item": {
          "id": "853d9148-460b-4504-aedf-1bc06ca1c702",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "f3030ec2-9445-464c-9243-6017353997e1",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a9ce90fb-f7c6-47da-9132-7553658b0731",
        "cursor": {
          "ref": "5125f416-1a9b-4b99-b5a4-c7540ca3195e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2a576823-5332-4fe7-ba65-d1129e791e52"
        },
        "item": {
          "id": "a9ce90fb-f7c6-47da-9132-7553658b0731",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4a1d4f7d-4cf4-44db-ba5c-e35a48037e8a",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "32661a0a-666f-4e22-99ee-e5bbfa20c478",
        "cursor": {
          "ref": "3bf27117-6bb4-4ed9-8641-f0856a170512",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fae5ba8b-3170-4997-a1ea-497fb06f8a9e"
        },
        "item": {
          "id": "32661a0a-666f-4e22-99ee-e5bbfa20c478",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "4704413f-b6ca-46a0-ac4a-f0cf404f2908",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "17512bb8-4698-45b0-ad11-ffcfd82dc83f",
        "cursor": {
          "ref": "4fd197e6-d693-470c-b1e2-3db4e6270658",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5a7060dd-d5f8-45ec-b99e-10a08681b43c"
        },
        "item": {
          "id": "17512bb8-4698-45b0-ad11-ffcfd82dc83f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "348372d1-28ad-4604-83b4-8b208b0014a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15defa94-aaee-4cf5-9d81-576a140c4fcc",
        "cursor": {
          "ref": "13c96a9f-44f0-4fa0-9592-dc42dc4e4929",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e9cacf1d-25c4-4776-b902-e5a52b8d41cb"
        },
        "item": {
          "id": "15defa94-aaee-4cf5-9d81-576a140c4fcc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a9210860-ff2a-40e1-a1d1-fc0048765bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a14dabe-71bf-4632-9f75-ee0c77180717",
        "cursor": {
          "ref": "6526e59a-ff13-407c-965d-4514c97f9625",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b3bca3f1-3145-4f1f-84f8-2f8ae240fac2"
        },
        "item": {
          "id": "0a14dabe-71bf-4632-9f75-ee0c77180717",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "68f56e40-9f17-409c-b249-b56322546c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a771ac20-723b-4599-9091-b2dcb64e6a03",
        "cursor": {
          "ref": "fd2d0ec3-2197-4576-a22b-1226e1f73f30",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "74e91269-5b2d-4627-8521-f0f015011e82"
        },
        "item": {
          "id": "a771ac20-723b-4599-9091-b2dcb64e6a03",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "56bd248f-07aa-40c1-a3c2-74c80e053914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5372c55e-d843-4770-9e8b-740779b77ac3",
        "cursor": {
          "ref": "55627fb9-eea6-47ab-a2ba-26345c86d3c2",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "af2be4f5-c25a-48ca-9d35-b5c84e9e4b7c"
        },
        "item": {
          "id": "5372c55e-d843-4770-9e8b-740779b77ac3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "e61bf1ff-44f2-4c3e-a5c5-8ad0dd450ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0050f7bb-828d-40b3-929f-82fefc6e0ae1",
        "cursor": {
          "ref": "ce4d957b-3f34-41ce-8008-b21feb3004c3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "72864457-4302-4a34-bedd-b06caa3fbe07"
        },
        "item": {
          "id": "0050f7bb-828d-40b3-929f-82fefc6e0ae1",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e4cae874-a306-479b-80bf-8fdce192a4c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bc22ce6-b606-417c-9b25-ef49ae71fe7c",
        "cursor": {
          "ref": "97180771-e82c-4e73-99b8-6234d8b8ef71",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "b139e056-acf2-4f2a-84f2-e85543e00e6a"
        },
        "item": {
          "id": "0bc22ce6-b606-417c-9b25-ef49ae71fe7c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "03f98d8e-07b1-4e30-8ea6-c7ae732a2592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c21fc2-24a1-4e9b-8b92-66c0a78faae4",
        "cursor": {
          "ref": "73d08125-4e7d-4628-b53a-b31ab0bbe35c",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "aed9e4bd-d93e-4982-93f2-a9646117861a"
        },
        "item": {
          "id": "55c21fc2-24a1-4e9b-8b92-66c0a78faae4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f154fc6e-6f44-4904-880f-f95b57d395e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e47fdd-ea38-4074-b4ff-237d0116661d",
        "cursor": {
          "ref": "5d4d63b0-6693-4c1d-ba5f-902965ee3e4f",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "77c103ce-6ed7-43d1-8c2e-877cc9feccf3"
        },
        "item": {
          "id": "34e47fdd-ea38-4074-b4ff-237d0116661d",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "daa47169-d859-450c-a76f-4a31c2a00015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbeaaa0-3c6a-4816-88ba-116c8c6ca12a",
        "cursor": {
          "ref": "c1e69930-0fa6-4b30-aa91-6d1298d423ec",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4f4b9225-bc7f-4ac7-953f-b5d5ebe2a4d1"
        },
        "item": {
          "id": "bdbeaaa0-3c6a-4816-88ba-116c8c6ca12a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6c75789a-0265-45fd-a873-fef1ce196045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd90f32d-66d4-441e-bf7c-782bc70fe963",
        "cursor": {
          "ref": "80400bbf-eb27-4bea-aabb-c73413d1b21d",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cef42da4-f2dd-4397-8e82-a7d13d69ec44"
        },
        "item": {
          "id": "fd90f32d-66d4-441e-bf7c-782bc70fe963",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c35098a5-5d1f-4d82-8ab3-be701193459a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ae214a2-6ab7-405a-b7cb-33f470ad7f72",
        "cursor": {
          "ref": "9ba280d9-b446-462b-947c-db97c145351e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "87ee706b-4ea5-432c-a29a-84ef711f8ff1"
        },
        "item": {
          "id": "0ae214a2-6ab7-405a-b7cb-33f470ad7f72",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "2ba7e4e6-cff9-4411-9730-4085e4bcc55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e236449-7ac4-46ab-a7a4-94f3cd4d4303",
        "cursor": {
          "ref": "6c06606d-9459-4849-ad7a-563d5e9d2f7d",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "773f5709-4b92-4652-9b5f-c7fa049c4848"
        },
        "item": {
          "id": "7e236449-7ac4-46ab-a7a4-94f3cd4d4303",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cf832a2a-07aa-4bd6-9270-0fe41d963bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a956225-6c5b-40cf-b746-560db3d837d8",
        "cursor": {
          "ref": "dd28047a-a82f-4d4f-aca3-86637c4985fb",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "35b86135-889b-45f4-963e-ac1818a9d19c"
        },
        "item": {
          "id": "0a956225-6c5b-40cf-b746-560db3d837d8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d564039e-c6a1-424f-9daa-fc6d199da1e5",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3b8f599e-f33f-4def-8833-f48615a503f6",
        "cursor": {
          "ref": "3854e2fd-62c6-43c3-a219-316b726f6efb",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "397a06e3-8a5f-4e55-9737-a84578496be3"
        },
        "item": {
          "id": "3b8f599e-f33f-4def-8833-f48615a503f6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c2378480-30d0-4481-8d19-f761fd0c927b",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "2a4e971d-2471-41ba-a3e9-74ba41b98973",
        "cursor": {
          "ref": "744c96a8-c10c-4d48-b32d-c55c0b636c5c",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "44aecaf7-c444-4c17-9f52-069174631505"
        },
        "item": {
          "id": "2a4e971d-2471-41ba-a3e9-74ba41b98973",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "76459156-ff6e-4c71-b61b-89e05d1470b3",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "8901a322-1ed0-4fcd-bb78-27789444ddcb",
        "cursor": {
          "ref": "6ae15af6-239a-4313-92df-1fdfed04a1d2",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "14b6ecfc-9bc3-4b56-ad81-b5de062c0d24"
        },
        "item": {
          "id": "8901a322-1ed0-4fcd-bb78-27789444ddcb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a70993af-1abb-4230-9fe0-0125c06f6e8b",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "fae673dc-748e-4427-80dc-8b0927cb5cc5",
        "cursor": {
          "ref": "e4bf909e-ac6e-45cc-8fea-1f79ba344a93",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "27befcc7-a2ff-4dc7-832d-fafb482a2d60"
        },
        "item": {
          "id": "fae673dc-748e-4427-80dc-8b0927cb5cc5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "85f351cd-cd2d-42b4-82e2-6b489510071a",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5485ea08-1588-407d-adaf-595cd7aa462f",
        "cursor": {
          "ref": "28be1a2d-501f-4773-80fa-05949a4e3413",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "495b9e9c-f2ee-49a0-8068-cf122adcaae0"
        },
        "item": {
          "id": "5485ea08-1588-407d-adaf-595cd7aa462f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0230df34-7175-4a7d-a7fe-21609d6a1615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af34e0f-c0eb-4826-b316-7d42a5c7bd08",
        "cursor": {
          "ref": "2a4c94cd-374d-4526-82b9-d78ccee1ecdc",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3a988588-7fe6-4f84-a81c-6de1071ef440"
        },
        "item": {
          "id": "0af34e0f-c0eb-4826-b316-7d42a5c7bd08",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "efe0354e-f70c-4791-9705-ad991a49c664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62d667b-97aa-429d-bd84-20aab7b44a49",
        "cursor": {
          "ref": "602ff7b2-348c-46af-a3a6-99952aad84d1",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "19c896eb-cc4a-4e96-a757-618b7c2c06c2"
        },
        "item": {
          "id": "e62d667b-97aa-429d-bd84-20aab7b44a49",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2804a0be-e0c9-4771-9676-71b685403518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a533554d-6562-412b-828c-491d7160bae6",
        "cursor": {
          "ref": "1df6459d-2250-462b-bf34-f76fb31ea1d7",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "03485ef6-6b72-48de-b57c-bed0a086c75f"
        },
        "item": {
          "id": "a533554d-6562-412b-828c-491d7160bae6",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "1cd84f1c-5265-4637-989d-a59a78c3c3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d6f0be-51a2-441a-94fc-faffa120a6df",
        "cursor": {
          "ref": "01225dd6-361a-4c63-9a95-3ed126eb2612",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "24af8b72-a3a5-46ce-a833-58317c02dfe6"
        },
        "item": {
          "id": "86d6f0be-51a2-441a-94fc-faffa120a6df",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "68662928-08a8-4620-aa31-35b8788f023f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcea7100-bca4-48b6-b1df-5bedfc347a3f",
        "cursor": {
          "ref": "7a66f0b3-993a-488c-9754-5f78982c391e",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a0a2b462-1ab8-4ab1-9abd-348a3d8ef317"
        },
        "item": {
          "id": "bcea7100-bca4-48b6-b1df-5bedfc347a3f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b0e477a2-08c9-4a3c-bed6-a8ee32d44409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f490f9b0-4f98-492a-a38e-5f4d258b64c0",
        "cursor": {
          "ref": "d421d285-cea5-41c7-88fe-f9d3aa374b0d",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "38c05242-fe67-40aa-b9ae-7a62f1bab937"
        },
        "item": {
          "id": "f490f9b0-4f98-492a-a38e-5f4d258b64c0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "89f9cf5c-8a6f-40cc-83e3-8d1090d8e691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff20112-8a9e-4c1c-bbb0-3755c02479ca",
        "cursor": {
          "ref": "6aa99cc5-6442-4ffb-81e6-ad5911080a91",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "3811f603-3d4e-4af2-8118-9746b4520e37"
        },
        "item": {
          "id": "1ff20112-8a9e-4c1c-bbb0-3755c02479ca",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d07c6835-e92f-46af-864a-4fa5218ac411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7934465f-f8ef-4fe0-9fae-fdf56c8da0ed",
        "cursor": {
          "ref": "ec3db52b-bf7f-42be-9894-3411ce7bd32f",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "40f706d0-e4b6-484d-8372-d4e82bf4881a"
        },
        "item": {
          "id": "7934465f-f8ef-4fe0-9fae-fdf56c8da0ed",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2fd7d8ec-5da4-4668-9875-8c1141ffab79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7348cab1-2875-40b0-a38e-12607f6274bd",
        "cursor": {
          "ref": "7bb5a16b-6a18-4e64-8bd0-c9066f78ca14",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4d50484c-3aa9-4fdf-8334-36eeb8d5bc02"
        },
        "item": {
          "id": "7348cab1-2875-40b0-a38e-12607f6274bd",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0322bac0-5a70-4c05-9e18-46e1e21a5c04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b7f967d-6b6b-4665-8db9-4adaadcc6624",
        "cursor": {
          "ref": "86d451d8-abb3-4f34-a8de-3c08e6135f89",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "386207bf-2c32-40cb-9f97-1be645ee4429"
        },
        "item": {
          "id": "2b7f967d-6b6b-4665-8db9-4adaadcc6624",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cffd71c8-0754-45d5-abea-48d7ea5df596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d307d9f4-0d4d-420a-9224-d5d196713af5",
        "cursor": {
          "ref": "19a7282e-cba5-472b-a64b-d24843e70427",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9a6418e2-0345-4e6d-b6f9-6c81a8e2cb59"
        },
        "item": {
          "id": "d307d9f4-0d4d-420a-9224-d5d196713af5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "92b4499f-3119-42b2-98d2-6662812e98f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd77496b-d8fb-4d0d-a4bf-f344d62f68a7",
        "cursor": {
          "ref": "f6864683-1258-42b6-9f81-1c3b53d3b37d",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f2285420-85da-43ea-9915-545e03f442ee"
        },
        "item": {
          "id": "cd77496b-d8fb-4d0d-a4bf-f344d62f68a7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2d2de862-dc71-4e59-a0c5-21537e3d738a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d5f9b1-dec4-4060-a3af-661ee7a41acb",
        "cursor": {
          "ref": "3c1f5406-5655-4b6c-85ba-6e2218d8ee2d",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "bdfa5ed1-b3c2-4076-b726-08f360699d08"
        },
        "item": {
          "id": "a6d5f9b1-dec4-4060-a3af-661ee7a41acb",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "52d016f2-3064-46a8-bce6-a39f018df1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99238a31-a411-4aad-aeb4-c61716796896",
        "cursor": {
          "ref": "d238a6ee-08fe-4871-90ce-d3c597942903",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1fb59583-03f6-4d72-be56-01d008e2942f"
        },
        "item": {
          "id": "99238a31-a411-4aad-aeb4-c61716796896",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "95f2b1c4-d0c0-43d6-848e-e2e772b91eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0f7e82-4613-4d37-aae9-a561a12b382b",
        "cursor": {
          "ref": "23bc6b3e-7ac7-4880-a453-2aa453e8fd1f",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "35618ad3-9d4a-4265-bd89-29dde902fd38"
        },
        "item": {
          "id": "8c0f7e82-4613-4d37-aae9-a561a12b382b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c090c620-f01a-4422-997e-e2c679c6c14e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae0c913d-e330-4e08-b2f9-4a6541170040",
        "cursor": {
          "ref": "bd79ab59-37fe-45e9-b8fb-5ac9c956b92f",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "21969502-cd93-4219-bfe9-df5a65e14e04"
        },
        "item": {
          "id": "ae0c913d-e330-4e08-b2f9-4a6541170040",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "22600be8-cdb4-4657-9667-53e1b8f8fb23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87c7e56f-f506-4353-8e98-b361f5d7e373",
        "cursor": {
          "ref": "96f35a3b-be26-499c-a055-3e17ca7f227e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "65701ed9-f173-4495-b80b-1f62319c4bd2"
        },
        "item": {
          "id": "87c7e56f-f506-4353-8e98-b361f5d7e373",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f7b1ebd3-1ecf-4820-8de5-59bfbe121eb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f6dc99-7fc9-4567-8864-aee08db61e80",
        "cursor": {
          "ref": "e123c492-5faa-4a32-b121-c16f4f1ec293",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8cbb3aa8-d84e-4e5d-a009-7e2a12920fb7"
        },
        "item": {
          "id": "28f6dc99-7fc9-4567-8864-aee08db61e80",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c44209b9-7bb4-485f-991a-2a565fa0b092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e3077c-3bb6-41e6-8266-f27da05005c3",
        "cursor": {
          "ref": "ee96deb8-dc3e-4387-aee3-c458d7bbc7b3",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1b3074ef-9896-41f3-9ee2-3d74ae0c96d0"
        },
        "item": {
          "id": "e0e3077c-3bb6-41e6-8266-f27da05005c3",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "30dce8e9-a2e5-4db4-9a98-eedac99a819c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807a122d-0078-492c-b45f-e818964f04b4",
        "cursor": {
          "ref": "197c561e-5a6d-4b03-b77c-1407bbd6a92c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "fb23603d-2b79-452d-acf7-b6aee115ed65"
        },
        "item": {
          "id": "807a122d-0078-492c-b45f-e818964f04b4",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7611d592-e905-4527-bd6a-e6cc622d5738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d320bbd-0686-4272-ba7d-9f58e1aa1847",
        "cursor": {
          "ref": "a5dc5ea9-fefc-48a0-91c4-338fc3854d61",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "493bc7d5-565a-4d26-bebf-03a333bdee22"
        },
        "item": {
          "id": "5d320bbd-0686-4272-ba7d-9f58e1aa1847",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d37dead6-ac06-4de4-b721-d9f7dac28218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c81e8ba4-1a33-4ff7-9fb0-4ce0dde7ac82",
        "cursor": {
          "ref": "8552d8e6-78c5-47dd-8990-78626f9fef38",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1980337b-c806-40fd-a83c-afde82f9d790"
        },
        "item": {
          "id": "c81e8ba4-1a33-4ff7-9fb0-4ce0dde7ac82",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6ed77785-062b-4b2f-80d8-d9a25940bc15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a57b02-1e0d-4b40-b075-2fce8d29ad87",
        "cursor": {
          "ref": "983bb0a4-22ab-4a44-bef3-b45a555d7aa3",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "91abaf81-a5ba-499c-be3e-f3be7d70fa18"
        },
        "item": {
          "id": "41a57b02-1e0d-4b40-b075-2fce8d29ad87",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1b5f3e55-c280-47d9-94e4-fb0590dc622e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83fbf7b-8bca-4845-85d0-57876288becd",
        "cursor": {
          "ref": "42683a4d-4309-4203-b0d7-aa8b14f20eb6",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "63d53f3b-0f12-48ab-be22-af7b6e1a2952"
        },
        "item": {
          "id": "d83fbf7b-8bca-4845-85d0-57876288becd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d397050b-7e72-4e93-84c8-1734a2249a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a2e5923-2fe2-4a95-9d63-3d15683b2d5b",
        "cursor": {
          "ref": "6c2f52da-9096-45c3-87e8-b9d4c983e98f",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9f945a6a-7a07-4e0b-b278-8e13ad46e0ae"
        },
        "item": {
          "id": "7a2e5923-2fe2-4a95-9d63-3d15683b2d5b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "108e8c69-26f7-4baf-9547-d38f1c9d9799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574a0a42-c424-4245-89da-76824b4de2d1",
        "cursor": {
          "ref": "613b3a3b-4337-4b22-81ab-9166eee6f08f",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3a7ae2f4-e12b-49cb-82bc-5a3f94cbaed2"
        },
        "item": {
          "id": "574a0a42-c424-4245-89da-76824b4de2d1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0fb895cd-cc46-4870-abd1-18c637cb499e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a528480-ce42-4c64-8f00-8218844b760d",
        "cursor": {
          "ref": "ac49db05-349a-41ae-b4d4-987b2b67108b",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7e2ce341-5bc3-477b-9c4d-9e8ec2d6e552"
        },
        "item": {
          "id": "4a528480-ce42-4c64-8f00-8218844b760d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "20609f0c-3151-487b-83d3-282c57b5495d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508a1aae-a9f8-4a20-b14a-8c3d89e39ae3",
        "cursor": {
          "ref": "474cc88c-7ec7-47d6-b4bd-cfc54b77ceb2",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a53dbfed-4563-4247-8c08-833339ae9008"
        },
        "item": {
          "id": "508a1aae-a9f8-4a20-b14a-8c3d89e39ae3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6d68398e-5f86-4e5c-a1ce-457636ac967f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a734c3-76a8-4684-9cef-dd6d28c12d4e",
        "cursor": {
          "ref": "c3e6dda8-d527-408f-a588-f5f9f7806fd1",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "dedae1cf-4ccb-465e-afd3-d7bc1a6179f3"
        },
        "item": {
          "id": "82a734c3-76a8-4684-9cef-dd6d28c12d4e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "df3631a7-e84a-40f9-b4df-9459f546e8da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152ccd5d-b72c-45b2-b672-d367d8dab653",
        "cursor": {
          "ref": "5e77c200-a6b6-41aa-806c-2083b6f7c21f",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d7c63069-786f-4f11-89bf-9ea0e7eee9d1"
        },
        "item": {
          "id": "152ccd5d-b72c-45b2-b672-d367d8dab653",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f27202db-ad1f-4746-965c-9d80122c5998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c292eb-2408-4849-bcd5-fd69d5f3b5fb",
        "cursor": {
          "ref": "f2604efe-6a77-4938-b0c1-43a1f909a9a8",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "23776d15-d91b-4819-af83-7c9b92518374"
        },
        "item": {
          "id": "e1c292eb-2408-4849-bcd5-fd69d5f3b5fb",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d727b1aa-e2b6-464d-b83e-2e2e1f96bc9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26effd5e-5a3b-40a2-8d12-e59e55d06d60",
        "cursor": {
          "ref": "5cd5f77f-4bf0-4090-bf5e-dafb02dbac75",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5418ed13-8342-4124-b914-97237d6409a2"
        },
        "item": {
          "id": "26effd5e-5a3b-40a2-8d12-e59e55d06d60",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c25fddbd-9445-445c-ba0b-207bde1af7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f09c2001-a450-44d3-8c81-3ed987c60561",
        "cursor": {
          "ref": "90bd5cc4-0a66-47da-ac09-76a227d7d5de",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "2c5467b0-7c6b-4d22-9076-6bac87a947dd"
        },
        "item": {
          "id": "f09c2001-a450-44d3-8c81-3ed987c60561",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fb41f141-2917-4587-99ff-e51ccf82fea9",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf1d134-12e8-434b-989f-ed5023cb984c",
        "cursor": {
          "ref": "b8783f6d-1a28-4165-b85b-0f985a400ba5",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "437e3766-45f4-4c06-8a3e-7e82a5ba1067"
        },
        "item": {
          "id": "4cf1d134-12e8-434b-989f-ed5023cb984c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8eb5c6fb-f112-47d2-9f68-32083ef3e389",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b663d77e-660e-4a73-8382-5cf944e2e171",
        "cursor": {
          "ref": "a320786f-51da-4608-81ce-4f94a9113117",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e3157aa8-c0a2-4d4a-99f6-7d5cf238cafc"
        },
        "item": {
          "id": "b663d77e-660e-4a73-8382-5cf944e2e171",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d987cec3-66b8-4a73-8c47-3767ac0931ab",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4561efe6-7ab7-439e-8792-019a55b417ba",
        "cursor": {
          "ref": "f9582194-dcb9-4df6-9e58-3bfd127ff8a2",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "8ae1ea8e-2532-4927-8dad-39b3e27ebd42"
        },
        "item": {
          "id": "4561efe6-7ab7-439e-8792-019a55b417ba",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8e332a84-bd85-424a-9da5-bad9f33ba9f8",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e21c4fd-87d4-4d9b-880d-06efa1747be5",
        "cursor": {
          "ref": "a4869fd7-df56-4985-a408-9f98505082ef",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d14684bf-7d4e-48f6-acaa-1f13a4e13bf9"
        },
        "item": {
          "id": "3e21c4fd-87d4-4d9b-880d-06efa1747be5",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b96e242a-1717-4320-819d-bfbc2a90b7e2",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-26T00:35:39.679Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-26T00:35:39.679Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "80e9aa52-01df-4427-8920-0e09465638f3",
        "cursor": {
          "ref": "84815669-9321-4ac3-a814-863bc500cead",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "20381f4c-ddad-492b-911d-4f114b073d55"
        },
        "item": {
          "id": "80e9aa52-01df-4427-8920-0e09465638f3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "cdd23462-658d-456a-87a0-30ceaa986485",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9580245-c26e-4537-8aa9-50ff89e8edc4",
        "cursor": {
          "ref": "cc1bf14b-8412-42a6-b119-ca9ffe8a9545",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f7ff5ffd-cafd-4adf-bd24-cd31e1f7af38"
        },
        "item": {
          "id": "f9580245-c26e-4537-8aa9-50ff89e8edc4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7b2d89a8-65a9-4559-a501-23084b5cf6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8fd97c-02aa-49a1-a28c-ab66b45cf2cb",
        "cursor": {
          "ref": "93f6eed6-a0db-40f4-9db0-f87759849620",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7da5b18e-6f72-444e-a28d-2431ccf4fb7c"
        },
        "item": {
          "id": "fd8fd97c-02aa-49a1-a28c-ab66b45cf2cb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5c3b3931-08b7-424a-8422-06d5c5f1ce3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44ca0a9-5a84-43c2-8689-81f630af5dd8",
        "cursor": {
          "ref": "a5bdaa89-b720-4ac5-8315-528c4f82e413",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "687afd8b-c387-4aa1-bccf-a99d265629fd"
        },
        "item": {
          "id": "a44ca0a9-5a84-43c2-8689-81f630af5dd8",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "14ae7b6f-04af-4561-bfd6-cc278ccc9665",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43e5678c-df97-4559-810c-120e21da5cca",
        "cursor": {
          "ref": "a87231f1-907e-4d50-89db-d946f53c83e0",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "13809729-f7ac-40b0-896e-e37f7e4adc89"
        },
        "item": {
          "id": "43e5678c-df97-4559-810c-120e21da5cca",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "09e3b7aa-6add-454c-bd63-6e54e37953f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91e489a-fd53-48e7-bc1a-1178215949d5",
        "cursor": {
          "ref": "8011abad-c3f9-40b3-963e-6535f5a89ed3",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b2d44325-2d5e-4515-b39d-796c1cb9935b"
        },
        "item": {
          "id": "d91e489a-fd53-48e7-bc1a-1178215949d5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6d6ac8c9-fe3e-418c-a4dc-e4b2795b8fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b6926a-e12c-423e-be37-bd50db499059",
        "cursor": {
          "ref": "9d649255-af84-480e-b358-143fba80a480",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "46a12703-9f3f-4217-bd7a-9bd6270c6f26"
        },
        "item": {
          "id": "46b6926a-e12c-423e-be37-bd50db499059",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1f1d9908-c642-4cbd-951a-51e3fb7d21d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8416f51d-bb99-42ce-a7e0-bbd521cb41aa",
        "cursor": {
          "ref": "75e167ec-47aa-4b30-9961-754104b9b517",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "11213d5e-568e-4cbd-868f-7f92da26d7c7"
        },
        "item": {
          "id": "8416f51d-bb99-42ce-a7e0-bbd521cb41aa",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9588b35c-a548-4bb4-9350-cc41cadf3dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca46b804-23bc-43fd-88a9-2ff7ab981a00",
        "cursor": {
          "ref": "809dc83b-223b-4deb-8d13-da21602c1fba",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1d645d28-cab9-4784-bde0-0d15f29b4105"
        },
        "item": {
          "id": "ca46b804-23bc-43fd-88a9-2ff7ab981a00",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "49defcd3-a8ce-4c9a-838a-1c90e65e6aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6783ca6c-d472-43bb-8fa2-93bc9ef1201f",
        "cursor": {
          "ref": "50810a26-2a4f-47ff-bb33-227e4fa1413c",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ab28800b-48f9-4df5-a0a4-85edb03feb86"
        },
        "item": {
          "id": "6783ca6c-d472-43bb-8fa2-93bc9ef1201f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "0c207eab-d176-4f31-bd47-739527b25212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d76476-ea74-469d-bea3-1bafd30b7f80",
        "cursor": {
          "ref": "d09a7267-616f-405a-9c24-d993657a756e",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "43722808-0b1e-4312-b355-594a884bd35a"
        },
        "item": {
          "id": "d1d76476-ea74-469d-bea3-1bafd30b7f80",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "dc1ca446-f477-4a95-bfda-80b64e864d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f890e629-79b3-4a22-b29b-6d70986fca9b",
        "cursor": {
          "ref": "3ab5522c-da9e-4287-801d-277545c49df1",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "05b62158-df3e-4f8a-b090-d80eda5983dc"
        },
        "item": {
          "id": "f890e629-79b3-4a22-b29b-6d70986fca9b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "8c598e59-2745-4ec2-af6d-83c10da251e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b843fd50-b0b5-4b2e-9bbf-ab7046145d05",
        "cursor": {
          "ref": "f7cd760a-278d-4549-b07d-2c31ffe316ed",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8c9cce8c-7164-435c-b77a-014d369f8c85"
        },
        "item": {
          "id": "b843fd50-b0b5-4b2e-9bbf-ab7046145d05",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b114968f-0d42-48f6-ab18-c53fa9d82f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62683566-96b8-46b5-a590-b6d07e3f70da",
        "cursor": {
          "ref": "c3875dbb-c4af-43d4-a395-a2cec2c4ff17",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "98ab822b-1e46-4c67-a066-f98dd3e9a255"
        },
        "item": {
          "id": "62683566-96b8-46b5-a590-b6d07e3f70da",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8613c860-42f6-4599-a137-5ef8b6c5603d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "add43866-e6b7-4b2f-aa29-1023f3022a17",
        "cursor": {
          "ref": "acefaaee-876e-42ad-b050-9b06ac01f198",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c2a86103-c08b-4109-8e27-ce6c68643772"
        },
        "item": {
          "id": "add43866-e6b7-4b2f-aa29-1023f3022a17",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ae171f18-4cda-4479-8e32-1b1e5653000b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "bfd13949-e946-4eb7-a178-4f729e1bf1ae",
        "cursor": {
          "ref": "730a3a58-f37f-442d-8a5a-572869ead0ca",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9b7415e8-7f88-4d10-861d-2a1ce412904c"
        },
        "item": {
          "id": "bfd13949-e946-4eb7-a178-4f729e1bf1ae",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "78f44f75-ebb7-4f6b-9f58-cc9b37b35f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2662f56-c6fb-493c-bacb-b8fbe5935752",
        "cursor": {
          "ref": "1825560c-7d9c-4bfd-9f97-82a1831bae4e",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "75c45363-43d5-4efd-a9c2-e4e5da5c27bc"
        },
        "item": {
          "id": "d2662f56-c6fb-493c-bacb-b8fbe5935752",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e506aabd-be9c-4a8b-9f86-4ad010da883c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16094056-1ff1-40af-8783-6fe389a9d364",
        "cursor": {
          "ref": "a43fe61c-f260-47b5-a2bc-22700b4a9f09",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "01f6e63c-fd9d-4464-9c2f-00a56f30bba9"
        },
        "item": {
          "id": "16094056-1ff1-40af-8783-6fe389a9d364",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a837af73-c3ca-481d-8ad2-d64300e50563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b3f1ee-286f-410d-92c8-4c85d9f83191",
        "cursor": {
          "ref": "6bd78c10-07c3-45e7-b458-3409a42580ef",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "461aba14-a773-4ff7-adfb-346fcecd8a7f"
        },
        "item": {
          "id": "01b3f1ee-286f-410d-92c8-4c85d9f83191",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c03d3384-e0a7-48ed-80c7-689287f1ac48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cec7caa-de06-4051-96bb-fe48c39adace",
        "cursor": {
          "ref": "c15e9ccc-0ccd-4ce2-b7a3-719202a9bc58",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "29d4902c-2b95-4b07-a19e-715c0b747853"
        },
        "item": {
          "id": "8cec7caa-de06-4051-96bb-fe48c39adace",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1f980bca-8506-4f83-ad38-1becc1e9375e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4297abb2-1f71-4597-ba32-a149d6f0c1ae",
        "cursor": {
          "ref": "4b3cf4fc-f07f-45ce-aabf-81d0663e620d",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "0b91816b-2fa9-4e5f-9fdc-e3b9bea8d81e"
        },
        "item": {
          "id": "4297abb2-1f71-4597-ba32-a149d6f0c1ae",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b778fdca-321b-4808-afa2-2d81c590c596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f6b8bdd-a12d-430b-9e0f-7df66449be56",
        "cursor": {
          "ref": "7930f87c-5f55-4533-8821-00a6dabae264",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e13cc3da-8c82-42a7-94eb-bcf3cf98c1a3"
        },
        "item": {
          "id": "2f6b8bdd-a12d-430b-9e0f-7df66449be56",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "93a37cfd-c06c-4264-9957-39554e61e0d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8939c0-1aa1-496f-8163-dede7844257c",
        "cursor": {
          "ref": "a5754a8d-7c36-498e-a74a-0d906db60b64",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b8b7e47e-1c7b-438b-9456-d019bf2212b9"
        },
        "item": {
          "id": "ae8939c0-1aa1-496f-8163-dede7844257c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "189e465b-f705-4898-bf2d-3289db5520c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a281419-35ca-46f0-a299-04293ec09be1",
        "cursor": {
          "ref": "6a4d0c1e-02fb-4def-930e-e1f33cdb4fe5",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0ef233dd-79c2-4686-900c-6b6f9bc84405"
        },
        "item": {
          "id": "6a281419-35ca-46f0-a299-04293ec09be1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d469302b-bb84-41cb-acbb-df827e8a891a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf7720a-d480-4ca3-8018-abc07d264424",
        "cursor": {
          "ref": "876b7dfa-f183-4a28-9860-c9480a5f1cc5",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "17c63913-9321-49a6-a04d-be22b6fa12f8"
        },
        "item": {
          "id": "9bf7720a-d480-4ca3-8018-abc07d264424",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "0824866a-2a08-4379-80d4-8b37b69ec6e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a910d9d3-87e5-4460-b8db-96842c11c6be",
        "cursor": {
          "ref": "8c02f3d5-1f1e-4246-ad4c-6f0efb33ba6f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d9fb4805-facb-421b-a462-0fd687e1f38d"
        },
        "item": {
          "id": "a910d9d3-87e5-4460-b8db-96842c11c6be",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ca8c75be-c975-49d3-990a-294179ffb18a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151f2bde-b44a-4cdb-adfb-6807b6a3c61b",
        "cursor": {
          "ref": "f65e54b4-649b-4257-a321-bc1dd32b5d7f",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6951fbc7-4150-4bcf-9c8d-0b9dafdf1d10"
        },
        "item": {
          "id": "151f2bde-b44a-4cdb-adfb-6807b6a3c61b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "75282564-b067-46f5-ba16-39d0019db201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78916c90-1915-4cf0-90eb-26698da6d6bf",
        "cursor": {
          "ref": "07725841-6f3a-42fb-b9e6-0dedd5c19714",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "76c6e4a5-3339-467e-acf1-3fa6a284a348"
        },
        "item": {
          "id": "78916c90-1915-4cf0-90eb-26698da6d6bf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a76c1548-3d81-4fae-bc41-b9a551ffb966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eef31182-da63-463d-b8db-74db9e95193e",
        "cursor": {
          "ref": "c49b61b7-4781-43d4-8c5d-ed65501cc1a2",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7698afad-334f-4711-bb3e-1cb2cd18191f"
        },
        "item": {
          "id": "eef31182-da63-463d-b8db-74db9e95193e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b0eaf01b-d6e4-421a-ae41-62d8f8c77179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f446dd6e-b38d-432e-ae59-b069037a97c1",
        "cursor": {
          "ref": "63c60b2e-3433-4fb8-b1a0-20b943b68987",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "52cf4aa7-a31b-420a-ac11-9d8c2b9be5f4"
        },
        "item": {
          "id": "f446dd6e-b38d-432e-ae59-b069037a97c1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "215d1ece-da0f-4fa5-8368-8617aaad609e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c347c8-f4b5-45ed-8579-923d33db5b65",
        "cursor": {
          "ref": "8b21c9a5-8ade-4e72-a916-7e9b3aaf99b6",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d2490f5b-8ef3-4d24-abaf-6cf06b1c020d"
        },
        "item": {
          "id": "76c347c8-f4b5-45ed-8579-923d33db5b65",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "543795d7-06ba-4635-b126-95db3cfa49dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a41a50-7363-4fcf-a226-4d5a8d2fdc78",
        "cursor": {
          "ref": "1792a483-b717-42b3-8df6-93f8bf882e1a",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7d92fc86-5a80-43e5-a127-97573d437d0a"
        },
        "item": {
          "id": "16a41a50-7363-4fcf-a226-4d5a8d2fdc78",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c7440b4b-5a78-4009-82b5-9536c117c956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86760c75-61e9-42a5-8239-bce93bf1346b",
        "cursor": {
          "ref": "033c4349-9184-41c9-b4d7-a9d7ba36ad03",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0449dc8a-4f10-4628-aaf8-b413ba8a56fd"
        },
        "item": {
          "id": "86760c75-61e9-42a5-8239-bce93bf1346b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "88c8b631-b894-46dc-9d56-ccffacf417b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "ad4bee0b-f017-442f-b046-ad70fae6cb6b",
        "cursor": {
          "ref": "3cd26344-ef86-42b4-938d-ec8bd54e1108",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "bce7c823-a993-466c-b9dd-8cfd242b3a11"
        },
        "item": {
          "id": "ad4bee0b-f017-442f-b046-ad70fae6cb6b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9e294900-a7aa-4fe4-a708-b3a532d011c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dad5a5-188f-4f7d-9b62-26012dd1100f",
        "cursor": {
          "ref": "ad93751e-5bb7-4749-a051-53c6ecaec350",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d5481278-d613-45cb-978d-7c6049d85658"
        },
        "item": {
          "id": "61dad5a5-188f-4f7d-9b62-26012dd1100f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "29deece3-9e9c-4008-864d-5707fe3428a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c7f7f5-3628-4eb7-a27d-60917f3c6d9a",
        "cursor": {
          "ref": "8dfd5580-7c55-41c6-9b73-f37943e5cb42",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9c2a232a-cde7-4cab-a771-1d4575f159a8"
        },
        "item": {
          "id": "e7c7f7f5-3628-4eb7-a27d-60917f3c6d9a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dcfd8aa0-cde5-4cdf-ac26-5299e95821a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a724b399-a1e9-46b4-867e-7d13ed1346e1",
        "cursor": {
          "ref": "4e507929-cfef-48be-81ab-d2f704f89bdf",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "12e72f0d-897a-4d97-a9b3-4ca8663a40ea"
        },
        "item": {
          "id": "a724b399-a1e9-46b4-867e-7d13ed1346e1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f4edcc66-65a2-416e-b79f-fc8acc80ca8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1934bb3f-8c2f-4cd7-8ee7-d7e7e06655ee",
        "cursor": {
          "ref": "e5811a87-cf4c-4d5d-a37f-7207f098affd",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "481f3128-ad34-401a-a252-8af352bed75b"
        },
        "item": {
          "id": "1934bb3f-8c2f-4cd7-8ee7-d7e7e06655ee",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "96524c0d-cd29-4ad5-b85b-0746e20c5ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38bf9d9-27dc-4339-b876-cb272cca6d3d",
        "cursor": {
          "ref": "a94cd180-dcff-4114-a1f3-03d6cf0e3fa5",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1eae2626-5b2e-4e16-a306-29bf6589bbc1"
        },
        "item": {
          "id": "a38bf9d9-27dc-4339-b876-cb272cca6d3d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0a758ccc-9689-4bcb-87ad-ff0203c9da29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cdf1c1-383a-4301-b9be-a943ea37e3c1",
        "cursor": {
          "ref": "1ff80d36-5748-4564-a596-9002b604663d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "428aaaa9-dd1e-4129-8d31-6f9d0de1faea"
        },
        "item": {
          "id": "51cdf1c1-383a-4301-b9be-a943ea37e3c1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "403bfc6f-4de4-4525-8413-ab1883d6b540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa29723-62f1-47b8-896b-e08f79a30ca3",
        "cursor": {
          "ref": "2e93c368-d85b-415f-9d13-6f61421323a7",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "29955889-6726-468d-94c8-89e47202587f"
        },
        "item": {
          "id": "afa29723-62f1-47b8-896b-e08f79a30ca3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "13471816-7c31-48f4-9206-f26fbd23de76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66f05770-07c1-457b-bd57-610572fabafd",
        "cursor": {
          "ref": "745a84c3-1672-4a6b-8e61-aea1b1ae7862",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "393a3988-ba30-44a4-a9ff-7e650c19a1c9"
        },
        "item": {
          "id": "66f05770-07c1-457b-bd57-610572fabafd",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b4b65cc6-03a0-4a8c-b717-08970e316b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1cea61-79c0-4b45-a266-5a7d0afbfbb9",
        "cursor": {
          "ref": "27af7215-17ba-4631-81ae-4425bddd89a2",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "af6096ea-685c-419a-abe4-9a58b1870dc8"
        },
        "item": {
          "id": "9d1cea61-79c0-4b45-a266-5a7d0afbfbb9",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "808af6f8-d4c9-471b-923d-694693390a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3113f65-959f-466f-a0bf-6c85d85ade18",
        "cursor": {
          "ref": "c3f8c0b9-8e03-4de5-a5c8-99a31142ebba",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "0957ba50-9039-4a87-915d-60585adc62c8"
        },
        "item": {
          "id": "d3113f65-959f-466f-a0bf-6c85d85ade18",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6024c6ee-74c6-4771-8579-83f72ce717fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a27d6c-6775-42f8-a901-8e379fac8e50",
        "cursor": {
          "ref": "9028b86f-adf9-46b4-b951-cb88d0d7ab37",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a6639016-e897-4b42-aa2a-93d6a2c0d4f7"
        },
        "item": {
          "id": "53a27d6c-6775-42f8-a901-8e379fac8e50",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "72265bdd-39c7-4821-94e0-c822f8df6988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9da0b566-a549-414c-a31c-152337f681db",
        "cursor": {
          "ref": "195d950a-a8ec-4c22-8853-adc6e2d90f10",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "383abfea-3cb0-41c5-a313-ba24078dcafc"
        },
        "item": {
          "id": "9da0b566-a549-414c-a31c-152337f681db",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "3fd3ab42-07bc-4065-8531-8d2f531fff2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b2f6b8c-17f2-4700-86f9-4caff7a75b2e",
        "cursor": {
          "ref": "d8fd4c40-0f2d-4e75-9ddd-eddb7b2c10ec",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5eb49485-eb9d-4ad7-8a30-68d97e263ec4"
        },
        "item": {
          "id": "2b2f6b8c-17f2-4700-86f9-4caff7a75b2e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ac3ef7a0-998f-461f-9bf0-c567afe3f7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a1def9-da9b-4277-bfc5-833ace373a8a",
        "cursor": {
          "ref": "3b982f1c-4187-4ddf-a812-dd51c7497ec3",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "49ca0f4c-c52d-4657-b302-6e236bd057cb"
        },
        "item": {
          "id": "82a1def9-da9b-4277-bfc5-833ace373a8a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "50c5c16e-23b9-47c7-8c07-5a5106e6a2b2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e8af1a6f-8573-459b-98c6-a194246e281d",
        "cursor": {
          "ref": "e46cc302-c53b-4985-92c8-b73b9f0d0ef0",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "5c03b3c1-2f69-4ea4-96b5-dc664e3d2b6c"
        },
        "item": {
          "id": "e8af1a6f-8573-459b-98c6-a194246e281d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "91c6dfd9-df6a-4820-9d5a-d1a256cbe6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1348b4-58bd-4937-9f9b-9f4f1ff1f4b7",
        "cursor": {
          "ref": "a24ebdce-751d-4c70-88b7-c084a443fca8",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4b2389c8-aa3f-4512-a9b6-8d4c3e753efd"
        },
        "item": {
          "id": "8e1348b4-58bd-4937-9f9b-9f4f1ff1f4b7",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "50ef0b7f-a3ad-4a4f-8630-ebd342403746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f2f7cd7-8b4e-406b-809d-2df6f249d495",
        "cursor": {
          "ref": "fb6c9372-01d0-4636-a22e-25f87040efef",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8c8f7d76-d8a9-4405-bdac-36a62a597762"
        },
        "item": {
          "id": "9f2f7cd7-8b4e-406b-809d-2df6f249d495",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e7a79b21-ca78-4e7f-a001-f89e17a27c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02e8600-5cb7-4188-9288-f40fab17d08b",
        "cursor": {
          "ref": "824b0072-2e37-44ed-9010-63ec492265f3",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e4f78b9e-5eea-40b1-bf03-a94091e1209b"
        },
        "item": {
          "id": "f02e8600-5cb7-4188-9288-f40fab17d08b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "33b6c1a1-1beb-4d49-8b64-f304e72459fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed30e611-c3e3-4607-a006-a92a3e3e7735",
        "cursor": {
          "ref": "316b8777-016f-44a2-9dd7-458dd2209cc3",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6f333e21-84ae-4eda-a333-7547c67eb257"
        },
        "item": {
          "id": "ed30e611-c3e3-4607-a006-a92a3e3e7735",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "6106e11c-8e71-48e0-9a83-5c12c41acb7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1c0786-da07-49ff-ad39-332e3dcc265e",
        "cursor": {
          "ref": "9af12561-d8c2-4de6-915d-223bb513bed6",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fdc32ae2-6841-42b9-acc7-6e88072e6d59"
        },
        "item": {
          "id": "8a1c0786-da07-49ff-ad39-332e3dcc265e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "74ef70bc-9670-4433-9ed9-32bd2e3ef8d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea87691-2686-44e5-b429-0cbc60111552",
        "cursor": {
          "ref": "99a93911-ce32-411d-bb48-8c78817f3fd0",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "226f859b-827e-4951-aafc-8a692a8bc4bc"
        },
        "item": {
          "id": "cea87691-2686-44e5-b429-0cbc60111552",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5e22ab6d-6f02-4d9b-a471-a6b49764a0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff352646-aa13-4d46-adbd-4abe7c203f89",
        "cursor": {
          "ref": "843f89f3-49b3-4d75-b57e-6f6cadf09618",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "35eba469-bdd7-4ae5-bd76-baf5b083aa29"
        },
        "item": {
          "id": "ff352646-aa13-4d46-adbd-4abe7c203f89",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3342ae5c-c1f5-467c-8d4c-34df413996a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3db860f-0185-4fe7-8dbe-1cd0821f59fb",
        "cursor": {
          "ref": "3fccab22-0e92-4f9e-9ccd-d6e10798145f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "87a7e5e7-8666-4b25-98a9-72b5e22dcd33"
        },
        "item": {
          "id": "b3db860f-0185-4fe7-8dbe-1cd0821f59fb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0f5747b0-bfd8-4435-acaf-1be8653ca9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e26ce00-9491-4154-945e-6210eb9d9e56",
        "cursor": {
          "ref": "b9760afa-8521-4d85-901a-eee5fa7dd0bb",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8165fbba-5b16-405e-b1b2-63a8fbf00319"
        },
        "item": {
          "id": "9e26ce00-9491-4154-945e-6210eb9d9e56",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ea45f19c-2ef2-483d-b36d-817c7189dd6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2dd7ff-5929-4c9c-aa5b-e90536bfa642",
        "cursor": {
          "ref": "f7b58bde-a120-4c72-8f11-e522e75d766e",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "907f676a-d887-42cc-b87b-6e88d8a7c879"
        },
        "item": {
          "id": "2d2dd7ff-5929-4c9c-aa5b-e90536bfa642",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a5b97055-98f8-457d-8077-7109921e3124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d1c2921-ddd0-403d-bb26-e68db5f3d8f8",
        "cursor": {
          "ref": "f31ad86f-db95-43d9-b8f8-e0549d0c51aa",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1f29dff4-27b8-402c-846b-b2cf2b1f0a28"
        },
        "item": {
          "id": "7d1c2921-ddd0-403d-bb26-e68db5f3d8f8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c1c8b7c5-0fe2-4183-a099-9205f10b9514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075961e8-b345-4f40-bb26-304f52acfba6",
        "cursor": {
          "ref": "d57c3d6f-ca95-4d78-9179-d1b2fb49da4e",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1a16af22-0516-4cfd-b4cd-62c59e619d4c"
        },
        "item": {
          "id": "075961e8-b345-4f40-bb26-304f52acfba6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2d5063bb-a96e-4622-b798-b492deba4534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ce36581-ad50-4ab6-8f2b-6c3d046992c0",
        "cursor": {
          "ref": "b98db83c-56fa-4f41-b06d-9208276b7de2",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1bd24666-baf8-4154-a78e-95efed26b3e0"
        },
        "item": {
          "id": "3ce36581-ad50-4ab6-8f2b-6c3d046992c0",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8b02be66-3540-4909-bd78-471159d23209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5271e34-5219-4d60-b98c-a0d508fb9c08",
        "cursor": {
          "ref": "10ef219c-0cab-4c7e-af15-924a7aa8f898",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "c6583c2f-6937-4e94-a2ca-c8a15da42d03"
        },
        "item": {
          "id": "b5271e34-5219-4d60-b98c-a0d508fb9c08",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fcbb8cc0-8ce1-4094-8334-bc348cb6131b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de8172a-f261-461b-a5a8-f5fe2cbb182b",
        "cursor": {
          "ref": "8d7aa5e0-e7c5-43c1-9c26-1efc8e42b00d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "a6d45059-273b-4550-8b62-fa535d18ccde"
        },
        "item": {
          "id": "1de8172a-f261-461b-a5a8-f5fe2cbb182b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d47e079f-de9f-4a02-827c-37e84b467ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8298235b-09ed-48ee-bf2e-1ef6694b5fa8",
        "cursor": {
          "ref": "953ecd4a-de2f-465c-b61c-9488ca96f37b",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "41478d42-a2c3-4cac-8b1e-05aefbb1aeb9"
        },
        "item": {
          "id": "8298235b-09ed-48ee-bf2e-1ef6694b5fa8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e44e9d81-3505-4fd3-b451-77f117b9f9ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8707e59-79cc-464b-897f-547c203654c1",
        "cursor": {
          "ref": "01c37cdc-2f23-4ae8-b400-c21f53d8ece1",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1a973465-fde8-46cd-9085-f08853d8bf69"
        },
        "item": {
          "id": "e8707e59-79cc-464b-897f-547c203654c1",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3ca50252-97cd-4e2d-947e-11c2854426e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44f2eab9-4273-4639-9856-d6b69b2b1177",
        "cursor": {
          "ref": "c6c7f24f-ac18-461a-9066-1f5f1c04cbce",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "bbc79ad6-997c-4eaf-bc66-469e92d04def"
        },
        "item": {
          "id": "44f2eab9-4273-4639-9856-d6b69b2b1177",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "31bf609f-c802-4b98-8c89-18c5faa5188e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb345d1b-859b-4eb3-af2e-92b10a88ae06",
        "cursor": {
          "ref": "769005f8-5ea8-4c94-8a26-250c04a33f0b",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b423916c-fd6a-4e1b-ad9b-0714eeb80584"
        },
        "item": {
          "id": "bb345d1b-859b-4eb3-af2e-92b10a88ae06",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c6b130c5-1840-4864-b8aa-c554e9aa10f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c15e915-3b30-4b37-bf45-5c3a44e982da",
        "cursor": {
          "ref": "6f949de8-e3b6-4506-b5e4-2ee00ef14e6c",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "aaedac66-e86e-4ee9-87fb-58c73af9a132"
        },
        "item": {
          "id": "3c15e915-3b30-4b37-bf45-5c3a44e982da",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "732e9247-09e6-40a6-adaa-06f95c8039ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29a0dfb-8371-4c68-af73-2eb495e2c8c0",
        "cursor": {
          "ref": "6c65bd83-c7c4-475d-9f58-992b44de17e7",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "87a8d1f4-c4e4-4a51-9210-924434424be9"
        },
        "item": {
          "id": "e29a0dfb-8371-4c68-af73-2eb495e2c8c0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3da63887-f866-4230-9480-ea5f1ded0df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b064003-9187-4a2b-98ff-c8d260aa5e9d",
        "cursor": {
          "ref": "3ce6a327-3116-4695-a79e-d506fce3334c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4515e2ef-82cf-4823-992e-483a7660c01b"
        },
        "item": {
          "id": "2b064003-9187-4a2b-98ff-c8d260aa5e9d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b086d5e8-88d2-45da-9823-715db2f42028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23373002-117f-4fc1-94d6-3d09bf5a79a6",
        "cursor": {
          "ref": "ee446a80-b306-4ac2-a2b7-cb139fb860cf",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c3f7ff75-a85c-42c2-914e-f9e62f91b49d"
        },
        "item": {
          "id": "23373002-117f-4fc1-94d6-3d09bf5a79a6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "573c4708-d707-40d6-b809-c5e09e8e2200",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa22a514-516b-49c8-8351-1091bee31987",
        "cursor": {
          "ref": "8f218f6c-a211-4f51-b787-95aa61899660",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d290fb22-d46a-479f-b46c-97ca319fcba0"
        },
        "item": {
          "id": "aa22a514-516b-49c8-8351-1091bee31987",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "deffd8fd-030f-4cf6-b6d8-840b36811af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6856d294-97ad-4f1c-8a18-fd1d1a6f6d5c",
        "cursor": {
          "ref": "b94bae4f-3a1d-4936-98e7-39c114ca97f6",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fe91dbfa-db26-4d50-b526-4339e14074cb"
        },
        "item": {
          "id": "6856d294-97ad-4f1c-8a18-fd1d1a6f6d5c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4b8f39ae-2ed0-4c98-a7e0-24ec77854058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a767b7c6-5f78-488f-a20a-2253e164914e",
        "cursor": {
          "ref": "c92311a4-ce73-4659-8a3e-2430e57e483a",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "18ce6133-cf94-48ed-884f-c6883c81dbfa"
        },
        "item": {
          "id": "a767b7c6-5f78-488f-a20a-2253e164914e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "41d4f62c-0168-4f71-99c4-f183b755fedd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24b2ea1-2596-4f1f-816a-afa466c88500",
        "cursor": {
          "ref": "f49bffae-b012-4f45-9da1-1a03fe3e6df4",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "171230bd-6127-4677-b2a5-87393c09b652"
        },
        "item": {
          "id": "a24b2ea1-2596-4f1f-816a-afa466c88500",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8453312f-39f2-4a8e-ae19-84e4b4cf4540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0af8625-dadb-49ae-9284-5277abf30ab2",
        "cursor": {
          "ref": "205c6094-2b57-4f8b-92ca-a4adf9dbfdea",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5a55bd36-6e77-4386-a109-e404cd91a473"
        },
        "item": {
          "id": "f0af8625-dadb-49ae-9284-5277abf30ab2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "42574714-e632-4b85-a454-fb5f2d96bef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d585782-1bbf-41a4-af9b-63175a2b1344",
        "cursor": {
          "ref": "d9be273f-0c34-43c4-9f0b-454470a5d7ac",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "90b780a9-23fd-4964-a5e1-5d919dabf69e"
        },
        "item": {
          "id": "0d585782-1bbf-41a4-af9b-63175a2b1344",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "09e877c1-df36-4ec5-8a75-5426bf6c7d6d",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a090f31d-e2b5-4295-b94e-9f9331414817",
        "cursor": {
          "ref": "5ac2a19d-34c6-4ba0-b00b-2d137eb3d629",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7bd6aeb6-52de-4119-a6ce-c3072a507d65"
        },
        "item": {
          "id": "a090f31d-e2b5-4295-b94e-9f9331414817",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "81a8da3b-a77a-4ce4-8ef5-9da9579996b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5025abd-0259-40ce-85f5-572203f2328c",
        "cursor": {
          "ref": "62cb9236-af7c-4f1a-ac03-dd683e84939c",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e600876d-2295-4b24-920a-7eb025411649"
        },
        "item": {
          "id": "c5025abd-0259-40ce-85f5-572203f2328c",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "dce0bc7a-54ed-4a1d-862b-e7e79d12d338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27fe0faf-a4f3-4aac-a644-582f34b6d3a4",
        "cursor": {
          "ref": "bc87eedc-265f-42c8-abfd-b58f045d0201",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a25b3bfc-55ae-439e-a244-a81da4da0ab2"
        },
        "item": {
          "id": "27fe0faf-a4f3-4aac-a644-582f34b6d3a4",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4f1a109a-61cc-4173-b656-42cd44b49911",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3cb3b5c-ae0d-453d-81c2-bf2746237a3e",
        "cursor": {
          "ref": "79163dcf-0f7a-4f0e-83a3-e5e74503383b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7daaa761-d283-4185-93e3-49aba95b285e"
        },
        "item": {
          "id": "d3cb3b5c-ae0d-453d-81c2-bf2746237a3e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "ced67dc1-4a3d-4429-a47e-f702fc814da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5931328a-b94d-4af0-beec-0b999f126f25",
        "cursor": {
          "ref": "180a1946-d7de-4372-89f3-41021f7171d3",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ff691c1e-1a64-4498-97a8-ecb4c78f22a7"
        },
        "item": {
          "id": "5931328a-b94d-4af0-beec-0b999f126f25",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d4752759-58eb-4ac8-8b8c-2550fb8040f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1118eccd-acf6-4165-a371-f9fec6d71dc4",
        "cursor": {
          "ref": "b101dcb2-5916-4acc-947b-730b55c1ba3a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cbed3f10-e553-4534-8a5b-920109906900"
        },
        "item": {
          "id": "1118eccd-acf6-4165-a371-f9fec6d71dc4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1714bc50-5254-4238-a7fc-0b5e0c9cff4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f08d949-f4e0-424c-a892-39096c6cecc1",
        "cursor": {
          "ref": "6d733a91-e36e-4c2a-81c5-4f4e20190fc8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9cc48d96-31e3-468c-8418-7a2989988cb3"
        },
        "item": {
          "id": "5f08d949-f4e0-424c-a892-39096c6cecc1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "84510796-d50c-4fdd-9637-faa4701127b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e8b69b-2925-4683-ad75-d9a8207f5a50",
        "cursor": {
          "ref": "6b3f137f-7b4f-4444-bc9b-68acdacc7138",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "404dfb41-1a66-42fe-adac-2365dcdefd1c"
        },
        "item": {
          "id": "13e8b69b-2925-4683-ad75-d9a8207f5a50",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "d560dd12-c031-4b75-8f4b-c874efbec895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0903388e-d11f-4608-af1a-4e29e1197361",
        "cursor": {
          "ref": "5504221e-f282-4361-882c-82aa9ce3a857",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "cb971a26-b96d-409a-b987-c34d4ca8a377"
        },
        "item": {
          "id": "0903388e-d11f-4608-af1a-4e29e1197361",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "eb0cc61e-7bf4-4895-9211-005eaf0fe96e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "067222ff-265e-44f8-aa22-5d75b9320f30",
        "cursor": {
          "ref": "f3bc214a-cd84-41aa-ba24-6f773ce47b88",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d5e39399-935c-473b-9cae-693cee7d1484"
        },
        "item": {
          "id": "067222ff-265e-44f8-aa22-5d75b9320f30",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "eb4b366e-f530-4aca-8e2a-5cce88df294b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922f2e14-7698-4310-82a3-66cc9057c382",
        "cursor": {
          "ref": "b6b3c39f-5f2c-44ae-985e-27fee17ef0c4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "511f3c45-37f4-409b-a0bf-e202d1f46a43"
        },
        "item": {
          "id": "922f2e14-7698-4310-82a3-66cc9057c382",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "23da9ca9-946b-4c9b-bc3a-8215ea7ec4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828da7d8-218d-41c7-b1a7-f63a39fbe7d5",
        "cursor": {
          "ref": "8ad6e362-ba8e-4683-bb5f-770cce1bb421",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ba04c526-dcbf-482b-aeab-23ec0de9a775"
        },
        "item": {
          "id": "828da7d8-218d-41c7-b1a7-f63a39fbe7d5",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "8733298f-0b09-4e66-a2f2-fa1ca6244caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eb53ce-e130-45ed-91af-718e807f0215",
        "cursor": {
          "ref": "fee42913-297f-4082-8df3-6f27e16e2ef3",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d16a378f-9514-4c4e-ad44-9e04f3a17dc8"
        },
        "item": {
          "id": "69eb53ce-e130-45ed-91af-718e807f0215",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "08c7a355-3bbd-4aa5-b244-48b000d7e3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559f8fdb-ccd8-4b3d-97a1-e83f67312322",
        "cursor": {
          "ref": "18e7abcd-3712-4105-a24a-95c678cb7a62",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a1d2dfe2-3638-4b93-a862-82d20b1d61f2"
        },
        "item": {
          "id": "559f8fdb-ccd8-4b3d-97a1-e83f67312322",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ebb66f18-8cc4-46ca-876d-b80ef51d4bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644f5fff-68c8-4898-9286-955cd2a66c0b",
        "cursor": {
          "ref": "76f6793d-472c-45f4-a89f-c0202cd1e0d9",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d932d8c2-b50d-4992-94ff-36ace3f5749d"
        },
        "item": {
          "id": "644f5fff-68c8-4898-9286-955cd2a66c0b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "13133fc7-f655-4906-8cfd-b69879dba078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d45d8e-0215-46de-bfaf-e097aebdd1a3",
        "cursor": {
          "ref": "b3db7136-3eb5-481a-809f-43f987e80308",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0c34312b-bc7a-4851-9626-f345f441ebd9"
        },
        "item": {
          "id": "15d45d8e-0215-46de-bfaf-e097aebdd1a3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "28d8c0ea-3e51-4657-a912-0f2de4043323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ec7319e-b5ca-4d8d-a73b-48327e3c2a76",
        "cursor": {
          "ref": "c800829b-2a99-4d12-9d18-542503077765",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6a1a6838-20f6-42c9-995a-b66123c704c6"
        },
        "item": {
          "id": "3ec7319e-b5ca-4d8d-a73b-48327e3c2a76",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9d156941-a7c9-41fb-bc25-387cfc1f4efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cc8745-483a-4c45-b5ce-52284b3a42cd",
        "cursor": {
          "ref": "de20ab9a-1fb7-4ea5-a8c5-d00e6c485900",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c450ed15-e886-4c47-b1b4-64fb03ef6cff"
        },
        "item": {
          "id": "03cc8745-483a-4c45-b5ce-52284b3a42cd",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4d87e17a-ef19-4276-b2fe-b67d4a00b297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1daa9a03-1d56-454f-90aa-c7ac8e2d6a81",
        "cursor": {
          "ref": "9e899e95-715a-4df3-a6d0-bb700422a59a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "345a6cff-9843-4472-b677-5f95cfc70235"
        },
        "item": {
          "id": "1daa9a03-1d56-454f-90aa-c7ac8e2d6a81",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dd52a55b-1b36-4496-ab1e-2c21b9590536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5df9d2e0-1c5b-41ad-b717-dade87fb623c",
        "cursor": {
          "ref": "c2633f96-f17c-4d20-89e4-c68b178ed75a",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2eb7ad06-ad75-42b7-9765-49948400e335"
        },
        "item": {
          "id": "5df9d2e0-1c5b-41ad-b717-dade87fb623c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9a616149-677a-497a-8312-0b3ba53a86d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3db13b-862e-4eb2-84dc-e7d07fdb6521",
        "cursor": {
          "ref": "11930003-fb4f-41ce-81bf-1aa18afcbcd2",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "57f7e78b-83ff-486e-aea9-cd737a5522f9"
        },
        "item": {
          "id": "bc3db13b-862e-4eb2-84dc-e7d07fdb6521",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "934fa800-750f-46ca-9ca8-cdaeefc9490b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeaf127-24d0-422e-aea1-b96ca4db8c2f",
        "cursor": {
          "ref": "88e4ea4a-dda5-4414-ae54-7291734246ee",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "57d675de-eec4-4b95-a906-bc25a9c42510"
        },
        "item": {
          "id": "aeeaf127-24d0-422e-aea1-b96ca4db8c2f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "85c9edd2-4bff-4054-9c3f-b6cc8e18f997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105d6ed5-626f-497a-85a7-2a059f27b767",
        "cursor": {
          "ref": "5f420b35-40f9-4d9c-9c0c-36154f672035",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "14adbf15-6baf-4bb2-af0b-cab4755cdba0"
        },
        "item": {
          "id": "105d6ed5-626f-497a-85a7-2a059f27b767",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "faa4f0d3-3486-4a91-8ae8-c6ac9f738bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def2775e-ccfa-4854-85ff-26003b30d9f7",
        "cursor": {
          "ref": "415168f3-6823-49c8-a6f1-9c1d3bcf1ae6",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b135844c-e80f-4fb6-9b1c-2affeff2711e"
        },
        "item": {
          "id": "def2775e-ccfa-4854-85ff-26003b30d9f7",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0af355d7-bb5a-4fc3-b83a-e4ba2687131b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437db3b2-9c8a-4fa2-9d42-0e9bb03acc8a",
        "cursor": {
          "ref": "d963d274-fce8-4164-b792-67a7489b4c97",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d51d67ab-82c4-4bda-a106-cb7c6b5648d4"
        },
        "item": {
          "id": "437db3b2-9c8a-4fa2-9d42-0e9bb03acc8a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9674cce3-655c-414e-8d26-7c71dee8af09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b9cda6-9bff-41c3-b232-0a086b5a82ee",
        "cursor": {
          "ref": "42068c83-66b2-43ac-a9fe-d56c90005aab",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1736920b-178f-4359-bdf4-93c9d25ab49c"
        },
        "item": {
          "id": "e2b9cda6-9bff-41c3-b232-0a086b5a82ee",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c7943c25-9f84-4cba-ac60-bb98b146a23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91c358f-bc47-4549-8192-38afc47fab83",
        "cursor": {
          "ref": "177a4091-f319-4d9a-ac2b-105aae360492",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "3b6fdca3-9de5-4f5d-b9a7-4e1dcec1a25e"
        },
        "item": {
          "id": "f91c358f-bc47-4549-8192-38afc47fab83",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1771b769-b875-40db-9797-651f11b678ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ada5b6-89b6-4730-9840-8c7a1ee3b1ff",
        "cursor": {
          "ref": "a471db8e-8d28-443e-973d-95575069d119",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4faa4f95-a340-4fce-a392-cbf50a66bb1f"
        },
        "item": {
          "id": "43ada5b6-89b6-4730-9840-8c7a1ee3b1ff",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "6cbd9c29-411e-4c4a-b83a-bee241f9ee1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3afc39-5508-407d-bae5-c2696e0f82ae",
        "cursor": {
          "ref": "e390b863-17b0-4528-bdbf-87477c35dfb1",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "04f0dcf1-20e8-4d8d-841e-2dddcee0a175"
        },
        "item": {
          "id": "dc3afc39-5508-407d-bae5-c2696e0f82ae",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "905d8af1-554d-4a89-815d-ca041a9a1d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3e9cd5c-c1d3-4843-bdff-6a56d2e2ed9d",
        "cursor": {
          "ref": "dce3a120-883f-4a3d-8c61-ce684f451657",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3c6abf50-af91-4a53-ab25-e1fb11474288"
        },
        "item": {
          "id": "a3e9cd5c-c1d3-4843-bdff-6a56d2e2ed9d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5fbcfb79-fd7b-406b-8474-6f37eb5d33db",
          "status": "OK",
          "code": 200,
          "responseTime": 149,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6b3820a9-ae6f-4941-b762-83f7e230d8b7",
        "cursor": {
          "ref": "6d72419d-4233-49ff-bf89-3cea85b7f6ff",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "293a59b5-d31b-4cb0-9312-55c9f388bbe9"
        },
        "item": {
          "id": "6b3820a9-ae6f-4941-b762-83f7e230d8b7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4a4291e2-6c0f-4f8c-b287-a99d4344eb01",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "46f7fa1b-0f64-4384-ba95-0fe0f7a4cdc7",
        "cursor": {
          "ref": "a023f829-4c79-4996-b378-dba95afd175d",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a029a330-05d4-4d1b-9d2e-6bad92d0989b"
        },
        "item": {
          "id": "46f7fa1b-0f64-4384-ba95-0fe0f7a4cdc7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5da096b2-4b8c-47d9-9ee1-9bb167a18978",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1abb6b9c-5775-4383-bb7f-4e5a016cbd22",
        "cursor": {
          "ref": "a43df88b-33a7-48ed-bf4a-53903dc72d45",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3c59d7b8-1288-408f-9d33-2f4a4ba861c5"
        },
        "item": {
          "id": "1abb6b9c-5775-4383-bb7f-4e5a016cbd22",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "eee03b70-d945-4737-8e8e-dcc1c829ab59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6de028d-3880-43a3-a302-46bb90fc52db",
        "cursor": {
          "ref": "002967c7-cb6c-4394-b4a5-0e01fd8a04b5",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d7499a37-5772-46eb-b98c-263d8139f46b"
        },
        "item": {
          "id": "f6de028d-3880-43a3-a302-46bb90fc52db",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5e63da1e-183a-4dfe-9986-01385b1694d3",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "c12460bd-8bc6-439c-b47c-c8d2d7bd6a0b",
        "cursor": {
          "ref": "8249f041-73d3-4401-825e-68f11f385aea",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "26b0703f-119e-49f1-ab26-9998eca5a457"
        },
        "item": {
          "id": "c12460bd-8bc6-439c-b47c-c8d2d7bd6a0b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "af1c45c7-6703-4eda-86f2-d0d2998481f7",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "d27cb209-715c-4b34-a22c-1f67d054eb1d",
        "cursor": {
          "ref": "ecff8110-79e2-4081-8d62-a3ff0d306914",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "17e0c0d1-93ff-455d-8239-24a2a060e8ea"
        },
        "item": {
          "id": "d27cb209-715c-4b34-a22c-1f67d054eb1d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f89c2862-7230-46d7-9a06-3d456eae4aa5",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "df50b626-9790-4427-b017-c0e0c2963c83",
        "cursor": {
          "ref": "b0f635f1-e4f4-4fee-aaa6-e8971641b226",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "78643d2b-6fe3-4643-bfb7-8d8b66999a80"
        },
        "item": {
          "id": "df50b626-9790-4427-b017-c0e0c2963c83",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7c9298ab-d6af-4bc3-a107-8be93742787e",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "39d65a2f-c87d-44d0-b942-d83ba77e2e63",
        "cursor": {
          "ref": "4a9108c4-5b2a-48e0-aef3-98376771eb14",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2c530943-31c6-4ffa-a26a-1c43a2da68e0"
        },
        "item": {
          "id": "39d65a2f-c87d-44d0-b942-d83ba77e2e63",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e941cfd1-3656-41f1-9a05-5b37d10e87d1",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "3ddd24d6-d141-4edc-8314-bf29a8726993",
        "cursor": {
          "ref": "e4ba6e31-69bc-42a0-a07d-f11b632d6e7a",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4cb09aec-2d06-4fe1-ba0b-747803f9d18f"
        },
        "item": {
          "id": "3ddd24d6-d141-4edc-8314-bf29a8726993",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4017931a-4ae4-45e8-b8cc-8d5941589c89",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "5ecc440a-9a47-486e-912e-441fad1c8044",
        "cursor": {
          "ref": "717d4b2a-d70c-4c55-a859-baa4d02447db",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cd0f8f33-88fa-4113-9ee0-636733e8463c"
        },
        "item": {
          "id": "5ecc440a-9a47-486e-912e-441fad1c8044",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "330cc9d9-1d6e-4af8-9602-5e6c891d1323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df87c2e-2b90-4e04-84a1-3bda3fe0d9d6",
        "cursor": {
          "ref": "c28db89f-2a9e-4034-b71c-6fb287162cda",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f5dc0f40-cbe4-48b4-accd-ddb8a7f6c8ed"
        },
        "item": {
          "id": "0df87c2e-2b90-4e04-84a1-3bda3fe0d9d6",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "12e75049-40d6-4515-887d-44abe508a090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6043fc3-38c4-4967-a5e4-927df1835321",
        "cursor": {
          "ref": "5c96ace9-6280-48ac-9bb6-1a27268d67b6",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c0c07995-0382-48a6-ae9f-8acf02f7bfb1"
        },
        "item": {
          "id": "f6043fc3-38c4-4967-a5e4-927df1835321",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e664d7e2-54c3-4ab3-9770-e82608f46af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d199a251-437c-42e5-a4e0-3232cf860fdb",
        "cursor": {
          "ref": "26ad9013-932d-4c4c-9f36-ce7ec58c1234",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e5505612-047a-444a-95f0-220cd145da07"
        },
        "item": {
          "id": "d199a251-437c-42e5-a4e0-3232cf860fdb",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e94f1f40-d8fa-4ff1-88e1-7837269e0456",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9a9dcd-0d3b-4a40-a3ed-9c26c54f1893",
        "cursor": {
          "ref": "2b0978f0-0bfb-48f7-9693-32e1bf023553",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "4599e638-9c2a-456e-9266-eb7fe3cf294a"
        },
        "item": {
          "id": "bf9a9dcd-0d3b-4a40-a3ed-9c26c54f1893",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7f742e63-a93a-43e6-8b28-14672d48acd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a97fc1-cded-421a-96a3-598fc27b3a25",
        "cursor": {
          "ref": "32f89cae-17bf-4b28-8df0-a509f851a7aa",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "b2b02788-0e6f-489e-8336-11aaadb28a7b"
        },
        "item": {
          "id": "38a97fc1-cded-421a-96a3-598fc27b3a25",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "17fb3f5d-744c-4b24-84d6-a7871c60e488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86c1f61-224f-4bd3-887d-93d9f7344c4d",
        "cursor": {
          "ref": "c8e25668-aacf-4cfa-8dd4-cbd7020da387",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "546fd013-16f4-41f4-ba17-5212a0850f44"
        },
        "item": {
          "id": "b86c1f61-224f-4bd3-887d-93d9f7344c4d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "569e38af-1a56-4eb9-86e7-9f404c871187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faa166a-311b-4816-bbb2-dafd950db784",
        "cursor": {
          "ref": "3f251952-668b-4a49-b9e0-22456ceb52d3",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f96ba88f-763f-4ed2-8dc4-550e8dcf38ae"
        },
        "item": {
          "id": "1faa166a-311b-4816-bbb2-dafd950db784",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5cdb8212-400b-45d1-8cde-b483a590a36a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d3dabe-7658-498e-b560-6239c4423366",
        "cursor": {
          "ref": "8b32265f-c5f2-4720-b154-e71d21c0c252",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "11628ce1-fd58-4a40-a2f3-d346c410b4fd"
        },
        "item": {
          "id": "10d3dabe-7658-498e-b560-6239c4423366",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b9f78a9a-0723-4fb1-bdb3-eaeb80e49f6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f17539c-705a-47f4-9004-fdbb4fa75750",
        "cursor": {
          "ref": "a805e4cb-6ef1-4ec0-8626-6ff51520856a",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "16df6f8f-6d84-4727-80dd-19e49e1621c6"
        },
        "item": {
          "id": "0f17539c-705a-47f4-9004-fdbb4fa75750",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8615c34b-41fe-4020-b2ff-e1c7149fdf4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63604cda-5441-437e-92ec-c20145e10f61",
        "cursor": {
          "ref": "4ac738c1-e3e7-4538-87e3-1b8ee4bdccb8",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ea6543d7-2549-41bd-803a-0bd9a2e29f55"
        },
        "item": {
          "id": "63604cda-5441-437e-92ec-c20145e10f61",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5a188f9d-6e58-4f35-aec1-afffb0672898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d85d22c-70f7-429c-ba09-e9ab1a319925",
        "cursor": {
          "ref": "93b60e46-ad1c-4592-a210-bda01df6ee2c",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "25e779bd-b750-4572-9264-c34b8aea19ec"
        },
        "item": {
          "id": "7d85d22c-70f7-429c-ba09-e9ab1a319925",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "42cc66f5-947c-4868-91dd-1125a88fa8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a662f989-a313-4c0a-97c4-95b4198d4d4b",
        "cursor": {
          "ref": "fcefd740-6b4a-4bb0-acf0-b69ae35542a4",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "40eef0bb-1f6d-49e5-b5c2-1909ee7147e9"
        },
        "item": {
          "id": "a662f989-a313-4c0a-97c4-95b4198d4d4b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1e41cbb6-3da8-49e8-9b24-8881c77edf20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1977ee71-a27a-49cd-ba47-8b8017962f45",
        "cursor": {
          "ref": "46a65178-1e9e-4d00-9923-166ef14b3d00",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "95f20640-ecb6-40a2-9217-46bf75f13bf4"
        },
        "item": {
          "id": "1977ee71-a27a-49cd-ba47-8b8017962f45",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a228f4cd-600b-473f-a640-3978b0fe1db9",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "8d46784c-dc83-48b2-ae75-9e588daac53b",
        "cursor": {
          "ref": "4e058408-f4bc-4a88-81a0-9cafd37b171d",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "001966f5-0996-4340-8210-2cd43d18dd7f"
        },
        "item": {
          "id": "8d46784c-dc83-48b2-ae75-9e588daac53b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7737ddba-3e02-4c2a-b169-b2e3c6e40ca5",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d41b445e-4958-4244-bf7c-7faebca0df04",
        "cursor": {
          "ref": "ac89b532-ad98-4ba7-b144-25765ff9dfed",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c9917ba9-94e5-4714-b596-b1e04db9ab92"
        },
        "item": {
          "id": "d41b445e-4958-4244-bf7c-7faebca0df04",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "edc321d7-c704-4c1b-b7ae-12103f2ccd26",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d48bbff6-329c-48c3-82c6-467d0542b13b",
        "cursor": {
          "ref": "2dde6ede-3f93-484b-bd70-306bc3d8887a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1e4e5b25-869a-4371-add2-9fe2d8e6b476"
        },
        "item": {
          "id": "d48bbff6-329c-48c3-82c6-467d0542b13b",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "41dd1f94-780f-46a6-aaa7-5dadc16a1e60",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4fa53cf1-346c-4db7-b992-d9ae46703e42",
        "cursor": {
          "ref": "d36e25af-e113-4118-bf8a-5f2f2814da8e",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8ebe18df-0942-4f96-b01d-95f3a0b3fd2f"
        },
        "item": {
          "id": "4fa53cf1-346c-4db7-b992-d9ae46703e42",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f5e885c7-15c1-4b84-baab-bccbfb869b84",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "88b053c5-ff14-411a-a2d8-3b4987e82bb8",
        "cursor": {
          "ref": "ef8a1f2b-2459-485e-b20c-f814dcd4115e",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8a2bf460-660d-4469-bbc9-9615a2ad679a"
        },
        "item": {
          "id": "88b053c5-ff14-411a-a2d8-3b4987e82bb8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7d0975d9-56a1-4f91-9231-ae9338217cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d72750b-8fba-4829-9d72-12809fa36902",
        "cursor": {
          "ref": "50c3e3e3-5eb1-496e-aded-391c83f227ff",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d4f6b4bb-9030-48ec-99ee-d94fa689b803"
        },
        "item": {
          "id": "7d72750b-8fba-4829-9d72-12809fa36902",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "51643385-7e38-4949-8bc8-a202ac3a90ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b5fc7a-a40e-43df-8b7b-858533501119",
        "cursor": {
          "ref": "e8c12877-b1be-4644-a16e-9c03b66800ae",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b8a8f891-9228-4bc7-9385-dee348c6b49d"
        },
        "item": {
          "id": "b2b5fc7a-a40e-43df-8b7b-858533501119",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4361dd58-23a8-467c-b41c-f9ee19ce5c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f229846-a9f8-4a2c-ad60-290afc744894",
        "cursor": {
          "ref": "c9fb5300-dc51-4148-b348-be87a69273bf",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1718530b-fb1c-4849-a75d-2edbb1e9c055"
        },
        "item": {
          "id": "4f229846-a9f8-4a2c-ad60-290afc744894",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ef2eaba9-590d-4043-95ed-9ba35b4950f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5244eb-9116-417c-90cf-8853cc6e4ee9",
        "cursor": {
          "ref": "4d1c4537-d548-466d-a54d-1aa192958464",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "61ad7101-d300-4b6f-9437-72a08f16ebee"
        },
        "item": {
          "id": "bc5244eb-9116-417c-90cf-8853cc6e4ee9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e5ad4fe2-c7a6-4088-844f-7eacdb804f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d4b598-c2ed-4e3f-9af0-3040f1a2719b",
        "cursor": {
          "ref": "ce8197cc-4f71-43cf-8818-6edea42c8944",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bd61e7c4-75b7-41aa-913d-02044ba1537f"
        },
        "item": {
          "id": "56d4b598-c2ed-4e3f-9af0-3040f1a2719b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "23d73b6e-0424-4457-937c-f25861b4e51b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9a4302-2a0f-4a17-ac96-d9c4ec2b0d7d",
        "cursor": {
          "ref": "1ceb9a05-effa-403d-a5a8-611ba4e98ca7",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "861fde4a-a7c8-4e2a-b393-eb79c8c663e2"
        },
        "item": {
          "id": "ee9a4302-2a0f-4a17-ac96-d9c4ec2b0d7d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "93ad3b60-d0f9-4df1-b917-a6e0004cf8ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b339a9a9-a72f-4798-9ebb-983e525e4acf",
        "cursor": {
          "ref": "6daab0af-2f4a-4e6a-8183-ed1d22e1b619",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "13367705-417f-449e-8270-3407dcfb0c31"
        },
        "item": {
          "id": "b339a9a9-a72f-4798-9ebb-983e525e4acf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "21c59212-0ab3-4ea6-9c01-643aea333e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0bc5e2d-65f8-465e-bdd5-ee7aca364b6a",
        "cursor": {
          "ref": "71c47a2c-80bb-4d6a-88a5-beea5a80774f",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "aaf41ef2-046e-4f15-af4e-60badb587128"
        },
        "item": {
          "id": "a0bc5e2d-65f8-465e-bdd5-ee7aca364b6a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0d57bc47-a53f-4ca2-b098-dfb91692bd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270f4ac0-6145-4b13-8e9d-07bf2b9f8cae",
        "cursor": {
          "ref": "8eb55d52-97d4-43d7-bc62-8cfaaffa63ca",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d6df6b54-81f5-4753-82d2-ecec178d8b73"
        },
        "item": {
          "id": "270f4ac0-6145-4b13-8e9d-07bf2b9f8cae",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8a6ef897-517b-453b-9aa0-48e5737cf983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5f9f9de-ff96-4c29-90ab-577755d9242f",
        "cursor": {
          "ref": "b52a3553-047f-4442-8433-616f297c43e2",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "08f420c9-21d2-4ff3-8102-f86d8bfff135"
        },
        "item": {
          "id": "f5f9f9de-ff96-4c29-90ab-577755d9242f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2ae8fe7a-dc03-436f-ba26-337ae8788078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20dd9de-b624-415a-ae7f-52b1d42a1459",
        "cursor": {
          "ref": "d9c6deed-08af-495b-88b9-7548c5dc775b",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "9769502a-47eb-4744-beee-9fccfd7c26ca"
        },
        "item": {
          "id": "c20dd9de-b624-415a-ae7f-52b1d42a1459",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "2dc3843d-cc4c-460f-abc4-21390aafc224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd4f5015-6dcd-43ca-8bbf-30fc3dba3f44",
        "cursor": {
          "ref": "8bad8d50-8075-4a37-b71f-c661c1a0c00c",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "7767fdcb-970e-4557-a6c2-785249749b41"
        },
        "item": {
          "id": "fd4f5015-6dcd-43ca-8bbf-30fc3dba3f44",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0ae6fe8f-1a21-4314-9843-a0eff8e74899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "918fb9e3-9483-438a-8e72-a29627d4245b",
        "cursor": {
          "ref": "cd756e83-eae3-4ed0-9416-d5bea443cff6",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8cdec1d3-ec6f-476b-a009-ce006ab9f986"
        },
        "item": {
          "id": "918fb9e3-9483-438a-8e72-a29627d4245b",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "5391d6e5-081d-4c65-897e-13c0bc6da4de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4bfaa6-aa78-4776-bbfa-247ecda1e8f4",
        "cursor": {
          "ref": "5219ec1a-3854-4b94-b389-6e7bfdfe8eeb",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0e605bda-8bf6-4193-afdc-67e2ff84e2f8"
        },
        "item": {
          "id": "0a4bfaa6-aa78-4776-bbfa-247ecda1e8f4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f087f315-2f6c-4316-b76e-61f027a610c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca97b4a-bf19-4751-8b51-bc7b2d5b8118",
        "cursor": {
          "ref": "327900f6-4fcf-468e-ac04-cfa3d507e44a",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "e38b5c87-de73-4ed2-bc16-569b53192d9a"
        },
        "item": {
          "id": "bca97b4a-bf19-4751-8b51-bc7b2d5b8118",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b0b75442-7bf0-4205-9d06-ab1e5313c217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb56009e-723f-441c-b619-4e94732ef41d",
        "cursor": {
          "ref": "7704d829-e5f2-4855-bd06-818a3d00dc9a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e228400d-224d-4744-92da-002aff9d2509"
        },
        "item": {
          "id": "cb56009e-723f-441c-b619-4e94732ef41d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d7c9f0f8-151e-40ba-bc1c-92a95b80b262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af54e71a-fc57-4ef5-9108-b4861fb2b1d3",
        "cursor": {
          "ref": "157050a3-f72c-4aa7-895c-f46d9c9aa397",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5f7f8f72-3489-4e45-8212-c83eb6686efd"
        },
        "item": {
          "id": "af54e71a-fc57-4ef5-9108-b4861fb2b1d3",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7fc1f21f-c500-45e0-8500-a8f5edad45d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230128b0-2b52-4bb3-8b3b-12173ddbb44e",
        "cursor": {
          "ref": "eccf3f44-7d51-4e7d-9b41-4c3b858a9a6f",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "df7b6e62-d1cb-4146-98a6-0ad1ec08ae45"
        },
        "item": {
          "id": "230128b0-2b52-4bb3-8b3b-12173ddbb44e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "956a31d7-cb2b-4b19-8d1a-e8b9afc922df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f8eceaf-3196-43be-9579-500ab68c4da3",
        "cursor": {
          "ref": "83692dd3-73b2-4a03-91df-306ae18bd59b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "71874431-40c1-418e-8b70-3c3b3150cdd0"
        },
        "item": {
          "id": "2f8eceaf-3196-43be-9579-500ab68c4da3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6359dba2-23cf-46cb-8f27-a985a0521a42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4ee404-0664-4ada-bdf4-c18993beba79",
        "cursor": {
          "ref": "119829c4-0da1-41bf-b562-77411120c40c",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "719c7b09-6576-48a3-a769-97fb929f9b20"
        },
        "item": {
          "id": "ba4ee404-0664-4ada-bdf4-c18993beba79",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cb6dd216-f922-4e29-aab8-58e7f4c1aef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46e02b7-3706-459d-81c9-8e6e8d609afc",
        "cursor": {
          "ref": "26210eb5-7871-429f-8027-9b4e149a8f73",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "ae41e078-88c2-44ad-a75c-b0e1345ebe40"
        },
        "item": {
          "id": "d46e02b7-3706-459d-81c9-8e6e8d609afc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fbe17a01-aaad-4917-9fae-ba694a1388d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc34d81e-0b9c-49b5-b20b-18547045b04f",
        "cursor": {
          "ref": "57c6136a-1370-4880-8285-e5d015920e8d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a516b634-0716-4969-a809-98e45db7deb7"
        },
        "item": {
          "id": "bc34d81e-0b9c-49b5-b20b-18547045b04f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "39b689c8-b629-46c8-a417-6cc8cadd902f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66a2bc5-60bb-4f55-b1fc-9b87889a4f51",
        "cursor": {
          "ref": "e94a97e0-e04d-4199-a4f8-03c61e66e19c",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "213c2c55-56f4-4963-b4a7-6e7e56e32760"
        },
        "item": {
          "id": "e66a2bc5-60bb-4f55-b1fc-9b87889a4f51",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "03d927fc-5137-4e24-9aad-1e835d21911d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d95bb6-cae4-462c-b966-92cd8d6efe0d",
        "cursor": {
          "ref": "19a2df42-c57f-4c32-bf68-36f4cc902ed2",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "86cfd4a9-ca41-43b2-9bdd-2b5f329684fa"
        },
        "item": {
          "id": "38d95bb6-cae4-462c-b966-92cd8d6efe0d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a518427f-43b7-4801-ac52-bc302935035d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89b0d3dd-9715-4595-93ea-ad7d0fdd55e3",
        "cursor": {
          "ref": "ab739eff-b985-4ddb-9f89-24b5c0cde522",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "f8580acc-bed1-48b5-912a-30f94e9b8baf"
        },
        "item": {
          "id": "89b0d3dd-9715-4595-93ea-ad7d0fdd55e3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "219f3984-f79d-4f42-9c74-4a6fcb4fb83d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cada08e-6d04-4b7e-8546-8cee5b13153c",
        "cursor": {
          "ref": "0efae2fc-cd87-48d5-a8ee-3171842f9077",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c1b8b127-60d4-4552-be48-f79ba38b643e"
        },
        "item": {
          "id": "1cada08e-6d04-4b7e-8546-8cee5b13153c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8dd1887d-8b55-4be8-825b-d30a30d379dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933cb1fd-e5af-499a-976a-6091bed6ecec",
        "cursor": {
          "ref": "5511c835-a5f4-4720-94b3-51f99f07e167",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "e0283257-3ea7-404a-ae69-9b083d670b9a"
        },
        "item": {
          "id": "933cb1fd-e5af-499a-976a-6091bed6ecec",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5bb5185e-1b6e-401d-a570-b5ca51d366f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3e595f-27df-49ab-bb0f-1bd499b7d5d6",
        "cursor": {
          "ref": "88f3016f-632f-48c7-b058-1529259ac458",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "d3925069-33ca-41d7-ae5e-82cae85a3150"
        },
        "item": {
          "id": "8a3e595f-27df-49ab-bb0f-1bd499b7d5d6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c80704d3-c10e-4bd1-ae7f-497e20d354dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6142b59e-d2be-474f-bb2d-2c77ed68eb86",
        "cursor": {
          "ref": "6dbb0416-7b83-4d98-b24a-8c32955d2913",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "75d3af0f-5b96-4f7b-b6a4-6fa36d7b6b8d"
        },
        "item": {
          "id": "6142b59e-d2be-474f-bb2d-2c77ed68eb86",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f78a20dc-7f5b-4356-908d-38a314eb0618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb4b903-78ac-49dc-a4ae-4f5c0ad6f32f",
        "cursor": {
          "ref": "3152544c-1017-4e37-b4df-f7f4cd766c5a",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "1f4ffad7-77c2-45f2-9fbe-31505f3fbe18"
        },
        "item": {
          "id": "0cb4b903-78ac-49dc-a4ae-4f5c0ad6f32f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "aae6cedb-5497-4e3b-842d-7a4d170c6f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08909b89-c70b-4b62-9767-362705fb96b9",
        "cursor": {
          "ref": "306abb99-b916-454f-8d42-98c1bf104c55",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2640e0ff-639e-48e0-be7f-e261cbb31e46"
        },
        "item": {
          "id": "08909b89-c70b-4b62-9767-362705fb96b9",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2d0d43f6-3c61-43df-a4e2-bef96fd0f3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903ab942-c76c-4f4a-a5c3-63b920495f34",
        "cursor": {
          "ref": "624c7eab-3a89-472b-8f3c-1d1331998ce2",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b12881b5-f6c0-446b-9530-29cf0d0ccf94"
        },
        "item": {
          "id": "903ab942-c76c-4f4a-a5c3-63b920495f34",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d7e48f64-b9e0-4951-8c4a-5d6cb8efe2b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c39872c-e228-4db2-8ba9-436d6ab3d717",
        "cursor": {
          "ref": "97ac13cb-07d5-4272-90d8-a42278c5cfbb",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "2b0ddf6a-907f-4fe5-ae85-26ad3dc2c9f0"
        },
        "item": {
          "id": "1c39872c-e228-4db2-8ba9-436d6ab3d717",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6e0801b5-7a86-40dd-a3ee-721436dc2386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ef9f20e-a78a-4221-a35c-7c9d43af6503",
        "cursor": {
          "ref": "35e4ada7-2cd8-4ca3-9c82-d4ca398968bc",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "c3a30c80-7e6c-4a91-aed7-f9e8cac4ac71"
        },
        "item": {
          "id": "4ef9f20e-a78a-4221-a35c-7c9d43af6503",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "abf9358c-25cb-41a0-b9b6-794dbfbf3298",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb1c8f60-7764-47ab-ad41-8bbdba934d87",
        "cursor": {
          "ref": "2877b2af-1dc1-4f2c-a074-86e30fad6034",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1bc9b884-1cc5-477b-954d-d1f372080456"
        },
        "item": {
          "id": "cb1c8f60-7764-47ab-ad41-8bbdba934d87",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "591042c3-964b-4145-af0a-877cc77f91a3",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "0bf1b066-e814-4476-aa68-329f24e7e7d0",
        "cursor": {
          "ref": "b5be9333-69b2-4fae-a1a2-5d6671610644",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "72e83a03-fdcb-43f5-a85c-8fc2b78edf3a"
        },
        "item": {
          "id": "0bf1b066-e814-4476-aa68-329f24e7e7d0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a4722bce-1f11-4b27-b466-ca475672573e",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3ee483-56bf-4314-9542-2bcb6b9d4e15",
        "cursor": {
          "ref": "5ce5dc32-b68c-4138-b3f6-20a62b43d8ad",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4a7b8798-cff1-4d83-9c36-fc66fce7548b"
        },
        "item": {
          "id": "1b3ee483-56bf-4314-9542-2bcb6b9d4e15",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "957d8c49-b9da-4c97-9155-0a44110795f1",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d91909d-bc34-4c86-a4d4-348c3b8ebd97",
        "cursor": {
          "ref": "e8f7a26f-60eb-4e2a-a5b2-10bc1d38eed6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4f39cedc-3730-4d23-9675-d2269a86830f"
        },
        "item": {
          "id": "9d91909d-bc34-4c86-a4d4-348c3b8ebd97",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0c74efdc-e0ce-4c75-87ba-86f3e8e88455",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d91909d-bc34-4c86-a4d4-348c3b8ebd97",
        "cursor": {
          "ref": "e8f7a26f-60eb-4e2a-a5b2-10bc1d38eed6",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "4f39cedc-3730-4d23-9675-d2269a86830f"
        },
        "item": {
          "id": "9d91909d-bc34-4c86-a4d4-348c3b8ebd97",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0c74efdc-e0ce-4c75-87ba-86f3e8e88455",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3a4532b-ca60-4857-b210-1a7088a25503",
        "cursor": {
          "ref": "60ea316c-2118-479b-bc4a-95a1bd591e67",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "988e8446-53db-428e-aaeb-62e5fb37c967"
        },
        "item": {
          "id": "c3a4532b-ca60-4857-b210-1a7088a25503",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "ae340fef-798d-4b16-b673-ce7de5eb28e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ceb903-1e02-472c-b83a-e1462d9db66d",
        "cursor": {
          "ref": "3a1982fd-54b6-4818-acab-fdfe65d76ecc",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f963a3c3-6a77-415b-a18e-9f1a2fae39bf"
        },
        "item": {
          "id": "96ceb903-1e02-472c-b83a-e1462d9db66d",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ee35f4ce-48b4-4cf6-9f80-8f27eb8fa111",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}