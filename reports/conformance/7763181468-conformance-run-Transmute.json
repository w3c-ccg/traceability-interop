{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "2c808c2d-12c7-4e5f-be31-e805241c38f3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2a9ada5d-9dc9-4046-b8da-af5e38b65eb5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "605d3e40-3ad1-44b6-a375-14acc137a278",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b40fa20a-9fa5-4645-883d-16744e4add20"
                }
              }
            ]
          },
          {
            "id": "cedc488a-5a04-48a4-8a52-717eadcdcf1c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a558ef4a-52da-4615-81d2-b8020550ba81",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "972c7e6a-f2eb-4a3a-8706-176e1ba93267"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c3c63198-a2a5-40d8-a15c-11445d8a3d21",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "186c5d6e-d0bf-4c22-a5b8-689ef5d59fd3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f0c37015-3afe-4e18-b16e-4c7b623e28d8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbaddf42-dbe9-428c-aacc-15fe0ffcaab4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "922bf412-0064-4e55-8182-921aabe5c25e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2eadbd78-f23d-4b01-b046-d665900ac019",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3999e1fc-c489-49d0-b688-6f3fb19924e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d5157491-04d3-4191-8cfb-99eaf437210a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f606ce2c-ade9-4c62-9389-e527048055cf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "afb2275e-083c-4846-9c43-0107923bd000",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ff2266fc-9e18-4e68-8e25-20569abaa44f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51436796-2dd7-47b9-845f-3e070395636c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "800be9c0-9ef2-4e96-b081-c66d0dd9f8ef"
            }
          }
        ]
      },
      {
        "id": "d51d3d3e-ef77-40df-9c22-b6bd47672f90",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4ec8deb6-1a73-4a6e-b780-f0885a6f4920",
            "name": "Negative Testing",
            "item": [
              {
                "id": "888d7c59-e928-4b75-a219-4d2fc91a881d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5b049206-501f-4ec6-acfe-992f3acd829b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31511156-02b4-4263-a7ae-e584c7ea2270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d66718f3-1008-48bd-b422-6feba04d1b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a932a4d-b887-4a25-b7f2-2883c3d558c2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2dd781b-31dd-4e34-87d3-0415576a839a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "212f6b21-f8bc-4398-bd91-9ceb1e62ad68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8efd011-848a-4e94-abda-78202bfe0ccf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1dac5c0-d03f-4a06-9b48-b261765dac54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03819a08-46dc-4acc-87f2-0c6a729603c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c3f672fb-919c-4300-901d-ac1babd87aa8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11d29ec8-e1fe-4a1f-9f60-7f72038c0c1c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d1c9fd-ba1b-419c-aa9d-2dfe01f65df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a91e4c36-efdf-418f-98de-2f9fa767a894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5341f6db-e8a6-4d38-a1a0-bbc9ee8e6a67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f4c82c7-1eaf-4d90-bc30-9628b4c105c0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5158b55a-030a-4122-b19b-5605682db97f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fff2e99d-5a1b-484d-a437-f1d08f967a13",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53806d3d-de83-43df-ad08-92c34ede3f78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "415bd5ea-9d09-4f39-b264-223de79fe6c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6b475c9-fcab-4767-b48b-0d2517a7b8d0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "cae2e72d-1a58-4cca-a6ee-2da09ee89d05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a898a3ef-48a2-4f33-bb10-5cef9e374896",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "152b0119-735b-4529-8360-97c059255fd1"
            }
          }
        ]
      },
      {
        "id": "ff345233-dc04-4c56-a91f-595f31a4a948",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "585c913c-45a5-4878-a8d8-a02f04c54155",
            "name": "Negative Testing",
            "item": [
              {
                "id": "132a0c35-ee33-4175-9fc9-9922a268d350",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e07614a6-110c-4c5e-9b0a-4740f9ab7350",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e944ea-cc3f-41d7-852d-0f93f0a56223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba6598f-cbf3-497d-89c0-b5eca5b8379e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1c8765-dad5-45b1-ba31-9cdd5d7ea1dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1345a6c1-4df3-43eb-a427-49556722cc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9945b1d-fad6-4138-a3ea-741955da25dc",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9788905-411a-4bc6-b607-bc765c5c8732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263f7013-6192-4a46-a08e-c4926b7c16dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f6c7d6-aae1-48b4-a38e-4475577cce0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1cd196e3-3e64-40c0-89be-3f84c7335c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7e7abc-73d7-42e0-97b8-2f062c7b02ee",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f9007d3-72c2-4b4d-866e-39b3b8716de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35a762dd-bde1-4992-bc2e-f161b3b5bddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c8dfab-7c90-48ba-9099-cc06e255112b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e7edba5-86bf-4c65-af4a-5b0739429492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8ead6c-69b4-4d4c-a988-d8494de7736b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72205777-dd0b-4924-93ab-b7ca64069774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd21651d-4818-4de3-b644-79ab26bc9c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e09e95-d25a-40e6-bfb7-85d2844800fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5596fe42-523f-4c47-a7bc-758e5bc5ef78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b509c46-463f-4b52-abd8-e0089731b121",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f223eb-0666-4b47-a55b-b3eaf2bbfe48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "388b4e1e-04da-4495-9254-9e0a74c66241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ff26cde-91f2-4696-b353-4432f413fbcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "796e128e-b03e-4135-beb2-e2f9a7be6640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae97fdf-dd70-4c87-b940-e878d73e7892",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f7b71b-8fd9-4ea4-8a97-7313a0977461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbc7b3b6-0b96-4b58-a7be-81db2b0c7606"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364d07fc-2e39-462d-a1d3-6089ec92b2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f52a2d2-7d4e-4124-bef3-bbb14eb8ebac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87091d14-75b7-446c-ab60-1a89571e59fd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d16059-16e0-4e08-8b62-fe98e5f38110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f013dc72-9cfc-4265-9095-8140b981633c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ccb598-f3a4-4700-bebb-65bca21e1fb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b676010-b351-493a-a6bb-a21bef0d8949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e28e80-5af2-4f47-9a82-ef9b2307dbb3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8abd38-0d65-4550-bd4f-4ad4c7f00977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2f1190-700d-4124-b7ee-18f6aa26148d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222bda27-5b75-46aa-a1c4-72eec1509bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "990b7a03-6377-4546-a08b-e945ef712c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b64b1a-09f7-4930-90ff-e73204a00af8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d84b16-b0e4-42e6-ac90-2f39a231cef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "865cf6f2-67c7-4c07-9c2b-984baf803a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d431e95a-5887-4f1e-8652-1fce0bdaab20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94a591a1-db6e-4e01-ac61-7ec76dbcdcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c9820c-2e66-4dd0-9f34-dc3b72f235a5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fb96cf-3d91-4bdd-baa7-2469b1827ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140205ee-8ce5-4263-80ce-e08fad92dff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844f7c61-e0a3-4dcf-aca8-c2f748e42a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48fa986c-51ca-4305-8c71-a253d16ae329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a84b4e-0eac-4c37-96ae-29a273074db7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f339c2d-22e2-4080-ab54-72412690f43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcb782a2-32b9-490d-b3a2-17fb471fd044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f88497c-f33d-47d6-b00a-498392c28b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "223a1338-7609-44b1-8750-5406cb85fce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af23dafc-eaa2-4672-b4b2-87e3c8a9bfbf",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b15924b-d00e-40ae-914f-06d0e82343b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf611152-f6ab-4fd7-aff1-b9466efc7482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a88a5e-5d24-48f4-8d35-31738cbb434b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7845bd9-d85f-4e37-b9ff-2bb4a6aa16f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbffb9b4-d7df-4ad8-b072-fe9a99bd1bb3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e7378d-edf5-4d4d-b68e-73d741065e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a88182c4-f53f-446a-8df1-9a6ecf8ea0f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a48e9b-bf41-4d0d-8df6-b60976fc90f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2020f6ef-16c2-4830-a371-f99ba80c684b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cca29d3d-6f10-4d29-ad45-6a7f5525e15c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd8785a-598d-48bf-997c-1b6c0f3c03b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a2c8ba-a878-4f5d-b7a3-10d2fcc64d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0df271e8-4a2f-48c5-9308-b7b8a42f09ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6978370a-d8d5-40d3-b4da-02d5a42b012c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bcb2103-a48e-423c-91cb-bd672ea2ee3d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "988d18be-3d86-4baf-ad23-00e09abbc107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4762c62e-e035-4582-ae0d-b57d4641acfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a690e9c-a211-481d-a6c6-bfabf223f35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f7bcf46-1de1-4af5-84d6-570a4817d8c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511f18f1-227b-4edc-bd9a-e4a01833992e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e877703f-e823-4e89-9129-8d57c3c3de73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51f733f-9129-4b29-909d-7cc4563d5bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca2515f-2836-4612-a515-b797dd018a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "564c5dd5-1ad9-4800-aa92-b3d1dcacee1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c27f77-5f24-4175-b3e7-103c72ec60e4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbdeb9b-f0c3-4f42-85fb-8c2cdbf6b7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d984ba7e-2fef-4104-b5ec-9127c87724a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d999e6e6-e285-491e-b338-57dc3c27e50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2db5a779-68d3-4a17-86e6-335c9dc68b70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42bccb99-e2ad-45ab-ac75-510ca239a84d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0a7fe6-1718-4eba-b8bc-921b91a90c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4386ea-d922-4d14-9fb1-a528b45d31fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce0022b-5875-4f53-b5ea-5d7989536b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "34733b5f-af56-459d-a5f8-8dd05a2da947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7713a5-ac0b-4dd1-8aff-5db7848d14a1",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d814db2-61dd-4787-8c42-301be24f9fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87153582-2a03-4b8a-8726-87aa0a17def9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb76aa1-9a0a-40a9-8622-d995c9a4d0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55bea27b-a9b5-47d1-8db2-c74165f0f419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f514d8-a7c4-445f-bfb1-589cc05f8054",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72fa0743-13c0-4b4e-8e4e-1745d4f869f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993713f1-2b58-40ce-b787-19fb34bbf8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3135bb-a328-4298-96e1-c219e2ebed9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "65e97642-ccf8-45ce-ba0c-96c8b871a2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75bb36ca-6ff8-4909-8ac4-f6b9b101d978",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937d9bf7-a1d6-4b09-bea0-b0b3233b8fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57ed35b-70c3-4732-884a-56dd6d69cc33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd669df7-a4ff-4279-97ee-544d1ccb185b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cf9599f-dd18-4b96-9b6d-7aa79115f3fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40ee6ff-834f-4d53-8cff-5d695a2d3f8b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7f1e312-08c3-404e-80f9-005d61766d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d691d6f-c37f-4d6f-a3aa-fb91682f94ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cecdee-f8d9-4c48-8c69-ea69919062e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b6dc5f8-40b9-4849-8e56-15477edf2c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7767fd3-e9da-41c3-8942-bbfdc2da5cb5",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99b63fd7-800d-4447-a731-abf50461c349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f620335-d4b6-43e5-84e7-ae18b660d507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6165e049-4c56-4504-9b1d-0784e7cf0098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e953a143-26a5-4cfe-abd5-d4b6f96b5ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acfeae2-f6ac-4f9d-a00d-bbe5d4c35106",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52acd1d7-61ad-4989-8d9a-12c89437718a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd00ffc8-cdfc-49b2-8834-5bcfaad0cbb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93d21c9-911a-441d-a932-34651126f7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "12711482-38fa-4fd2-9839-561ff81fcec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76dcf132-cd00-48ee-9883-4c897ab57529",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e5d999-3e49-4efe-b58b-bad2067dd23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9753c162-7f45-4c82-8a4c-7487ef8661a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc430986-0ccd-4d77-82f6-a854385897aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2516e027-5f7e-4611-9c3b-6d7ef0ea79a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb9726a-6d77-4d80-968a-f2617bf2c6c0",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133d5546-b93b-496d-8748-198b18c80bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5758b22-a6e3-46cd-b580-ac758d5dba1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7766725a-f1aa-4c3b-9834-70a04e29d133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6a64541-78d8-4888-9320-20f17add5b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b459f3bd-fca2-4f30-a6c1-e0412c5c9409",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df06c9e-92de-48d3-b4fe-bb8d3cf78a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3449b23b-fe8f-4f23-adc5-28126be8ae8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08621a61-6be2-43d0-9abe-abdb44e92136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3d693ed-d13d-4109-a99d-098575f5b33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa8cb88-7dd8-46c3-a3b4-5ee2b0454c71",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347c1687-3f27-43b3-9967-55814c500d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9b6f6e-2fee-4cac-98de-67b9a2ed68f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d505b2ef-e326-4913-acd9-e0e21f4096a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c30b0287-3f55-420e-a1c2-917b6811e767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3316dd-256f-43fe-a66b-b7ffec46102d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91023824-b95f-4828-bbf7-452229d9f4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bdc99ac-d7e5-44ff-8358-9c06d418677c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f631fb17-a336-45c1-88c8-2ba35b7e9951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4038bcc7-fbf0-4372-b9ba-ea066c1e22a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c4975e5-61f3-4c88-8b40-f246341b6274",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3de2a5-2bf9-4b37-9743-e31c7c41d663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce11207-7962-4096-8ba0-e1036850ede0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b0a1d3-306f-4355-8b01-23e68f21d84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "876417aa-93f4-401b-b6bd-61d878a8fad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df42e0ad-0e28-44df-82f0-35687aab6f65",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3ddaa3-5e7d-4714-a3c1-dcd6f0e4c793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "090f3873-19dd-4649-ab64-32a508a301dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd45be5-64b6-4b97-99ad-1108659c5796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b86618e6-eec8-481f-aa62-54fb4d86f263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f8cd1af-a5e5-43e7-801a-8c683018cefb",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b76a657-712d-4dfb-9c37-3f674429a251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8d6717b-397f-484f-a396-360b767f78aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73598286-7846-4b82-9027-c510c453aeb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe1077bf-e10a-4b64-8bfc-b7d412fd0c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8133da-8575-41b3-a006-16d76cb670f6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a070ee-52ae-4049-9a2b-ba3ff25ca429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb02cd0-c582-4d95-b76e-71ed1d6040dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5b6163-0f4e-4e64-af2f-d74aacfcfae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c06631f-a1d7-4839-9272-d910bd55bd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71363f1b-2bef-4a61-83d4-5f0650006ca9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef86d8c8-0677-46da-8542-95003905fc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b57489bf-1a45-4bd0-9f05-1ce9caba5398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c6bf57-c760-4671-a92a-94dbf30c7476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fed44d3f-d458-42f0-9498-3678a475add5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6f73e1-9f09-434f-9485-aaaef4ee1404",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61129599-45d6-417c-9fcb-b3155126e0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd59cfb-7296-4b56-870b-ff853a6ce438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811ae2fa-c744-476c-9904-3d5f29c2d622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "061c33de-6fe1-4e56-939c-31c0f245ecd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e45a058-872b-4c19-94e9-a8f0a5507a24",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea862df-4130-4434-b3a2-53a3e9ca09f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c3fb5e5-f6d0-401f-9422-e2261037e690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25aaced5-e194-4add-8e31-0a1335466567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1cdf581-b6c4-417f-b2ef-934be7997449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3450ea49-b6fa-4342-b6de-c7535d1eab9a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0a412a-6910-4f62-8165-4b2705192f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7eeed9-665c-4c41-a725-028c802deb80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd081041-89d2-4e2c-b2e1-e5b8fb7892de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "873afabf-fc91-4533-8952-c820d332afef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6034f3d-9b1f-48ce-b1f6-a7f0f4e5d989",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8df0de-b0bb-4a06-bb04-33cd1e6087f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "050aa7cd-5947-4aa4-a583-ba04639de9ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d21c90c-28fb-461d-88c9-59650d33ffc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc2e846a-7ee0-4f67-855c-f829b5b0a77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4ea4bc4-d24d-45d4-8776-613796ec59be",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "151f2a2f-d3e3-4316-90fa-eae74554f20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38254709-7112-4614-9e8b-a75adeac3b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab9c8d18-56bd-4957-a9a6-d9df0f91a3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "974d8f6c-ae6e-43fb-a7e1-ac3b2db04496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "facd8ccf-b3c2-4a91-9667-87186d6782b4",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc746ae-fe4c-418f-80a5-bac218d068a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1e9cd54-de15-4d30-88c3-8853a921a1b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aa6307f-ed7d-4162-9a04-e6d4cdcf5473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "080b1440-9e27-4195-9933-1f105e948328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ba27a4-46c8-4bef-96c2-6b1630f36d68",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527c0048-bc1e-4f6a-afc6-61c8ab09e5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d42bf460-44ef-4027-b288-256460a899de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07338c6e-e4d5-4bea-ac39-0b3924fded18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "17c10c62-96fc-4742-9728-2f644bf7665a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c604f8-21d5-4e9f-a0d3-56bd93cbcc7d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78d1757-38c9-4392-a404-73da318a42ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682129e3-6ca2-4466-b310-69ca4eeaee72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09f645a4-2b71-44a4-a38d-02e8887ad74f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "24ea00e2-f74c-4ffd-907f-292d10a59129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcb6bd2f-5a04-4b85-a32c-2025ea3c4e7b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198aa474-943b-43f8-b2fa-4c0d582b1fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4235ea4a-8239-4fcb-a527-4b3d0c1590c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab205bfd-c2ca-4019-8460-2a3f14ba07d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f5efda-03cd-42e5-a31b-d91ef97877ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28adeb13-d507-4934-977f-9520171f5d29",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba38f202-63b9-4495-a6b0-767e1db7fb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ce0d861-d367-469f-a53f-93ab26beea0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "377a2860-b70b-48e5-a659-73980daecc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "68e304f5-0186-4a1d-84a7-77afa8454570"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4373a5-3251-4d6b-ac12-e2b4d4aa6381",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39851a5c-5b35-4d51-8008-f2b60a28adb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e657790-4974-4b99-946a-433b185ab246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8abef6fa-6d01-421e-98fa-52093c50c498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "77fbd0f0-4ae0-42a9-9b7f-f5d6e64cef12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa7db5c-defe-4b82-8978-dbc869ce37ac",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e787d3c6-582b-4562-ac5b-20543f075a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7246162-f503-45e3-8a07-353e6f92b5de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2543b280-c88d-44e7-ad2c-728e442dc000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56d41fb3-98d2-4f3b-829f-bfba8a6ed7b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18cfe7f-0fda-4fc3-8e6d-48954b37b519",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcfa3314-2f38-48e7-bb0b-79143c3a8568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8519b54-4e3b-48d7-aa43-08feca997471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d68c2fd-84bd-4fca-ae25-e7d3be133453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89669548-0df0-4ce8-9785-de6d354996dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dab3835-8e7b-4060-86ef-ad6acf187483",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fc2b64-3822-4e51-aba6-1700d9f33eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "536ee971-a8dd-4759-8c4d-bed76a7576d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acba2bd2-c804-4c93-8b25-56944d3e4500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b411e7d7-1837-4a37-ad07-8b05075668c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df52d8ff-075c-43bc-99e8-7fba8c316327",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28502dc8-ae05-44ec-a124-9a2d7317a7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326246c8-6c3e-47f0-a15d-27f383840be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1719eb43-0510-4c21-8ef8-a412e763e049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "18286a7a-9d4f-4591-af7e-8921cb2ca219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a146e871-3dfe-48cb-82a0-4c27ad415439",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ec7ece-97f5-4de3-aabb-ca37930961a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9141fbb-ee8b-47e1-8106-da41e38027d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880eafff-bbe6-46ea-8087-450735f136ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a11c8a4c-7239-4566-aece-b0b04681bcb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dfbce0f-a1d1-488a-bb32-1c403bb8c5ff",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba7265a-261d-4ed9-b7bb-ecb121657754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "134c1f35-f6b3-468b-bc1e-e53f893ddf67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17923731-2666-4f2e-abd2-a2bab9f6493e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfcf59e2-bf30-4abb-9d07-fb98d91016ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea80324f-e92b-4023-8eee-daa6b7c5ba47",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61591d10-a3ae-4315-a421-27d4a7fb9627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89caef20-0b1e-4d39-ab5b-cbba21206559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c82d020-e01f-4e5d-95ed-009bb0fb284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "68999e9b-51ff-479e-bb43-53b0b1a95775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a095919-8d5f-48cc-9d2f-9b9f601aef9e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a281eae9-977f-4126-ab21-b84320feba23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67eec06f-d553-40ac-aacf-b6f0a7778f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2903044-610c-4444-a82e-e6d117e455a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68a24f83-af55-4570-a21e-30f59c3c5ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc913397-7616-4fc4-8350-508fa74791d8",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52204231-3b87-4c4c-8522-d8666b1e6510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4191ea-aded-4bbb-a5a6-66bd27a59a4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b90996-f7f1-4c14-a498-550e5f43f8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd9c183-5d98-4002-8eb7-34d07d67536d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc25fc0-2b8b-4aa2-a1cd-1e27a78e1eaf",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb9a853-cdbb-462e-a40b-c93fa1773f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1f24299-1ccb-47fd-b871-c7f1133cb05c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cbe013-f557-4d4a-bd64-6a3ea71da5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10e1d722-9ff0-439c-b797-6742736d7386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbe304b7-d664-4e86-b2cc-399b5830a109",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb74a1ee-cee4-472e-a598-01e939d15948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce71fbc-21f0-4a32-9815-675286fb0260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877280a8-7771-42c5-8586-8b19de5d9f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fab517a6-7db6-4c16-9227-b225d4a32568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdda79c9-e908-4960-b9bf-31822dcb0676",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaa9982-0f4a-40cc-825b-d229bc495e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c93e2a-bd41-406d-a007-07ec60e1b07c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8bb760-e116-4904-adbc-6886b1529f84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "44e58383-d7db-4799-b86b-b4c5ed5c21c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f467b55d-7a8a-4322-b590-8ec1c605ad05",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d196b7f1-bbc5-49fd-b660-76fb8c7eaf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6404af19-c953-4589-8564-67f13bdd8a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac60a470-a8e1-465c-b710-b6ad506d31b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "eee3b0ca-6370-4ecc-a7e3-65c7107b4e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e07d53-ac06-4bb5-af0d-67c6e34e0535",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a8d945-0563-4be5-a5e3-3eee80258809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "831fb576-05c7-4ade-86e7-e72b56136d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c505143-889b-49d6-93a0-d4cdbd7f1698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b45cf9d2-e5c5-42f7-8ba5-8e2f81e47633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111557ae-bdb5-4fce-9336-bc2ef2efb586",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6536ad-9d88-4e88-8306-5f54ba24619b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c55244c-7aeb-4b26-80dd-ceffac2df988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203863fd-b039-42bd-8dc3-3257cd1ae53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f4f145-08f7-45eb-8c91-b6606b18daf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28594ffd-3c6d-4ef3-8e06-2d3357b8229a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1c2ab1-6ed1-406b-bd95-0091cc5d023c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "637546a3-b82b-497d-a7be-aa217206568c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25bedccb-6ab9-4abb-8d90-0b9e828ffd12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "420e7479-115c-4309-9475-482dea671cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "503e6559-b016-4656-8bf4-8a50192b6c68",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2cfc7c-7d9b-46f1-a68d-a2836f51cb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6dc96d-33a1-44c4-a40a-61fceb67537d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3faa51e-8ae2-445f-89c5-fd2040a0a566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf1bdabf-5135-4601-9c76-b0ed8ba714b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cc8226d-afec-46e6-baa6-9a1236068d7f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563b33d7-c75d-4255-94fc-8680b31045f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6808027-bb75-455a-8216-3ff4058eff9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b14b2b3f-96c2-4117-802b-f43879899f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "47e8dd47-4cf7-43ec-94af-96f9b67d75d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5218f0d-90f5-4f84-ab55-1cbf37b78427",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a16937fb-e2af-4fe4-a530-66820522c348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32adcf8-60f0-46ec-b19a-8fea605a041c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af11f1f-3ac5-4706-9127-9fb8f28d4eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6897f945-9a1f-4006-87d6-f2aa8855b68d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b27f5ff-5fa3-43bb-bd4b-6c46464d29b7",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b72518-60f9-4b3d-b5f7-645d686b8996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72b3fef7-2862-465a-9ff8-d7ee39b9c2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a58a2368-23c6-4baf-96b8-0863fedca0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "995c0f64-4734-4c66-8806-e43752abed24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "699aed31-4cd7-4bc9-a0c9-3ff3464d26f3",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5c1517-4902-4305-9e80-c0d7d16a23ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18c3c58-9428-48d8-b407-b06ace19c63d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b776001-48fb-4af2-af4f-cd4105fcda0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e91017ae-0155-4f31-8be0-8a1cce1b677e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743d451c-a3ad-4a97-9db3-f009c0e81895",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6f02ad-ee18-46ce-af36-c72c98a6a1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69faf0b0-6579-4675-9b85-bcdafe836bfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa5ad5e9-144b-4c48-b4a7-0f9470fae6fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5bd220b-2c44-40c6-96aa-3b7219e442f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fb010b0-102b-442a-a5b7-43a3e96c28d9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ef72238-ffb7-46c7-bac0-ad1f8b8f25dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "154f1cbf-f1d1-4efa-9d42-1bbe74761e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ceb049a-5c31-4ca1-9788-b23589400669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "396c951a-4fc9-4883-8c25-daadd9d6a0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06828315-b8a1-4b8a-ab6a-1789102ddc0c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3b5d26-c09c-467d-9f5c-57294fee4dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47065829-b07d-41ce-b5f8-a990afcfc953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b922a72-f9e0-4389-9560-466886a615d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6569b5-9f58-40d1-8369-d19558d30745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035f5b91-0d32-4c6e-9dc8-9d2728a28ec6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c37c56-bdf8-4396-ad72-6d7f8b8ac4fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b6f91ff-0449-47b3-adea-43510d30414f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c315c4-5213-4924-8e19-0ac817a4abcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "65110c91-9a4d-473a-ba60-1120bfae8071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8b11b8-b637-43e4-959a-18f19427dd33",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acd419c-7ae7-4ff7-bf67-a1d32d05f720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ca8586c-a4f4-4e6e-b97f-6dbcae3747b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa43d241-92f2-4d64-896c-3c238cffa03c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de79ebe5-4ba3-428f-aedb-c11d42733c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "078ff02e-4ec0-4aa6-9ffb-a692f84dfc67",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2294c60-744f-4de9-8ccd-fb90fa926f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8b832e-76f1-4939-afdc-dfed42e9308c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541fee9f-4c8b-4465-a488-8c564b4c5d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20876524-8307-43c9-aef9-c4276558698a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850898e9-243c-40d1-a3ef-5101db32e354",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4ad658-252e-4987-97ca-79989f261cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af23ef60-a173-4aad-ad0f-ce83d5a887ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec309fee-6c10-4f7c-96d3-ca7180c03d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa4e5342-88c3-4f84-83e8-824fd6603cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7245d46-b114-478b-a27c-9e9d31e9483e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef712896-af45-4521-8ad0-06d62c59de66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660482fa-0e18-4272-8761-8b583f4bab97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79797fc-b325-48e4-bd73-35abee3d25e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7d8572b7-1224-447a-a2cf-9433008913c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "186813bd-1732-40de-a734-27130f6b554b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142d9ad0-d7c6-4c6b-880b-c5ec2ea2ce03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "368fac9b-d39f-48d6-9479-ba3e6bba0517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc227566-32b6-4bc9-a596-7af4a1d0fa39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c038e6-ff0f-450b-9ff8-7626aecaaf1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e99e7103-c6c1-4d6a-af0d-ed29f1b98bbd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6f2b0d-a729-4aa7-a06e-01da2fa47959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3f9f4a-20fc-4c54-8f41-89302d0ef061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30852220-93e5-4d91-b65d-1c08134c44f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "51d013ee-9e7f-45cc-ba82-9ccce422499a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0155ce1f-ed10-4568-b975-4a5dfc7f9fa6",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d838b80b-3bc9-471a-aea2-94ae75c979bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa16433-83ce-442a-b406-760052a2a1ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f50e09-8368-40c9-bd5d-ca653cf893a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1a9596-dd2f-418a-92fc-9fc221116f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c106a33b-7168-427b-a951-b2f9f1c53693",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b924e13b-64cd-4189-a46c-5e5afa754468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa21f788-0fb4-461a-8373-2a0346a77754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287a8a0f-1bfb-4f80-82a8-5959b006769b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "936a464e-1c43-4e54-931d-3646e95cd4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e32eb0-c7d1-48e1-8680-12cc82668a48",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b01be41-7d0e-4d83-b522-ad755c3cda75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02429d3-77ab-4c5c-b94b-818fadc5cdc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea2d623-0dfd-48c1-843d-98c54806dac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "432ea903-152a-4d18-8520-053f1e44e96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cf808f-8c36-412a-b403-4f91680005c7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20bcf602-7f37-4c2a-a6ed-c26f88fde846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90d0e289-f04b-4685-b309-2bbdc5d9902f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f84a318-4f57-4460-b1ac-09dea7b226dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae67792-015d-41d0-8865-e593cb63b2de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa6f4549-336c-42df-a29c-e98993ee9d80",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b545ca0c-a8c1-45ac-9d28-8df36cb6dd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b067a93-03c3-46c1-af1a-bfd81ab6e726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807abea4-3cd4-48d2-be4e-22315d1b2719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eeccc40-1e20-4c7d-b200-f86e362da793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb32ec94-283c-4be4-b41b-3776e59f6b59",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04faf0a7-2c10-4d73-aa22-815b0aa39e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "affd6272-26cb-415f-b046-ca25afb8242f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc316e7e-6884-42db-a048-478155a9dac2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e12e786-ecef-46a1-a693-43cfa8a653db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6e1cb4-1a0a-41ff-b190-0e4ac8c45131",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5382b587-8fbc-4fec-9b9c-76d89cdd3bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a421b4d1-e6cc-40c4-8901-b16cef40f241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72b4825-dda3-4ebe-bc50-179ca1f51556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "237a013f-796f-45cf-9a7e-ee173734c69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96879ffd-0949-4c61-a6bc-6ef04064fbd4",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "937586ce-ae07-4ea3-9d49-5e8009b0379c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7315cac7-0707-401d-be8d-b025be4d752c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3ecb80-61f1-425c-b9aa-c001cbebffcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88d19b5c-eb08-4ba1-8b3b-76e7927c13fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "670f0492-b6d5-459f-af17-3929073e7f12",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a6885d-037c-4c07-96ba-2bc86ab951ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488650ce-b936-42a6-850a-e60ea05c0e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5fb42e3-43fe-4014-b46a-e11b8e1c546b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c5c2dc9-f4d7-4acf-88ff-1b6eaed22f03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05956e38-f1db-4eaf-86c9-384971746194",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a611384b-4ee1-4494-b0c1-f83e10897e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe79963-ddbe-430f-a090-d5871a612a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd6e768a-3026-4961-96c3-39e46cc4c18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37e13d0c-1430-45ea-a60b-666ea14302f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3757c68-b651-42bc-8b75-f7ed02229e86",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b111697-b1b6-455f-9585-805d062d0126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "970cb6b2-5f61-4a90-8333-b1f0aa37178e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59581a6c-f8a2-4691-9d75-35f30c7e1510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "66448cbe-eb14-4c85-9235-7d0c369e0333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf162144-37ef-4ed0-af10-bf4db0474b63",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92020775-72b9-4c15-8774-6551b5a6b16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a22c681-e059-47ee-91b8-159a63654c08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e36211-3312-4626-9086-a059f8d130a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7db5df59-e66e-42c4-b6bf-fb705f536886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806d0ff7-db13-49fe-a157-93944055c6d5",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983c9823-8bbb-4876-8de5-5a5498c413c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7bdf11-279a-4a2d-8ec4-8f6076a6b090"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1dc2a5c-90f5-4dc6-b11b-a476d9271fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d12d87c-efca-40c5-b5ea-e5ef9a48fdb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e6c74d-2ccb-43ce-9c23-7215e9e219a5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdf8810-a06a-49f8-b75f-1b066063e267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ade62e-67e2-48af-a41b-79e649e3ba6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f31bac-f4dc-4654-8614-ce71464a4dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed00d87d-b5f9-4264-953f-135f86c16562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0415bfb7-bb61-46b4-92bf-c3cdab8e3812",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e218610-a76d-4337-998c-7da89ef745fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98728181-2521-449c-a120-b72260b050b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40422b8a-f702-4558-9691-b77cd2fc61a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b735630-e97c-41b6-8f96-9c309d66f48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "203e5514-8ece-447b-b3df-b51de7c67f92",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eae44e5-815e-43e0-b965-2c8805bda658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c1e63519-a131-4326-87cc-8ff93f796f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949b91e5-fcb0-4599-8f74-a4ccd9e7e677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "94a0a2d1-136b-4ff4-9dd8-63261841339d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9baa6d3e-a16c-46a0-bbcc-6ec912d68ec2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87b0ccac-5950-4398-8ef8-007462ce9fec",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfd8d8b-8c18-4e57-9c21-b6d3613ab475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca6427ae-92df-446a-9a6e-e7a7ec1b5b47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4ccd4d-127f-4c1f-9e1d-ce934e559a6d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dba8ced3-14da-4440-8f7f-401ba56ac0ae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f50bb50c-3da5-4729-a0d6-9b47b38b5bfb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68564492-93ef-4e45-9dcd-19897aecafe3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b61fb0f7-f5e3-4364-88b3-8de1664acd83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a27eca9-0ff2-47cd-a843-3fe9caae52bc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "05248fc4-6b59-4bcf-8a1c-96ecf6074bd0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "edf1d68b-92c5-4928-9c02-b8f5c1b47764"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "25749b27-0b7c-44bd-b69f-02b9258fac50",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "071f3ad1-86c9-41e8-ba05-f9ab556a5042"
                }
              }
            ]
          },
          {
            "id": "6503a7fa-cd19-4fb3-88a5-e30b043434db",
            "name": "Positive Testing",
            "item": [
              {
                "id": "282bd3d7-b39e-428c-9790-cf4b55812e3f",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "1b2b2c01-c3c1-4325-b1dc-54fe6cbec7b8",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3a82da-2e98-4104-9127-192965ca568b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3113e202-e6a9-43a0-9331-2b66f5bc4161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8634d77f-c8ab-4388-a436-ce92746d1bbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7705e7fc-867e-45a2-b1ab-9b378a3c732e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c438bcb9-04d9-40e7-b872-5acd8c162308",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3855ed76-a996-477a-a30f-45c529ccb553",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d93725db-d105-4300-82b4-525a465d7776"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28ee6c91-0f2d-4b44-8e74-7ba4ab915ef6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f0634bd3-0cab-41e4-9167-7c2d82f27b01"
                    }
                  }
                ]
              },
              {
                "id": "a4f3d20d-6c92-47fa-acd5-ebc784e71850",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "020def22-25e8-480d-ba5f-eba4f3847c56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b5a29496-f601-48d8-baa6-65b3ae80c673"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8ca6e0d5-7c34-4ab3-bf59-15146d154ef6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ff641e14-f160-4a50-860a-d329829d8946"
                    }
                  }
                ]
              },
              {
                "id": "4d1d8d07-03d9-4217-9f5d-ad5b7585c901",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9bfc1ba-b26f-4459-84b8-95fd8354a01f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e5a3075-8fe5-4a19-a372-1e5d99aa355c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74aa6c67-02fc-4ffb-9384-4b4a2f5c2b99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0b6eef24-14e5-44c5-837a-cd1a2161022e"
                    }
                  }
                ]
              },
              {
                "id": "e09d1c9e-1e18-4583-b393-e4608bb3cb2b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c67cf8a-7c03-4466-a004-8d04fa0a4d79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8443a784-ad18-42f7-b91e-1b3cf4e96566"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "704f4f4e-a9f1-4f13-b89b-9fea2630c1c4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d9538d70-b0b4-41e1-a6de-18fab556a521"
                    }
                  }
                ]
              },
              {
                "id": "62cd203f-0594-4f6a-ab06-4dbd0e9b57f8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4acefff-af31-4c0c-a767-10187c83a78d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bf9d326-2a2b-47e9-b502-2323f178592c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd420ad5-e206-4c10-aba3-581ea7966869",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d50362b1-f50b-481e-8e5d-39ddd8f10c51"
                    }
                  }
                ]
              },
              {
                "id": "2e1806b9-26a5-4377-bc7b-60d56039975d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59995eae-8035-400d-95d4-b258c55d7e27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "30840871-22fc-4713-bc2e-f06cff93c206"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e7656be-520a-4905-b575-8f44053da729",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "05611621-f5f6-4ac4-8407-1f8de7058e98"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e33a55b4-b748-4a23-ae22-76290dca8097",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f444b60f-4b61-431e-96f5-5fc725c5cd72"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "578a6114-4ce5-488b-8b74-d25daee82f16",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8c30fbeb-ab14-4390-ac42-6b6dd1193eec"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "937492ce-f63f-4565-b279-3b24d28ac231",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "55bb98a3-e14f-44e6-ab5b-a0936cbef6ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5663195-27d8-453c-ad91-47927fd63bbe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0b767fa-e377-4820-9f66-cbe7f0b7adcf"
            }
          }
        ]
      },
      {
        "id": "6ce53e3c-252a-4b46-9927-0fea5fb300d8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3a5335ba-cac8-4ef6-8852-2149c3fb6f69",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b85eb2af-21e0-4346-80a9-854151f8c549",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f140ab83-422c-4c73-9613-0b09273ad747",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41227fc-e92b-4d04-a79a-b0186b44c2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f0962d-3032-40af-ad12-10c3e48fb1ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7306a06-fe30-443d-9c12-a216e38118c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7ffd29b-dfb4-4bcc-8186-fb509cb9a4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cda9fbe5-a60c-4dc2-bf29-5b7e53f2b344",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bd3b3d-abc9-4658-b931-09c30aefc30c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0174967-c78f-409b-b66c-63b56c5211b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1ca2e6-7f4a-4aa0-8a48-f1ab4b2db33d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c309b148-b633-4cd4-93e4-71eac67c47de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1adbb79-14a2-47e7-badf-e6e6ece6cef6",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac65386d-b0ad-44b4-8e6d-683acfd6f46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f6cac2-7810-419a-9146-fe5c854162e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0d8f60-59b4-472b-9e4d-a39608194969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e66b6d73-cb12-4c76-bc71-5e2f78c966f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f44beb7f-af90-4d46-af24-8cc008878659",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9263cc7e-89af-431e-bd65-20cb49af1f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9444d889-0def-4205-9af9-4e7bd1c42e90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fd133b-9e33-4070-a867-136f46854e8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e35a50-644d-48bb-bc37-d4b199f3e84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a5a1a4-cb75-479a-bde0-c5ab0d53ec39",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28b6125-43c7-452c-acbc-d4267c46e07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d49046-a118-492b-bbde-461b1f899960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68739f48-d8cd-4dc1-aca7-2d4fc53286d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "704fa461-9064-4ffb-a97c-1b584635057f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b370533-e4ef-4270-a6af-6c99adfc124b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b141666-f235-4f76-b22f-ec120528ed90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a544217-0e81-4551-8046-3e699ef40153"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6945acc8-c986-4927-89ea-edc396128edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87ba0037-4ac6-418b-91f6-6add36ce1fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b09ab1d1-fda7-4baf-9d2f-449b8711b6d3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3eb9c2-42f0-469b-af07-fe1546ce0e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37a8c6c5-f66a-4946-b6b6-e7396e2f2bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da85953f-b84b-49fd-be03-e56cf9a65d11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d916b327-7a9c-4a7a-8593-38664a0f72ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc30819-a359-4eee-9a0b-dba19d5983e4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f02d697-de94-40ed-9f1f-6efaab9e3193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529d9a34-754b-4b73-85c6-7c45f6536b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "385d2456-88fb-488a-8c6b-8c29e0986d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa369532-4363-4301-b3c6-c322c6df4086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e4d02a-c8aa-4f06-bf7b-43432415bc97",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "093c95b1-6a59-49b6-8c6a-50d77dc91b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f92c84-3a93-474b-bbdd-f72a66a4f4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe99cd8-8f63-4afb-8162-5752bfa6a5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f2c5d2c-2b19-4494-8e5e-f9766b7ba92c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d408cbdf-d006-4c0a-a8c7-094770eb9bab",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0b9c98-be13-49ae-a38a-bc4d8df52a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7d95d33-ff7f-4368-90c3-3d58f7f47ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa496151-aaf0-48b3-9bbb-504dc403014b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e350f8-c69d-4b5c-8812-2f6b0a56a669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "229addfc-c94a-44b7-830b-835e63123c89",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5368f6a-a38d-4c56-b4de-5f0ae8efd2de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87fa46e6-1219-49ea-b030-9eda0517006c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff50064-03ca-49f7-bd14-b7d12b5303bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a57a2fb0-0509-448d-b630-ecdaf563599a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d0c655-7f1e-4bdc-a6ef-eeb6084a2033",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc896e0-1e4f-4407-9efe-0f6770a5f3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef50f691-734d-44dc-949f-96b848548524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d676d5-b935-4550-adad-f24fc3962d53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c4d71e-8349-4868-89e8-97459b3060f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a0abefd-b39e-40a8-b152-0bac7fcb4333",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb379dd-6678-4be4-814d-7a12880c0cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861a5573-eebb-4429-83b6-672fe35a988b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d22d913d-d4df-4fda-a52c-a76871295ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f949cbd6-faf1-450d-9016-d5381beabd78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef25da6-c3aa-445e-ac25-fec3aee49ec2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04915118-6c1c-4178-8cd2-eb46201ec2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee13853-ae6c-4206-81f8-0c5b2f62a180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c3b706-33cd-4846-864c-7fb5a56854bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b65d455-184d-4b8f-a4bf-f8183fb48cdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90908e11-8e0f-4957-b814-833e86037d16",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cb4958-dd10-4ec1-8f3c-9401b4476d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dc2f996-92f1-4311-a918-d0671a1e433e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5bc594c-8dbe-423c-86c7-48d89cd016ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0bb50d2-ef93-4a84-b951-5a5e9e01b6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e37161c-1bf2-460f-a8c9-31db3f1adae4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6eca991-30f6-44d3-953b-381d99949257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b93b49-4fd3-4702-894a-0aae3b3ffb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3b34e1c-4920-45ea-b335-758f20584903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "98f88669-7cb9-4f7c-b080-47e4f055d725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9b4c52-b339-4e76-b094-a903dd14889c",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af18c6c6-d0fc-4dbe-94a2-47bff974b8dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc3436f0-bdc0-49d5-b854-e93d8ccba114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71591f82-44d6-4e0f-9b3e-b9f699fab117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad9ef69-9692-4ce2-8d8f-8cc66342ac34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f4c509-679e-42b8-b058-c1ac2c56b7b8",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b351d79-3696-49de-9059-adaf008406ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fbbfad1-86b0-49f0-820d-ac270e664baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3316003b-991f-479a-998b-6a9ac486662b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9fd33c5-96b7-4ed3-962f-fcb00b984c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f6512a-d6d0-4a3a-894c-c0f1807cf0c6",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f025587f-deaa-4c7e-a0a2-64bc88ac63b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6bcbf7-1154-4e33-95d8-9193a911205a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2b1625-f01b-4cd5-8375-19632c76bc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d094fed2-5400-461e-9f14-1137d5c3e83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7326d6-2382-414d-be63-c1cb0de3f15f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c40a4e-9522-4bc2-87d4-bea27a3486b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "639c2632-fdc3-484f-97e7-86e4b13762b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "954b9bb2-f0e6-43fe-819b-1ac4f4ba316b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c5fa42-cda0-491a-b5c0-96b9aa491ca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4fbdf4f-0e66-4a44-b132-a10fea235a80",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bd4840-010a-448e-9370-e6c5241f53de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d67bf2-79d6-45ef-ac81-476e083066c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45164ca2-b4aa-499e-88ef-64b115875f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "999de53e-432c-4b46-bd5e-6f762b449773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d46350-526e-4235-9d3d-c695b0e34e3b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1571f8d6-c236-45ec-a4a3-3613582f3f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a22fcf-9f14-4627-9c1c-f4c22ade3235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ec2be4-a516-473f-a5f6-2fd7a8f3c0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc6a709-5efc-48ae-9d56-014eec21eecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04adb119-551f-4bc6-a94f-65584f1e35b1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d195d646-c3a1-437c-9da6-2ce569e7f66c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26c7234-7021-4f32-a315-99bc06ec0556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a16de04d-5a71-4113-b0fb-17e3942809f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99658c74-4389-4ea8-9d29-31102bdeaebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ff6f05-9b1a-4533-8431-6ee0a6949c49",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "165f842d-f2ab-4041-96db-4c3f406797e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0107ebd4-e631-488d-8ba9-7a3c82832a1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf6427c-fce3-4062-bff9-08767c9125ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9121a5b-16a2-4c45-bd17-97ba59fe8e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb5c46c-2846-44d3-8605-4d376fdb3e2e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f47d427f-4c60-4d78-83bf-ed70128e6283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007cd68f-86bc-4724-bcd8-2c61216247ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f816cd02-44c5-441c-bfbf-ec29ca884d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab7ff3d-f2e2-4ae8-9671-0019e609ac66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df60649-4ad8-4883-8df9-ddb850ca9108",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad6c6dc-6d35-4503-a9c8-90d7553a69cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304e2b97-cf34-40de-aedf-a3174c18851d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd85285-9f7e-4579-9899-2547150b6652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f38501d8-d91e-4a5c-b404-7a123968a138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7043b4df-2536-4520-90db-f48e71eea43d",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d0e078-ba2a-4b15-aac8-c66d4971f537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "483cefba-2d5e-4da9-81a9-e941a8a67753"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aae6c51-b8bb-4bc1-84c9-a964a8b59c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bc893fc-2112-440c-ae5b-3af2ff1c2e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed334bf5-058a-40f0-b8b0-48c30b5728bb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2115ee6f-c52c-48f9-af56-202c35313765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "129dc11d-86d8-4f8a-9750-730f02c43191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4128f182-3684-4648-acda-66deb1ffaa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0578259a-dd6c-41bc-95d5-14f25fa2ed45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586dc26a-a2da-4630-9fdb-65bee381447d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1534a1-8ca8-434a-95aa-e1be69706271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5a9af1-3192-4b87-b449-e962d85b4d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465baeb6-86c0-4823-9377-debe4714f086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33d36c53-b5a8-41fe-998e-b3cedcdb7801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010b2d83-3cc2-4121-827e-ee16b429f7fc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3561339-5eae-4189-8d6d-d0ba671f2eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efcb4bb6-7281-4fd6-bb3b-7075226ba2be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53380469-a1ce-4e6e-b963-a6f08c8fa581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3551a2dc-c783-45a4-9c32-70f866c2f119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c9294f-9a2e-4b90-b723-846a0087f00e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2510e309-2733-4683-a5b3-fb625cac00b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ddb4fe-e509-4737-b19a-0413a35619c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be198b05-ae2e-44c6-b2ab-a06d84d1fa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "424e9fec-50a2-4b59-b992-9deb6394d7af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b354fd83-4ded-42bf-b7cb-196c4019ae4b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b36e0b9-9f6d-4101-8686-82af6027e45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4f4cdaa-b242-4b16-bcd7-bda2cca52a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d16147-5d09-4060-b5cd-192adbcaa187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b297e33f-f8fe-46f6-b48d-3a4b00d5f548"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "660b52e1-b512-4834-9cec-93bb6c7a647a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "518d3904-140c-40fb-ac31-92511605ef08",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a586bb2e-d6b1-4dd5-9fec-d41be6393d1d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d4fccec1-0a43-48db-a9d4-2fb9d88f8746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3949685c-8363-46df-b12b-58e3cac559fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b311f438-4cc5-4138-b549-4cc0a1a92657"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84f9c116-7178-4e6d-945f-e1b676d8d307",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8340d5c8-6b40-49cc-addc-c81a3314268f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f4d2955-e95d-451d-80fc-8d77de022ae3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f57bdb4-e259-430f-8f80-ba02186247e3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d38ce15a-4e15-4497-9952-0c79e390cc9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bd44782e-8ef5-4ed9-a37c-1adab4012bbb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72887dd8-641b-4a5a-b22f-a9f7d8b114a9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dd41341c-9169-41ef-80d2-9d71fe31f19a"
            }
          }
        ]
      },
      {
        "id": "d25c0ee1-6f96-4641-bc9b-d647cb2ef932",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f98afc68-28d0-4afb-93fd-6156d9c71c78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "194ed369-675a-4922-bfef-98978af83397",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3a88107b-326b-4b69-a62d-9ae69677c875",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "837caf00-bb59-4f4a-b437-fcd8ee400f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33cc974b-a44c-4550-b35c-c874d4427b5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c55244-56f6-49cd-8ba8-b68a7fae2a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcea4bb3-c6e7-4883-b8ce-d9c8984603d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6b29e97-25e7-42de-a356-3d443ffc361d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e1ebd7-3d2b-4920-99e2-e21b1c0e1039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c7f6bb-da5e-4c5d-a72f-dd7f08aad353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b0277b-28e2-489f-94a7-2279e24f1d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa59e938-0cb7-476c-a25d-52448be5189a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6fd32e-bd4d-4156-b8a8-8ebaa3ef6ecf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de38b135-cab2-4909-abac-28ee67683515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502f248a-f19c-490d-b13f-c2bf27c30623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d137231-e6b0-49e6-aeca-03f715da420e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b1e77f8-4b12-4e32-a608-ee35182ade94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d362172-3346-468b-aa0b-82cb5fd90f59",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f00fad-d524-4359-9cd9-1aa65353aa3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8aebb9-cab4-4e6f-864e-9fc006de7d1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e5d6c7-c864-4bd1-9906-ea8e370588c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "49d396e6-da5f-4c19-a2c8-be927ab28ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d271bd7-6ef2-427f-9df3-4017938ab615",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac120f83-337e-423f-8225-1bc7c6c84b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa9c7724-905e-495a-b0aa-a124f1c8f765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6fc99f-0e63-4f3c-b891-df0b46b17b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6359915-9012-4e1f-9958-aa68f6803fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ddc91fa-cfda-45d1-a314-a177f14edb95",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed431883-ea07-46b8-9dd8-a924e820ce01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17bad17f-ca7c-4dcb-8c3f-980a7321382e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4cf018e-3b0b-4590-8969-4cfdd153c9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac85fca3-2cd9-4960-82ca-e7c5c08d69f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f57c9fe-61ae-473b-a80c-85db03d98dd6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45882251-a660-4ab6-ae86-3041574ba4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a009b7e3-1378-4e83-9d63-614d11082b43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86f1ac7-a69c-4ee3-a595-24ec9329a5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "38731cb6-7aa9-4fba-ba5a-105cfaf8d2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6da9bf-0166-4768-be0a-3dd87449d405",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded87250-ba5a-4cd7-a587-c44d701b9174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32fd2e27-5264-43bc-b3f0-39062ddd19b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1664f5e-4e9d-4c8d-83f2-ae2bc50b8d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31048a3c-656b-4a4b-8d26-ff7bef8c4326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefd1c33-9fd4-4372-a9a8-e6765c075bdc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215f2e34-dc14-4900-9189-e280b0014df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c064496-e680-4cf1-8394-0dd1dd3d6911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29c4ea4a-3adf-42a9-be8f-dcfb6b81431f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1a618b-62a0-4e50-ae46-96587f615925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6b9023-9994-436b-a92f-036212f0baba",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddaf5672-2d55-4b11-b558-5ad5cba18ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47d51060-d2b8-43f8-ab3c-5b3a5beee66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dc0c1a-e56b-4069-8c95-b977131150cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "023ebc0c-f295-49a3-9198-7fb2cbef5a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f68d3e6-30e3-4812-ac52-c02674dd17d7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7fa7953-0b1d-4764-ab54-f8be191737cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5fd93b9-72b2-4c97-aba9-7cd673e41ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f70aabe-7ade-47fd-badc-bc642e3ddb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "faaa6bd2-5b4a-444c-bbf5-5a5884ad08a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780d4928-ca69-4017-939c-ac588b6c70be",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5353fcbb-908d-4fa1-be27-6dd12ea8284c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e20f6c12-72bd-442d-b296-85addb2b7be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4380c955-a898-41f6-8886-86be418f3f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31667a4c-d86f-4c52-88f6-2f1976a17399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9efb5a13-33e2-4220-b266-faef50efbfa0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2910869-611f-46f0-be7e-10b72925cbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71acfe0c-975b-4033-9bc9-58227936347f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a79087-fbae-451f-92b8-2d888b8d64f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e188d95-8b2b-46a3-a188-f48215d8c711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfeab48-050d-464e-9e87-0f5a094904b7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "431c94d3-85b2-4597-8503-d419fd40f974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c6c50c-6425-47a9-b8c0-c0ce3140a8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77ae01e2-edce-4636-b428-8d759a1fb3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ae78196-646d-4c6a-b224-877091c225aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61448630-666d-41e3-8bf9-27357ddcf81f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da43a80-96f7-4afa-a2a2-5444397eca6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57759f33-8457-4c38-a4ad-bea1ffcce199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2757b274-718f-4335-9161-88e6603d57c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2b22eb-cccc-4f38-8601-9e6db4eaf524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0a624d-3fa3-4cb3-b062-13761dd15231",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aea356e-244f-4d51-bfc4-91a9fef3180e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12bbea68-324c-4762-a5ff-4fd88a7f98d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de3c2a8-b538-46ef-871e-4bb3d114b8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "345005eb-532b-4a6e-8f2d-b7272fed3af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e447d89-bd95-41c7-9f9d-488d9c01a9c1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb531ad-eaa1-433c-8b4e-834712f5ea03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87c0c78-5afb-4ab3-8bd3-2a9ed6accff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab94173-395b-4c06-a93a-c23c4bb958dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5b04b1c-0319-460f-a40a-bb609414f599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb82ff2c-bf9c-479c-b1dd-3dc59b56b5d2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f143bb-b7a3-4ac5-8630-6e443cf663db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89da163e-44e8-46f6-aaf6-dccc66a1c074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2d2ebb-0f6f-4170-ad27-f0c540a2a3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0263e1c6-7ac9-48c4-9cdf-39831d323e06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd8b00a-c6a4-4d41-9505-0c620967ae30",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed75d69-1744-451e-abf2-cd187a8c9ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3de8fe45-bbf5-4a95-aea4-78c733865a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadfb8c1-b9b3-4c61-8786-46eaa73605df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9266b9-dcce-4def-944a-45123c7a41a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4703c7fa-2cfe-4f29-a56a-9df0f29aa226",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd208648-db6a-4772-9542-69c49b075788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd8d70b-f18a-464a-884a-31aa59a1441e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26810650-9cb1-4ba4-9212-00d8eb9dc647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a22e934e-7ccb-4bd1-a563-cb7d569358b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e92137-0a07-4720-8187-5fa8be8ab309",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cc6d78-2fd6-4aea-9720-33e35638a370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067ac9d6-6ebc-43a6-b85f-fcebdba60691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cefa300-c79e-47c9-9815-6c641196bf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c00efa-f33d-4ae0-a83a-619fa4640cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c50eed-078d-461c-ae35-986b5bce2d95",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23158c09-df10-4669-9e93-14ffac7ed7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdf9938-22bd-449f-bd8b-57076b14ff67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eb8d9d3-dfb8-4859-9dc7-3ca6bc80dfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abca6c0f-dbff-4fa0-91c0-5e33b8263370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9963be09-aab0-44d0-a2a1-1daef7abfe5b",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d60e7b-b52a-43ab-abe6-9f211319aea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "445621ee-b0a2-4cee-8550-16d320647e09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ff35fc-5f0c-4358-9890-e0a6c766ec6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97ba46e3-b5c7-4fec-b292-2f652cd45233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfbdb60-ea80-4c4b-9921-bd2518137793",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d07688-34e5-4b0d-b5e5-3a89312ce35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef92bfcd-d3e3-4f47-b7a4-ec99b282b68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc0ecac-39fa-46ef-8586-f1481122a3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3349a69-fbf4-43e3-8eab-2c421f4b5f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8bc942-1dc5-4cda-ba4b-b6191d0b4b57",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bfc48bb-db8d-4991-9849-a86686ddb92f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20c5b452-71da-4660-8e9d-c9a6645a8825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7944c23c-4bde-4dfb-aba9-5f501a31527c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a7f4b1-ba50-438c-9aad-c93c95153938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eac544a-cae1-4636-bb90-c72921bf8a3a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2e05020-d234-41d6-b64a-80b0fdd79992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50722137-4aea-4b1d-b200-7fc388896928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35a2e54b-2b93-4f3f-ac36-04744119b119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f85c32b0-1d30-4110-b765-4af212439dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305bce28-e37a-43ae-b760-60c5c09f9613",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3b399a-3e73-4b03-be46-95ad6ca9e954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7df6c6e-85c2-4e3d-a3fa-baafec595459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a4636b-c859-470b-a5ca-a0b5dba26758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2fbe924-1425-463b-8b0b-c30f0ddfee5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af54685-3cfa-4fb6-b073-39bf5a3ed90b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51bdecb9-1800-4719-b711-4db8aea49f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18e32df-2bbd-4d45-b60c-cf66615a4a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4216af9b-2186-4999-a07e-5076da67fd10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5e55d1c-1545-470c-a286-50f59d292c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b895559d-54ca-447e-9866-a57a30a450c3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee81fe3d-23b6-4341-a1e2-23f5d9d87c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809872e3-266f-4545-8d2d-79ef2599b194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b49b28-9e08-4efa-94cb-ac2ac96e8d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5092bb3-13ff-4ace-9b23-1555fb2ef49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d12833-76e6-4d28-b063-a6eb549847d2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1da1bf-abd9-4f9d-b005-caa9f9302f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5d5abd-4ef3-49f6-8c66-364e293401c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7c57a0b-805a-4d38-b351-634f6c845c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69a1fd1d-3ad8-407f-9cab-729bc3d789f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8ea1b0-96bb-4b45-99e9-92c8ecc925b9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237551c5-2b07-45c8-b086-c910a3f8259c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf58527a-9d70-4588-b63e-7bcfc43f3319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38b76a9-2ec9-45d5-a2e2-9f21f5e42c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e122bb3a-5d83-418b-811b-ded9c0d5814e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13e912f-1f05-4c7a-b4a1-9dd0527bd2bc",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c01012-b07c-4d02-824f-0f1007b31dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97784737-eb81-419a-811b-a2c0210abdfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6d9073-87e8-493d-a74e-417e172996b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4875329a-6513-4cb0-af83-0f183cd2e87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f76864e-ea2b-4fcf-b27c-e4bc728dd886",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "067b042d-66bf-4dd3-ad11-7e10167a3df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28285d37-f8fb-4c8a-925e-4114f4bfd08f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6edae80e-c28e-4ca3-85b0-757368f84166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "08d9f790-e260-4d57-b5b3-0b8e8f7ed178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5b662c-8605-4dd2-98c5-57c8aa85f442",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daff3591-707c-4e4a-a86d-bb8ef31ce43e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34d74e95-83e0-4cb6-b1ce-3c4855ff79a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26a9108-056d-465a-9a5d-5b3ba1dcede4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72599291-2939-4ec5-b611-0e20665647d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe9c4b3-6972-42c6-9a1f-a095574291eb",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2484843-e383-45f4-a92f-640505b6c017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15e448a6-d9f2-40ec-9dc9-f73a085e4c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc21210-8036-4202-9b37-79102b9bbe9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "712e6bd2-3c9d-402c-836b-01c3cdc733f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b166626-b1f4-421d-a47f-2faa8a5e409a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e13a185-0a6e-46ee-ae8d-ff2183707111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "405576a2-591f-4813-9450-31ecfd227cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd3bdb5-094b-4e12-af57-f390e21fa855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4acccaef-c350-4aef-bb06-dcaddca2f83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc876e92-2b79-4010-8a1f-c5950bd6ea8b",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcb840cf-1e3b-4410-9291-cf36ed22b16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4729fad-9690-4e8b-9d08-3fb441e54f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "986e3ac8-1de5-490f-b324-83e1bb2be39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a69b75-b1f7-4ba1-80bc-ee64a2834f91"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d47064f9-cce3-46b2-812e-4df932a493b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d5a0d0f-af14-462e-a7bd-daf3df45d709",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808c1790-bac3-4496-aeb0-bb461941d23a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f057a13c-fe00-4ac0-9f6b-2b1ef4e5338e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29571e7a-e70c-40d6-936e-b105fb1b0f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a37cda30-9854-453a-a3a8-e3532434c967"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cf7027a-9fc8-4ff4-999e-0849b2a20d5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c6f8bd3-be6a-4640-b5d4-88624e206818"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd992c63-28e7-4beb-bdb5-44f389b3dc2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c38e013-8bae-4c98-8a0d-b0964a2740ec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41ebb63b-2c98-4ca6-928e-18f538962828",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "61779730-b222-4804-a638-34ccad2fb8b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5078f9b-6746-4d74-ae47-deb208ccfa75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f050942e-93ad-414b-836d-1510661ad981"
            }
          }
        ]
      },
      {
        "id": "e18c30f8-b5ee-4b89-a075-68e0078951df",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "907703c4-801c-48a6-87a2-cc1dcb67475e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b214edfc-1ec9-4789-aa9b-c697e922e4ab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60b902cc-0aba-4f2f-abc7-4369455c1af4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f04b6b-7e98-4e87-b41b-e9916718a0dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01b11ef0-222b-43f0-9a78-beac619d1dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62731b77-6242-42e8-b327-927bc1e95c22",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ece265-247a-4689-b5a7-c3f72840c842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "901517fd-1bf1-4f8b-83c3-344e468ebb54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7e0c26-6dcd-4e25-96ed-d22345e474ff",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167b5fff-3b01-4fdd-9fe7-085bd9b8cfee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fe42885-3e1a-48a3-9b75-35ea01a6b0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976bf486-10d3-4aa7-95ce-d0bb906ec76b",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664a40f3-123c-4886-ac34-51f562d1f469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e665301a-7bfc-4ff6-90fe-686ee748b268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c95eef-3cf5-453d-a670-0c2c81dafcd9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca828f5-fd88-4662-ac42-d9cee6e08f5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2126cd58-6c9f-4baf-b66c-f1dc91a6a53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1576e662-7ea8-4b92-b509-2f1e6a388aa2",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3047f13f-f974-4886-b6ec-6027ddef16dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c0867b-201e-4706-8701-81423e16bbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f6a163-2164-49d4-8af5-2f6a1a23ec67",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b51a849-a034-4f37-885e-ce33d9613db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9dca85-b23c-4e3d-b788-bd2a70940966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50833f7-7732-4b26-b61a-a91d8443de94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e7648a-7ada-4a62-8399-e6684c995bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "323565c5-18dd-4106-9405-0e245d673e90",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83547128-2961-487b-83cd-8a9896cca7cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "217b6a05-2684-4154-80b8-f6dff9f8cdf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6c6197-1a3c-461b-a1bd-8abe7353148d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32279204-3979-4787-aa32-50bd7d54c299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53a50ac3-3184-4878-9a44-c3a04eb64c7e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb63632-ed58-4e83-874f-248b948086a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba159557-f3ac-42b2-8219-8265810f16ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48154354-a1a8-41dc-ab19-367276f1115b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6baaeb51-586e-4c62-b902-9c10473794d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f6322a-60fc-4cb3-a494-312b1a06268e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b03102-bb91-41cc-80a5-43cc06837071",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de256f8d-3377-4a18-8ef8-682a68a74a9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb3608b-c59e-49d4-ad2c-2190ab1fc036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368aebc3-fea0-4f5b-a6dc-2ee5174254d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb3aa77-d591-4d29-baa1-d8b943aa6251",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af11377-cad8-46ca-a8a6-8029e3cf6fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ede99d5-6e8a-4ad8-98d7-cfb08e90d036"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebd9e8d-be25-4b34-8779-59242f131a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba8a9c9a-e911-475e-80cb-7a0ddd615661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09f825c-5836-4f21-9d24-a017b2e1be0c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e9364e-3eec-4240-98f7-8b80f2489a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df1496d-8f89-498f-a5e3-da008bf2be61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ef78cc-49d7-4a9f-8dcd-76efee1736b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "475dae71-b409-4d1e-9428-bad130a74841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cf56bf-40ce-49e9-a757-b65808738479",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e89e176-e552-40f3-8f1d-2d72336fbb67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40840c13-ce11-4d59-bbc3-82c099b24504"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beda3da3-366f-4d33-bc72-ee32fbbc9310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6874ba4-6fb3-4ddf-901b-695d7cd8b4a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28209232-afab-48c9-8f7a-9717f5150284",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d191d96-b436-4d74-8d4d-2cba57bcd5d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14462fc0-0775-4b89-9949-427feb4818ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5808208c-bbdb-490b-9c78-4c95ecce1df7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8a6e06-429a-4ddb-9e14-1f88e1710771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334f964e-19ed-4273-bbc9-401cddd48a9a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6541ff-eef1-4c45-b973-f6868d8eccef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ae181c1-59cf-459e-a055-a61daad7158c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3215294-1869-47a7-a5d2-02722c5b07ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ef6dde-8eb1-4968-8833-9a31deae0cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20a499d-74ea-4c14-b7c4-17d1ba2161e4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0376200b-0bff-444e-9ab3-1239407b3dc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac875bd9-f65c-4b45-9082-2106e51bd3cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74622a6-8171-4e0e-b4f8-902872d62b1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f9bef5-2c4e-4170-9cfb-1485cf35d5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb3680a-ae3b-4eed-8dfd-d71c77b2e411",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc07a8dc-37af-48ba-b249-a83c1f98e484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1826b2bc-37bc-4c92-9f5e-eb5d652ccd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93086e2b-632a-4d25-acd0-de47b1591d1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8620b6-4cbc-4d90-97b5-260df9b3051a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d4ff40-fb3d-4008-bbe8-9462b949dc46",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ee06fa-45f5-4b5f-9b50-0903c7b3f537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5b67a0-ef3e-4274-bb5a-209c6c26ffd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c97fb1-c203-49f1-8417-bc21953d5086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "112ba403-0b17-41fa-a0a2-b493b0e5898d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebf3ce85-5fba-4a51-8e2e-4bd1d88c5d9d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cebbeaf-aefb-4e36-bc28-5f15b7b9e0fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b40b25a-3099-4ded-be6d-8e30255ad60b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba628966-d586-4ce9-8774-f7d6f50666d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a95e8d82-d72a-4300-add6-c462ad4238a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474e3578-0a15-4d53-9b41-e7220988a2a5",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4170ae96-964d-4fec-951f-4f28ac43b580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cc67bf2-15dd-488a-af93-08492222592e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764b90b6-2409-443d-bb2f-4ad468aac7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c37a81-c48e-4e08-bbbf-b42804ac14d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253b1c82-909b-406b-bba5-57c11d9b721f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742f5131-2de0-487f-953e-8499dbce585a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46b6581-6375-4f22-a57c-037830190391"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5183a22-00dd-4f0f-882c-238420b28e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfca4169-6a79-45b4-ae54-6fb0ed79cc40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8c5261-5604-4854-9c99-181c888e99b1",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c841a1ba-60d2-4961-845e-021b1370ea11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba73a93-096b-40d8-a6ac-200e127cc654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c33b7df-a3a7-42ea-b565-342c8fded94a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d44f4b1-edd5-47e4-9770-834ccac96ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a41301-7fea-4e15-852f-a32cb665a8b1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313724e7-6c00-451c-afab-b73c2ae799db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc94b35e-cf47-4339-bf59-9e2767cf2b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028835ba-5f3f-4e64-951f-98cf27f7e9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fa45668-b78a-4483-a51a-a1fd5e351d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b4ac33d-5058-415e-b274-e38d157cf640",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a07a5c-b9a9-4e9c-991c-2ad70a865f44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ed52e2a-d372-48d1-8fa2-4419a3bff7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4300c8-1841-4e22-bc4f-9788f6763b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2222af5-645f-4c9a-b8a9-94dc9bed1052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18300251-0a87-4191-a20b-a527c94e243a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167a0ed3-9db4-4c2c-b06d-2bbe0ab1af6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d740a19-168d-461a-b3bd-9a957d30c10d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087a2edb-af78-4ffe-9315-014b223bf5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c444a05c-e839-4dea-bf52-604fff54916c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c078d633-700a-467a-ae6d-19bfb3f28059",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc21ac96-65b2-417e-a297-4d050c4be71e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19a4f00a-5fbc-43c3-9366-989890d692a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b293f15-298c-40aa-aeb9-d6da0c0d0ea1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d0ce8d-4e77-4273-b548-265e7cdddb6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4767b5e2-4e20-4d34-a6c2-5acadfbda8e8",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ddf976-a696-42cc-9594-5b1ebf99df1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64720ca8-c9ae-467b-bd88-f1225e2a994d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0272b150-5a3e-40d3-b556-8154350ea9e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdba2eb8-6482-40af-af8c-684f168a4f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31fbe64-365a-4465-a284-bf131a79f273",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccc92b7-1d18-447c-b45d-16af9d7438b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2623c241-7c0a-4d71-8595-3b4b9509f217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a06c17-4b45-41e7-b57c-e806fb503648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0bc2aa-2a93-448b-b511-7a8bc0c03bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0b9ede-1263-4b95-a572-9d1b7e6a5fbe",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf8af11-4dd9-475d-8c58-133dbd904f86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf3b477c-8bcc-4de1-b946-656fe69033a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30da9c4-ee7a-444b-8d0c-d2cbfec93074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5654ef4-5d7e-479f-be49-7085ed1ceaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc023dd7-745a-450f-9c7c-df6c2faa3def",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74c6c13a-21bd-45ea-b341-9d75eb7611b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5927e1a7-64d2-47f2-85e1-1aa8139c62ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1a033c-f89d-471e-b734-4b051aea6baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73ee666c-78b2-47d6-ae9a-06f227fd771b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d036b0c0-4756-4e89-b4cb-85920f5ffb22",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9f6d7b-71dc-4ab8-812e-c62c5b36c594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df9e7a3a-f734-4665-bc1c-a9562d3aa8e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "270bc4c3-d9c2-4e38-bd92-e7dee8130984",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6830980e-8764-436c-92a5-90e3df7e62dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7813561-5a6e-4a84-8be3-3908109417ad",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43bbb0a-6524-4e78-a98f-424cb3b20153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8a6babb-b5a8-44ca-8e20-a7fe3be66db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f10b9e-32c3-4aa4-bd62-23851e5c125b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5cd3a6-8e29-4873-9fa1-934725c894b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082af13c-7d40-4195-bca6-5657133d0e06",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346259d0-9a03-4219-ac11-c929d146dd55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d4454d-36eb-44eb-9dee-63d268d45de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1885ff8e-905f-4c2d-aef5-6a0c36cd7b77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22f4c202-71c8-48db-83d4-aa6a0c39b2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9b14be-1df2-47ca-8cf0-e9f321e879d1",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d67849b9-f004-432d-bb97-2cba2c8f7cd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba999fda-c3a3-4e9b-854f-0c5db1a7fbd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f4ecfa-fb5c-413b-82a3-5029ee09c490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469956cb-04a7-45a0-9175-e017034e953a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a5ee76-9f35-4926-aab1-60eb6198b21d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27c9cab2-45a5-4ea1-bf6a-25888a571854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a756a652-d1b4-4600-9fbb-a17bb86ed24a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99522ab5-71c2-4d10-9732-31885969e183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b4e407-1005-483f-b0b1-21c7367fbeff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "290b4102-b179-4920-bbeb-a7837f8314c1",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc3c93f7-a398-49aa-9f99-e1af1bbc4f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edcde122-ec06-49cd-b928-ee1ea03c9e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5653ba7f-3a54-44b8-a874-1b54ebdb1196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d454b67b-878c-4ab0-a7cd-e2a7cf95a7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801d7c8c-ac5b-4adc-996a-238d91f62f4a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6103650b-1faa-4155-82f6-80b572ce5f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efc7739-e1b1-48f1-b800-b06a87589413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6be286-e27e-4024-83a9-98bc21212a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf85a22-32ea-4b89-8e8c-e693186e5852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d55d37-02f5-46fb-8ee8-a034d0ff0b3b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e77e062-03ae-41f1-9e16-c517206b8cb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd26c27-32d9-4dbf-a744-61fdbc8b73f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74d0fdd-0e19-40bf-8f6f-4032d3990522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86148996-5204-42ad-a1f4-ffcbfdb859e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cb6a15-9f8b-4fd3-8986-307a4e7132b3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e049bad-471c-4fca-a2d6-abf1935be82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4220f3cf-47c3-4645-929c-fdcf1135b96f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b5fb47-5d80-44dd-a23a-934cdecc0d2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1d8d112-4b7d-4dc9-b3fd-4d34b0d636d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80d58dd-2d3b-4721-995e-9fbbf8f470c9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d463225-0ab7-4bb6-bcf0-a24379b4d548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd745c0c-7c71-4038-95b5-f4d7776edf5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a38ed5-02a3-4b62-b6a6-de770c90f6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e800242c-cbcc-4e2e-a4b4-f8a2ee110789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7feeeba5-8f5f-4d88-ad2e-9a8f5f1d7f2c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848d9b8a-b6cd-46fa-9399-7cdbfeaca686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1d3ad1-97fc-45e2-be6d-05280176f3fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0875df1-bf6a-42f0-ae0c-448f74de85ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f37cea-1a3c-46d1-9028-b611dc89fb82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b424903a-4ff8-4c4e-a677-5b325965f8f9",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a656757-fce3-48cf-b6fb-9f117ef4afc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58e81743-a137-447e-bac6-54e2ddc4c9d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b95588-b3bc-442d-854f-d868d53bed05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbd7228-eac9-47e9-9493-762ae6d0bb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eab6102-24b7-4560-9b85-6f8fe82ca266",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c1f6fd0-4195-4471-bab5-05e4a3fd873d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca84309-c364-488d-b3bb-3fb6a5cac783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b6e61f-c50b-4d7c-8853-268c421b01ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5f651b-ea14-41d5-9bb8-4f7aa283d4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd498ff3-0a30-421e-9cda-0833ecf3b6d9",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dd2173c-2fcd-4c17-a45c-47dab81c0545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588eec8f-9cd0-4af5-bb37-5b62f2673e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "034ca788-86c4-43fa-8f86-d1265288571f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89b94db4-de6f-462e-be7b-aee65c971342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2b29979-076b-4953-9991-6a9e0c470957",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422d0094-eb84-401f-a3e6-374e337d5201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28092b9f-735d-4338-b703-ee5c2ef96ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eeea83e-8152-4ff9-8ebe-4dac255ea72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea1c208-1163-41ed-8fc5-6a02a2d219eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c6906e-5ffe-4f33-93c3-236761540899",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855df34e-ae27-491f-9efe-010ae9aeef58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5de325-14ce-4e50-83ff-48916167f907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8374b7-122a-47c3-8f04-a5ed2c21a0e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c476c4e-0169-43e4-bd7e-02f3a0df0717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a40b371-0308-42c2-bef6-ba9c8d841adb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57a7f87-ae86-413f-860d-72d0a2d3aa96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ce560ee-527d-4177-be65-112df92205bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d700b1-99cf-4d33-a4b8-678ce5851c9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7e32aa-9a33-47ce-b235-35fecc5e107e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8f4677-c060-43e4-a232-3fcc5de5fa11",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3827da9a-5784-4487-b26c-004d142a5bf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65ffbf88-ae2d-4397-90ba-5e3c7dad5f58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7445cb-7c0b-4e68-9de7-b1792dcb726b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91aa47d-c2d8-45ef-b34a-d8d178539978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c854e0-07c1-4fe9-b8f9-2c5df9604966",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80354a1-e742-41f3-acaa-8ea638f75d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe85179-b130-4f39-886a-b4454bb03711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "288e4723-9bdb-4d99-b02e-12dd2a86ddb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff96c17-b1ca-458c-b3ae-817a406a1539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b596415c-193e-4c2f-b00e-7b72b432078b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "999c19e8-83c9-444b-acf2-a5f1adb30b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14561ba1-6f91-48fc-be8e-d8930054db92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31d3e19-6243-4dc7-b8f4-0bfdbc95ee81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2be6d8c4-ed8f-4c30-a5bf-a653919b9cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f6077f-16ea-4b53-906d-4c6cf32f45b6",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ff0c8e-e86e-44c2-90d4-6b3989bfd6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "841efe6c-3215-48ec-afd3-c98c36f893f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee623a0-ce3e-424a-b009-7332ae67700c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3815654f-594b-49ec-8203-8f8f95f0d5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3efa61c-34f5-4bba-b6ec-b01069228037",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a855c0-9565-43bc-874c-d96e48314b8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d360a78a-2819-4259-ac32-d02765c8fd69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f77d26-9847-459e-b2aa-0166fa394ad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b634031b-2635-485a-8611-4b4221b0fdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076394ee-200a-476a-aa84-03ae044ec8cb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7726417c-f7e8-4d21-9515-069a96719522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b471acd-3981-4758-a184-ec30375f019d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a3327b-f008-4247-a22f-1366692f0536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66187333-4e3e-494e-979c-19777e10c548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78b9bcad-212c-4a87-9cc3-1b37b3051cb9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ebed9b-df39-4132-9ab1-284634e0d3ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "042d1c16-2928-4283-9cc1-e203ede10a31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0a11b1-738a-4f74-b2f1-a8dde9ca9665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8095663-1521-4aef-b3f3-db0a9f34f17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9072cb-8f38-46c2-8573-0bb7f6fff0cc",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449dc17a-89c3-4a38-ac4b-b8624e5498c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f04da492-3be6-4b3d-baa7-41feface7212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca801ce3-7fef-43a5-8a32-2316f5eea54b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769e9353-60fe-49b6-a970-e107158ebd24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4801f994-53a0-42c8-80ee-6a9e9c17239e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eac7092-f01b-4893-9095-da9670da9942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d14085f-9e00-40ea-9a23-a0ae36f58e9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d6863a1-acda-47a5-a12b-611eac62d8a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9eb0af-4cc6-4170-97a6-4a5371088586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e81c3c-7809-4d77-9e7d-ffae512f5715",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42bc3bb8-7673-4e74-b997-c01025f89933",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08b620fd-4bc9-4eef-a0d7-26f794a7bcdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca60e053-94ef-4633-9bb2-a5959d1727c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee4cc8b-b258-4431-8abd-820a00f03ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66bd9efb-eefb-4e33-a79b-ea2ce74a066c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844d3d44-327c-4fd1-9663-6b252a6c23be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7664664-1a0d-419b-b2c2-a5e105cb5752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656779dc-8113-4a1b-b3cd-529e9ca87549",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1ff9c5-d37f-41a1-bce9-ee2e6d15f191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1bd733-b3d4-4da3-9d84-440a34f744e8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2c2388-0bf9-405d-9019-85bcb9dd388d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe9bc7c-2a1f-4e0d-be44-f1c15b115ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9ab68e-65f6-46b5-8e83-379f32023fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b260ef16-1523-4120-a46c-80ad5bae5b63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975c6548-5ae6-4ad3-bcd5-2dd4b8399b3a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0668b9-a525-45ed-a145-d6d064b47dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a478174d-cf72-4842-9213-7b8db1e10652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f9ae90-7767-4ec4-9bfb-731161e1bf0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9794f260-7c31-4f76-bf40-9cde44528282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49f7717-3bbf-4d7d-912f-ccb34e271e87",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "838b9d37-1b90-4a54-a324-398ebb3b19c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682e68eb-3de1-4694-b6b0-a951a9201cb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e595b5-2822-413d-a7e3-dfc30fb97efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a0e26f6-89b3-4e9e-bf90-ae8a66d5a8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21f0a2a-b787-4772-ab13-3f4d1857617c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675f9048-b8ba-4a12-a01d-1e64dd21f831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea6c983-17f7-4511-af1b-c05fbb4a981c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7025eb0-e11f-4084-a67d-0a3588e1b45d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57651fe-de9e-48d5-b4de-53cdc529c7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b104f50f-506b-4119-a6d0-9e24f6fdf1af",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd12ff9d-a579-45be-9e22-ba4b8ceada9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1e92147-7d90-4dc0-b17d-1ce4db9b9430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd44980d-0d96-4eec-a0e0-7729fbfcb6a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c4417a-dcd4-4d5b-aa87-e262e503af7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9951447-234d-4ad8-ac7a-c5a5604a92a7",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101eee5f-c3e8-419c-ac48-970e81a6c08d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ae9dc14-f980-4b83-b45a-76e9f1b2ee0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae512be-4779-46e9-bc8c-178f17151365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d62443d-8889-4352-b558-60643f726d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20dbb32f-ce02-4a30-b5a1-854fffbfdcd3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b636d1-406f-4525-b781-5d54d242b23c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "372c6184-b9f8-4aa4-b1e0-f0c2eafe9d7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2dfbbf-3ca2-4633-ad4f-6cada11e3dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8000c30f-554c-4ac0-b78f-0b36e8402ae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4b8c05-b86c-40bd-b830-b6484d3748d2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3890bcb-4609-414b-ba26-6d0ebeb87daf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "622f8582-88a0-48be-ae23-57f1a825dfd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1f5375-60d8-4286-b31e-f0cbe78d70f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba7906d-51f9-4414-96df-5dde411eed6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b64450c-b145-4b22-bdd1-174d5ca14769",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a119463-2c69-4f0d-9380-8d186667c45b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b0ffbae-fdb8-4eb6-bfcb-81dbcabe99f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aae8a76-00b9-46b6-830e-50058514adc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505c9521-f02e-4e9f-9649-4290c8192cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9c0930-5183-4f56-b203-0ad0dc8f320d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c6d602-0c3c-4a3d-8cfa-51629367e244",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "601c757e-08aa-4899-9784-2723bd4ae36b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64c33815-0822-496c-9e5f-0779e01b714c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24dc9921-1339-4d08-ab5d-ffda846893b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e8ca15a-83e5-4a76-a332-1eae9f21e90e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8ac824-a605-455d-a8ed-9e3b463189e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c89fd81d-6e2d-465d-8e66-6ca83ab81e82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6670d5a7-a85e-41b2-bc37-e272f4921590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c02e69c-6ed7-48de-bd94-238d5529c692"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f1520f-02ca-4143-a8e4-043c8935426a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2290b66-2fd7-479a-892c-b8e8b42c0cd6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf232ff-cf3e-492e-96e3-1eabd3d704ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e40fb3-5483-4c80-b026-9a7cfa35dc00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4dcad10-bff7-4622-9b1f-af3eb2121d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835a787e-4db2-40a7-91cd-036dbe49f8e1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bc1017-1e6d-4aa0-a0ae-8ca6b4f0bcae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "491215f1-c46f-44ea-8bde-c6de5d748c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e0852d-d980-4e32-a3a8-e922682174d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854fedbd-0206-4429-9500-042ae6277e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5042a0ab-e41c-4e8b-a734-ee6188da53b5",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db30c845-5556-4b46-9c1a-b2bd7a72c3dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb3d81f3-c435-4162-aaea-c233b9727a0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "367cc294-fec1-42c8-b234-d2061278711b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "163b5e50-3f60-478a-bba8-dbd4282f0289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4f5cdc-7052-435f-94f2-3d6fc7d878f8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe924bb-0a63-4ee9-a262-701ad995ad02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cda6025-1530-4804-b524-b11926855183"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb3be8d-c411-4484-9af9-82b2ae7f0113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc1350d-705a-4810-ad54-33bfd1741d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a1ce2e-9aad-4e63-86cc-5dd229b80735",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c508e38d-e012-4367-9414-837e5efb12f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e955f53-1113-4801-a84e-d67d4de99d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0452fa-fc10-49ec-aa44-872440b16142",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6246797c-de6a-47c6-be25-f2dd3ea5c796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7ac22d-278c-4637-9896-ee96732f4224",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1bd7cc-bf11-4c48-a7f4-12a9a43e15a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "130f07ca-1d95-4059-8a9f-2ecc8c6afbd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfd48a3-0db3-4778-8a81-b6f092b639b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "807f5576-ca26-4acb-b295-b0d77932410c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d526da5-b69e-45d3-a39f-62a075f6274a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e819199a-86e6-4387-93cb-26f354fd0fc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78fd96ec-a0e5-467b-a4cf-718b5efe759e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce1a825-c7bf-47d5-970d-7bbad73c5c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19db4b1-65c2-4884-b557-8b013410100b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db10af4-7f73-4adf-b9a3-672c1f0c1e71",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6678d677-939c-4697-802c-60be69e8cea9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb9aaab6-fc93-4ddb-b56f-424e11790d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8553c91-f780-4531-940c-da8ecb62eb8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a60c1f-35ef-4500-ab79-c32d937e724e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd07215d-dfa7-4ff5-abda-6b9f54c60024",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb11528-f7f1-4147-b62a-c9b0d8ffac56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a24f8841-77be-452a-b885-d18d503dc0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c35f71-9bb4-47b7-82ad-403578bc541e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5a44fc-8a53-437e-ac8e-abf9f86b8a4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c916229-64f2-4db8-bd2b-a0f6b503c61f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08951f9b-f61e-4da1-9897-b2f29055f68a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2788a8e8-27b3-464d-aaad-0e83c56b7512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2c1345-e0fa-4d01-8f6f-e054147705a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8c0f5e-4b3f-4852-91d5-0ada2a56350b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0db785f-f56b-4359-aa7c-6974a1876067",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "affc0454-79c9-4895-9d6c-4e99bd8e0374",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ae22fac-cd09-421e-8fd4-714ce6800790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af363e0-2abf-4d0b-a7a1-623c000199f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436a8993-4fad-4b68-ba4d-7013fa976e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a7f8be-53bb-48b2-9cf0-080d6903e1d6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd38f0c-b1d8-49e2-a26c-c59739cff343",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a8089ba-ab9d-4137-887c-1deab3cca65c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "470be2d0-4d49-4ef9-a0bd-62d735f9594b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73672d01-63fa-4828-b9a6-5671c8747dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4182b16e-cdb4-4a55-9313-c1ab16ceb3b4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95cddcc6-361d-45ce-970d-c258ed39b8d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def48cf6-cfa2-446b-a7d7-d52073b447da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e84a474-ee48-4582-88fd-89688d76f8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4120a8ca-5d9e-47ed-a152-289cb3a1a489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae68ac5-9791-4dde-b5c3-7d744dc02467",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f65c4d8-06df-4fc8-a45e-10e61d124a0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab19f020-9341-4346-9ecc-25178d0f38f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0b1b8e-007d-4d5b-a8a6-5e622257c922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6f9a05-c82d-4ee8-9b71-a507d7ef587c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c5fc24-a506-42d6-94db-94114283979a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2a193b-9ae8-415f-959b-8d37beb753ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c43cfcab-c542-494c-a6f1-26009e309288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075f5614-c378-4c49-bbee-d8f6113d8730",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b7e665-54c8-428c-888b-7029b86c5de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e7912ed-4198-4f21-9225-524683c928e8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e632e84f-e7c2-46aa-b3d5-b7283685c7b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcddb65f-f6f2-4c47-914d-817815f93681"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80be3edf-a278-492e-a6cb-34a4b82d934f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e240a32-23b3-4fa3-8acb-015ef556268e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e471419-6aa6-4ec2-bb21-39bdbd30b0ca",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5bf7d9-c113-46e0-883c-98a8be8c0ebe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0274412-5938-47c4-8cdc-e12e18d2e735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fa5707-ec03-4c60-9c1e-410796c479b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a9cd13-9901-4f6c-b8fe-025fe4d32b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3022e666-f9a7-40d8-b548-2a6a024f6b1b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ab9002-d20b-4c9b-bc46-4790a6795808",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4dbdd2a-7dae-4a15-a398-0d8687058bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4600292-d571-46b0-87b2-63c45a839d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346cca1c-e159-46bf-be46-312c4105d16d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0d89e1-d278-4d51-a4ea-221b9a890527",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be323e0a-0c9e-4f73-9373-2b25b72f9a7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6757df42-64a3-437d-961c-7c729d5a1be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028a40f1-a3f1-47dc-aac6-65cdbd79d230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744d6b69-c98c-496c-82d4-45ccc4c30560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96946bb4-1e3e-4ff5-a117-d5095a29a3b9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24d4582-1ee5-4a1c-9687-6d0c16e262a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc23448b-2d0a-4d4e-8033-337138dd51f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fbfdccd-f700-4670-82a4-9e9f7192e136",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36bbd0c-eb26-4fa1-a88e-3fc1206d81cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c5c7c0-3da6-403a-a2ee-82fbd12aa763",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c6e7c8-ef56-4d1c-a4d1-3d3c294fb3f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a5e9f0f-dcd7-4f2e-96e6-fc379dc4e8e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73105975-d083-467b-b7bc-04ffeff8e8d2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4d2d4e-4c0f-44d1-94ee-1fdba577c90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3dc124-d518-4b52-8282-53fbf8898a1a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab4b21e5-2646-42c1-9a72-a0bd5e4c5183",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6112960c-76d0-454e-bcfb-261b58cdd2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "336e8001-fcc8-4968-bcb7-48ed1801b015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "485ab321-74ce-434e-941b-606e72c89ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bfb005d-59bf-4b21-99cc-a2812d89ceb2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1351a6-b85b-4129-9f96-4e3a825efa39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c75c5f5e-5e63-45f4-9274-2e7aae9b3813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e8b28c-15fd-4ae1-834c-2dfcd5b0fb52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42701818-9d0b-403b-9a22-0a27307a1545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021d1082-801c-440c-b4d0-79097e60bd5d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b49779-08f8-4b7d-bde4-631df6cf7128",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "badd8e49-2988-4b06-87e3-bd359883885f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f111f11b-7479-4dc2-b120-a941c0d9c0b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a04731-e1a4-4138-90e6-aa00dc5c5593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b867982b-f64b-40bf-9c5a-9bfd6ba07606",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a27c881-3463-4e0f-b56e-6bb615474b3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a1fb9a-042c-46da-b13d-cc645e619b8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2983fe27-661d-431c-b36a-f09d29a0e3e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102ed0e4-bc61-4fed-a4e3-47554dd31d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1512b959-18a2-4950-a4b3-c803054f5699",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0391895-7f3b-4ccd-8d00-40db8e181c9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aece5187-8ad4-474a-b2b5-49ab120ebabc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be8f8de-12cf-49b2-9475-a09f2b487d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3caa9cf-07ce-4d6a-8638-948b1c2a7908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82673fe3-ccf9-403a-bad0-c516507bd1b8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8282df59-e7cd-4c5e-8e8e-899b5d85c5eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2df9b4bc-bda4-4d77-937d-53c67169ffb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b99c3476-8046-4bac-bb8d-448952bd4287",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eadb4d7-a520-4e7c-beaa-38a321ce48ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c577b62-c02a-40b7-87a1-ff61a8700828",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780a605f-4ce1-41b5-9795-71d195664ba8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf8cbc98-b0d8-4fab-beed-324f73d1d450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd84fe4-47c5-4d22-9004-b31f36c805f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b39c452-3ddd-4c6b-bfe9-0b0379557344"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18b68d62-26dd-4d15-83ea-a5ecb818d63d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8991ab58-84fe-4204-9c13-deba6ca55a53"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8bfc0d1-576f-4beb-bc25-6cdeb88882f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2229f174-9b68-4384-8215-f435c84b05ba"
                    }
                  }
                ]
              },
              {
                "id": "881e815f-11d5-40c2-b41e-0d33b2bf213c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "895339ab-8b61-446d-ab5d-2ca1905e297c",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53a649ae-24d1-42bb-bc33-f41171c50a13",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "dc2adc04-abe7-4f6e-9135-26d604a79b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bc5a4f-9a45-486e-869c-d234194c7d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ea6fb290-f25c-4226-b5d1-fd6b31ad2836"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c802db53-7b35-4dde-9c5b-10d75fe702c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2ed3fcf-3068-411f-a1f0-bd2747b4b5b7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c78ad48b-a3e7-4047-81c0-605637a2e5d4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c70c428-d064-42ab-a515-4a6ed2cae400"
                    }
                  }
                ]
              },
              {
                "id": "ecae0eb7-eb11-4cd2-9919-fde50c54f049",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a9ddc9d2-bedb-404c-8e76-57fcb835fb04",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0665708b-00d9-465f-9daf-9b65a2eb7f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ace2937c-fe4c-48b7-a00f-099d22fb0e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef97b2f8-edb5-42ab-8fbb-139d543ad391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a33013f-f432-4786-a662-92a3e18e9d5c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9492def2-3dc9-45ce-85d4-9bb1411958cc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8d24c7c6-1770-4354-ae9c-f296577f4e15",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e65f3f9-ce5a-4f66-aff1-bfca59130412",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c06f3228-e9de-4391-914a-ea8ef2cedee0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25ef9973-f9a3-4d4f-ae76-0a328b6e23cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bbadbc0-be28-4a81-8bdd-3b798942dc67"
                    }
                  }
                ]
              },
              {
                "id": "bd8db642-30ec-402b-9415-c129bed4bec3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad1b0a8d-2b02-4f16-b778-4261356295a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4954562d-5d8e-427f-af4c-b31403f27a6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48ddcb89-699f-4ac9-8b8d-c1c3fecdae30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c299f684-49a8-4a02-b08c-84336b6ebe83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "019f1c57-244b-4f78-b369-20cc45cc7b64",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e26d1403-cf6a-456c-b94e-a64a8f3d6549"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70664f1d-6faa-4420-b0e9-17c9469edd20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4628b2ca-f28b-40ac-8c8f-128cbf0398c6"
            }
          }
        ]
      },
      {
        "id": "07dea4f8-f43d-45f8-a0c5-6e2ecf0ea819",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e1190a25-f243-4eac-a7c5-f7917e74c77f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "152c82d4-b35b-48e9-89a6-41253c9a2aa1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b23e0a74-6f82-4be3-8b5e-730216a31180",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c31b40f-d06a-4abc-b873-47a8e075246f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "172dbb52-827b-4769-a94b-6b395f53fe6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f3edd2-70eb-4a51-860e-2defeac4e505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71bc27db-48ac-4d2c-8a30-c26da5a7ba8d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca265fe6-a16b-4482-acc7-0863add5d255",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "66e1b22a-934b-4fa4-8a1a-ed905e877351"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a845dcb-1405-4137-8c17-fbd0d5c5957d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8ba2851-4718-4784-a880-7fb1b70b32cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9b38f9de-2889-4fc8-b6b7-660e0250cabc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3d5b1623-2b52-49e2-b6b9-3c5e2c4c94b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "199648ef-8441-42e8-ac57-31127f0ec9ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f72f256-e65e-49d6-9a6b-874a85dd5e96"
            }
          }
        ]
      },
      {
        "id": "01c1b09b-8b46-40dc-879e-eec38ca349c8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1a27b5d1-8289-4f16-b0b6-da1f9291a3a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "16ccb7e5-d06c-40dd-bca6-57bea452f800",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1213672f-4dc5-4d0f-8ec4-15f1d40d2fdc",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981bde25-b036-44cb-833b-1ddc4f683dd8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "118d9921-cbc2-4d32-94a3-21ca6f4cfee2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea056a27-8186-4730-ad9d-e0e9e395aabc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efce39e1-2461-490c-b5c2-62bbf149464b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd12fcdf-d3d2-484d-b1cd-389cb1016d4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cfb6c3cf-ac8b-4c34-8d60-73e698899329"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cb69642-e809-4a1e-86ac-dbe0fd6bd723",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23f1b618-a789-4ff2-aa54-2930dcf66b37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2f877fc0-a9a9-47c2-b577-d501494162e7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "234f9250-d49b-4d34-99b3-80768cce01af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6ff2f46b-ab4d-4f7b-830e-ac017600ea0e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "74468636-9621-4a9e-94e6-4017ac1b7fdb"
            }
          }
        ]
      },
      {
        "id": "5e077fee-7c41-40ca-bfab-dcc77164fb21",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "72d93db5-4b05-4052-b7cd-3826e71b16f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db110a1b-3baf-47f7-bbc2-072ef3b9c851",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "67ff8167-961d-45cd-8583-666be78e77ee",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69e8f8c7-9f49-403f-a0bf-66eeb597dcc7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab486fcd-63f8-4f9a-88ad-969934da837e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4663d484-feb0-49e1-87c2-29b199e6aa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59720549-a304-47a1-9793-59d9687ec197"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3587c8ec-424d-4c41-8879-33ef41ee3473",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88a9ff6d-1908-445f-9e2c-33ab401f5dd4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "686260dd-a834-40aa-a7d4-5e73aa264272",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8555dabe-b39a-44a3-a989-81b1de53d136"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df3a15b7-8a32-4af9-9b7a-e69b500393cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ee8b5d06-404b-4fc7-8447-712139f063f5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba62e8e0-b6ea-47ef-b651-1a93430a36fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d9f523f6-0e6f-4569-a3cf-68dfacace223"
            }
          }
        ]
      },
      {
        "id": "b92dabb9-da93-45db-b8db-f3337f748cc3",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5621409f-f1ea-4e76-bd4e-1be841339ab3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35351995-e770-4f96-8458-b59d9bfd074a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "29b2d582-ccc3-4c63-aca0-a906a0f92b03",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "616dfe94-b7b7-4f9e-a643-19d2e3a1c6ea",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28c503e9-b347-49bf-a2b5-1e76e488807f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 55.11524822695037,
      "responseMin": 5,
      "responseMax": 724,
      "responseSd": 31.490331423554917,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706920444108,
      "completed": 1706920484884
    },
    "executions": [
      {
        "id": "2a9ada5d-9dc9-4046-b8da-af5e38b65eb5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f220544b-10b5-45b1-8369-9316ce7ef302",
          "httpRequestId": "f19e135b-d565-4bfe-8929-160a3c8b2ebb"
        },
        "item": {
          "id": "2a9ada5d-9dc9-4046-b8da-af5e38b65eb5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1c6039d7-a19d-47fd-87c8-e17388bbae27",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 0
        }
      },
      {
        "id": "cedc488a-5a04-48a4-8a52-717eadcdcf1c",
        "cursor": {
          "ref": "cc5bc8a5-38ca-4c0b-889a-9fc687385581",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "01cd4238-fd62-49d8-a97f-d1822b1bd3a6"
        },
        "item": {
          "id": "cedc488a-5a04-48a4-8a52-717eadcdcf1c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "734cb09d-c763-480c-b55e-857f1e51207f",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "f0c37015-3afe-4e18-b16e-4c7b623e28d8",
        "cursor": {
          "ref": "85cf0383-b5a5-4bd8-af6e-e6ae054d13e3",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f93dbdeb-8853-4570-b2e0-13fc3e5f88ce"
        },
        "item": {
          "id": "f0c37015-3afe-4e18-b16e-4c7b623e28d8",
          "name": "did_json"
        },
        "response": {
          "id": "47a9a1b6-9023-42a2-b9b1-3818a7bdc0d4",
          "status": "OK",
          "code": 200,
          "responseTime": 724,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b049206-501f-4ec6-acfe-992f3acd829b",
        "cursor": {
          "ref": "bbe892e7-14ce-4b37-9f8d-17eec96fb42f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "508b97cf-091b-4702-a3eb-30f5c539363b"
        },
        "item": {
          "id": "5b049206-501f-4ec6-acfe-992f3acd829b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e8b20aff-76a6-404d-9c23-bf0a3fbfb750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b049206-501f-4ec6-acfe-992f3acd829b",
        "cursor": {
          "ref": "bbe892e7-14ce-4b37-9f8d-17eec96fb42f",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "508b97cf-091b-4702-a3eb-30f5c539363b"
        },
        "item": {
          "id": "5b049206-501f-4ec6-acfe-992f3acd829b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e8b20aff-76a6-404d-9c23-bf0a3fbfb750",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a932a4d-b887-4a25-b7f2-2883c3d558c2",
        "cursor": {
          "ref": "2fa1de20-c8fc-457f-af88-be3dc8564e09",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "28c5cdc3-902c-47cd-a17f-0dc9e8b3c6a9"
        },
        "item": {
          "id": "5a932a4d-b887-4a25-b7f2-2883c3d558c2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "57db5988-2533-4e95-a2c9-90ed40d15bb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a932a4d-b887-4a25-b7f2-2883c3d558c2",
        "cursor": {
          "ref": "2fa1de20-c8fc-457f-af88-be3dc8564e09",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "28c5cdc3-902c-47cd-a17f-0dc9e8b3c6a9"
        },
        "item": {
          "id": "5a932a4d-b887-4a25-b7f2-2883c3d558c2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "57db5988-2533-4e95-a2c9-90ed40d15bb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8efd011-848a-4e94-abda-78202bfe0ccf",
        "cursor": {
          "ref": "0a5bf9e2-d38c-4d14-82e4-8ebf13f8769d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "94637bb3-f585-4d1c-8714-5fe227b2d0f3"
        },
        "item": {
          "id": "c8efd011-848a-4e94-abda-78202bfe0ccf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c4878b80-1f39-496c-8ce7-0ac85ce78109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8efd011-848a-4e94-abda-78202bfe0ccf",
        "cursor": {
          "ref": "0a5bf9e2-d38c-4d14-82e4-8ebf13f8769d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "94637bb3-f585-4d1c-8714-5fe227b2d0f3"
        },
        "item": {
          "id": "c8efd011-848a-4e94-abda-78202bfe0ccf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c4878b80-1f39-496c-8ce7-0ac85ce78109",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d29ec8-e1fe-4a1f-9f60-7f72038c0c1c",
        "cursor": {
          "ref": "21bb43fd-1f88-45b6-aab2-7b64c885a463",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e92fbd77-8f30-4175-9bb4-e20cf9e9ecf5"
        },
        "item": {
          "id": "11d29ec8-e1fe-4a1f-9f60-7f72038c0c1c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "29bfd71e-82e6-4d97-bd05-b8025ee3abcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d29ec8-e1fe-4a1f-9f60-7f72038c0c1c",
        "cursor": {
          "ref": "21bb43fd-1f88-45b6-aab2-7b64c885a463",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e92fbd77-8f30-4175-9bb4-e20cf9e9ecf5"
        },
        "item": {
          "id": "11d29ec8-e1fe-4a1f-9f60-7f72038c0c1c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "29bfd71e-82e6-4d97-bd05-b8025ee3abcd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff2e99d-5a1b-484d-a437-f1d08f967a13",
        "cursor": {
          "ref": "0413623f-b578-4c5f-9bc4-8a492556f1ac",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44efb798-c40a-4c1b-84db-d55aa4f659e2"
        },
        "item": {
          "id": "fff2e99d-5a1b-484d-a437-f1d08f967a13",
          "name": "identifiers"
        },
        "response": {
          "id": "d5f3e2e8-f0b8-4a52-9564-b84430e39425",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fff2e99d-5a1b-484d-a437-f1d08f967a13",
        "cursor": {
          "ref": "0413623f-b578-4c5f-9bc4-8a492556f1ac",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44efb798-c40a-4c1b-84db-d55aa4f659e2"
        },
        "item": {
          "id": "fff2e99d-5a1b-484d-a437-f1d08f967a13",
          "name": "identifiers"
        },
        "response": {
          "id": "d5f3e2e8-f0b8-4a52-9564-b84430e39425",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e07614a6-110c-4c5e-9b0a-4740f9ab7350",
        "cursor": {
          "ref": "b8197042-d973-400f-a355-8fddf36ff006",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8fc6bae4-dae8-4cd7-88ee-2463fecb2a9a"
        },
        "item": {
          "id": "e07614a6-110c-4c5e-9b0a-4740f9ab7350",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "52a9154f-736f-4069-944e-9137c93bf501",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07614a6-110c-4c5e-9b0a-4740f9ab7350",
        "cursor": {
          "ref": "b8197042-d973-400f-a355-8fddf36ff006",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8fc6bae4-dae8-4cd7-88ee-2463fecb2a9a"
        },
        "item": {
          "id": "e07614a6-110c-4c5e-9b0a-4740f9ab7350",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "52a9154f-736f-4069-944e-9137c93bf501",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9945b1d-fad6-4138-a3ea-741955da25dc",
        "cursor": {
          "ref": "9a686a1b-3a24-4f05-b323-b6104a48b242",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3d738874-7fa8-470f-9938-702313d3ebe1"
        },
        "item": {
          "id": "d9945b1d-fad6-4138-a3ea-741955da25dc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ecb9dc91-f624-4811-84f5-3aca9e2481aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9945b1d-fad6-4138-a3ea-741955da25dc",
        "cursor": {
          "ref": "9a686a1b-3a24-4f05-b323-b6104a48b242",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3d738874-7fa8-470f-9938-702313d3ebe1"
        },
        "item": {
          "id": "d9945b1d-fad6-4138-a3ea-741955da25dc",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ecb9dc91-f624-4811-84f5-3aca9e2481aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7e7abc-73d7-42e0-97b8-2f062c7b02ee",
        "cursor": {
          "ref": "bec2189c-0a6b-4b56-a126-fd09c75bf45b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1d067588-13cf-48fa-aa87-34b2b22d5691"
        },
        "item": {
          "id": "dc7e7abc-73d7-42e0-97b8-2f062c7b02ee",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e4b9bd00-8949-4346-b153-7a3f989437cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7e7abc-73d7-42e0-97b8-2f062c7b02ee",
        "cursor": {
          "ref": "bec2189c-0a6b-4b56-a126-fd09c75bf45b",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1d067588-13cf-48fa-aa87-34b2b22d5691"
        },
        "item": {
          "id": "dc7e7abc-73d7-42e0-97b8-2f062c7b02ee",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e4b9bd00-8949-4346-b153-7a3f989437cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8ead6c-69b4-4d4c-a988-d8494de7736b",
        "cursor": {
          "ref": "edf2502b-2574-402c-b921-75f7b44f0913",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6ee89dae-d01c-4a61-8b98-3ee60eb073a2"
        },
        "item": {
          "id": "ec8ead6c-69b4-4d4c-a988-d8494de7736b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "dbf62dc9-dc0b-4fa0-a206-a8088c2b49b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8ead6c-69b4-4d4c-a988-d8494de7736b",
        "cursor": {
          "ref": "edf2502b-2574-402c-b921-75f7b44f0913",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6ee89dae-d01c-4a61-8b98-3ee60eb073a2"
        },
        "item": {
          "id": "ec8ead6c-69b4-4d4c-a988-d8494de7736b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "dbf62dc9-dc0b-4fa0-a206-a8088c2b49b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b509c46-463f-4b52-abd8-e0089731b121",
        "cursor": {
          "ref": "200e4eeb-c7df-4c31-bdae-9dc3c10b7e32",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6e067a1c-1517-4bbd-9e50-646cd2797e38"
        },
        "item": {
          "id": "2b509c46-463f-4b52-abd8-e0089731b121",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a2e96b95-b554-44fe-b23e-01f57d3b6dd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b509c46-463f-4b52-abd8-e0089731b121",
        "cursor": {
          "ref": "200e4eeb-c7df-4c31-bdae-9dc3c10b7e32",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6e067a1c-1517-4bbd-9e50-646cd2797e38"
        },
        "item": {
          "id": "2b509c46-463f-4b52-abd8-e0089731b121",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a2e96b95-b554-44fe-b23e-01f57d3b6dd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae97fdf-dd70-4c87-b940-e878d73e7892",
        "cursor": {
          "ref": "852db5f4-7a41-4794-8ea9-a29c93b007a4",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c6043d0e-2bc1-4315-b448-4700cba8b0cb"
        },
        "item": {
          "id": "dae97fdf-dd70-4c87-b940-e878d73e7892",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "afe6e494-f9b0-434e-8162-195457278a62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae97fdf-dd70-4c87-b940-e878d73e7892",
        "cursor": {
          "ref": "852db5f4-7a41-4794-8ea9-a29c93b007a4",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c6043d0e-2bc1-4315-b448-4700cba8b0cb"
        },
        "item": {
          "id": "dae97fdf-dd70-4c87-b940-e878d73e7892",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "afe6e494-f9b0-434e-8162-195457278a62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87091d14-75b7-446c-ab60-1a89571e59fd",
        "cursor": {
          "ref": "f56ee203-1bcf-4cc5-8b1c-77b793f11dcd",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b03c3b66-f281-4e5e-859e-6af58e54282a"
        },
        "item": {
          "id": "87091d14-75b7-446c-ab60-1a89571e59fd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "07917519-16ea-4c39-813e-e3b492c72e82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87091d14-75b7-446c-ab60-1a89571e59fd",
        "cursor": {
          "ref": "f56ee203-1bcf-4cc5-8b1c-77b793f11dcd",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b03c3b66-f281-4e5e-859e-6af58e54282a"
        },
        "item": {
          "id": "87091d14-75b7-446c-ab60-1a89571e59fd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "07917519-16ea-4c39-813e-e3b492c72e82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e28e80-5af2-4f47-9a82-ef9b2307dbb3",
        "cursor": {
          "ref": "6b72bfe3-2a98-4711-9786-2f4062de3d01",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1c4266e8-bfbc-42f0-b198-92121c6ed4d3"
        },
        "item": {
          "id": "99e28e80-5af2-4f47-9a82-ef9b2307dbb3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "617f908f-7394-4fde-b7ee-5401ff7aaa03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99e28e80-5af2-4f47-9a82-ef9b2307dbb3",
        "cursor": {
          "ref": "6b72bfe3-2a98-4711-9786-2f4062de3d01",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1c4266e8-bfbc-42f0-b198-92121c6ed4d3"
        },
        "item": {
          "id": "99e28e80-5af2-4f47-9a82-ef9b2307dbb3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "617f908f-7394-4fde-b7ee-5401ff7aaa03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b64b1a-09f7-4930-90ff-e73204a00af8",
        "cursor": {
          "ref": "d223d6b6-9ab7-480b-aff2-5a816fb86a35",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0e3dfa80-f02e-488d-9700-65172728ef4c"
        },
        "item": {
          "id": "35b64b1a-09f7-4930-90ff-e73204a00af8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3cfd4c5e-3797-4455-b7f7-3bfd0c0a2c55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b64b1a-09f7-4930-90ff-e73204a00af8",
        "cursor": {
          "ref": "d223d6b6-9ab7-480b-aff2-5a816fb86a35",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0e3dfa80-f02e-488d-9700-65172728ef4c"
        },
        "item": {
          "id": "35b64b1a-09f7-4930-90ff-e73204a00af8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3cfd4c5e-3797-4455-b7f7-3bfd0c0a2c55",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c9820c-2e66-4dd0-9f34-dc3b72f235a5",
        "cursor": {
          "ref": "47cd63ca-5f19-4b35-bd77-71be6845e393",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5d8aad65-03cc-482f-8cf4-193dd337cc2e"
        },
        "item": {
          "id": "95c9820c-2e66-4dd0-9f34-dc3b72f235a5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b5580c79-fe36-4b85-b4f8-3a9a91565beb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c9820c-2e66-4dd0-9f34-dc3b72f235a5",
        "cursor": {
          "ref": "47cd63ca-5f19-4b35-bd77-71be6845e393",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5d8aad65-03cc-482f-8cf4-193dd337cc2e"
        },
        "item": {
          "id": "95c9820c-2e66-4dd0-9f34-dc3b72f235a5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b5580c79-fe36-4b85-b4f8-3a9a91565beb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a84b4e-0eac-4c37-96ae-29a273074db7",
        "cursor": {
          "ref": "a9e9b01f-22b3-4d02-abb3-18a7922eca9a",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "768fe5d5-de04-454c-ba8d-9bc6abd68e17"
        },
        "item": {
          "id": "79a84b4e-0eac-4c37-96ae-29a273074db7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8d88572e-ea63-443c-af1d-147a39145431",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79a84b4e-0eac-4c37-96ae-29a273074db7",
        "cursor": {
          "ref": "a9e9b01f-22b3-4d02-abb3-18a7922eca9a",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "768fe5d5-de04-454c-ba8d-9bc6abd68e17"
        },
        "item": {
          "id": "79a84b4e-0eac-4c37-96ae-29a273074db7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8d88572e-ea63-443c-af1d-147a39145431",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af23dafc-eaa2-4672-b4b2-87e3c8a9bfbf",
        "cursor": {
          "ref": "77a0de7b-a430-4ac5-aa1b-0f610930ba93",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0dec51cc-3627-45d4-810d-4cd805017365"
        },
        "item": {
          "id": "af23dafc-eaa2-4672-b4b2-87e3c8a9bfbf",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c5a3b97d-8598-48b3-9282-35668f18c29c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af23dafc-eaa2-4672-b4b2-87e3c8a9bfbf",
        "cursor": {
          "ref": "77a0de7b-a430-4ac5-aa1b-0f610930ba93",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0dec51cc-3627-45d4-810d-4cd805017365"
        },
        "item": {
          "id": "af23dafc-eaa2-4672-b4b2-87e3c8a9bfbf",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c5a3b97d-8598-48b3-9282-35668f18c29c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbffb9b4-d7df-4ad8-b072-fe9a99bd1bb3",
        "cursor": {
          "ref": "fcd8c6d2-6bb4-459d-9d42-ddbe8c4c10a7",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c073a927-0bd2-4be1-9384-dbf90201b07a"
        },
        "item": {
          "id": "bbffb9b4-d7df-4ad8-b072-fe9a99bd1bb3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "24a50965-1934-45e3-a0a9-6501499efce9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbffb9b4-d7df-4ad8-b072-fe9a99bd1bb3",
        "cursor": {
          "ref": "fcd8c6d2-6bb4-459d-9d42-ddbe8c4c10a7",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c073a927-0bd2-4be1-9384-dbf90201b07a"
        },
        "item": {
          "id": "bbffb9b4-d7df-4ad8-b072-fe9a99bd1bb3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "24a50965-1934-45e3-a0a9-6501499efce9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca29d3d-6f10-4d29-ad45-6a7f5525e15c",
        "cursor": {
          "ref": "c9536771-b958-4154-b5e1-70a9d84bbf15",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3cd2f425-775e-4dc8-a5e7-1c65572a5eac"
        },
        "item": {
          "id": "cca29d3d-6f10-4d29-ad45-6a7f5525e15c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b9bdb1cb-dc9a-43b4-9b6f-1ad59f277d67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cca29d3d-6f10-4d29-ad45-6a7f5525e15c",
        "cursor": {
          "ref": "c9536771-b958-4154-b5e1-70a9d84bbf15",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3cd2f425-775e-4dc8-a5e7-1c65572a5eac"
        },
        "item": {
          "id": "cca29d3d-6f10-4d29-ad45-6a7f5525e15c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b9bdb1cb-dc9a-43b4-9b6f-1ad59f277d67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcb2103-a48e-423c-91cb-bd672ea2ee3d",
        "cursor": {
          "ref": "9581cfcf-9af4-4eea-a396-2838ac0571f6",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b6c99c62-5ad0-497b-acfd-5379846cc90a"
        },
        "item": {
          "id": "2bcb2103-a48e-423c-91cb-bd672ea2ee3d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8ad23a27-c5b1-47e3-8744-f0455138fc7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcb2103-a48e-423c-91cb-bd672ea2ee3d",
        "cursor": {
          "ref": "9581cfcf-9af4-4eea-a396-2838ac0571f6",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b6c99c62-5ad0-497b-acfd-5379846cc90a"
        },
        "item": {
          "id": "2bcb2103-a48e-423c-91cb-bd672ea2ee3d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8ad23a27-c5b1-47e3-8744-f0455138fc7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511f18f1-227b-4edc-bd9a-e4a01833992e",
        "cursor": {
          "ref": "0e4813b3-5566-4e90-a737-9960ce414885",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "14ec19a7-68ab-40b9-a814-96791777a90e"
        },
        "item": {
          "id": "511f18f1-227b-4edc-bd9a-e4a01833992e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f97b50ce-337f-418a-9940-2e1cfc0e123b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511f18f1-227b-4edc-bd9a-e4a01833992e",
        "cursor": {
          "ref": "0e4813b3-5566-4e90-a737-9960ce414885",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "14ec19a7-68ab-40b9-a814-96791777a90e"
        },
        "item": {
          "id": "511f18f1-227b-4edc-bd9a-e4a01833992e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f97b50ce-337f-418a-9940-2e1cfc0e123b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c27f77-5f24-4175-b3e7-103c72ec60e4",
        "cursor": {
          "ref": "12658c4b-bfbb-4576-8757-bbea9f1e1c76",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "98c33ee4-a522-4229-8321-d28f29916ab2"
        },
        "item": {
          "id": "20c27f77-5f24-4175-b3e7-103c72ec60e4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a45a2d10-9a80-4e04-9619-e0dab3d320c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c27f77-5f24-4175-b3e7-103c72ec60e4",
        "cursor": {
          "ref": "12658c4b-bfbb-4576-8757-bbea9f1e1c76",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "98c33ee4-a522-4229-8321-d28f29916ab2"
        },
        "item": {
          "id": "20c27f77-5f24-4175-b3e7-103c72ec60e4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a45a2d10-9a80-4e04-9619-e0dab3d320c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42bccb99-e2ad-45ab-ac75-510ca239a84d",
        "cursor": {
          "ref": "7c91ca94-9fca-4f47-bd72-bfef1f3e820e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ef0b1848-db1e-4aba-8407-f97aad554404"
        },
        "item": {
          "id": "42bccb99-e2ad-45ab-ac75-510ca239a84d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0712e97b-149a-47ba-beae-7699e77aa928",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42bccb99-e2ad-45ab-ac75-510ca239a84d",
        "cursor": {
          "ref": "7c91ca94-9fca-4f47-bd72-bfef1f3e820e",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ef0b1848-db1e-4aba-8407-f97aad554404"
        },
        "item": {
          "id": "42bccb99-e2ad-45ab-ac75-510ca239a84d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0712e97b-149a-47ba-beae-7699e77aa928",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7713a5-ac0b-4dd1-8aff-5db7848d14a1",
        "cursor": {
          "ref": "2cf3e4c3-1c77-4ce6-9070-c2e9c1c082c7",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "95397e81-a8dd-4bc3-b899-26e26e74b3a0"
        },
        "item": {
          "id": "5e7713a5-ac0b-4dd1-8aff-5db7848d14a1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "50a21eb9-ee05-420a-a02e-ed05f233047c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e7713a5-ac0b-4dd1-8aff-5db7848d14a1",
        "cursor": {
          "ref": "2cf3e4c3-1c77-4ce6-9070-c2e9c1c082c7",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "95397e81-a8dd-4bc3-b899-26e26e74b3a0"
        },
        "item": {
          "id": "5e7713a5-ac0b-4dd1-8aff-5db7848d14a1",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "50a21eb9-ee05-420a-a02e-ed05f233047c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f514d8-a7c4-445f-bfb1-589cc05f8054",
        "cursor": {
          "ref": "1b4161ac-ac66-4f71-b8a8-de78f572a49a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "495c88c9-9044-428b-92bc-7bb1a3557183"
        },
        "item": {
          "id": "04f514d8-a7c4-445f-bfb1-589cc05f8054",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "382816cb-6bd1-4ed9-adf0-214d3ee61c32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f514d8-a7c4-445f-bfb1-589cc05f8054",
        "cursor": {
          "ref": "1b4161ac-ac66-4f71-b8a8-de78f572a49a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "495c88c9-9044-428b-92bc-7bb1a3557183"
        },
        "item": {
          "id": "04f514d8-a7c4-445f-bfb1-589cc05f8054",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "382816cb-6bd1-4ed9-adf0-214d3ee61c32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75bb36ca-6ff8-4909-8ac4-f6b9b101d978",
        "cursor": {
          "ref": "543a15d2-bcf2-4a4d-b628-33443dfc242b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f0bc5780-c389-45bd-9548-e9c7fa3eb5fc"
        },
        "item": {
          "id": "75bb36ca-6ff8-4909-8ac4-f6b9b101d978",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9f6e1dbe-1eba-4fd3-84c9-ee18d29ad501",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75bb36ca-6ff8-4909-8ac4-f6b9b101d978",
        "cursor": {
          "ref": "543a15d2-bcf2-4a4d-b628-33443dfc242b",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f0bc5780-c389-45bd-9548-e9c7fa3eb5fc"
        },
        "item": {
          "id": "75bb36ca-6ff8-4909-8ac4-f6b9b101d978",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9f6e1dbe-1eba-4fd3-84c9-ee18d29ad501",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40ee6ff-834f-4d53-8cff-5d695a2d3f8b",
        "cursor": {
          "ref": "18c2b24c-8fbf-496e-8b47-5d35e25e7693",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8bef2838-242e-4c98-8fe9-0b6f58a8d01a"
        },
        "item": {
          "id": "f40ee6ff-834f-4d53-8cff-5d695a2d3f8b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d51e6bca-119f-4748-b24c-b69558a07310",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f40ee6ff-834f-4d53-8cff-5d695a2d3f8b",
        "cursor": {
          "ref": "18c2b24c-8fbf-496e-8b47-5d35e25e7693",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "8bef2838-242e-4c98-8fe9-0b6f58a8d01a"
        },
        "item": {
          "id": "f40ee6ff-834f-4d53-8cff-5d695a2d3f8b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d51e6bca-119f-4748-b24c-b69558a07310",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7767fd3-e9da-41c3-8942-bbfdc2da5cb5",
        "cursor": {
          "ref": "09a34bec-38e7-4157-a204-2cff7138d949",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2a54dbe0-5ec1-4a0a-b33e-c383ed7b620d"
        },
        "item": {
          "id": "a7767fd3-e9da-41c3-8942-bbfdc2da5cb5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f2de52b8-a16c-4eb5-83af-6251f5f0f905",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7767fd3-e9da-41c3-8942-bbfdc2da5cb5",
        "cursor": {
          "ref": "09a34bec-38e7-4157-a204-2cff7138d949",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2a54dbe0-5ec1-4a0a-b33e-c383ed7b620d"
        },
        "item": {
          "id": "a7767fd3-e9da-41c3-8942-bbfdc2da5cb5",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f2de52b8-a16c-4eb5-83af-6251f5f0f905",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acfeae2-f6ac-4f9d-a00d-bbe5d4c35106",
        "cursor": {
          "ref": "ddf415b1-b2be-440a-91ea-9d6d085fb8a2",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5fd5432f-48fb-4562-a0a6-8a4e83b221cb"
        },
        "item": {
          "id": "0acfeae2-f6ac-4f9d-a00d-bbe5d4c35106",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9e8c8f5b-fa5b-4bd4-9f77-025fe1cbe478",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acfeae2-f6ac-4f9d-a00d-bbe5d4c35106",
        "cursor": {
          "ref": "ddf415b1-b2be-440a-91ea-9d6d085fb8a2",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5fd5432f-48fb-4562-a0a6-8a4e83b221cb"
        },
        "item": {
          "id": "0acfeae2-f6ac-4f9d-a00d-bbe5d4c35106",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9e8c8f5b-fa5b-4bd4-9f77-025fe1cbe478",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76dcf132-cd00-48ee-9883-4c897ab57529",
        "cursor": {
          "ref": "689eefe0-a1af-4891-aed6-14cff979ec37",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "69ee675c-283b-4124-b9c2-ecdb7badde13"
        },
        "item": {
          "id": "76dcf132-cd00-48ee-9883-4c897ab57529",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "aadaaead-509a-4e5b-820b-05754063e19f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76dcf132-cd00-48ee-9883-4c897ab57529",
        "cursor": {
          "ref": "689eefe0-a1af-4891-aed6-14cff979ec37",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "69ee675c-283b-4124-b9c2-ecdb7badde13"
        },
        "item": {
          "id": "76dcf132-cd00-48ee-9883-4c897ab57529",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "aadaaead-509a-4e5b-820b-05754063e19f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb9726a-6d77-4d80-968a-f2617bf2c6c0",
        "cursor": {
          "ref": "903d7bbd-9429-4ced-894f-75ad64ad40f7",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "da9f90ba-0944-4036-aaac-c83355e0dc4f"
        },
        "item": {
          "id": "deb9726a-6d77-4d80-968a-f2617bf2c6c0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "47d25a76-f5ab-4291-a553-3e95285b3e29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb9726a-6d77-4d80-968a-f2617bf2c6c0",
        "cursor": {
          "ref": "903d7bbd-9429-4ced-894f-75ad64ad40f7",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "da9f90ba-0944-4036-aaac-c83355e0dc4f"
        },
        "item": {
          "id": "deb9726a-6d77-4d80-968a-f2617bf2c6c0",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "47d25a76-f5ab-4291-a553-3e95285b3e29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b459f3bd-fca2-4f30-a6c1-e0412c5c9409",
        "cursor": {
          "ref": "64608314-088a-4032-ae3d-90305acc03f1",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bdf134e7-c2fb-414b-b8d8-99e2a40105cf"
        },
        "item": {
          "id": "b459f3bd-fca2-4f30-a6c1-e0412c5c9409",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3b4c1aef-837c-4c15-9522-458a5391c4bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b459f3bd-fca2-4f30-a6c1-e0412c5c9409",
        "cursor": {
          "ref": "64608314-088a-4032-ae3d-90305acc03f1",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "bdf134e7-c2fb-414b-b8d8-99e2a40105cf"
        },
        "item": {
          "id": "b459f3bd-fca2-4f30-a6c1-e0412c5c9409",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "3b4c1aef-837c-4c15-9522-458a5391c4bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa8cb88-7dd8-46c3-a3b4-5ee2b0454c71",
        "cursor": {
          "ref": "d5ed4895-8ee4-4b9e-a9a2-bcc6023b4664",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d06c6901-c3dd-4bb9-b292-aa510194091d"
        },
        "item": {
          "id": "caa8cb88-7dd8-46c3-a3b4-5ee2b0454c71",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1b895d5d-60db-4b45-ac48-69e53e24b795",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa8cb88-7dd8-46c3-a3b4-5ee2b0454c71",
        "cursor": {
          "ref": "d5ed4895-8ee4-4b9e-a9a2-bcc6023b4664",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d06c6901-c3dd-4bb9-b292-aa510194091d"
        },
        "item": {
          "id": "caa8cb88-7dd8-46c3-a3b4-5ee2b0454c71",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1b895d5d-60db-4b45-ac48-69e53e24b795",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3316dd-256f-43fe-a66b-b7ffec46102d",
        "cursor": {
          "ref": "06229b51-0c27-413d-a7b1-b7dfc0abde1b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5a7aec1c-acfd-4f28-aa09-cc4b050183a6"
        },
        "item": {
          "id": "0f3316dd-256f-43fe-a66b-b7ffec46102d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f5a5707f-2318-4e38-a49d-6c6912066e29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3316dd-256f-43fe-a66b-b7ffec46102d",
        "cursor": {
          "ref": "06229b51-0c27-413d-a7b1-b7dfc0abde1b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5a7aec1c-acfd-4f28-aa09-cc4b050183a6"
        },
        "item": {
          "id": "0f3316dd-256f-43fe-a66b-b7ffec46102d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f5a5707f-2318-4e38-a49d-6c6912066e29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4975e5-61f3-4c88-8b40-f246341b6274",
        "cursor": {
          "ref": "3e10bb71-f683-4322-8ec4-6a31fc613b86",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "082bf4b2-1113-4ded-9b72-4e0223a3b7e5"
        },
        "item": {
          "id": "1c4975e5-61f3-4c88-8b40-f246341b6274",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1c2dc363-342e-4fe7-9b78-656cba916a4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c4975e5-61f3-4c88-8b40-f246341b6274",
        "cursor": {
          "ref": "3e10bb71-f683-4322-8ec4-6a31fc613b86",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "082bf4b2-1113-4ded-9b72-4e0223a3b7e5"
        },
        "item": {
          "id": "1c4975e5-61f3-4c88-8b40-f246341b6274",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1c2dc363-342e-4fe7-9b78-656cba916a4c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df42e0ad-0e28-44df-82f0-35687aab6f65",
        "cursor": {
          "ref": "ff8aaad2-c24b-4f12-805a-1922facd39da",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f7f1de4a-6b18-421b-86f1-42ee549cb210"
        },
        "item": {
          "id": "df42e0ad-0e28-44df-82f0-35687aab6f65",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c415605e-52fa-49f2-8c57-dea8fe74c4c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df42e0ad-0e28-44df-82f0-35687aab6f65",
        "cursor": {
          "ref": "ff8aaad2-c24b-4f12-805a-1922facd39da",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f7f1de4a-6b18-421b-86f1-42ee549cb210"
        },
        "item": {
          "id": "df42e0ad-0e28-44df-82f0-35687aab6f65",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c415605e-52fa-49f2-8c57-dea8fe74c4c5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8cd1af-a5e5-43e7-801a-8c683018cefb",
        "cursor": {
          "ref": "e1d926e1-4ce9-459d-a2d6-9a0d28cc1ad3",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "61076b9a-63b0-4591-99a3-86dd88837b20"
        },
        "item": {
          "id": "6f8cd1af-a5e5-43e7-801a-8c683018cefb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "40667952-01ca-483d-87c9-ee79ef847185",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f8cd1af-a5e5-43e7-801a-8c683018cefb",
        "cursor": {
          "ref": "e1d926e1-4ce9-459d-a2d6-9a0d28cc1ad3",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "61076b9a-63b0-4591-99a3-86dd88837b20"
        },
        "item": {
          "id": "6f8cd1af-a5e5-43e7-801a-8c683018cefb",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "40667952-01ca-483d-87c9-ee79ef847185",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8133da-8575-41b3-a006-16d76cb670f6",
        "cursor": {
          "ref": "0a92dfc0-73f8-41b9-9bcc-ddacea4e6e86",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e9e352b2-6b52-4dd8-bac0-733d65d28393"
        },
        "item": {
          "id": "8c8133da-8575-41b3-a006-16d76cb670f6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fa947e39-f293-41b0-8330-cdde342608dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8133da-8575-41b3-a006-16d76cb670f6",
        "cursor": {
          "ref": "0a92dfc0-73f8-41b9-9bcc-ddacea4e6e86",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e9e352b2-6b52-4dd8-bac0-733d65d28393"
        },
        "item": {
          "id": "8c8133da-8575-41b3-a006-16d76cb670f6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fa947e39-f293-41b0-8330-cdde342608dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 41,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71363f1b-2bef-4a61-83d4-5f0650006ca9",
        "cursor": {
          "ref": "2f3bece2-badf-444c-a520-2ddd2813a2cf",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0d5d16e0-1359-4024-8307-6084d569a9e5"
        },
        "item": {
          "id": "71363f1b-2bef-4a61-83d4-5f0650006ca9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cd7f1298-6a23-4c5d-9aef-bb44a52b7f23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71363f1b-2bef-4a61-83d4-5f0650006ca9",
        "cursor": {
          "ref": "2f3bece2-badf-444c-a520-2ddd2813a2cf",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0d5d16e0-1359-4024-8307-6084d569a9e5"
        },
        "item": {
          "id": "71363f1b-2bef-4a61-83d4-5f0650006ca9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cd7f1298-6a23-4c5d-9aef-bb44a52b7f23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6f73e1-9f09-434f-9485-aaaef4ee1404",
        "cursor": {
          "ref": "755a7477-2100-4f69-8aa5-9a78a078524c",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c846a751-26fc-4763-b6af-cf0ae5ebfccd"
        },
        "item": {
          "id": "7d6f73e1-9f09-434f-9485-aaaef4ee1404",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9cca07d9-87dc-4471-878b-990e157da726",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d6f73e1-9f09-434f-9485-aaaef4ee1404",
        "cursor": {
          "ref": "755a7477-2100-4f69-8aa5-9a78a078524c",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c846a751-26fc-4763-b6af-cf0ae5ebfccd"
        },
        "item": {
          "id": "7d6f73e1-9f09-434f-9485-aaaef4ee1404",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9cca07d9-87dc-4471-878b-990e157da726",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e45a058-872b-4c19-94e9-a8f0a5507a24",
        "cursor": {
          "ref": "7a1c90b1-0d58-4404-bf6d-f23cfd38c75b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a735db76-3099-427c-8bec-b84e2b662139"
        },
        "item": {
          "id": "0e45a058-872b-4c19-94e9-a8f0a5507a24",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d3d73422-0f58-4b65-a42c-ff4116073058",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e45a058-872b-4c19-94e9-a8f0a5507a24",
        "cursor": {
          "ref": "7a1c90b1-0d58-4404-bf6d-f23cfd38c75b",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a735db76-3099-427c-8bec-b84e2b662139"
        },
        "item": {
          "id": "0e45a058-872b-4c19-94e9-a8f0a5507a24",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d3d73422-0f58-4b65-a42c-ff4116073058",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3450ea49-b6fa-4342-b6de-c7535d1eab9a",
        "cursor": {
          "ref": "a85798a8-fb2a-4ed2-97b9-8192d85c8c78",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cacd3b2f-ce18-435e-b954-76be65296e9c"
        },
        "item": {
          "id": "3450ea49-b6fa-4342-b6de-c7535d1eab9a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fdf93101-8ee2-4884-ae6b-0fe0b7e07c40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3450ea49-b6fa-4342-b6de-c7535d1eab9a",
        "cursor": {
          "ref": "a85798a8-fb2a-4ed2-97b9-8192d85c8c78",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "cacd3b2f-ce18-435e-b954-76be65296e9c"
        },
        "item": {
          "id": "3450ea49-b6fa-4342-b6de-c7535d1eab9a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fdf93101-8ee2-4884-ae6b-0fe0b7e07c40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6034f3d-9b1f-48ce-b1f6-a7f0f4e5d989",
        "cursor": {
          "ref": "f6ab328a-8d3c-4cfe-9968-02d2b4e71cac",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3284fbc0-b554-4b52-9d98-c87ffd21d30e"
        },
        "item": {
          "id": "f6034f3d-9b1f-48ce-b1f6-a7f0f4e5d989",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "544cb456-36c1-4810-8ace-163ffccd89d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6034f3d-9b1f-48ce-b1f6-a7f0f4e5d989",
        "cursor": {
          "ref": "f6ab328a-8d3c-4cfe-9968-02d2b4e71cac",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3284fbc0-b554-4b52-9d98-c87ffd21d30e"
        },
        "item": {
          "id": "f6034f3d-9b1f-48ce-b1f6-a7f0f4e5d989",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "544cb456-36c1-4810-8ace-163ffccd89d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ea4bc4-d24d-45d4-8776-613796ec59be",
        "cursor": {
          "ref": "2a938f24-f249-4220-8e6f-6aabda50772d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1c5f87c9-5041-4201-afcf-9db335ffb997"
        },
        "item": {
          "id": "e4ea4bc4-d24d-45d4-8776-613796ec59be",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a5ecb0ce-7156-400b-8330-7ddc31ce7056",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4ea4bc4-d24d-45d4-8776-613796ec59be",
        "cursor": {
          "ref": "2a938f24-f249-4220-8e6f-6aabda50772d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1c5f87c9-5041-4201-afcf-9db335ffb997"
        },
        "item": {
          "id": "e4ea4bc4-d24d-45d4-8776-613796ec59be",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a5ecb0ce-7156-400b-8330-7ddc31ce7056",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facd8ccf-b3c2-4a91-9667-87186d6782b4",
        "cursor": {
          "ref": "aa1722b9-1cbc-4894-ab73-fe6b1e59e3f0",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "56211772-9e1a-4076-85ca-4d01ca16d8d4"
        },
        "item": {
          "id": "facd8ccf-b3c2-4a91-9667-87186d6782b4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4f113df9-8285-436a-b513-c47d50e58595",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "facd8ccf-b3c2-4a91-9667-87186d6782b4",
        "cursor": {
          "ref": "aa1722b9-1cbc-4894-ab73-fe6b1e59e3f0",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "56211772-9e1a-4076-85ca-4d01ca16d8d4"
        },
        "item": {
          "id": "facd8ccf-b3c2-4a91-9667-87186d6782b4",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4f113df9-8285-436a-b513-c47d50e58595",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ba27a4-46c8-4bef-96c2-6b1630f36d68",
        "cursor": {
          "ref": "90b36431-eef8-40b0-bef6-9a237e723727",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2d21151b-d9d1-4acc-979f-b82518d66930"
        },
        "item": {
          "id": "95ba27a4-46c8-4bef-96c2-6b1630f36d68",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "dd6160e8-472c-4a31-bb73-7561f5981a84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ba27a4-46c8-4bef-96c2-6b1630f36d68",
        "cursor": {
          "ref": "90b36431-eef8-40b0-bef6-9a237e723727",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2d21151b-d9d1-4acc-979f-b82518d66930"
        },
        "item": {
          "id": "95ba27a4-46c8-4bef-96c2-6b1630f36d68",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "dd6160e8-472c-4a31-bb73-7561f5981a84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c604f8-21d5-4e9f-a0d3-56bd93cbcc7d",
        "cursor": {
          "ref": "a4f1569c-f515-4d1e-a675-f4019a143bbd",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "518294bf-d3f1-4abe-a4af-e31baddf679c"
        },
        "item": {
          "id": "68c604f8-21d5-4e9f-a0d3-56bd93cbcc7d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6f404276-44ee-44ab-a4aa-b2e6f63f2640",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c604f8-21d5-4e9f-a0d3-56bd93cbcc7d",
        "cursor": {
          "ref": "a4f1569c-f515-4d1e-a675-f4019a143bbd",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "518294bf-d3f1-4abe-a4af-e31baddf679c"
        },
        "item": {
          "id": "68c604f8-21d5-4e9f-a0d3-56bd93cbcc7d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "6f404276-44ee-44ab-a4aa-b2e6f63f2640",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb6bd2f-5a04-4b85-a32c-2025ea3c4e7b",
        "cursor": {
          "ref": "f2b9ca84-5a72-478f-8082-c0e6c11fe1b1",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3dc79220-7661-49ce-b34a-16b99aa641af"
        },
        "item": {
          "id": "fcb6bd2f-5a04-4b85-a32c-2025ea3c4e7b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6cbe5387-b336-4fb3-a4be-d3c0f6b8399c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcb6bd2f-5a04-4b85-a32c-2025ea3c4e7b",
        "cursor": {
          "ref": "f2b9ca84-5a72-478f-8082-c0e6c11fe1b1",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3dc79220-7661-49ce-b34a-16b99aa641af"
        },
        "item": {
          "id": "fcb6bd2f-5a04-4b85-a32c-2025ea3c4e7b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "6cbe5387-b336-4fb3-a4be-d3c0f6b8399c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28adeb13-d507-4934-977f-9520171f5d29",
        "cursor": {
          "ref": "29fa8e4f-36cb-4ece-9cfc-7fad912d20ec",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5c8e2d0a-6631-4e76-9d11-fe4461be198b"
        },
        "item": {
          "id": "28adeb13-d507-4934-977f-9520171f5d29",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1b1537c1-fa8b-406d-8f53-af9ff3975ba7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28adeb13-d507-4934-977f-9520171f5d29",
        "cursor": {
          "ref": "29fa8e4f-36cb-4ece-9cfc-7fad912d20ec",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5c8e2d0a-6631-4e76-9d11-fe4461be198b"
        },
        "item": {
          "id": "28adeb13-d507-4934-977f-9520171f5d29",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "1b1537c1-fa8b-406d-8f53-af9ff3975ba7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4373a5-3251-4d6b-ac12-e2b4d4aa6381",
        "cursor": {
          "ref": "acd1fa8e-a40f-41ca-be80-15b3a2eb97b9",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "992b92d0-6c02-4549-94b5-8c73963a6712"
        },
        "item": {
          "id": "fc4373a5-3251-4d6b-ac12-e2b4d4aa6381",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "526f0af6-7ec8-479c-a16a-38a6015e3785",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc4373a5-3251-4d6b-ac12-e2b4d4aa6381",
        "cursor": {
          "ref": "acd1fa8e-a40f-41ca-be80-15b3a2eb97b9",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "992b92d0-6c02-4549-94b5-8c73963a6712"
        },
        "item": {
          "id": "fc4373a5-3251-4d6b-ac12-e2b4d4aa6381",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "526f0af6-7ec8-479c-a16a-38a6015e3785",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa7db5c-defe-4b82-8978-dbc869ce37ac",
        "cursor": {
          "ref": "0b0ddfa2-c51d-4e9e-96aa-ef5a3c0d3689",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ef083cb3-d3d6-4645-9a42-05630050e6e8"
        },
        "item": {
          "id": "2aa7db5c-defe-4b82-8978-dbc869ce37ac",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7d97d219-fb8d-4ef3-8d0a-c00b53f7a1f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa7db5c-defe-4b82-8978-dbc869ce37ac",
        "cursor": {
          "ref": "0b0ddfa2-c51d-4e9e-96aa-ef5a3c0d3689",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ef083cb3-d3d6-4645-9a42-05630050e6e8"
        },
        "item": {
          "id": "2aa7db5c-defe-4b82-8978-dbc869ce37ac",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7d97d219-fb8d-4ef3-8d0a-c00b53f7a1f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18cfe7f-0fda-4fc3-8e6d-48954b37b519",
        "cursor": {
          "ref": "0b178d50-9687-4bdf-95f5-a93ebb9b5a01",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b6df4069-f0b3-4c18-92c1-9710af071960"
        },
        "item": {
          "id": "e18cfe7f-0fda-4fc3-8e6d-48954b37b519",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ecacbd6a-6b1a-4490-9f46-b8ea50311121",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18cfe7f-0fda-4fc3-8e6d-48954b37b519",
        "cursor": {
          "ref": "0b178d50-9687-4bdf-95f5-a93ebb9b5a01",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b6df4069-f0b3-4c18-92c1-9710af071960"
        },
        "item": {
          "id": "e18cfe7f-0fda-4fc3-8e6d-48954b37b519",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ecacbd6a-6b1a-4490-9f46-b8ea50311121",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dab3835-8e7b-4060-86ef-ad6acf187483",
        "cursor": {
          "ref": "39efe560-a650-40ee-962a-c944b2befeab",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e86a4bb9-cc74-4ded-bd09-43e70c2ed6c7"
        },
        "item": {
          "id": "7dab3835-8e7b-4060-86ef-ad6acf187483",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9095dd0e-68b6-4086-bd55-dbb74c2416ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dab3835-8e7b-4060-86ef-ad6acf187483",
        "cursor": {
          "ref": "39efe560-a650-40ee-962a-c944b2befeab",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e86a4bb9-cc74-4ded-bd09-43e70c2ed6c7"
        },
        "item": {
          "id": "7dab3835-8e7b-4060-86ef-ad6acf187483",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "9095dd0e-68b6-4086-bd55-dbb74c2416ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df52d8ff-075c-43bc-99e8-7fba8c316327",
        "cursor": {
          "ref": "ceb312f9-3a59-4ffb-8b39-4f03cda245c7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "89b3bfea-9be3-4ade-822c-50df1fbdf428"
        },
        "item": {
          "id": "df52d8ff-075c-43bc-99e8-7fba8c316327",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5e2bf07c-5473-406b-8129-8918117e72dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df52d8ff-075c-43bc-99e8-7fba8c316327",
        "cursor": {
          "ref": "ceb312f9-3a59-4ffb-8b39-4f03cda245c7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "89b3bfea-9be3-4ade-822c-50df1fbdf428"
        },
        "item": {
          "id": "df52d8ff-075c-43bc-99e8-7fba8c316327",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5e2bf07c-5473-406b-8129-8918117e72dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a146e871-3dfe-48cb-82a0-4c27ad415439",
        "cursor": {
          "ref": "0ebbed11-66e1-4ce4-b9a0-72b7e1980029",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "08016323-6aff-4686-affd-8677a5fe1809"
        },
        "item": {
          "id": "a146e871-3dfe-48cb-82a0-4c27ad415439",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5a755c94-53b7-4595-aabd-98c92af07370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a146e871-3dfe-48cb-82a0-4c27ad415439",
        "cursor": {
          "ref": "0ebbed11-66e1-4ce4-b9a0-72b7e1980029",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "08016323-6aff-4686-affd-8677a5fe1809"
        },
        "item": {
          "id": "a146e871-3dfe-48cb-82a0-4c27ad415439",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "5a755c94-53b7-4595-aabd-98c92af07370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfbce0f-a1d1-488a-bb32-1c403bb8c5ff",
        "cursor": {
          "ref": "1e890292-52a3-4c2e-ac7c-7a1cb069c45a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9738d882-a52f-4d63-86e2-150f1b935247"
        },
        "item": {
          "id": "8dfbce0f-a1d1-488a-bb32-1c403bb8c5ff",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6cd9b7db-8933-45a8-9b0b-35d31e7f39d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dfbce0f-a1d1-488a-bb32-1c403bb8c5ff",
        "cursor": {
          "ref": "1e890292-52a3-4c2e-ac7c-7a1cb069c45a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9738d882-a52f-4d63-86e2-150f1b935247"
        },
        "item": {
          "id": "8dfbce0f-a1d1-488a-bb32-1c403bb8c5ff",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6cd9b7db-8933-45a8-9b0b-35d31e7f39d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea80324f-e92b-4023-8eee-daa6b7c5ba47",
        "cursor": {
          "ref": "6705d51e-17c5-44b8-bedd-35ee28ee0e2e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2585b3c8-767d-4e94-8f70-e020be2a5648"
        },
        "item": {
          "id": "ea80324f-e92b-4023-8eee-daa6b7c5ba47",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8790fff1-0b7b-41a0-b8a6-9ee92eb2f44d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea80324f-e92b-4023-8eee-daa6b7c5ba47",
        "cursor": {
          "ref": "6705d51e-17c5-44b8-bedd-35ee28ee0e2e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2585b3c8-767d-4e94-8f70-e020be2a5648"
        },
        "item": {
          "id": "ea80324f-e92b-4023-8eee-daa6b7c5ba47",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8790fff1-0b7b-41a0-b8a6-9ee92eb2f44d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a095919-8d5f-48cc-9d2f-9b9f601aef9e",
        "cursor": {
          "ref": "605f3f5a-a3f1-4733-b590-6cf042da3e05",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4f861f08-75bc-437e-9704-5c3fbf2454de"
        },
        "item": {
          "id": "2a095919-8d5f-48cc-9d2f-9b9f601aef9e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "288fcb15-2b4d-449a-b267-f49ebeb422ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a095919-8d5f-48cc-9d2f-9b9f601aef9e",
        "cursor": {
          "ref": "605f3f5a-a3f1-4733-b590-6cf042da3e05",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "4f861f08-75bc-437e-9704-5c3fbf2454de"
        },
        "item": {
          "id": "2a095919-8d5f-48cc-9d2f-9b9f601aef9e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "288fcb15-2b4d-449a-b267-f49ebeb422ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc913397-7616-4fc4-8350-508fa74791d8",
        "cursor": {
          "ref": "561a0d4e-43d8-416f-8a0f-7bce3f775e46",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "50746360-019f-4c15-9d99-5890439ef874"
        },
        "item": {
          "id": "bc913397-7616-4fc4-8350-508fa74791d8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c3cc3264-7eb9-40e2-8e97-25575479a0b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc913397-7616-4fc4-8350-508fa74791d8",
        "cursor": {
          "ref": "561a0d4e-43d8-416f-8a0f-7bce3f775e46",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "50746360-019f-4c15-9d99-5890439ef874"
        },
        "item": {
          "id": "bc913397-7616-4fc4-8350-508fa74791d8",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c3cc3264-7eb9-40e2-8e97-25575479a0b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc25fc0-2b8b-4aa2-a1cd-1e27a78e1eaf",
        "cursor": {
          "ref": "6d9069de-e591-4021-8f92-9ae3dcb2c511",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9785f60a-1e6b-4465-a403-633fa94ed33f"
        },
        "item": {
          "id": "fcc25fc0-2b8b-4aa2-a1cd-1e27a78e1eaf",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5fa89cf3-547e-4a64-8307-302588535227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc25fc0-2b8b-4aa2-a1cd-1e27a78e1eaf",
        "cursor": {
          "ref": "6d9069de-e591-4021-8f92-9ae3dcb2c511",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9785f60a-1e6b-4465-a403-633fa94ed33f"
        },
        "item": {
          "id": "fcc25fc0-2b8b-4aa2-a1cd-1e27a78e1eaf",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5fa89cf3-547e-4a64-8307-302588535227",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe304b7-d664-4e86-b2cc-399b5830a109",
        "cursor": {
          "ref": "dd0fcb17-52bc-4c1c-87d0-ef2d563c8f07",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fc0f656e-c5f9-495b-bade-83ae12ab1c5f"
        },
        "item": {
          "id": "fbe304b7-d664-4e86-b2cc-399b5830a109",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "080d9fee-0b3e-4e44-9c38-820f9ee9ba15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbe304b7-d664-4e86-b2cc-399b5830a109",
        "cursor": {
          "ref": "dd0fcb17-52bc-4c1c-87d0-ef2d563c8f07",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "fc0f656e-c5f9-495b-bade-83ae12ab1c5f"
        },
        "item": {
          "id": "fbe304b7-d664-4e86-b2cc-399b5830a109",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "080d9fee-0b3e-4e44-9c38-820f9ee9ba15",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdda79c9-e908-4960-b9bf-31822dcb0676",
        "cursor": {
          "ref": "b6bd63da-6c43-4efa-a676-7a0b4a26cbd9",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ef7b7fa8-e0a7-4aff-822e-69192d138b99"
        },
        "item": {
          "id": "cdda79c9-e908-4960-b9bf-31822dcb0676",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "20f366cb-611c-4dc2-a854-99cc117d5410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdda79c9-e908-4960-b9bf-31822dcb0676",
        "cursor": {
          "ref": "b6bd63da-6c43-4efa-a676-7a0b4a26cbd9",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ef7b7fa8-e0a7-4aff-822e-69192d138b99"
        },
        "item": {
          "id": "cdda79c9-e908-4960-b9bf-31822dcb0676",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "20f366cb-611c-4dc2-a854-99cc117d5410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f467b55d-7a8a-4322-b590-8ec1c605ad05",
        "cursor": {
          "ref": "007cd348-d835-46ff-a737-7adf1e3d2a6c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a5607a95-ff7a-4371-9ac0-f075a1b134d5"
        },
        "item": {
          "id": "f467b55d-7a8a-4322-b590-8ec1c605ad05",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "78487a5b-cb66-4285-bb4e-5fdaa2b96e9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f467b55d-7a8a-4322-b590-8ec1c605ad05",
        "cursor": {
          "ref": "007cd348-d835-46ff-a737-7adf1e3d2a6c",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a5607a95-ff7a-4371-9ac0-f075a1b134d5"
        },
        "item": {
          "id": "f467b55d-7a8a-4322-b590-8ec1c605ad05",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "78487a5b-cb66-4285-bb4e-5fdaa2b96e9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e07d53-ac06-4bb5-af0d-67c6e34e0535",
        "cursor": {
          "ref": "49ea3a76-9f95-4bf3-bf11-d1712380cd97",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "870841c8-b647-4c00-81c9-6456beeadcc4"
        },
        "item": {
          "id": "b8e07d53-ac06-4bb5-af0d-67c6e34e0535",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "228e0373-827f-4a60-92dd-d23e3a98fc04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e07d53-ac06-4bb5-af0d-67c6e34e0535",
        "cursor": {
          "ref": "49ea3a76-9f95-4bf3-bf11-d1712380cd97",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "870841c8-b647-4c00-81c9-6456beeadcc4"
        },
        "item": {
          "id": "b8e07d53-ac06-4bb5-af0d-67c6e34e0535",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "228e0373-827f-4a60-92dd-d23e3a98fc04",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111557ae-bdb5-4fce-9336-bc2ef2efb586",
        "cursor": {
          "ref": "76ccf227-da2e-44a2-96aa-3a68a49b70a9",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0df358cb-12ac-43d6-a200-4809f9639a57"
        },
        "item": {
          "id": "111557ae-bdb5-4fce-9336-bc2ef2efb586",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0f7b9137-f6a9-4d70-bd73-330ffa5a8a2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111557ae-bdb5-4fce-9336-bc2ef2efb586",
        "cursor": {
          "ref": "76ccf227-da2e-44a2-96aa-3a68a49b70a9",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0df358cb-12ac-43d6-a200-4809f9639a57"
        },
        "item": {
          "id": "111557ae-bdb5-4fce-9336-bc2ef2efb586",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0f7b9137-f6a9-4d70-bd73-330ffa5a8a2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28594ffd-3c6d-4ef3-8e06-2d3357b8229a",
        "cursor": {
          "ref": "34d7cb4d-6c92-46f2-b7b8-e08bb9513614",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e00b18b8-4c28-46fb-bb95-83528dfb02ad"
        },
        "item": {
          "id": "28594ffd-3c6d-4ef3-8e06-2d3357b8229a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6a8095f3-175b-487e-865a-4298aa349721",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28594ffd-3c6d-4ef3-8e06-2d3357b8229a",
        "cursor": {
          "ref": "34d7cb4d-6c92-46f2-b7b8-e08bb9513614",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "e00b18b8-4c28-46fb-bb95-83528dfb02ad"
        },
        "item": {
          "id": "28594ffd-3c6d-4ef3-8e06-2d3357b8229a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "6a8095f3-175b-487e-865a-4298aa349721",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503e6559-b016-4656-8bf4-8a50192b6c68",
        "cursor": {
          "ref": "a150d03d-56a5-46ba-a58b-3db8b3d9a15c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6f41ae89-b8c9-492f-a17a-9ff70663f9c6"
        },
        "item": {
          "id": "503e6559-b016-4656-8bf4-8a50192b6c68",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0426f408-7ec1-4cbb-87cc-09675a7cd870",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "503e6559-b016-4656-8bf4-8a50192b6c68",
        "cursor": {
          "ref": "a150d03d-56a5-46ba-a58b-3db8b3d9a15c",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6f41ae89-b8c9-492f-a17a-9ff70663f9c6"
        },
        "item": {
          "id": "503e6559-b016-4656-8bf4-8a50192b6c68",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0426f408-7ec1-4cbb-87cc-09675a7cd870",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc8226d-afec-46e6-baa6-9a1236068d7f",
        "cursor": {
          "ref": "a1712e8d-1291-4bb6-ad5a-d4022c983791",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ef983d4f-5bff-47c4-a574-ad666441a43b"
        },
        "item": {
          "id": "0cc8226d-afec-46e6-baa6-9a1236068d7f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ddf2b747-dda6-4ba5-95d6-5df293f5aa6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cc8226d-afec-46e6-baa6-9a1236068d7f",
        "cursor": {
          "ref": "a1712e8d-1291-4bb6-ad5a-d4022c983791",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ef983d4f-5bff-47c4-a574-ad666441a43b"
        },
        "item": {
          "id": "0cc8226d-afec-46e6-baa6-9a1236068d7f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "ddf2b747-dda6-4ba5-95d6-5df293f5aa6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5218f0d-90f5-4f84-ab55-1cbf37b78427",
        "cursor": {
          "ref": "5b7f0d97-be76-4d17-8231-6d30633e9c05",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "682b8d92-20fd-4813-b6c4-3c12adc40512"
        },
        "item": {
          "id": "a5218f0d-90f5-4f84-ab55-1cbf37b78427",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8a14dcac-738d-4acc-89cf-497f1ddf8069",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5218f0d-90f5-4f84-ab55-1cbf37b78427",
        "cursor": {
          "ref": "5b7f0d97-be76-4d17-8231-6d30633e9c05",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "682b8d92-20fd-4813-b6c4-3c12adc40512"
        },
        "item": {
          "id": "a5218f0d-90f5-4f84-ab55-1cbf37b78427",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8a14dcac-738d-4acc-89cf-497f1ddf8069",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b27f5ff-5fa3-43bb-bd4b-6c46464d29b7",
        "cursor": {
          "ref": "4d40b6e2-8156-445e-82ba-9916d9a29b8b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e83c8e6f-d09f-4b3a-8c5f-d729c98d2f53"
        },
        "item": {
          "id": "9b27f5ff-5fa3-43bb-bd4b-6c46464d29b7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "50b3c50b-716f-425a-9c3b-6be9c742e76e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b27f5ff-5fa3-43bb-bd4b-6c46464d29b7",
        "cursor": {
          "ref": "4d40b6e2-8156-445e-82ba-9916d9a29b8b",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "e83c8e6f-d09f-4b3a-8c5f-d729c98d2f53"
        },
        "item": {
          "id": "9b27f5ff-5fa3-43bb-bd4b-6c46464d29b7",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "50b3c50b-716f-425a-9c3b-6be9c742e76e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699aed31-4cd7-4bc9-a0c9-3ff3464d26f3",
        "cursor": {
          "ref": "4ff7c2af-a2f8-4ddc-8b57-6251ee871729",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9f33e7ca-452d-426e-8f7d-e391351736ab"
        },
        "item": {
          "id": "699aed31-4cd7-4bc9-a0c9-3ff3464d26f3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c4d3c11f-220d-48d8-9604-78beb7418b0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699aed31-4cd7-4bc9-a0c9-3ff3464d26f3",
        "cursor": {
          "ref": "4ff7c2af-a2f8-4ddc-8b57-6251ee871729",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "9f33e7ca-452d-426e-8f7d-e391351736ab"
        },
        "item": {
          "id": "699aed31-4cd7-4bc9-a0c9-3ff3464d26f3",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c4d3c11f-220d-48d8-9604-78beb7418b0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743d451c-a3ad-4a97-9db3-f009c0e81895",
        "cursor": {
          "ref": "3368d47e-60a5-4733-9896-a2696f9b89ee",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2f5829ed-7dff-45bf-a942-ec274dcdcf48"
        },
        "item": {
          "id": "743d451c-a3ad-4a97-9db3-f009c0e81895",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2c0ec062-7b88-4024-bf41-2cad742d3d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743d451c-a3ad-4a97-9db3-f009c0e81895",
        "cursor": {
          "ref": "3368d47e-60a5-4733-9896-a2696f9b89ee",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2f5829ed-7dff-45bf-a942-ec274dcdcf48"
        },
        "item": {
          "id": "743d451c-a3ad-4a97-9db3-f009c0e81895",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2c0ec062-7b88-4024-bf41-2cad742d3d71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb010b0-102b-442a-a5b7-43a3e96c28d9",
        "cursor": {
          "ref": "23c36ce7-9efa-4be0-a930-c86c91dcc666",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fd6d05f3-8cab-432d-bde1-4218b225c997"
        },
        "item": {
          "id": "8fb010b0-102b-442a-a5b7-43a3e96c28d9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b5f90bff-8eb1-4101-babd-d0799d367eb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fb010b0-102b-442a-a5b7-43a3e96c28d9",
        "cursor": {
          "ref": "23c36ce7-9efa-4be0-a930-c86c91dcc666",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fd6d05f3-8cab-432d-bde1-4218b225c997"
        },
        "item": {
          "id": "8fb010b0-102b-442a-a5b7-43a3e96c28d9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b5f90bff-8eb1-4101-babd-d0799d367eb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06828315-b8a1-4b8a-ab6a-1789102ddc0c",
        "cursor": {
          "ref": "cb3f9e8e-2212-45e0-acef-3d8fcda6fb6e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "420cb88b-21de-4072-9848-c620cf4128dc"
        },
        "item": {
          "id": "06828315-b8a1-4b8a-ab6a-1789102ddc0c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "33a4751e-4b47-4c8e-a8f7-85094ef3a67a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06828315-b8a1-4b8a-ab6a-1789102ddc0c",
        "cursor": {
          "ref": "cb3f9e8e-2212-45e0-acef-3d8fcda6fb6e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "420cb88b-21de-4072-9848-c620cf4128dc"
        },
        "item": {
          "id": "06828315-b8a1-4b8a-ab6a-1789102ddc0c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "33a4751e-4b47-4c8e-a8f7-85094ef3a67a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035f5b91-0d32-4c6e-9dc8-9d2728a28ec6",
        "cursor": {
          "ref": "a1aa6397-1c09-4200-93b3-f49a0acdd617",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e0c5cf74-4fec-4d13-8e99-773c68292485"
        },
        "item": {
          "id": "035f5b91-0d32-4c6e-9dc8-9d2728a28ec6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a01a75ce-53bb-4a83-a10f-12f983dba4e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035f5b91-0d32-4c6e-9dc8-9d2728a28ec6",
        "cursor": {
          "ref": "a1aa6397-1c09-4200-93b3-f49a0acdd617",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "e0c5cf74-4fec-4d13-8e99-773c68292485"
        },
        "item": {
          "id": "035f5b91-0d32-4c6e-9dc8-9d2728a28ec6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a01a75ce-53bb-4a83-a10f-12f983dba4e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8b11b8-b637-43e4-959a-18f19427dd33",
        "cursor": {
          "ref": "b1c3032b-9e82-40a9-9165-48ef38ae3160",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "abd1451b-5fec-418c-aafc-caee02eedd55"
        },
        "item": {
          "id": "6d8b11b8-b637-43e4-959a-18f19427dd33",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0459f802-1e95-4b1a-988f-c0fa244c55ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8b11b8-b637-43e4-959a-18f19427dd33",
        "cursor": {
          "ref": "b1c3032b-9e82-40a9-9165-48ef38ae3160",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "abd1451b-5fec-418c-aafc-caee02eedd55"
        },
        "item": {
          "id": "6d8b11b8-b637-43e4-959a-18f19427dd33",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "0459f802-1e95-4b1a-988f-c0fa244c55ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078ff02e-4ec0-4aa6-9ffb-a692f84dfc67",
        "cursor": {
          "ref": "f01d3768-3399-4dff-a79d-dcafa0737375",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "43fea3b1-c721-440b-ab0b-367dbd98728f"
        },
        "item": {
          "id": "078ff02e-4ec0-4aa6-9ffb-a692f84dfc67",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cf592490-85a8-491e-a6de-92364e81d93e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078ff02e-4ec0-4aa6-9ffb-a692f84dfc67",
        "cursor": {
          "ref": "f01d3768-3399-4dff-a79d-dcafa0737375",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "43fea3b1-c721-440b-ab0b-367dbd98728f"
        },
        "item": {
          "id": "078ff02e-4ec0-4aa6-9ffb-a692f84dfc67",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "cf592490-85a8-491e-a6de-92364e81d93e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850898e9-243c-40d1-a3ef-5101db32e354",
        "cursor": {
          "ref": "273b8601-387b-44ca-aef9-8a8d371694b5",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1c9b36f1-814a-4745-8288-88d3e97ee3bf"
        },
        "item": {
          "id": "850898e9-243c-40d1-a3ef-5101db32e354",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3d61182c-bef4-43f6-8b23-049303ea6f4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850898e9-243c-40d1-a3ef-5101db32e354",
        "cursor": {
          "ref": "273b8601-387b-44ca-aef9-8a8d371694b5",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "1c9b36f1-814a-4745-8288-88d3e97ee3bf"
        },
        "item": {
          "id": "850898e9-243c-40d1-a3ef-5101db32e354",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "3d61182c-bef4-43f6-8b23-049303ea6f4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7245d46-b114-478b-a27c-9e9d31e9483e",
        "cursor": {
          "ref": "692aa05e-815d-4d3e-b04d-3e2e4592ac08",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0cf1b141-d0f2-43ea-9f17-8b7dac80b471"
        },
        "item": {
          "id": "c7245d46-b114-478b-a27c-9e9d31e9483e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d73628d2-a519-4bfe-a9de-9d0edcb2d5ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7245d46-b114-478b-a27c-9e9d31e9483e",
        "cursor": {
          "ref": "692aa05e-815d-4d3e-b04d-3e2e4592ac08",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0cf1b141-d0f2-43ea-9f17-8b7dac80b471"
        },
        "item": {
          "id": "c7245d46-b114-478b-a27c-9e9d31e9483e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d73628d2-a519-4bfe-a9de-9d0edcb2d5ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186813bd-1732-40de-a734-27130f6b554b",
        "cursor": {
          "ref": "44ad4741-ab02-437e-97ab-e3fe45c8e8d0",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dd20d70f-cd9e-4e6e-b71a-bb582942de49"
        },
        "item": {
          "id": "186813bd-1732-40de-a734-27130f6b554b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "89586303-9399-4788-b5b0-99aa805fff70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "186813bd-1732-40de-a734-27130f6b554b",
        "cursor": {
          "ref": "44ad4741-ab02-437e-97ab-e3fe45c8e8d0",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dd20d70f-cd9e-4e6e-b71a-bb582942de49"
        },
        "item": {
          "id": "186813bd-1732-40de-a734-27130f6b554b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "89586303-9399-4788-b5b0-99aa805fff70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99e7103-c6c1-4d6a-af0d-ed29f1b98bbd",
        "cursor": {
          "ref": "680335f4-6b05-47b0-ad4c-db230181110b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5564faec-e57a-4b85-8914-91442cff1b55"
        },
        "item": {
          "id": "e99e7103-c6c1-4d6a-af0d-ed29f1b98bbd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "568efd1d-ee49-40f9-9e14-e206cad586fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e99e7103-c6c1-4d6a-af0d-ed29f1b98bbd",
        "cursor": {
          "ref": "680335f4-6b05-47b0-ad4c-db230181110b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "5564faec-e57a-4b85-8914-91442cff1b55"
        },
        "item": {
          "id": "e99e7103-c6c1-4d6a-af0d-ed29f1b98bbd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "568efd1d-ee49-40f9-9e14-e206cad586fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0155ce1f-ed10-4568-b975-4a5dfc7f9fa6",
        "cursor": {
          "ref": "4edfe5f2-ccac-41a2-9c3c-8451f1a4c06d",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c0459670-37b7-488d-a7ee-88d6affd28d2"
        },
        "item": {
          "id": "0155ce1f-ed10-4568-b975-4a5dfc7f9fa6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0c50905e-0ac7-482e-9d5b-7708c78ef4cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0155ce1f-ed10-4568-b975-4a5dfc7f9fa6",
        "cursor": {
          "ref": "4edfe5f2-ccac-41a2-9c3c-8451f1a4c06d",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c0459670-37b7-488d-a7ee-88d6affd28d2"
        },
        "item": {
          "id": "0155ce1f-ed10-4568-b975-4a5dfc7f9fa6",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0c50905e-0ac7-482e-9d5b-7708c78ef4cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c106a33b-7168-427b-a951-b2f9f1c53693",
        "cursor": {
          "ref": "4b94d647-c3c5-4d49-abf8-3f63482a71ac",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f7460f7b-e6c9-487e-ab41-276712193da7"
        },
        "item": {
          "id": "c106a33b-7168-427b-a951-b2f9f1c53693",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d004b73b-04bc-40bd-8afc-b6de205a1fcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c106a33b-7168-427b-a951-b2f9f1c53693",
        "cursor": {
          "ref": "4b94d647-c3c5-4d49-abf8-3f63482a71ac",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f7460f7b-e6c9-487e-ab41-276712193da7"
        },
        "item": {
          "id": "c106a33b-7168-427b-a951-b2f9f1c53693",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d004b73b-04bc-40bd-8afc-b6de205a1fcf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e32eb0-c7d1-48e1-8680-12cc82668a48",
        "cursor": {
          "ref": "8e33fa3a-3315-4728-8859-be1b51f5bd35",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b8023002-6261-42b3-843c-22f31833ccf8"
        },
        "item": {
          "id": "42e32eb0-c7d1-48e1-8680-12cc82668a48",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5e6848d8-220a-4b23-8d9e-44151777a150",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e32eb0-c7d1-48e1-8680-12cc82668a48",
        "cursor": {
          "ref": "8e33fa3a-3315-4728-8859-be1b51f5bd35",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b8023002-6261-42b3-843c-22f31833ccf8"
        },
        "item": {
          "id": "42e32eb0-c7d1-48e1-8680-12cc82668a48",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5e6848d8-220a-4b23-8d9e-44151777a150",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cf808f-8c36-412a-b403-4f91680005c7",
        "cursor": {
          "ref": "1cb54b0b-a61d-4490-a2f8-af092295f80e",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c344294c-ac50-4c1d-bba5-3dab43b52de7"
        },
        "item": {
          "id": "c2cf808f-8c36-412a-b403-4f91680005c7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "38c0bafb-3bb9-4a17-97e8-a55e90d00174",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cf808f-8c36-412a-b403-4f91680005c7",
        "cursor": {
          "ref": "1cb54b0b-a61d-4490-a2f8-af092295f80e",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "c344294c-ac50-4c1d-bba5-3dab43b52de7"
        },
        "item": {
          "id": "c2cf808f-8c36-412a-b403-4f91680005c7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "38c0bafb-3bb9-4a17-97e8-a55e90d00174",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6f4549-336c-42df-a29c-e98993ee9d80",
        "cursor": {
          "ref": "49609920-5247-4a12-b261-b50edc6c442f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "39301b25-a398-4766-aa3d-4c764804d0d2"
        },
        "item": {
          "id": "fa6f4549-336c-42df-a29c-e98993ee9d80",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0c491b1f-ca5e-47b4-87d5-07786609cda9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa6f4549-336c-42df-a29c-e98993ee9d80",
        "cursor": {
          "ref": "49609920-5247-4a12-b261-b50edc6c442f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "39301b25-a398-4766-aa3d-4c764804d0d2"
        },
        "item": {
          "id": "fa6f4549-336c-42df-a29c-e98993ee9d80",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0c491b1f-ca5e-47b4-87d5-07786609cda9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb32ec94-283c-4be4-b41b-3776e59f6b59",
        "cursor": {
          "ref": "ded0f074-8bc6-4d42-b561-f0b9bc0884d6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bf637fb7-c218-4763-900f-349fb21a412d"
        },
        "item": {
          "id": "eb32ec94-283c-4be4-b41b-3776e59f6b59",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1c3c267c-d9a8-45a8-9735-a12266c4b17d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb32ec94-283c-4be4-b41b-3776e59f6b59",
        "cursor": {
          "ref": "ded0f074-8bc6-4d42-b561-f0b9bc0884d6",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bf637fb7-c218-4763-900f-349fb21a412d"
        },
        "item": {
          "id": "eb32ec94-283c-4be4-b41b-3776e59f6b59",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1c3c267c-d9a8-45a8-9735-a12266c4b17d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6e1cb4-1a0a-41ff-b190-0e4ac8c45131",
        "cursor": {
          "ref": "db19c12a-5604-47dd-bdc8-299433bd0e8b",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "20b89e99-e13c-4255-9d10-492392e5188e"
        },
        "item": {
          "id": "8c6e1cb4-1a0a-41ff-b190-0e4ac8c45131",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c7577a29-ab3d-490e-a71d-dc641d40518d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6e1cb4-1a0a-41ff-b190-0e4ac8c45131",
        "cursor": {
          "ref": "db19c12a-5604-47dd-bdc8-299433bd0e8b",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "20b89e99-e13c-4255-9d10-492392e5188e"
        },
        "item": {
          "id": "8c6e1cb4-1a0a-41ff-b190-0e4ac8c45131",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c7577a29-ab3d-490e-a71d-dc641d40518d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96879ffd-0949-4c61-a6bc-6ef04064fbd4",
        "cursor": {
          "ref": "4752caa9-b7a5-4749-8c7c-06ac612e3e82",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "afb66b03-590f-4a95-86c9-0b0cba12be00"
        },
        "item": {
          "id": "96879ffd-0949-4c61-a6bc-6ef04064fbd4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6ffb75b4-90cc-4472-90d9-1eab2bd492c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96879ffd-0949-4c61-a6bc-6ef04064fbd4",
        "cursor": {
          "ref": "4752caa9-b7a5-4749-8c7c-06ac612e3e82",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "afb66b03-590f-4a95-86c9-0b0cba12be00"
        },
        "item": {
          "id": "96879ffd-0949-4c61-a6bc-6ef04064fbd4",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6ffb75b4-90cc-4472-90d9-1eab2bd492c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670f0492-b6d5-459f-af17-3929073e7f12",
        "cursor": {
          "ref": "0476caa9-f34d-4240-88ad-3b04acbf222d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "586b33ab-49bc-4e05-bdff-fccb12684847"
        },
        "item": {
          "id": "670f0492-b6d5-459f-af17-3929073e7f12",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ac95480d-f1b9-45a9-a0e9-f7367e4ffee4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670f0492-b6d5-459f-af17-3929073e7f12",
        "cursor": {
          "ref": "0476caa9-f34d-4240-88ad-3b04acbf222d",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "586b33ab-49bc-4e05-bdff-fccb12684847"
        },
        "item": {
          "id": "670f0492-b6d5-459f-af17-3929073e7f12",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ac95480d-f1b9-45a9-a0e9-f7367e4ffee4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05956e38-f1db-4eaf-86c9-384971746194",
        "cursor": {
          "ref": "2bfc0b29-d76b-4bb8-884e-f16dbf8e0bd3",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f03aea54-4127-4616-b021-8310f4961630"
        },
        "item": {
          "id": "05956e38-f1db-4eaf-86c9-384971746194",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "036942c8-0f2d-4c83-8b02-87d45a2b3b4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05956e38-f1db-4eaf-86c9-384971746194",
        "cursor": {
          "ref": "2bfc0b29-d76b-4bb8-884e-f16dbf8e0bd3",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f03aea54-4127-4616-b021-8310f4961630"
        },
        "item": {
          "id": "05956e38-f1db-4eaf-86c9-384971746194",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "036942c8-0f2d-4c83-8b02-87d45a2b3b4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3757c68-b651-42bc-8b75-f7ed02229e86",
        "cursor": {
          "ref": "3f32ce6c-df57-4df0-9161-54a906e1ab88",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a9339dde-6dee-43aa-93f8-67298142aa83"
        },
        "item": {
          "id": "a3757c68-b651-42bc-8b75-f7ed02229e86",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "030bc719-7ceb-4ae4-a950-ae7b65d90fdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3757c68-b651-42bc-8b75-f7ed02229e86",
        "cursor": {
          "ref": "3f32ce6c-df57-4df0-9161-54a906e1ab88",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a9339dde-6dee-43aa-93f8-67298142aa83"
        },
        "item": {
          "id": "a3757c68-b651-42bc-8b75-f7ed02229e86",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "030bc719-7ceb-4ae4-a950-ae7b65d90fdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf162144-37ef-4ed0-af10-bf4db0474b63",
        "cursor": {
          "ref": "c542afdb-77f4-45f0-8446-a9616ff68b4b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c5d79449-ad1e-4344-8740-05f207ed4f16"
        },
        "item": {
          "id": "cf162144-37ef-4ed0-af10-bf4db0474b63",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "671b1006-aac0-47ed-b4f2-13aeae2dbfe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf162144-37ef-4ed0-af10-bf4db0474b63",
        "cursor": {
          "ref": "c542afdb-77f4-45f0-8446-a9616ff68b4b",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c5d79449-ad1e-4344-8740-05f207ed4f16"
        },
        "item": {
          "id": "cf162144-37ef-4ed0-af10-bf4db0474b63",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "671b1006-aac0-47ed-b4f2-13aeae2dbfe4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806d0ff7-db13-49fe-a157-93944055c6d5",
        "cursor": {
          "ref": "7cde8c06-c771-4a87-8341-d4091593f8d2",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b3cfb9dd-0dc0-4c20-b9a5-287fcf02f8cb"
        },
        "item": {
          "id": "806d0ff7-db13-49fe-a157-93944055c6d5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3fb30474-719c-4e35-a7f1-c24636092f28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806d0ff7-db13-49fe-a157-93944055c6d5",
        "cursor": {
          "ref": "7cde8c06-c771-4a87-8341-d4091593f8d2",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b3cfb9dd-0dc0-4c20-b9a5-287fcf02f8cb"
        },
        "item": {
          "id": "806d0ff7-db13-49fe-a157-93944055c6d5",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3fb30474-719c-4e35-a7f1-c24636092f28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e6c74d-2ccb-43ce-9c23-7215e9e219a5",
        "cursor": {
          "ref": "fca43e93-0c01-400c-9e27-3de168d7a14f",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9350dc2e-ecac-45c7-83bb-85cd4fceae0b"
        },
        "item": {
          "id": "21e6c74d-2ccb-43ce-9c23-7215e9e219a5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5b2e3ba6-45e6-48c2-ba4a-1dc6ccdb40c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e6c74d-2ccb-43ce-9c23-7215e9e219a5",
        "cursor": {
          "ref": "fca43e93-0c01-400c-9e27-3de168d7a14f",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9350dc2e-ecac-45c7-83bb-85cd4fceae0b"
        },
        "item": {
          "id": "21e6c74d-2ccb-43ce-9c23-7215e9e219a5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5b2e3ba6-45e6-48c2-ba4a-1dc6ccdb40c8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0415bfb7-bb61-46b4-92bf-c3cdab8e3812",
        "cursor": {
          "ref": "1ae1b75f-9c43-4f95-bce7-f215ac9eecfb",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "646e8b25-ab57-424a-a4f7-4e6d0048820d"
        },
        "item": {
          "id": "0415bfb7-bb61-46b4-92bf-c3cdab8e3812",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "db80e747-17c3-4c86-84dd-3153c80a07b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0415bfb7-bb61-46b4-92bf-c3cdab8e3812",
        "cursor": {
          "ref": "1ae1b75f-9c43-4f95-bce7-f215ac9eecfb",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "646e8b25-ab57-424a-a4f7-4e6d0048820d"
        },
        "item": {
          "id": "0415bfb7-bb61-46b4-92bf-c3cdab8e3812",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "db80e747-17c3-4c86-84dd-3153c80a07b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203e5514-8ece-447b-b3df-b51de7c67f92",
        "cursor": {
          "ref": "1c6e7b5c-cf05-4843-972d-f4a63cd9861f",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "169fe616-5fc5-471c-a31b-2284a853d021"
        },
        "item": {
          "id": "203e5514-8ece-447b-b3df-b51de7c67f92",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "49f9520f-9d71-4fd9-987d-94bd6272328d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "203e5514-8ece-447b-b3df-b51de7c67f92",
        "cursor": {
          "ref": "1c6e7b5c-cf05-4843-972d-f4a63cd9861f",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "169fe616-5fc5-471c-a31b-2284a853d021"
        },
        "item": {
          "id": "203e5514-8ece-447b-b3df-b51de7c67f92",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "49f9520f-9d71-4fd9-987d-94bd6272328d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b0ccac-5950-4398-8ef8-007462ce9fec",
        "cursor": {
          "ref": "0f439f61-1076-46c7-899a-d3197b091736",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "009a072f-f2ef-497d-9453-240b80179d58"
        },
        "item": {
          "id": "87b0ccac-5950-4398-8ef8-007462ce9fec",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d9e63e4d-c408-4179-8d86-e452190f75d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87b0ccac-5950-4398-8ef8-007462ce9fec",
        "cursor": {
          "ref": "0f439f61-1076-46c7-899a-d3197b091736",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "009a072f-f2ef-497d-9453-240b80179d58"
        },
        "item": {
          "id": "87b0ccac-5950-4398-8ef8-007462ce9fec",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d9e63e4d-c408-4179-8d86-e452190f75d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b2b2c01-c3c1-4325-b1dc-54fe6cbec7b8",
        "cursor": {
          "ref": "c2aa4aab-f58f-4f3b-a4df-c3324e5fa7f3",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "851cfe87-bd1c-46e5-8b46-588d8a096d7c"
        },
        "item": {
          "id": "1b2b2c01-c3c1-4325-b1dc-54fe6cbec7b8",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d9d550fb-e3ff-475b-9a0a-b6dd75fbbade",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1b2b2c01-c3c1-4325-b1dc-54fe6cbec7b8",
        "cursor": {
          "ref": "c2aa4aab-f58f-4f3b-a4df-c3324e5fa7f3",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "851cfe87-bd1c-46e5-8b46-588d8a096d7c"
        },
        "item": {
          "id": "1b2b2c01-c3c1-4325-b1dc-54fe6cbec7b8",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d9d550fb-e3ff-475b-9a0a-b6dd75fbbade",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c438bcb9-04d9-40e7-b872-5acd8c162308",
        "cursor": {
          "ref": "c7abd0cb-d7db-4c2e-939b-793db8db6fe1",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "178e4abb-395d-4cea-80ee-8acb01eaf2f6"
        },
        "item": {
          "id": "c438bcb9-04d9-40e7-b872-5acd8c162308",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9fd9b889-c57a-4018-a750-de5946d343a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "c438bcb9-04d9-40e7-b872-5acd8c162308",
        "cursor": {
          "ref": "c7abd0cb-d7db-4c2e-939b-793db8db6fe1",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "178e4abb-395d-4cea-80ee-8acb01eaf2f6"
        },
        "item": {
          "id": "c438bcb9-04d9-40e7-b872-5acd8c162308",
          "name": "credentials_issue"
        },
        "response": {
          "id": "9fd9b889-c57a-4018-a750-de5946d343a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "a4f3d20d-6c92-47fa-acd5-ebc784e71850",
        "cursor": {
          "ref": "0e23d4d1-ad39-4f65-8c57-64692e9de27a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b9490f75-45f9-4429-8c76-f2d6527bbcf8"
        },
        "item": {
          "id": "a4f3d20d-6c92-47fa-acd5-ebc784e71850",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "62b6c058-75e2-4762-bb61-f5f7d0363410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "a4f3d20d-6c92-47fa-acd5-ebc784e71850",
        "cursor": {
          "ref": "0e23d4d1-ad39-4f65-8c57-64692e9de27a",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b9490f75-45f9-4429-8c76-f2d6527bbcf8"
        },
        "item": {
          "id": "a4f3d20d-6c92-47fa-acd5-ebc784e71850",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "62b6c058-75e2-4762-bb61-f5f7d0363410",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "4d1d8d07-03d9-4217-9f5d-ad5b7585c901",
        "cursor": {
          "ref": "495386e0-a6e8-4812-89a5-a5dc7ed24ccc",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "08d9441e-5268-4f71-b059-0fe403e7f1bd"
        },
        "item": {
          "id": "4d1d8d07-03d9-4217-9f5d-ad5b7585c901",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8b480d98-2101-4503-b46c-11b60f631f56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "4d1d8d07-03d9-4217-9f5d-ad5b7585c901",
        "cursor": {
          "ref": "495386e0-a6e8-4812-89a5-a5dc7ed24ccc",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "08d9441e-5268-4f71-b059-0fe403e7f1bd"
        },
        "item": {
          "id": "4d1d8d07-03d9-4217-9f5d-ad5b7585c901",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "8b480d98-2101-4503-b46c-11b60f631f56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "e09d1c9e-1e18-4583-b393-e4608bb3cb2b",
        "cursor": {
          "ref": "4c1bf4cc-1626-4123-95ac-ae3a4466d6c0",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "854c57d7-0c4b-47e1-bb80-030e6e80bc34"
        },
        "item": {
          "id": "e09d1c9e-1e18-4583-b393-e4608bb3cb2b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ed88954e-624f-4892-a068-c0d4c2c825d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "e09d1c9e-1e18-4583-b393-e4608bb3cb2b",
        "cursor": {
          "ref": "4c1bf4cc-1626-4123-95ac-ae3a4466d6c0",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "854c57d7-0c4b-47e1-bb80-030e6e80bc34"
        },
        "item": {
          "id": "e09d1c9e-1e18-4583-b393-e4608bb3cb2b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "ed88954e-624f-4892-a068-c0d4c2c825d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "62cd203f-0594-4f6a-ab06-4dbd0e9b57f8",
        "cursor": {
          "ref": "c5a63859-6e3e-4e8f-a3bc-99e96d93b94f",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d66a2f89-d03a-431e-9560-14ad01e324b5"
        },
        "item": {
          "id": "62cd203f-0594-4f6a-ab06-4dbd0e9b57f8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ea60893c-ae0b-416b-8b80-327a3d210ead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "62cd203f-0594-4f6a-ab06-4dbd0e9b57f8",
        "cursor": {
          "ref": "c5a63859-6e3e-4e8f-a3bc-99e96d93b94f",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d66a2f89-d03a-431e-9560-14ad01e324b5"
        },
        "item": {
          "id": "62cd203f-0594-4f6a-ab06-4dbd0e9b57f8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ea60893c-ae0b-416b-8b80-327a3d210ead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "2e1806b9-26a5-4377-bc7b-60d56039975d",
        "cursor": {
          "ref": "3109a29a-e87c-476a-ab23-c9b3ac72479c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "566a7fd0-00ee-48ce-9708-4984144ef9a6"
        },
        "item": {
          "id": "2e1806b9-26a5-4377-bc7b-60d56039975d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "99d34940-e8ab-41b2-818c-228ceb512f77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "2e1806b9-26a5-4377-bc7b-60d56039975d",
        "cursor": {
          "ref": "3109a29a-e87c-476a-ab23-c9b3ac72479c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "566a7fd0-00ee-48ce-9708-4984144ef9a6"
        },
        "item": {
          "id": "2e1806b9-26a5-4377-bc7b-60d56039975d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "99d34940-e8ab-41b2-818c-228ceb512f77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "f140ab83-422c-4c73-9613-0b09273ad747",
        "cursor": {
          "ref": "946279ba-4079-40d8-83cd-bbbce8947851",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "516c0de0-fe1d-4c46-ae1c-33657cbd865f"
        },
        "item": {
          "id": "f140ab83-422c-4c73-9613-0b09273ad747",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4b139b8c-f230-4c6f-bb9c-512ae39309d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f140ab83-422c-4c73-9613-0b09273ad747",
        "cursor": {
          "ref": "946279ba-4079-40d8-83cd-bbbce8947851",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "516c0de0-fe1d-4c46-ae1c-33657cbd865f"
        },
        "item": {
          "id": "f140ab83-422c-4c73-9613-0b09273ad747",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4b139b8c-f230-4c6f-bb9c-512ae39309d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda9fbe5-a60c-4dc2-bf29-5b7e53f2b344",
        "cursor": {
          "ref": "5b8a82b1-eca4-4954-9088-e9201283073e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0a88880e-1d90-4c6a-a2ba-c2457ffedec9"
        },
        "item": {
          "id": "cda9fbe5-a60c-4dc2-bf29-5b7e53f2b344",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "23be772b-c32a-41a8-9db7-acb6a6dc3020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cda9fbe5-a60c-4dc2-bf29-5b7e53f2b344",
        "cursor": {
          "ref": "5b8a82b1-eca4-4954-9088-e9201283073e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0a88880e-1d90-4c6a-a2ba-c2457ffedec9"
        },
        "item": {
          "id": "cda9fbe5-a60c-4dc2-bf29-5b7e53f2b344",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "23be772b-c32a-41a8-9db7-acb6a6dc3020",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1adbb79-14a2-47e7-badf-e6e6ece6cef6",
        "cursor": {
          "ref": "ea7e1731-dc54-49dc-b7a3-09383da8226d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "57e5895c-48bb-495f-8c0a-dfe243c9d0f9"
        },
        "item": {
          "id": "a1adbb79-14a2-47e7-badf-e6e6ece6cef6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3fefa260-eb0c-4385-9984-0ebf120bccde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1adbb79-14a2-47e7-badf-e6e6ece6cef6",
        "cursor": {
          "ref": "ea7e1731-dc54-49dc-b7a3-09383da8226d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "57e5895c-48bb-495f-8c0a-dfe243c9d0f9"
        },
        "item": {
          "id": "a1adbb79-14a2-47e7-badf-e6e6ece6cef6",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3fefa260-eb0c-4385-9984-0ebf120bccde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44beb7f-af90-4d46-af24-8cc008878659",
        "cursor": {
          "ref": "37339d0b-9e4b-40e6-8f0b-5f069afad30c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ac124583-4c46-4fc0-9b86-49ec37f480a2"
        },
        "item": {
          "id": "f44beb7f-af90-4d46-af24-8cc008878659",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bb83a107-713a-486e-a056-f3248fe17d72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f44beb7f-af90-4d46-af24-8cc008878659",
        "cursor": {
          "ref": "37339d0b-9e4b-40e6-8f0b-5f069afad30c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ac124583-4c46-4fc0-9b86-49ec37f480a2"
        },
        "item": {
          "id": "f44beb7f-af90-4d46-af24-8cc008878659",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bb83a107-713a-486e-a056-f3248fe17d72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a5a1a4-cb75-479a-bde0-c5ab0d53ec39",
        "cursor": {
          "ref": "840e83ec-5831-4fb9-aa87-79b7661041e6",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "084274b2-ce5c-4e85-91e5-9d20dbba169f"
        },
        "item": {
          "id": "a2a5a1a4-cb75-479a-bde0-c5ab0d53ec39",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "18266ea7-62b0-4b89-814c-cf9eaac0138c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a5a1a4-cb75-479a-bde0-c5ab0d53ec39",
        "cursor": {
          "ref": "840e83ec-5831-4fb9-aa87-79b7661041e6",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "084274b2-ce5c-4e85-91e5-9d20dbba169f"
        },
        "item": {
          "id": "a2a5a1a4-cb75-479a-bde0-c5ab0d53ec39",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "18266ea7-62b0-4b89-814c-cf9eaac0138c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b370533-e4ef-4270-a6af-6c99adfc124b",
        "cursor": {
          "ref": "b9a02170-1b28-4d89-94b0-a81bfe635b03",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a64f2ed4-e690-4170-99de-8cc7e0b6ec48"
        },
        "item": {
          "id": "9b370533-e4ef-4270-a6af-6c99adfc124b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "72fbc794-58fe-4dc0-937e-2c1e123086a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b370533-e4ef-4270-a6af-6c99adfc124b",
        "cursor": {
          "ref": "b9a02170-1b28-4d89-94b0-a81bfe635b03",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a64f2ed4-e690-4170-99de-8cc7e0b6ec48"
        },
        "item": {
          "id": "9b370533-e4ef-4270-a6af-6c99adfc124b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "72fbc794-58fe-4dc0-937e-2c1e123086a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09ab1d1-fda7-4baf-9d2f-449b8711b6d3",
        "cursor": {
          "ref": "0d46a7ea-6db3-4b5c-84d0-8295cfcbb121",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "02229698-da89-4b51-bb55-b49b303a0ebc"
        },
        "item": {
          "id": "b09ab1d1-fda7-4baf-9d2f-449b8711b6d3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4f4e7b22-f19d-4bb4-ac3a-e6f0c9624734",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b09ab1d1-fda7-4baf-9d2f-449b8711b6d3",
        "cursor": {
          "ref": "0d46a7ea-6db3-4b5c-84d0-8295cfcbb121",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "02229698-da89-4b51-bb55-b49b303a0ebc"
        },
        "item": {
          "id": "b09ab1d1-fda7-4baf-9d2f-449b8711b6d3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4f4e7b22-f19d-4bb4-ac3a-e6f0c9624734",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc30819-a359-4eee-9a0b-dba19d5983e4",
        "cursor": {
          "ref": "398bb959-be94-4512-ba60-0a543efe9d52",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "58892108-17a3-45d4-b432-e8b2c5edb6ab"
        },
        "item": {
          "id": "0fc30819-a359-4eee-9a0b-dba19d5983e4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9f128f5e-74de-46d4-9126-1e0d5d8a2e9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc30819-a359-4eee-9a0b-dba19d5983e4",
        "cursor": {
          "ref": "398bb959-be94-4512-ba60-0a543efe9d52",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "58892108-17a3-45d4-b432-e8b2c5edb6ab"
        },
        "item": {
          "id": "0fc30819-a359-4eee-9a0b-dba19d5983e4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9f128f5e-74de-46d4-9126-1e0d5d8a2e9a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e4d02a-c8aa-4f06-bf7b-43432415bc97",
        "cursor": {
          "ref": "60341e4a-4e26-4332-b181-fb2efb2b1753",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "03a574a2-7cc4-48eb-aa14-42015eefdbed"
        },
        "item": {
          "id": "09e4d02a-c8aa-4f06-bf7b-43432415bc97",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "87f8c26b-e764-496e-92c7-f60278930c87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e4d02a-c8aa-4f06-bf7b-43432415bc97",
        "cursor": {
          "ref": "60341e4a-4e26-4332-b181-fb2efb2b1753",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "03a574a2-7cc4-48eb-aa14-42015eefdbed"
        },
        "item": {
          "id": "09e4d02a-c8aa-4f06-bf7b-43432415bc97",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "87f8c26b-e764-496e-92c7-f60278930c87",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d408cbdf-d006-4c0a-a8c7-094770eb9bab",
        "cursor": {
          "ref": "2f5a7a28-695f-41b8-8a4e-016cab28cf8f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5e5aeb49-1ea7-412f-83e7-df1dcd197d90"
        },
        "item": {
          "id": "d408cbdf-d006-4c0a-a8c7-094770eb9bab",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ac140703-c7af-464d-b89b-8b3668a015df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d408cbdf-d006-4c0a-a8c7-094770eb9bab",
        "cursor": {
          "ref": "2f5a7a28-695f-41b8-8a4e-016cab28cf8f",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5e5aeb49-1ea7-412f-83e7-df1dcd197d90"
        },
        "item": {
          "id": "d408cbdf-d006-4c0a-a8c7-094770eb9bab",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ac140703-c7af-464d-b89b-8b3668a015df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229addfc-c94a-44b7-830b-835e63123c89",
        "cursor": {
          "ref": "a562dea3-81c1-489f-a982-febd49e20a08",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "aa01e350-48ab-4f95-a875-9b0fcf54ab32"
        },
        "item": {
          "id": "229addfc-c94a-44b7-830b-835e63123c89",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9d52845c-2b8e-4151-bba4-209d25f2da11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "229addfc-c94a-44b7-830b-835e63123c89",
        "cursor": {
          "ref": "a562dea3-81c1-489f-a982-febd49e20a08",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "aa01e350-48ab-4f95-a875-9b0fcf54ab32"
        },
        "item": {
          "id": "229addfc-c94a-44b7-830b-835e63123c89",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9d52845c-2b8e-4151-bba4-209d25f2da11",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d0c655-7f1e-4bdc-a6ef-eeb6084a2033",
        "cursor": {
          "ref": "fafb2373-2160-49cd-bfc2-8d1608f4a369",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9bada15d-c1a9-4b89-a860-335bfb2d5c55"
        },
        "item": {
          "id": "d8d0c655-7f1e-4bdc-a6ef-eeb6084a2033",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f5d75bce-02ea-40c1-b898-4e138bd42081",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8d0c655-7f1e-4bdc-a6ef-eeb6084a2033",
        "cursor": {
          "ref": "fafb2373-2160-49cd-bfc2-8d1608f4a369",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "9bada15d-c1a9-4b89-a860-335bfb2d5c55"
        },
        "item": {
          "id": "d8d0c655-7f1e-4bdc-a6ef-eeb6084a2033",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "f5d75bce-02ea-40c1-b898-4e138bd42081",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0abefd-b39e-40a8-b152-0bac7fcb4333",
        "cursor": {
          "ref": "2d878aca-1863-4c15-a2c9-53f1b5f51a1a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0640ee0f-09b7-4928-83df-35c4cd789033"
        },
        "item": {
          "id": "9a0abefd-b39e-40a8-b152-0bac7fcb4333",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "41914a14-fec0-491c-9112-fc424fff968b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a0abefd-b39e-40a8-b152-0bac7fcb4333",
        "cursor": {
          "ref": "2d878aca-1863-4c15-a2c9-53f1b5f51a1a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0640ee0f-09b7-4928-83df-35c4cd789033"
        },
        "item": {
          "id": "9a0abefd-b39e-40a8-b152-0bac7fcb4333",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "41914a14-fec0-491c-9112-fc424fff968b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef25da6-c3aa-445e-ac25-fec3aee49ec2",
        "cursor": {
          "ref": "b323f79b-335d-4895-8949-418efcb03433",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "84bfebdf-9f3b-42ce-91be-fc33223033b5"
        },
        "item": {
          "id": "9ef25da6-c3aa-445e-ac25-fec3aee49ec2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "09239079-0f2c-4aaf-ae14-e3827889e422",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef25da6-c3aa-445e-ac25-fec3aee49ec2",
        "cursor": {
          "ref": "b323f79b-335d-4895-8949-418efcb03433",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "84bfebdf-9f3b-42ce-91be-fc33223033b5"
        },
        "item": {
          "id": "9ef25da6-c3aa-445e-ac25-fec3aee49ec2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "09239079-0f2c-4aaf-ae14-e3827889e422",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90908e11-8e0f-4957-b814-833e86037d16",
        "cursor": {
          "ref": "269f6181-58e0-4bae-b060-89e10303c22e",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ee054e24-cf3d-459d-99f7-893da022a142"
        },
        "item": {
          "id": "90908e11-8e0f-4957-b814-833e86037d16",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0eb6c66d-83e5-4afd-8653-389e8e23ce38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90908e11-8e0f-4957-b814-833e86037d16",
        "cursor": {
          "ref": "269f6181-58e0-4bae-b060-89e10303c22e",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ee054e24-cf3d-459d-99f7-893da022a142"
        },
        "item": {
          "id": "90908e11-8e0f-4957-b814-833e86037d16",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0eb6c66d-83e5-4afd-8653-389e8e23ce38",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e37161c-1bf2-460f-a8c9-31db3f1adae4",
        "cursor": {
          "ref": "edc7330b-6136-4b06-a1a1-fa408f4f41bb",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5038d67f-5ceb-48eb-8a75-31b7af9d795e"
        },
        "item": {
          "id": "6e37161c-1bf2-460f-a8c9-31db3f1adae4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "55b1e398-f98d-446f-a470-3a867c43dead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e37161c-1bf2-460f-a8c9-31db3f1adae4",
        "cursor": {
          "ref": "edc7330b-6136-4b06-a1a1-fa408f4f41bb",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5038d67f-5ceb-48eb-8a75-31b7af9d795e"
        },
        "item": {
          "id": "6e37161c-1bf2-460f-a8c9-31db3f1adae4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "55b1e398-f98d-446f-a470-3a867c43dead",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9b4c52-b339-4e76-b094-a903dd14889c",
        "cursor": {
          "ref": "7154c78d-dd08-44fe-9885-11fa1e80e3c2",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "019c42d9-7ddd-4cb7-873c-35aa5cad6c56"
        },
        "item": {
          "id": "fa9b4c52-b339-4e76-b094-a903dd14889c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "46d83c0c-2a59-4329-a021-3bc7027b67ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9b4c52-b339-4e76-b094-a903dd14889c",
        "cursor": {
          "ref": "7154c78d-dd08-44fe-9885-11fa1e80e3c2",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "019c42d9-7ddd-4cb7-873c-35aa5cad6c56"
        },
        "item": {
          "id": "fa9b4c52-b339-4e76-b094-a903dd14889c",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "46d83c0c-2a59-4329-a021-3bc7027b67ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f4c509-679e-42b8-b058-c1ac2c56b7b8",
        "cursor": {
          "ref": "57f24144-9138-474b-9f14-0d3dbf73c7f0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d670c18d-618e-4388-8f1a-edd957c1c039"
        },
        "item": {
          "id": "19f4c509-679e-42b8-b058-c1ac2c56b7b8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5e57b553-e109-4287-9e11-b54a10479cc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f4c509-679e-42b8-b058-c1ac2c56b7b8",
        "cursor": {
          "ref": "57f24144-9138-474b-9f14-0d3dbf73c7f0",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "d670c18d-618e-4388-8f1a-edd957c1c039"
        },
        "item": {
          "id": "19f4c509-679e-42b8-b058-c1ac2c56b7b8",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5e57b553-e109-4287-9e11-b54a10479cc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f6512a-d6d0-4a3a-894c-c0f1807cf0c6",
        "cursor": {
          "ref": "d937420c-0da5-4f78-b334-97b461f35907",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3d57ab8d-7467-42af-9e5a-fa17b67ff434"
        },
        "item": {
          "id": "33f6512a-d6d0-4a3a-894c-c0f1807cf0c6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d07fde0f-ce4e-4074-b6f0-24c222ffe9a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f6512a-d6d0-4a3a-894c-c0f1807cf0c6",
        "cursor": {
          "ref": "d937420c-0da5-4f78-b334-97b461f35907",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3d57ab8d-7467-42af-9e5a-fa17b67ff434"
        },
        "item": {
          "id": "33f6512a-d6d0-4a3a-894c-c0f1807cf0c6",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d07fde0f-ce4e-4074-b6f0-24c222ffe9a5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7326d6-2382-414d-be63-c1cb0de3f15f",
        "cursor": {
          "ref": "8ad75c40-fb2e-4ffb-99c0-6f51866f5cf4",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dbbfc6c5-993d-44ce-bbaa-29189461b237"
        },
        "item": {
          "id": "9b7326d6-2382-414d-be63-c1cb0de3f15f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "93d1c18d-5215-409e-b489-8fc9f15e72fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7326d6-2382-414d-be63-c1cb0de3f15f",
        "cursor": {
          "ref": "8ad75c40-fb2e-4ffb-99c0-6f51866f5cf4",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "dbbfc6c5-993d-44ce-bbaa-29189461b237"
        },
        "item": {
          "id": "9b7326d6-2382-414d-be63-c1cb0de3f15f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "93d1c18d-5215-409e-b489-8fc9f15e72fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4fbdf4f-0e66-4a44-b132-a10fea235a80",
        "cursor": {
          "ref": "6f2dea4f-b3ba-4e15-8f8b-946a9edcdc24",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7acaa99c-ca5c-47f0-b942-e444aa0d9353"
        },
        "item": {
          "id": "e4fbdf4f-0e66-4a44-b132-a10fea235a80",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "91790e7e-99f0-4058-a54c-605dc838fe88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4fbdf4f-0e66-4a44-b132-a10fea235a80",
        "cursor": {
          "ref": "6f2dea4f-b3ba-4e15-8f8b-946a9edcdc24",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7acaa99c-ca5c-47f0-b942-e444aa0d9353"
        },
        "item": {
          "id": "e4fbdf4f-0e66-4a44-b132-a10fea235a80",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "91790e7e-99f0-4058-a54c-605dc838fe88",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d46350-526e-4235-9d3d-c695b0e34e3b",
        "cursor": {
          "ref": "8c1009bc-3596-4393-b0db-e83c4d779a83",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6411773f-d645-4af7-b1e2-500a12d1c0b6"
        },
        "item": {
          "id": "32d46350-526e-4235-9d3d-c695b0e34e3b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "03057da1-fd55-4881-9a0d-925b28cee72b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d46350-526e-4235-9d3d-c695b0e34e3b",
        "cursor": {
          "ref": "8c1009bc-3596-4393-b0db-e83c4d779a83",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6411773f-d645-4af7-b1e2-500a12d1c0b6"
        },
        "item": {
          "id": "32d46350-526e-4235-9d3d-c695b0e34e3b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "03057da1-fd55-4881-9a0d-925b28cee72b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04adb119-551f-4bc6-a94f-65584f1e35b1",
        "cursor": {
          "ref": "cb0af038-b851-44a9-9e93-7c7ba228f372",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cd8f8d8e-3223-4422-902b-ca3379b8ac1c"
        },
        "item": {
          "id": "04adb119-551f-4bc6-a94f-65584f1e35b1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3e33cac5-6704-4840-9e5e-0cac3d57ee0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04adb119-551f-4bc6-a94f-65584f1e35b1",
        "cursor": {
          "ref": "cb0af038-b851-44a9-9e93-7c7ba228f372",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cd8f8d8e-3223-4422-902b-ca3379b8ac1c"
        },
        "item": {
          "id": "04adb119-551f-4bc6-a94f-65584f1e35b1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3e33cac5-6704-4840-9e5e-0cac3d57ee0f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ff6f05-9b1a-4533-8431-6ee0a6949c49",
        "cursor": {
          "ref": "e4072c31-0d90-4430-8378-d5a525d956ab",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "665593fb-7c57-4084-a198-96e2dc8335d5"
        },
        "item": {
          "id": "23ff6f05-9b1a-4533-8431-6ee0a6949c49",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3eff55f2-3c0d-496c-ba8f-c4ba71784f7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ff6f05-9b1a-4533-8431-6ee0a6949c49",
        "cursor": {
          "ref": "e4072c31-0d90-4430-8378-d5a525d956ab",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "665593fb-7c57-4084-a198-96e2dc8335d5"
        },
        "item": {
          "id": "23ff6f05-9b1a-4533-8431-6ee0a6949c49",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3eff55f2-3c0d-496c-ba8f-c4ba71784f7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb5c46c-2846-44d3-8605-4d376fdb3e2e",
        "cursor": {
          "ref": "eb7dbce1-8913-4f97-8d7d-cb28b848e448",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2f19a9e7-c7d3-4b82-9579-bdaae9e308e7"
        },
        "item": {
          "id": "abb5c46c-2846-44d3-8605-4d376fdb3e2e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6bc4390e-05a4-4fed-ba97-1fc1459ab65e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb5c46c-2846-44d3-8605-4d376fdb3e2e",
        "cursor": {
          "ref": "eb7dbce1-8913-4f97-8d7d-cb28b848e448",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2f19a9e7-c7d3-4b82-9579-bdaae9e308e7"
        },
        "item": {
          "id": "abb5c46c-2846-44d3-8605-4d376fdb3e2e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6bc4390e-05a4-4fed-ba97-1fc1459ab65e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df60649-4ad8-4883-8df9-ddb850ca9108",
        "cursor": {
          "ref": "152dab10-e24b-420a-b8e6-f30dbd0da94d",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "70d682ef-60b6-41f9-9746-a8648852aab5"
        },
        "item": {
          "id": "6df60649-4ad8-4883-8df9-ddb850ca9108",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8c460e25-0f7c-4d1b-91c4-527640f46321",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df60649-4ad8-4883-8df9-ddb850ca9108",
        "cursor": {
          "ref": "152dab10-e24b-420a-b8e6-f30dbd0da94d",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "70d682ef-60b6-41f9-9746-a8648852aab5"
        },
        "item": {
          "id": "6df60649-4ad8-4883-8df9-ddb850ca9108",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8c460e25-0f7c-4d1b-91c4-527640f46321",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7043b4df-2536-4520-90db-f48e71eea43d",
        "cursor": {
          "ref": "fb5b1d5a-3d79-40c5-9e4c-882603632555",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "392ef7d2-f976-451c-ac07-5e2c7e43331c"
        },
        "item": {
          "id": "7043b4df-2536-4520-90db-f48e71eea43d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c7488d0a-1f01-4a1b-afd0-e0e338bcbd10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7043b4df-2536-4520-90db-f48e71eea43d",
        "cursor": {
          "ref": "fb5b1d5a-3d79-40c5-9e4c-882603632555",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "392ef7d2-f976-451c-ac07-5e2c7e43331c"
        },
        "item": {
          "id": "7043b4df-2536-4520-90db-f48e71eea43d",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c7488d0a-1f01-4a1b-afd0-e0e338bcbd10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed334bf5-058a-40f0-b8b0-48c30b5728bb",
        "cursor": {
          "ref": "9c8ab1e3-bebe-4a03-afeb-bae06a485b84",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d616702d-721d-4a48-8293-6f30a89b8c5e"
        },
        "item": {
          "id": "ed334bf5-058a-40f0-b8b0-48c30b5728bb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8ee605f6-6711-40e8-b80e-c6545a7c00d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed334bf5-058a-40f0-b8b0-48c30b5728bb",
        "cursor": {
          "ref": "9c8ab1e3-bebe-4a03-afeb-bae06a485b84",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d616702d-721d-4a48-8293-6f30a89b8c5e"
        },
        "item": {
          "id": "ed334bf5-058a-40f0-b8b0-48c30b5728bb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8ee605f6-6711-40e8-b80e-c6545a7c00d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586dc26a-a2da-4630-9fdb-65bee381447d",
        "cursor": {
          "ref": "509c4b5d-10af-4bb6-aedd-33956248c65a",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7104de37-f8b6-462d-b2a5-8993585cb198"
        },
        "item": {
          "id": "586dc26a-a2da-4630-9fdb-65bee381447d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "247cb651-6433-4479-838e-539b0f9b38b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586dc26a-a2da-4630-9fdb-65bee381447d",
        "cursor": {
          "ref": "509c4b5d-10af-4bb6-aedd-33956248c65a",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "7104de37-f8b6-462d-b2a5-8993585cb198"
        },
        "item": {
          "id": "586dc26a-a2da-4630-9fdb-65bee381447d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "247cb651-6433-4479-838e-539b0f9b38b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010b2d83-3cc2-4121-827e-ee16b429f7fc",
        "cursor": {
          "ref": "73ab2a7a-3c99-4287-87db-79bb642cf8be",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "072b9f86-6c41-4b94-94a1-e396856529dc"
        },
        "item": {
          "id": "010b2d83-3cc2-4121-827e-ee16b429f7fc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "076622f8-e767-42f3-8ef6-c5c3a0cacf95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010b2d83-3cc2-4121-827e-ee16b429f7fc",
        "cursor": {
          "ref": "73ab2a7a-3c99-4287-87db-79bb642cf8be",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "072b9f86-6c41-4b94-94a1-e396856529dc"
        },
        "item": {
          "id": "010b2d83-3cc2-4121-827e-ee16b429f7fc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "076622f8-e767-42f3-8ef6-c5c3a0cacf95",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c9294f-9a2e-4b90-b723-846a0087f00e",
        "cursor": {
          "ref": "599d79a1-0793-4451-94c3-05ed7a6bcddb",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e4fb5de7-e5d1-4ac0-874a-ae02a1bb2db4"
        },
        "item": {
          "id": "55c9294f-9a2e-4b90-b723-846a0087f00e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "40a24812-aee3-41e8-80cc-d8c990e51172",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c9294f-9a2e-4b90-b723-846a0087f00e",
        "cursor": {
          "ref": "599d79a1-0793-4451-94c3-05ed7a6bcddb",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e4fb5de7-e5d1-4ac0-874a-ae02a1bb2db4"
        },
        "item": {
          "id": "55c9294f-9a2e-4b90-b723-846a0087f00e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "40a24812-aee3-41e8-80cc-d8c990e51172",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b354fd83-4ded-42bf-b7cb-196c4019ae4b",
        "cursor": {
          "ref": "04ab313d-57a2-427a-80f6-52cbcc026e37",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f3c48b65-da28-4db6-a586-3fe57f477387"
        },
        "item": {
          "id": "b354fd83-4ded-42bf-b7cb-196c4019ae4b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f9ae305e-d244-4655-b8cb-6af7b9112c25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b354fd83-4ded-42bf-b7cb-196c4019ae4b",
        "cursor": {
          "ref": "04ab313d-57a2-427a-80f6-52cbcc026e37",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f3c48b65-da28-4db6-a586-3fe57f477387"
        },
        "item": {
          "id": "b354fd83-4ded-42bf-b7cb-196c4019ae4b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f9ae305e-d244-4655-b8cb-6af7b9112c25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518d3904-140c-40fb-ac31-92511605ef08",
        "cursor": {
          "ref": "bbacfa9a-490e-4bf5-9073-089d2b5ba6ea",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d81574ec-a090-46b3-99a0-0d01f4cfedbf"
        },
        "item": {
          "id": "518d3904-140c-40fb-ac31-92511605ef08",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0af80b59-4c46-464e-bb64-15080ab13ea9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518d3904-140c-40fb-ac31-92511605ef08",
        "cursor": {
          "ref": "bbacfa9a-490e-4bf5-9073-089d2b5ba6ea",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d81574ec-a090-46b3-99a0-0d01f4cfedbf"
        },
        "item": {
          "id": "518d3904-140c-40fb-ac31-92511605ef08",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "0af80b59-4c46-464e-bb64-15080ab13ea9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a88107b-326b-4b69-a62d-9ae69677c875",
        "cursor": {
          "ref": "9c3a930e-4287-4b70-9557-ed57bce7cdf5",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ae45de94-978e-42f4-84bb-f03988710b63"
        },
        "item": {
          "id": "3a88107b-326b-4b69-a62d-9ae69677c875",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7175d7bd-01ef-41c4-9bae-aca848ea4240",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a88107b-326b-4b69-a62d-9ae69677c875",
        "cursor": {
          "ref": "9c3a930e-4287-4b70-9557-ed57bce7cdf5",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ae45de94-978e-42f4-84bb-f03988710b63"
        },
        "item": {
          "id": "3a88107b-326b-4b69-a62d-9ae69677c875",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7175d7bd-01ef-41c4-9bae-aca848ea4240",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b29e97-25e7-42de-a356-3d443ffc361d",
        "cursor": {
          "ref": "74f7bf14-875e-4d3c-b501-ca02b589b998",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e225017e-bed2-4f78-9de9-271aa083026d"
        },
        "item": {
          "id": "b6b29e97-25e7-42de-a356-3d443ffc361d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "94c41415-2b2b-42fc-8045-415f5405415d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b29e97-25e7-42de-a356-3d443ffc361d",
        "cursor": {
          "ref": "74f7bf14-875e-4d3c-b501-ca02b589b998",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e225017e-bed2-4f78-9de9-271aa083026d"
        },
        "item": {
          "id": "b6b29e97-25e7-42de-a356-3d443ffc361d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "94c41415-2b2b-42fc-8045-415f5405415d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6fd32e-bd4d-4156-b8a8-8ebaa3ef6ecf",
        "cursor": {
          "ref": "2c526a81-b253-4741-ad50-18d78d44396b",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d7b00fb6-49ea-486a-8c87-e23256fc02dd"
        },
        "item": {
          "id": "cd6fd32e-bd4d-4156-b8a8-8ebaa3ef6ecf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "66d55262-02d9-42bb-95aa-c3a606fba006",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6fd32e-bd4d-4156-b8a8-8ebaa3ef6ecf",
        "cursor": {
          "ref": "2c526a81-b253-4741-ad50-18d78d44396b",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d7b00fb6-49ea-486a-8c87-e23256fc02dd"
        },
        "item": {
          "id": "cd6fd32e-bd4d-4156-b8a8-8ebaa3ef6ecf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "66d55262-02d9-42bb-95aa-c3a606fba006",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d362172-3346-468b-aa0b-82cb5fd90f59",
        "cursor": {
          "ref": "32fe8bd3-f85d-4431-a770-43c6bcf03e4b",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "985ad3a9-8a49-4654-8d60-ec2e1bb78471"
        },
        "item": {
          "id": "4d362172-3346-468b-aa0b-82cb5fd90f59",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b05a4735-f712-4582-a82d-934c74bc1518",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d362172-3346-468b-aa0b-82cb5fd90f59",
        "cursor": {
          "ref": "32fe8bd3-f85d-4431-a770-43c6bcf03e4b",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "985ad3a9-8a49-4654-8d60-ec2e1bb78471"
        },
        "item": {
          "id": "4d362172-3346-468b-aa0b-82cb5fd90f59",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b05a4735-f712-4582-a82d-934c74bc1518",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d271bd7-6ef2-427f-9df3-4017938ab615",
        "cursor": {
          "ref": "52d161d6-7b35-49cf-9d14-abadb53dab2e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f0aafbde-5c99-4568-955d-ebf1c3ee774f"
        },
        "item": {
          "id": "5d271bd7-6ef2-427f-9df3-4017938ab615",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e18aff16-d98d-4c6d-b971-43d0aa845ea4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d271bd7-6ef2-427f-9df3-4017938ab615",
        "cursor": {
          "ref": "52d161d6-7b35-49cf-9d14-abadb53dab2e",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f0aafbde-5c99-4568-955d-ebf1c3ee774f"
        },
        "item": {
          "id": "5d271bd7-6ef2-427f-9df3-4017938ab615",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e18aff16-d98d-4c6d-b971-43d0aa845ea4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ddc91fa-cfda-45d1-a314-a177f14edb95",
        "cursor": {
          "ref": "354a1b8b-a68f-4b4d-bfc3-7173c7a6711b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9c251801-eb25-4343-a178-fd0647305937"
        },
        "item": {
          "id": "0ddc91fa-cfda-45d1-a314-a177f14edb95",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6c2aff7b-5ed9-4f11-a97c-c270a45ff6d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ddc91fa-cfda-45d1-a314-a177f14edb95",
        "cursor": {
          "ref": "354a1b8b-a68f-4b4d-bfc3-7173c7a6711b",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9c251801-eb25-4343-a178-fd0647305937"
        },
        "item": {
          "id": "0ddc91fa-cfda-45d1-a314-a177f14edb95",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6c2aff7b-5ed9-4f11-a97c-c270a45ff6d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f57c9fe-61ae-473b-a80c-85db03d98dd6",
        "cursor": {
          "ref": "2c84644e-3e88-4942-b350-7e227ac7ba87",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "edbf2bd6-5dc2-42b5-bca5-5c502c2944b1"
        },
        "item": {
          "id": "9f57c9fe-61ae-473b-a80c-85db03d98dd6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "efb58bc7-ab6f-436b-af99-a68b9623d368",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f57c9fe-61ae-473b-a80c-85db03d98dd6",
        "cursor": {
          "ref": "2c84644e-3e88-4942-b350-7e227ac7ba87",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "edbf2bd6-5dc2-42b5-bca5-5c502c2944b1"
        },
        "item": {
          "id": "9f57c9fe-61ae-473b-a80c-85db03d98dd6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "efb58bc7-ab6f-436b-af99-a68b9623d368",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6da9bf-0166-4768-be0a-3dd87449d405",
        "cursor": {
          "ref": "7f4e37dd-c4a8-441b-b2f9-e276b056b398",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3af9379b-3031-4f9b-87d2-d159bf2b5a8f"
        },
        "item": {
          "id": "4a6da9bf-0166-4768-be0a-3dd87449d405",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ab03769e-a774-409b-98fc-2e5cb1203b99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6da9bf-0166-4768-be0a-3dd87449d405",
        "cursor": {
          "ref": "7f4e37dd-c4a8-441b-b2f9-e276b056b398",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3af9379b-3031-4f9b-87d2-d159bf2b5a8f"
        },
        "item": {
          "id": "4a6da9bf-0166-4768-be0a-3dd87449d405",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ab03769e-a774-409b-98fc-2e5cb1203b99",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefd1c33-9fd4-4372-a9a8-e6765c075bdc",
        "cursor": {
          "ref": "eff02828-0e6d-43bd-a573-b14ddb047ef9",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3256c080-8e1e-4386-abfc-a2ce4e57a776"
        },
        "item": {
          "id": "fefd1c33-9fd4-4372-a9a8-e6765c075bdc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "037cda27-c492-427d-8091-88ede4c97c00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefd1c33-9fd4-4372-a9a8-e6765c075bdc",
        "cursor": {
          "ref": "eff02828-0e6d-43bd-a573-b14ddb047ef9",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "3256c080-8e1e-4386-abfc-a2ce4e57a776"
        },
        "item": {
          "id": "fefd1c33-9fd4-4372-a9a8-e6765c075bdc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "037cda27-c492-427d-8091-88ede4c97c00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6b9023-9994-436b-a92f-036212f0baba",
        "cursor": {
          "ref": "749e76f7-8d89-48e7-ad03-024afefd2b37",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "66a15a51-b547-4023-8ea7-7e84736be705"
        },
        "item": {
          "id": "8d6b9023-9994-436b-a92f-036212f0baba",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e1000fe3-a58f-43e9-a84e-f135f9a84d66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6b9023-9994-436b-a92f-036212f0baba",
        "cursor": {
          "ref": "749e76f7-8d89-48e7-ad03-024afefd2b37",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "66a15a51-b547-4023-8ea7-7e84736be705"
        },
        "item": {
          "id": "8d6b9023-9994-436b-a92f-036212f0baba",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e1000fe3-a58f-43e9-a84e-f135f9a84d66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f68d3e6-30e3-4812-ac52-c02674dd17d7",
        "cursor": {
          "ref": "eb286ef9-b891-415e-b36e-f3c041d761bd",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4f808331-a574-4af9-963c-bf69989247fa"
        },
        "item": {
          "id": "0f68d3e6-30e3-4812-ac52-c02674dd17d7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "517d2d16-cea6-47df-8b68-4ecc9fa8e026",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f68d3e6-30e3-4812-ac52-c02674dd17d7",
        "cursor": {
          "ref": "eb286ef9-b891-415e-b36e-f3c041d761bd",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4f808331-a574-4af9-963c-bf69989247fa"
        },
        "item": {
          "id": "0f68d3e6-30e3-4812-ac52-c02674dd17d7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "517d2d16-cea6-47df-8b68-4ecc9fa8e026",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780d4928-ca69-4017-939c-ac588b6c70be",
        "cursor": {
          "ref": "b5bee06c-db05-4b3f-8cc8-8b87375ad0c5",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5c29a9b8-5d55-4fb1-b674-d2d5330e4cc2"
        },
        "item": {
          "id": "780d4928-ca69-4017-939c-ac588b6c70be",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2467c8f8-352b-49df-8f2c-1e92ef3a57bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780d4928-ca69-4017-939c-ac588b6c70be",
        "cursor": {
          "ref": "b5bee06c-db05-4b3f-8cc8-8b87375ad0c5",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5c29a9b8-5d55-4fb1-b674-d2d5330e4cc2"
        },
        "item": {
          "id": "780d4928-ca69-4017-939c-ac588b6c70be",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2467c8f8-352b-49df-8f2c-1e92ef3a57bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efb5a13-33e2-4220-b266-faef50efbfa0",
        "cursor": {
          "ref": "33e89a86-62b6-4042-b135-43a597d94b9b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a5daf3fc-e001-4f48-8aad-4f5947962fc4"
        },
        "item": {
          "id": "9efb5a13-33e2-4220-b266-faef50efbfa0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "32133269-1252-45f8-88ef-efab886100a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9efb5a13-33e2-4220-b266-faef50efbfa0",
        "cursor": {
          "ref": "33e89a86-62b6-4042-b135-43a597d94b9b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a5daf3fc-e001-4f48-8aad-4f5947962fc4"
        },
        "item": {
          "id": "9efb5a13-33e2-4220-b266-faef50efbfa0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "32133269-1252-45f8-88ef-efab886100a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdfeab48-050d-464e-9e87-0f5a094904b7",
        "cursor": {
          "ref": "d7f0e9d4-ea00-49aa-84ed-bf5a944b4e15",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "07ec5f32-047c-4ea8-b26d-8bd3c3dbbc3a"
        },
        "item": {
          "id": "cdfeab48-050d-464e-9e87-0f5a094904b7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "22c183ea-15fe-455a-bf9e-78f0b083ca79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdfeab48-050d-464e-9e87-0f5a094904b7",
        "cursor": {
          "ref": "d7f0e9d4-ea00-49aa-84ed-bf5a944b4e15",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "07ec5f32-047c-4ea8-b26d-8bd3c3dbbc3a"
        },
        "item": {
          "id": "cdfeab48-050d-464e-9e87-0f5a094904b7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "22c183ea-15fe-455a-bf9e-78f0b083ca79",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61448630-666d-41e3-8bf9-27357ddcf81f",
        "cursor": {
          "ref": "565f7a60-a61f-4e97-978d-3b8acbce12fb",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dba47ecc-c266-42d9-add1-3d6ea5a8f3e5"
        },
        "item": {
          "id": "61448630-666d-41e3-8bf9-27357ddcf81f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "84625791-955d-4f67-ad18-b9d005714591",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61448630-666d-41e3-8bf9-27357ddcf81f",
        "cursor": {
          "ref": "565f7a60-a61f-4e97-978d-3b8acbce12fb",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dba47ecc-c266-42d9-add1-3d6ea5a8f3e5"
        },
        "item": {
          "id": "61448630-666d-41e3-8bf9-27357ddcf81f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "84625791-955d-4f67-ad18-b9d005714591",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0a624d-3fa3-4cb3-b062-13761dd15231",
        "cursor": {
          "ref": "c2ac75d6-3db1-4094-a8c1-37c005b85a0c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9eef9b12-1108-414d-a6e4-8b47a0799d2b"
        },
        "item": {
          "id": "2f0a624d-3fa3-4cb3-b062-13761dd15231",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "49c721e0-304d-4a3e-8bf8-c08edebcb36c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f0a624d-3fa3-4cb3-b062-13761dd15231",
        "cursor": {
          "ref": "c2ac75d6-3db1-4094-a8c1-37c005b85a0c",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "9eef9b12-1108-414d-a6e4-8b47a0799d2b"
        },
        "item": {
          "id": "2f0a624d-3fa3-4cb3-b062-13761dd15231",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "49c721e0-304d-4a3e-8bf8-c08edebcb36c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e447d89-bd95-41c7-9f9d-488d9c01a9c1",
        "cursor": {
          "ref": "5d0dcccd-3586-4e2b-b247-1a845fde21f9",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8cbd2de1-afda-4bde-9a53-22265d853de4"
        },
        "item": {
          "id": "5e447d89-bd95-41c7-9f9d-488d9c01a9c1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b917f8b4-21dc-444d-98f3-bae6ed5b4cc8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e447d89-bd95-41c7-9f9d-488d9c01a9c1",
        "cursor": {
          "ref": "5d0dcccd-3586-4e2b-b247-1a845fde21f9",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8cbd2de1-afda-4bde-9a53-22265d853de4"
        },
        "item": {
          "id": "5e447d89-bd95-41c7-9f9d-488d9c01a9c1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b917f8b4-21dc-444d-98f3-bae6ed5b4cc8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb82ff2c-bf9c-479c-b1dd-3dc59b56b5d2",
        "cursor": {
          "ref": "1c797860-2663-4b5c-90af-64cdb3b15a9c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9a37ef67-9ed2-4ba3-9d23-c899faaa44e9"
        },
        "item": {
          "id": "bb82ff2c-bf9c-479c-b1dd-3dc59b56b5d2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a97a08c2-55a0-4c7b-af3a-150ccb8754cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb82ff2c-bf9c-479c-b1dd-3dc59b56b5d2",
        "cursor": {
          "ref": "1c797860-2663-4b5c-90af-64cdb3b15a9c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9a37ef67-9ed2-4ba3-9d23-c899faaa44e9"
        },
        "item": {
          "id": "bb82ff2c-bf9c-479c-b1dd-3dc59b56b5d2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "a97a08c2-55a0-4c7b-af3a-150ccb8754cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd8b00a-c6a4-4d41-9505-0c620967ae30",
        "cursor": {
          "ref": "e9d31e34-94ad-4678-b0cf-884ab55ef87f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f4af50db-37a9-4939-8037-dc7e31640c78"
        },
        "item": {
          "id": "6bd8b00a-c6a4-4d41-9505-0c620967ae30",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b4465f15-fd39-43dc-b4df-ffcca8b1f27e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd8b00a-c6a4-4d41-9505-0c620967ae30",
        "cursor": {
          "ref": "e9d31e34-94ad-4678-b0cf-884ab55ef87f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f4af50db-37a9-4939-8037-dc7e31640c78"
        },
        "item": {
          "id": "6bd8b00a-c6a4-4d41-9505-0c620967ae30",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "b4465f15-fd39-43dc-b4df-ffcca8b1f27e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4703c7fa-2cfe-4f29-a56a-9df0f29aa226",
        "cursor": {
          "ref": "04be32c6-7a62-4a79-994f-4deabca5435b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "17d28837-6ce0-4dd6-8e6e-fb571ff22f9e"
        },
        "item": {
          "id": "4703c7fa-2cfe-4f29-a56a-9df0f29aa226",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1eef3130-1b6d-4dce-9e9a-dfc57ceb288a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4703c7fa-2cfe-4f29-a56a-9df0f29aa226",
        "cursor": {
          "ref": "04be32c6-7a62-4a79-994f-4deabca5435b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "17d28837-6ce0-4dd6-8e6e-fb571ff22f9e"
        },
        "item": {
          "id": "4703c7fa-2cfe-4f29-a56a-9df0f29aa226",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1eef3130-1b6d-4dce-9e9a-dfc57ceb288a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e92137-0a07-4720-8187-5fa8be8ab309",
        "cursor": {
          "ref": "f818d0f7-64c3-41d9-9814-4b2e5d205e97",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a73f6970-f3a0-4e31-ad61-2052a12200b0"
        },
        "item": {
          "id": "f7e92137-0a07-4720-8187-5fa8be8ab309",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5b84da88-5141-4329-953c-b44a2880fcb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e92137-0a07-4720-8187-5fa8be8ab309",
        "cursor": {
          "ref": "f818d0f7-64c3-41d9-9814-4b2e5d205e97",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a73f6970-f3a0-4e31-ad61-2052a12200b0"
        },
        "item": {
          "id": "f7e92137-0a07-4720-8187-5fa8be8ab309",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5b84da88-5141-4329-953c-b44a2880fcb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c50eed-078d-461c-ae35-986b5bce2d95",
        "cursor": {
          "ref": "64881f67-5d72-4484-9943-4d1cf27c5bd9",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4ca31270-136e-4390-b28d-fc8f295fc080"
        },
        "item": {
          "id": "d9c50eed-078d-461c-ae35-986b5bce2d95",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3c93d744-ec0e-44f9-bef4-b8857d838c67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c50eed-078d-461c-ae35-986b5bce2d95",
        "cursor": {
          "ref": "64881f67-5d72-4484-9943-4d1cf27c5bd9",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4ca31270-136e-4390-b28d-fc8f295fc080"
        },
        "item": {
          "id": "d9c50eed-078d-461c-ae35-986b5bce2d95",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3c93d744-ec0e-44f9-bef4-b8857d838c67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9963be09-aab0-44d0-a2a1-1daef7abfe5b",
        "cursor": {
          "ref": "68c49ee3-e18e-4eed-8861-023d448ed09d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e37a2d6d-0792-438a-87bc-4ea6accdaa9c"
        },
        "item": {
          "id": "9963be09-aab0-44d0-a2a1-1daef7abfe5b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bfe565f7-986b-4f8f-a478-fc5f75986a61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9963be09-aab0-44d0-a2a1-1daef7abfe5b",
        "cursor": {
          "ref": "68c49ee3-e18e-4eed-8861-023d448ed09d",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e37a2d6d-0792-438a-87bc-4ea6accdaa9c"
        },
        "item": {
          "id": "9963be09-aab0-44d0-a2a1-1daef7abfe5b",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bfe565f7-986b-4f8f-a478-fc5f75986a61",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfbdb60-ea80-4c4b-9921-bd2518137793",
        "cursor": {
          "ref": "c11b7550-ab1c-4c9b-80e5-a3786141ea7f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3f35989c-6ab3-436b-b3f3-052aab1ca380"
        },
        "item": {
          "id": "7bfbdb60-ea80-4c4b-9921-bd2518137793",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f7c9018d-67e0-46f0-947c-1142377f0605",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bfbdb60-ea80-4c4b-9921-bd2518137793",
        "cursor": {
          "ref": "c11b7550-ab1c-4c9b-80e5-a3786141ea7f",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3f35989c-6ab3-436b-b3f3-052aab1ca380"
        },
        "item": {
          "id": "7bfbdb60-ea80-4c4b-9921-bd2518137793",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f7c9018d-67e0-46f0-947c-1142377f0605",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8bc942-1dc5-4cda-ba4b-b6191d0b4b57",
        "cursor": {
          "ref": "c073d475-eb3d-4fcd-93ae-c93e75973bc3",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "16a9e333-fa84-45ff-b188-a4c67e679d35"
        },
        "item": {
          "id": "eb8bc942-1dc5-4cda-ba4b-b6191d0b4b57",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1945976b-3c63-40a1-8ec6-b6ef576dbe73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8bc942-1dc5-4cda-ba4b-b6191d0b4b57",
        "cursor": {
          "ref": "c073d475-eb3d-4fcd-93ae-c93e75973bc3",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "16a9e333-fa84-45ff-b188-a4c67e679d35"
        },
        "item": {
          "id": "eb8bc942-1dc5-4cda-ba4b-b6191d0b4b57",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1945976b-3c63-40a1-8ec6-b6ef576dbe73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eac544a-cae1-4636-bb90-c72921bf8a3a",
        "cursor": {
          "ref": "03af9441-05c2-4a9f-84e1-af5392b02668",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7e0aef52-1a89-4240-bb09-dea81e75cbcd"
        },
        "item": {
          "id": "8eac544a-cae1-4636-bb90-c72921bf8a3a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7970eb80-8f4d-40e6-b70d-757400e25c7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eac544a-cae1-4636-bb90-c72921bf8a3a",
        "cursor": {
          "ref": "03af9441-05c2-4a9f-84e1-af5392b02668",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7e0aef52-1a89-4240-bb09-dea81e75cbcd"
        },
        "item": {
          "id": "8eac544a-cae1-4636-bb90-c72921bf8a3a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7970eb80-8f4d-40e6-b70d-757400e25c7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305bce28-e37a-43ae-b760-60c5c09f9613",
        "cursor": {
          "ref": "adcee0ad-e6e2-4792-a3ce-275d549f5581",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0581a2f0-3565-4564-8f49-c71fa8337c2a"
        },
        "item": {
          "id": "305bce28-e37a-43ae-b760-60c5c09f9613",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e6c718a8-9691-4221-a12e-cd03da2b8360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305bce28-e37a-43ae-b760-60c5c09f9613",
        "cursor": {
          "ref": "adcee0ad-e6e2-4792-a3ce-275d549f5581",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0581a2f0-3565-4564-8f49-c71fa8337c2a"
        },
        "item": {
          "id": "305bce28-e37a-43ae-b760-60c5c09f9613",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e6c718a8-9691-4221-a12e-cd03da2b8360",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af54685-3cfa-4fb6-b073-39bf5a3ed90b",
        "cursor": {
          "ref": "78be976b-3752-4975-8a78-4e43799e9247",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f6f567c0-57a1-4a42-9829-9f7e51369493"
        },
        "item": {
          "id": "9af54685-3cfa-4fb6-b073-39bf5a3ed90b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7aaa3cbc-c229-4363-815b-7af3f5e8e8f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9af54685-3cfa-4fb6-b073-39bf5a3ed90b",
        "cursor": {
          "ref": "78be976b-3752-4975-8a78-4e43799e9247",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "f6f567c0-57a1-4a42-9829-9f7e51369493"
        },
        "item": {
          "id": "9af54685-3cfa-4fb6-b073-39bf5a3ed90b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7aaa3cbc-c229-4363-815b-7af3f5e8e8f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b895559d-54ca-447e-9866-a57a30a450c3",
        "cursor": {
          "ref": "af969e81-d09c-4c49-ac45-dabca5f48705",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f5f6bd05-e553-4317-9655-913f966ef538"
        },
        "item": {
          "id": "b895559d-54ca-447e-9866-a57a30a450c3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "068f86f9-4977-401d-9ba1-706ee2ac8e66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b895559d-54ca-447e-9866-a57a30a450c3",
        "cursor": {
          "ref": "af969e81-d09c-4c49-ac45-dabca5f48705",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f5f6bd05-e553-4317-9655-913f966ef538"
        },
        "item": {
          "id": "b895559d-54ca-447e-9866-a57a30a450c3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "068f86f9-4977-401d-9ba1-706ee2ac8e66",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d12833-76e6-4d28-b063-a6eb549847d2",
        "cursor": {
          "ref": "b002f46a-cd13-4663-a241-3f098fe0a2e4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d64bc7a4-e7b9-4d5b-89d8-790abf77b15e"
        },
        "item": {
          "id": "71d12833-76e6-4d28-b063-a6eb549847d2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8c5942cd-09cd-4852-b160-453bab5c6342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d12833-76e6-4d28-b063-a6eb549847d2",
        "cursor": {
          "ref": "b002f46a-cd13-4663-a241-3f098fe0a2e4",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d64bc7a4-e7b9-4d5b-89d8-790abf77b15e"
        },
        "item": {
          "id": "71d12833-76e6-4d28-b063-a6eb549847d2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8c5942cd-09cd-4852-b160-453bab5c6342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8ea1b0-96bb-4b45-99e9-92c8ecc925b9",
        "cursor": {
          "ref": "ab28e271-697d-4262-8686-10c9d2416059",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bcd55e84-b21b-4e45-b69b-7d7208b86824"
        },
        "item": {
          "id": "4c8ea1b0-96bb-4b45-99e9-92c8ecc925b9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "75bcf6b9-4c19-4c4c-9947-7ce5a6f97d3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8ea1b0-96bb-4b45-99e9-92c8ecc925b9",
        "cursor": {
          "ref": "ab28e271-697d-4262-8686-10c9d2416059",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "bcd55e84-b21b-4e45-b69b-7d7208b86824"
        },
        "item": {
          "id": "4c8ea1b0-96bb-4b45-99e9-92c8ecc925b9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "75bcf6b9-4c19-4c4c-9947-7ce5a6f97d3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13e912f-1f05-4c7a-b4a1-9dd0527bd2bc",
        "cursor": {
          "ref": "e390d33d-70e4-4c56-b43c-c906499ff329",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2d5c7a1-0c9d-4bc2-81b7-0e011a2777fb"
        },
        "item": {
          "id": "c13e912f-1f05-4c7a-b4a1-9dd0527bd2bc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e0810e3c-8f8b-44d4-a11e-1aeb059ebf89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13e912f-1f05-4c7a-b4a1-9dd0527bd2bc",
        "cursor": {
          "ref": "e390d33d-70e4-4c56-b43c-c906499ff329",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2d5c7a1-0c9d-4bc2-81b7-0e011a2777fb"
        },
        "item": {
          "id": "c13e912f-1f05-4c7a-b4a1-9dd0527bd2bc",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "e0810e3c-8f8b-44d4-a11e-1aeb059ebf89",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f76864e-ea2b-4fcf-b27c-e4bc728dd886",
        "cursor": {
          "ref": "26e26f6c-a9f8-45b2-ad16-e7c69016e27a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "146dd7ed-5e54-4a2a-b451-69d354119235"
        },
        "item": {
          "id": "4f76864e-ea2b-4fcf-b27c-e4bc728dd886",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1cc8cebe-def9-456f-9c56-62f15bb0325e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f76864e-ea2b-4fcf-b27c-e4bc728dd886",
        "cursor": {
          "ref": "26e26f6c-a9f8-45b2-ad16-e7c69016e27a",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "146dd7ed-5e54-4a2a-b451-69d354119235"
        },
        "item": {
          "id": "4f76864e-ea2b-4fcf-b27c-e4bc728dd886",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1cc8cebe-def9-456f-9c56-62f15bb0325e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5b662c-8605-4dd2-98c5-57c8aa85f442",
        "cursor": {
          "ref": "9fac02e6-8f4d-40ad-9369-eb849953a371",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "46abe692-888b-42a4-b6b5-e214134a41e3"
        },
        "item": {
          "id": "5e5b662c-8605-4dd2-98c5-57c8aa85f442",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0fda8b7c-326b-479e-88ef-19ef4b12d7c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5b662c-8605-4dd2-98c5-57c8aa85f442",
        "cursor": {
          "ref": "9fac02e6-8f4d-40ad-9369-eb849953a371",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "46abe692-888b-42a4-b6b5-e214134a41e3"
        },
        "item": {
          "id": "5e5b662c-8605-4dd2-98c5-57c8aa85f442",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "0fda8b7c-326b-479e-88ef-19ef4b12d7c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe9c4b3-6972-42c6-9a1f-a095574291eb",
        "cursor": {
          "ref": "30a40df1-a17b-43f4-9544-01dee37501c6",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5d5d13cc-4cea-4672-a532-9b08327b91ec"
        },
        "item": {
          "id": "bfe9c4b3-6972-42c6-9a1f-a095574291eb",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "79cb9a1a-cbff-4327-ad43-a2f05a3bd142",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe9c4b3-6972-42c6-9a1f-a095574291eb",
        "cursor": {
          "ref": "30a40df1-a17b-43f4-9544-01dee37501c6",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5d5d13cc-4cea-4672-a532-9b08327b91ec"
        },
        "item": {
          "id": "bfe9c4b3-6972-42c6-9a1f-a095574291eb",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "79cb9a1a-cbff-4327-ad43-a2f05a3bd142",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b166626-b1f4-421d-a47f-2faa8a5e409a",
        "cursor": {
          "ref": "5430f196-c085-4b24-8633-9f47354becd5",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3c2c3894-7c51-4271-a8ce-dbd1c530847d"
        },
        "item": {
          "id": "2b166626-b1f4-421d-a47f-2faa8a5e409a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8c6e5ab0-cf56-4686-ae23-f5d0d6efa6ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b166626-b1f4-421d-a47f-2faa8a5e409a",
        "cursor": {
          "ref": "5430f196-c085-4b24-8633-9f47354becd5",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3c2c3894-7c51-4271-a8ce-dbd1c530847d"
        },
        "item": {
          "id": "2b166626-b1f4-421d-a47f-2faa8a5e409a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8c6e5ab0-cf56-4686-ae23-f5d0d6efa6ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc876e92-2b79-4010-8a1f-c5950bd6ea8b",
        "cursor": {
          "ref": "a15e37f2-a418-46c7-a4a2-5ef6595a061c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "90ebf73f-3501-404b-a308-49e3dcc0209e"
        },
        "item": {
          "id": "bc876e92-2b79-4010-8a1f-c5950bd6ea8b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "895b36a0-7fa1-47f2-bfd3-1372a6aea073",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc876e92-2b79-4010-8a1f-c5950bd6ea8b",
        "cursor": {
          "ref": "a15e37f2-a418-46c7-a4a2-5ef6595a061c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "90ebf73f-3501-404b-a308-49e3dcc0209e"
        },
        "item": {
          "id": "bc876e92-2b79-4010-8a1f-c5950bd6ea8b",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "895b36a0-7fa1-47f2-bfd3-1372a6aea073",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5a0d0f-af14-462e-a7bd-daf3df45d709",
        "cursor": {
          "ref": "d2afa16c-35e3-41ac-891f-3336a6ed506c",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "54a39efb-4f56-4c8e-8f57-ebcd5c238171"
        },
        "item": {
          "id": "3d5a0d0f-af14-462e-a7bd-daf3df45d709",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "311b775a-ba2f-47d1-80cb-20818c1fa7f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5a0d0f-af14-462e-a7bd-daf3df45d709",
        "cursor": {
          "ref": "d2afa16c-35e3-41ac-891f-3336a6ed506c",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "54a39efb-4f56-4c8e-8f57-ebcd5c238171"
        },
        "item": {
          "id": "3d5a0d0f-af14-462e-a7bd-daf3df45d709",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "311b775a-ba2f-47d1-80cb-20818c1fa7f5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b902cc-0aba-4f2f-abc7-4369455c1af4",
        "cursor": {
          "ref": "e9b1e36c-d26f-4b96-9908-cf739bda9a95",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f80d2c47-1bbd-4bf3-9f74-7287ae0b8e85"
        },
        "item": {
          "id": "60b902cc-0aba-4f2f-abc7-4369455c1af4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4ea7c413-c771-4118-ae83-89e49572207b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60b902cc-0aba-4f2f-abc7-4369455c1af4",
        "cursor": {
          "ref": "e9b1e36c-d26f-4b96-9908-cf739bda9a95",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f80d2c47-1bbd-4bf3-9f74-7287ae0b8e85"
        },
        "item": {
          "id": "60b902cc-0aba-4f2f-abc7-4369455c1af4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4ea7c413-c771-4118-ae83-89e49572207b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62731b77-6242-42e8-b327-927bc1e95c22",
        "cursor": {
          "ref": "3a668f44-f7b7-41c9-abe8-3e1945f0a45d",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "895c17b3-7841-455d-aaf7-1031f02a863c"
        },
        "item": {
          "id": "62731b77-6242-42e8-b327-927bc1e95c22",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ed092825-3f26-43f5-a63d-1fd4493cba0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62731b77-6242-42e8-b327-927bc1e95c22",
        "cursor": {
          "ref": "3a668f44-f7b7-41c9-abe8-3e1945f0a45d",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "895c17b3-7841-455d-aaf7-1031f02a863c"
        },
        "item": {
          "id": "62731b77-6242-42e8-b327-927bc1e95c22",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ed092825-3f26-43f5-a63d-1fd4493cba0b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7e0c26-6dcd-4e25-96ed-d22345e474ff",
        "cursor": {
          "ref": "2512848e-a543-4095-9219-8166da3aaec7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "529d7420-83fa-4cc0-9caa-c42e3403db23"
        },
        "item": {
          "id": "dd7e0c26-6dcd-4e25-96ed-d22345e474ff",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4bf11f51-4999-48d8-beea-b24a0a568b73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7e0c26-6dcd-4e25-96ed-d22345e474ff",
        "cursor": {
          "ref": "2512848e-a543-4095-9219-8166da3aaec7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "529d7420-83fa-4cc0-9caa-c42e3403db23"
        },
        "item": {
          "id": "dd7e0c26-6dcd-4e25-96ed-d22345e474ff",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "4bf11f51-4999-48d8-beea-b24a0a568b73",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976bf486-10d3-4aa7-95ce-d0bb906ec76b",
        "cursor": {
          "ref": "5f3d07d8-8879-4896-ad86-2fd823c1423f",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4f33fba6-a003-4d5e-84f7-c0332870d2da"
        },
        "item": {
          "id": "976bf486-10d3-4aa7-95ce-d0bb906ec76b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5a1a01cd-76b0-4f08-abe6-cf35765ac86b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976bf486-10d3-4aa7-95ce-d0bb906ec76b",
        "cursor": {
          "ref": "5f3d07d8-8879-4896-ad86-2fd823c1423f",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "4f33fba6-a003-4d5e-84f7-c0332870d2da"
        },
        "item": {
          "id": "976bf486-10d3-4aa7-95ce-d0bb906ec76b",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5a1a01cd-76b0-4f08-abe6-cf35765ac86b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c95eef-3cf5-453d-a670-0c2c81dafcd9",
        "cursor": {
          "ref": "f724261d-3cbf-4812-8c1c-15258b1af861",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2b07ba71-25be-49a5-9a1e-c73f547d985b"
        },
        "item": {
          "id": "93c95eef-3cf5-453d-a670-0c2c81dafcd9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4a7f0613-5482-4c96-ad4a-c53f9f66ef5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c95eef-3cf5-453d-a670-0c2c81dafcd9",
        "cursor": {
          "ref": "f724261d-3cbf-4812-8c1c-15258b1af861",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "2b07ba71-25be-49a5-9a1e-c73f547d985b"
        },
        "item": {
          "id": "93c95eef-3cf5-453d-a670-0c2c81dafcd9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4a7f0613-5482-4c96-ad4a-c53f9f66ef5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1576e662-7ea8-4b92-b509-2f1e6a388aa2",
        "cursor": {
          "ref": "4f7fc3ae-3682-4c6b-ab61-34f44df9318f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "704e8280-d809-44ed-8438-8b49bcf02cb5"
        },
        "item": {
          "id": "1576e662-7ea8-4b92-b509-2f1e6a388aa2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e08192c9-978a-4909-95f7-047f06a2aedc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1576e662-7ea8-4b92-b509-2f1e6a388aa2",
        "cursor": {
          "ref": "4f7fc3ae-3682-4c6b-ab61-34f44df9318f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "704e8280-d809-44ed-8438-8b49bcf02cb5"
        },
        "item": {
          "id": "1576e662-7ea8-4b92-b509-2f1e6a388aa2",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e08192c9-978a-4909-95f7-047f06a2aedc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f6a163-2164-49d4-8af5-2f6a1a23ec67",
        "cursor": {
          "ref": "a65349c4-5f7b-4f7a-9266-16078d04b0c1",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ae2b1bc1-a7ec-4dca-8db6-49f485b2390a"
        },
        "item": {
          "id": "c5f6a163-2164-49d4-8af5-2f6a1a23ec67",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0e045e2f-f23a-464b-b057-9cf3ab94c760",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f6a163-2164-49d4-8af5-2f6a1a23ec67",
        "cursor": {
          "ref": "a65349c4-5f7b-4f7a-9266-16078d04b0c1",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "ae2b1bc1-a7ec-4dca-8db6-49f485b2390a"
        },
        "item": {
          "id": "c5f6a163-2164-49d4-8af5-2f6a1a23ec67",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "0e045e2f-f23a-464b-b057-9cf3ab94c760",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323565c5-18dd-4106-9405-0e245d673e90",
        "cursor": {
          "ref": "9bd64c2f-2d89-4122-a8d8-277de7952cfb",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a69b8ddf-55e1-4be0-b249-5ae9ef25e5d6"
        },
        "item": {
          "id": "323565c5-18dd-4106-9405-0e245d673e90",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9b14f80b-f2d5-4cca-96cb-e259934eb43f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "323565c5-18dd-4106-9405-0e245d673e90",
        "cursor": {
          "ref": "9bd64c2f-2d89-4122-a8d8-277de7952cfb",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a69b8ddf-55e1-4be0-b249-5ae9ef25e5d6"
        },
        "item": {
          "id": "323565c5-18dd-4106-9405-0e245d673e90",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9b14f80b-f2d5-4cca-96cb-e259934eb43f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a50ac3-3184-4878-9a44-c3a04eb64c7e",
        "cursor": {
          "ref": "a1e89238-0bc4-41df-90cb-923c001a0769",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ddb563d2-b628-4b19-97aa-1e1f255c0cf8"
        },
        "item": {
          "id": "53a50ac3-3184-4878-9a44-c3a04eb64c7e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "60c0b706-ae26-4081-acea-b624559ef55b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53a50ac3-3184-4878-9a44-c3a04eb64c7e",
        "cursor": {
          "ref": "a1e89238-0bc4-41df-90cb-923c001a0769",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "ddb563d2-b628-4b19-97aa-1e1f255c0cf8"
        },
        "item": {
          "id": "53a50ac3-3184-4878-9a44-c3a04eb64c7e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "60c0b706-ae26-4081-acea-b624559ef55b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f6322a-60fc-4cb3-a494-312b1a06268e",
        "cursor": {
          "ref": "f456313d-fb63-4560-bc6f-31e3f559719b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3167f996-d55f-4b0f-a37d-34690e052cca"
        },
        "item": {
          "id": "d4f6322a-60fc-4cb3-a494-312b1a06268e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "294e9bd2-3c87-4772-b347-8bbb36c5d47d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f6322a-60fc-4cb3-a494-312b1a06268e",
        "cursor": {
          "ref": "f456313d-fb63-4560-bc6f-31e3f559719b",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3167f996-d55f-4b0f-a37d-34690e052cca"
        },
        "item": {
          "id": "d4f6322a-60fc-4cb3-a494-312b1a06268e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "294e9bd2-3c87-4772-b347-8bbb36c5d47d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb3aa77-d591-4d29-baa1-d8b943aa6251",
        "cursor": {
          "ref": "bbf32b09-85fb-4d72-8957-f44221c2e86a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6da018ee-92aa-4c0f-a855-8e2e96e5b70e"
        },
        "item": {
          "id": "8eb3aa77-d591-4d29-baa1-d8b943aa6251",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4d562525-5cea-49fd-af23-512b5ccabb48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb3aa77-d591-4d29-baa1-d8b943aa6251",
        "cursor": {
          "ref": "bbf32b09-85fb-4d72-8957-f44221c2e86a",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6da018ee-92aa-4c0f-a855-8e2e96e5b70e"
        },
        "item": {
          "id": "8eb3aa77-d591-4d29-baa1-d8b943aa6251",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "4d562525-5cea-49fd-af23-512b5ccabb48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09f825c-5836-4f21-9d24-a017b2e1be0c",
        "cursor": {
          "ref": "3d895c7e-0b36-4bca-b993-6b0c7de8b7b8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6bc974e1-2891-4007-aa80-dcf14c846b4c"
        },
        "item": {
          "id": "a09f825c-5836-4f21-9d24-a017b2e1be0c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2f488e03-b548-423a-b278-ad395eaeed2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09f825c-5836-4f21-9d24-a017b2e1be0c",
        "cursor": {
          "ref": "3d895c7e-0b36-4bca-b993-6b0c7de8b7b8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6bc974e1-2891-4007-aa80-dcf14c846b4c"
        },
        "item": {
          "id": "a09f825c-5836-4f21-9d24-a017b2e1be0c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2f488e03-b548-423a-b278-ad395eaeed2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cf56bf-40ce-49e9-a757-b65808738479",
        "cursor": {
          "ref": "973f9ea2-6d08-448e-baa8-ebbf29f017ec",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5c8c9f49-8272-4539-af4e-fe8f906a68fe"
        },
        "item": {
          "id": "a0cf56bf-40ce-49e9-a757-b65808738479",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f0e17445-4409-4162-9c87-8af482853336",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0cf56bf-40ce-49e9-a757-b65808738479",
        "cursor": {
          "ref": "973f9ea2-6d08-448e-baa8-ebbf29f017ec",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5c8c9f49-8272-4539-af4e-fe8f906a68fe"
        },
        "item": {
          "id": "a0cf56bf-40ce-49e9-a757-b65808738479",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f0e17445-4409-4162-9c87-8af482853336",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28209232-afab-48c9-8f7a-9717f5150284",
        "cursor": {
          "ref": "d18f1758-3c76-48dd-ae43-833581b49405",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "23e01cb1-935c-4c6f-a362-9bebbfd4fe60"
        },
        "item": {
          "id": "28209232-afab-48c9-8f7a-9717f5150284",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2a33913b-8368-4adb-879f-6ccf07479c4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28209232-afab-48c9-8f7a-9717f5150284",
        "cursor": {
          "ref": "d18f1758-3c76-48dd-ae43-833581b49405",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "23e01cb1-935c-4c6f-a362-9bebbfd4fe60"
        },
        "item": {
          "id": "28209232-afab-48c9-8f7a-9717f5150284",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2a33913b-8368-4adb-879f-6ccf07479c4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334f964e-19ed-4273-bbc9-401cddd48a9a",
        "cursor": {
          "ref": "cfd242a6-839c-429e-90e1-623c172bf4b5",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3ce119b1-da7a-484b-a586-ec669b7e61eb"
        },
        "item": {
          "id": "334f964e-19ed-4273-bbc9-401cddd48a9a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4cf55327-f6c7-41f7-8db3-53c454c8bfa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334f964e-19ed-4273-bbc9-401cddd48a9a",
        "cursor": {
          "ref": "cfd242a6-839c-429e-90e1-623c172bf4b5",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "3ce119b1-da7a-484b-a586-ec669b7e61eb"
        },
        "item": {
          "id": "334f964e-19ed-4273-bbc9-401cddd48a9a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4cf55327-f6c7-41f7-8db3-53c454c8bfa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20a499d-74ea-4c14-b7c4-17d1ba2161e4",
        "cursor": {
          "ref": "f24863a6-2eef-4481-81be-bb4f916d828b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f3cebf1b-f6f1-4658-af2b-48c12bec2f90"
        },
        "item": {
          "id": "a20a499d-74ea-4c14-b7c4-17d1ba2161e4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "65f73350-b7a8-43fe-9766-a546b94a45a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20a499d-74ea-4c14-b7c4-17d1ba2161e4",
        "cursor": {
          "ref": "f24863a6-2eef-4481-81be-bb4f916d828b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f3cebf1b-f6f1-4658-af2b-48c12bec2f90"
        },
        "item": {
          "id": "a20a499d-74ea-4c14-b7c4-17d1ba2161e4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "65f73350-b7a8-43fe-9766-a546b94a45a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb3680a-ae3b-4eed-8dfd-d71c77b2e411",
        "cursor": {
          "ref": "1efa5c93-60c0-4c95-85c6-8e3345580e83",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e1d2c477-e3ce-4ded-b6e3-c7a8f885cd50"
        },
        "item": {
          "id": "edb3680a-ae3b-4eed-8dfd-d71c77b2e411",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "aaa07019-5a3e-470a-81c7-580047ce0708",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb3680a-ae3b-4eed-8dfd-d71c77b2e411",
        "cursor": {
          "ref": "1efa5c93-60c0-4c95-85c6-8e3345580e83",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e1d2c477-e3ce-4ded-b6e3-c7a8f885cd50"
        },
        "item": {
          "id": "edb3680a-ae3b-4eed-8dfd-d71c77b2e411",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "aaa07019-5a3e-470a-81c7-580047ce0708",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d4ff40-fb3d-4008-bbe8-9462b949dc46",
        "cursor": {
          "ref": "87b135aa-77d9-4d76-b05c-2dfb241f30f4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7419060d-bf53-49d0-a241-b04cdc3d29f4"
        },
        "item": {
          "id": "e4d4ff40-fb3d-4008-bbe8-9462b949dc46",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "015feae1-de94-4e2a-8192-edce7459874f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d4ff40-fb3d-4008-bbe8-9462b949dc46",
        "cursor": {
          "ref": "87b135aa-77d9-4d76-b05c-2dfb241f30f4",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7419060d-bf53-49d0-a241-b04cdc3d29f4"
        },
        "item": {
          "id": "e4d4ff40-fb3d-4008-bbe8-9462b949dc46",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "015feae1-de94-4e2a-8192-edce7459874f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf3ce85-5fba-4a51-8e2e-4bd1d88c5d9d",
        "cursor": {
          "ref": "5d8f9d2b-eda8-4588-aa1b-9328ce79b42e",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fd0bc1f0-dfb0-4416-b577-667cb86580a3"
        },
        "item": {
          "id": "ebf3ce85-5fba-4a51-8e2e-4bd1d88c5d9d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4b1502e7-e4f2-4e6b-b1cc-682b46ced129",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebf3ce85-5fba-4a51-8e2e-4bd1d88c5d9d",
        "cursor": {
          "ref": "5d8f9d2b-eda8-4588-aa1b-9328ce79b42e",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fd0bc1f0-dfb0-4416-b577-667cb86580a3"
        },
        "item": {
          "id": "ebf3ce85-5fba-4a51-8e2e-4bd1d88c5d9d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4b1502e7-e4f2-4e6b-b1cc-682b46ced129",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474e3578-0a15-4d53-9b41-e7220988a2a5",
        "cursor": {
          "ref": "daa84e0b-9b2b-44ad-a2ea-fb700224f79e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "61b2b796-a3f6-47b6-b688-c5b375906c77"
        },
        "item": {
          "id": "474e3578-0a15-4d53-9b41-e7220988a2a5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9eff07c8-8f61-40cb-8251-54f12404e6df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474e3578-0a15-4d53-9b41-e7220988a2a5",
        "cursor": {
          "ref": "daa84e0b-9b2b-44ad-a2ea-fb700224f79e",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "61b2b796-a3f6-47b6-b688-c5b375906c77"
        },
        "item": {
          "id": "474e3578-0a15-4d53-9b41-e7220988a2a5",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9eff07c8-8f61-40cb-8251-54f12404e6df",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253b1c82-909b-406b-bba5-57c11d9b721f",
        "cursor": {
          "ref": "1230aae2-5cbc-4ac9-9ca4-e2a135acebfa",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3338d8fc-05e0-4bc5-b70f-ab91c9e26b82"
        },
        "item": {
          "id": "253b1c82-909b-406b-bba5-57c11d9b721f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e19d750c-e54c-415d-b752-bfd8da38545e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "253b1c82-909b-406b-bba5-57c11d9b721f",
        "cursor": {
          "ref": "1230aae2-5cbc-4ac9-9ca4-e2a135acebfa",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3338d8fc-05e0-4bc5-b70f-ab91c9e26b82"
        },
        "item": {
          "id": "253b1c82-909b-406b-bba5-57c11d9b721f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e19d750c-e54c-415d-b752-bfd8da38545e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8c5261-5604-4854-9c99-181c888e99b1",
        "cursor": {
          "ref": "0ec23417-739f-4525-9db8-3bb33eb6e8fd",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "74f08171-04f1-462b-86da-82237aed498d"
        },
        "item": {
          "id": "ba8c5261-5604-4854-9c99-181c888e99b1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4d69ef1a-4cd3-4e46-9213-124331fbe277",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8c5261-5604-4854-9c99-181c888e99b1",
        "cursor": {
          "ref": "0ec23417-739f-4525-9db8-3bb33eb6e8fd",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "74f08171-04f1-462b-86da-82237aed498d"
        },
        "item": {
          "id": "ba8c5261-5604-4854-9c99-181c888e99b1",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4d69ef1a-4cd3-4e46-9213-124331fbe277",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a41301-7fea-4e15-852f-a32cb665a8b1",
        "cursor": {
          "ref": "88e1661e-e146-4856-bcee-fb3309c458b0",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7c465855-3bd1-45fe-9808-7277dff00b83"
        },
        "item": {
          "id": "c9a41301-7fea-4e15-852f-a32cb665a8b1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b4ba4d66-b57c-4744-9f8c-a3e2eca0aa54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9a41301-7fea-4e15-852f-a32cb665a8b1",
        "cursor": {
          "ref": "88e1661e-e146-4856-bcee-fb3309c458b0",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7c465855-3bd1-45fe-9808-7277dff00b83"
        },
        "item": {
          "id": "c9a41301-7fea-4e15-852f-a32cb665a8b1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b4ba4d66-b57c-4744-9f8c-a3e2eca0aa54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4ac33d-5058-415e-b274-e38d157cf640",
        "cursor": {
          "ref": "b1b5b2ec-4200-419b-9655-60f22f2dc333",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "19762849-fe14-4bf4-8a1a-3200ef3390d2"
        },
        "item": {
          "id": "1b4ac33d-5058-415e-b274-e38d157cf640",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7025c5e0-bc92-454c-b354-a9c566491e3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b4ac33d-5058-415e-b274-e38d157cf640",
        "cursor": {
          "ref": "b1b5b2ec-4200-419b-9655-60f22f2dc333",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "19762849-fe14-4bf4-8a1a-3200ef3390d2"
        },
        "item": {
          "id": "1b4ac33d-5058-415e-b274-e38d157cf640",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7025c5e0-bc92-454c-b354-a9c566491e3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18300251-0a87-4191-a20b-a527c94e243a",
        "cursor": {
          "ref": "360fc612-0827-4fa2-9909-ce81bec269ca",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9ae9a661-bf43-483c-9436-158a378e523c"
        },
        "item": {
          "id": "18300251-0a87-4191-a20b-a527c94e243a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c26f0d14-a351-4c6d-b425-7f610aa9f65e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18300251-0a87-4191-a20b-a527c94e243a",
        "cursor": {
          "ref": "360fc612-0827-4fa2-9909-ce81bec269ca",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "9ae9a661-bf43-483c-9436-158a378e523c"
        },
        "item": {
          "id": "18300251-0a87-4191-a20b-a527c94e243a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c26f0d14-a351-4c6d-b425-7f610aa9f65e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c078d633-700a-467a-ae6d-19bfb3f28059",
        "cursor": {
          "ref": "91b149e6-5662-498b-80c1-ff9ee7b43a9c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "62bf616a-109f-4c8d-8619-568c465816e3"
        },
        "item": {
          "id": "c078d633-700a-467a-ae6d-19bfb3f28059",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7a64cd9d-c964-4d27-9a73-f2fa39082913",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c078d633-700a-467a-ae6d-19bfb3f28059",
        "cursor": {
          "ref": "91b149e6-5662-498b-80c1-ff9ee7b43a9c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "62bf616a-109f-4c8d-8619-568c465816e3"
        },
        "item": {
          "id": "c078d633-700a-467a-ae6d-19bfb3f28059",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7a64cd9d-c964-4d27-9a73-f2fa39082913",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4767b5e2-4e20-4d34-a6c2-5acadfbda8e8",
        "cursor": {
          "ref": "8a05a5c4-f0d6-451b-abc5-bbbe8a7bc3cb",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "59ba62a0-583f-4e98-961f-00a72b429e02"
        },
        "item": {
          "id": "4767b5e2-4e20-4d34-a6c2-5acadfbda8e8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7959c5ee-e2c4-4cd4-8ecc-c11438882bff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4767b5e2-4e20-4d34-a6c2-5acadfbda8e8",
        "cursor": {
          "ref": "8a05a5c4-f0d6-451b-abc5-bbbe8a7bc3cb",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "59ba62a0-583f-4e98-961f-00a72b429e02"
        },
        "item": {
          "id": "4767b5e2-4e20-4d34-a6c2-5acadfbda8e8",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7959c5ee-e2c4-4cd4-8ecc-c11438882bff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31fbe64-365a-4465-a284-bf131a79f273",
        "cursor": {
          "ref": "9e554c02-f2a5-4c00-905d-32208be76887",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b169f392-7c3a-47ab-acea-c263be7ed9b9"
        },
        "item": {
          "id": "f31fbe64-365a-4465-a284-bf131a79f273",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9dc467ab-85ae-4809-b77c-ce16120aa37d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31fbe64-365a-4465-a284-bf131a79f273",
        "cursor": {
          "ref": "9e554c02-f2a5-4c00-905d-32208be76887",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b169f392-7c3a-47ab-acea-c263be7ed9b9"
        },
        "item": {
          "id": "f31fbe64-365a-4465-a284-bf131a79f273",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9dc467ab-85ae-4809-b77c-ce16120aa37d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0b9ede-1263-4b95-a572-9d1b7e6a5fbe",
        "cursor": {
          "ref": "123fae8c-c567-4a59-8910-8ff8e87d5e19",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d14b1177-8c99-4031-ad0d-a7eecf52434f"
        },
        "item": {
          "id": "8f0b9ede-1263-4b95-a572-9d1b7e6a5fbe",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4925a903-5308-4723-a9e7-0e2d9e77f149",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0b9ede-1263-4b95-a572-9d1b7e6a5fbe",
        "cursor": {
          "ref": "123fae8c-c567-4a59-8910-8ff8e87d5e19",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d14b1177-8c99-4031-ad0d-a7eecf52434f"
        },
        "item": {
          "id": "8f0b9ede-1263-4b95-a572-9d1b7e6a5fbe",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "4925a903-5308-4723-a9e7-0e2d9e77f149",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc023dd7-745a-450f-9c7c-df6c2faa3def",
        "cursor": {
          "ref": "698976db-e2f8-4ed8-bc43-0e1b21004e60",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "01e188da-895b-44a5-8d0c-270d7deba9da"
        },
        "item": {
          "id": "cc023dd7-745a-450f-9c7c-df6c2faa3def",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "be1c278d-5470-4d99-99c7-88c1ef3766e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc023dd7-745a-450f-9c7c-df6c2faa3def",
        "cursor": {
          "ref": "698976db-e2f8-4ed8-bc43-0e1b21004e60",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "01e188da-895b-44a5-8d0c-270d7deba9da"
        },
        "item": {
          "id": "cc023dd7-745a-450f-9c7c-df6c2faa3def",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "be1c278d-5470-4d99-99c7-88c1ef3766e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d036b0c0-4756-4e89-b4cb-85920f5ffb22",
        "cursor": {
          "ref": "9c2da48d-6e50-4db7-bbfe-d0f5d74ab7c7",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0269a83f-fa0c-4659-929f-2d36590563ef"
        },
        "item": {
          "id": "d036b0c0-4756-4e89-b4cb-85920f5ffb22",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d2b6311c-fba3-47af-bba8-bd59474e8975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d036b0c0-4756-4e89-b4cb-85920f5ffb22",
        "cursor": {
          "ref": "9c2da48d-6e50-4db7-bbfe-d0f5d74ab7c7",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0269a83f-fa0c-4659-929f-2d36590563ef"
        },
        "item": {
          "id": "d036b0c0-4756-4e89-b4cb-85920f5ffb22",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "d2b6311c-fba3-47af-bba8-bd59474e8975",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7813561-5a6e-4a84-8be3-3908109417ad",
        "cursor": {
          "ref": "17d77fbf-2302-4ca7-ae89-d14345090af7",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "667f56e5-b6ee-4f15-b844-c8313443e1b0"
        },
        "item": {
          "id": "f7813561-5a6e-4a84-8be3-3908109417ad",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "83011654-ef74-4b43-af2d-ba8ca1d90cba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7813561-5a6e-4a84-8be3-3908109417ad",
        "cursor": {
          "ref": "17d77fbf-2302-4ca7-ae89-d14345090af7",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "667f56e5-b6ee-4f15-b844-c8313443e1b0"
        },
        "item": {
          "id": "f7813561-5a6e-4a84-8be3-3908109417ad",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "83011654-ef74-4b43-af2d-ba8ca1d90cba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082af13c-7d40-4195-bca6-5657133d0e06",
        "cursor": {
          "ref": "f9bc8d14-7774-4013-a437-53ab42b797d7",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "96dcb000-ad8e-4a90-8362-03fe5085ed5a"
        },
        "item": {
          "id": "082af13c-7d40-4195-bca6-5657133d0e06",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "34423515-3808-45a4-8609-26f7cd5e7674",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082af13c-7d40-4195-bca6-5657133d0e06",
        "cursor": {
          "ref": "f9bc8d14-7774-4013-a437-53ab42b797d7",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "96dcb000-ad8e-4a90-8362-03fe5085ed5a"
        },
        "item": {
          "id": "082af13c-7d40-4195-bca6-5657133d0e06",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "34423515-3808-45a4-8609-26f7cd5e7674",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9b14be-1df2-47ca-8cf0-e9f321e879d1",
        "cursor": {
          "ref": "8b1001d4-7241-4555-8719-85def510946e",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ba052405-e777-4537-9e97-a7124c185934"
        },
        "item": {
          "id": "1f9b14be-1df2-47ca-8cf0-e9f321e879d1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2b6747df-5cc7-4f60-b78e-98a1b4d7b74f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9b14be-1df2-47ca-8cf0-e9f321e879d1",
        "cursor": {
          "ref": "8b1001d4-7241-4555-8719-85def510946e",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ba052405-e777-4537-9e97-a7124c185934"
        },
        "item": {
          "id": "1f9b14be-1df2-47ca-8cf0-e9f321e879d1",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2b6747df-5cc7-4f60-b78e-98a1b4d7b74f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a5ee76-9f35-4926-aab1-60eb6198b21d",
        "cursor": {
          "ref": "657080ea-33d1-4ebf-8154-d8861e8308d3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eca3dfc1-8483-4586-adde-98d94ac37a98"
        },
        "item": {
          "id": "a9a5ee76-9f35-4926-aab1-60eb6198b21d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f3da6fcb-4d46-4ead-b8dc-efb10feb4280",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a5ee76-9f35-4926-aab1-60eb6198b21d",
        "cursor": {
          "ref": "657080ea-33d1-4ebf-8154-d8861e8308d3",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "eca3dfc1-8483-4586-adde-98d94ac37a98"
        },
        "item": {
          "id": "a9a5ee76-9f35-4926-aab1-60eb6198b21d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f3da6fcb-4d46-4ead-b8dc-efb10feb4280",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290b4102-b179-4920-bbeb-a7837f8314c1",
        "cursor": {
          "ref": "74212723-78e2-4fb0-b6eb-e9ea074f9b77",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2c414189-bd2b-441e-a780-af79a592b000"
        },
        "item": {
          "id": "290b4102-b179-4920-bbeb-a7837f8314c1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d4a00659-00c6-4d45-8b34-389d27378075",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "290b4102-b179-4920-bbeb-a7837f8314c1",
        "cursor": {
          "ref": "74212723-78e2-4fb0-b6eb-e9ea074f9b77",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "2c414189-bd2b-441e-a780-af79a592b000"
        },
        "item": {
          "id": "290b4102-b179-4920-bbeb-a7837f8314c1",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d4a00659-00c6-4d45-8b34-389d27378075",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801d7c8c-ac5b-4adc-996a-238d91f62f4a",
        "cursor": {
          "ref": "cd9cc287-1dbd-4fd4-b90c-3d7e78e5c668",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "266fa2e0-de85-4526-b067-03039c180aa2"
        },
        "item": {
          "id": "801d7c8c-ac5b-4adc-996a-238d91f62f4a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1e46ab16-d7ee-4219-8759-e21f84281e2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801d7c8c-ac5b-4adc-996a-238d91f62f4a",
        "cursor": {
          "ref": "cd9cc287-1dbd-4fd4-b90c-3d7e78e5c668",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "266fa2e0-de85-4526-b067-03039c180aa2"
        },
        "item": {
          "id": "801d7c8c-ac5b-4adc-996a-238d91f62f4a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "1e46ab16-d7ee-4219-8759-e21f84281e2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d55d37-02f5-46fb-8ee8-a034d0ff0b3b",
        "cursor": {
          "ref": "c6b469f5-a438-4774-a1d7-bb9a12062222",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d75781ad-155b-48b6-8e20-7288cd9de599"
        },
        "item": {
          "id": "e8d55d37-02f5-46fb-8ee8-a034d0ff0b3b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "18e5d85c-8fba-4fab-806e-3c4c3358397f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d55d37-02f5-46fb-8ee8-a034d0ff0b3b",
        "cursor": {
          "ref": "c6b469f5-a438-4774-a1d7-bb9a12062222",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d75781ad-155b-48b6-8e20-7288cd9de599"
        },
        "item": {
          "id": "e8d55d37-02f5-46fb-8ee8-a034d0ff0b3b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "18e5d85c-8fba-4fab-806e-3c4c3358397f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cb6a15-9f8b-4fd3-8986-307a4e7132b3",
        "cursor": {
          "ref": "ee85a53e-ac80-475e-a701-e48db5aba75d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e2e7f1f1-f32d-46b6-8c0a-eda751b24886"
        },
        "item": {
          "id": "03cb6a15-9f8b-4fd3-8986-307a4e7132b3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a3af05c8-d84b-462c-b80b-be4448a5c1d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cb6a15-9f8b-4fd3-8986-307a4e7132b3",
        "cursor": {
          "ref": "ee85a53e-ac80-475e-a701-e48db5aba75d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e2e7f1f1-f32d-46b6-8c0a-eda751b24886"
        },
        "item": {
          "id": "03cb6a15-9f8b-4fd3-8986-307a4e7132b3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a3af05c8-d84b-462c-b80b-be4448a5c1d9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80d58dd-2d3b-4721-995e-9fbbf8f470c9",
        "cursor": {
          "ref": "eacd8d87-96d7-47d7-bfe1-eef11b45df72",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b60e739e-eb6e-4934-a4a1-2cd1525c9bd7"
        },
        "item": {
          "id": "f80d58dd-2d3b-4721-995e-9fbbf8f470c9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1214bcd7-d11b-46b9-8cbe-85dba9ef49e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80d58dd-2d3b-4721-995e-9fbbf8f470c9",
        "cursor": {
          "ref": "eacd8d87-96d7-47d7-bfe1-eef11b45df72",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b60e739e-eb6e-4934-a4a1-2cd1525c9bd7"
        },
        "item": {
          "id": "f80d58dd-2d3b-4721-995e-9fbbf8f470c9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1214bcd7-d11b-46b9-8cbe-85dba9ef49e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7feeeba5-8f5f-4d88-ad2e-9a8f5f1d7f2c",
        "cursor": {
          "ref": "2ef1be55-fb16-4b6f-a7d5-0324283ae9b1",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5476ce70-d16d-47e4-bcd2-f99fe209c8c0"
        },
        "item": {
          "id": "7feeeba5-8f5f-4d88-ad2e-9a8f5f1d7f2c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f15fa803-09ff-4ee4-b7de-600b59bbe9da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7feeeba5-8f5f-4d88-ad2e-9a8f5f1d7f2c",
        "cursor": {
          "ref": "2ef1be55-fb16-4b6f-a7d5-0324283ae9b1",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5476ce70-d16d-47e4-bcd2-f99fe209c8c0"
        },
        "item": {
          "id": "7feeeba5-8f5f-4d88-ad2e-9a8f5f1d7f2c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f15fa803-09ff-4ee4-b7de-600b59bbe9da",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b424903a-4ff8-4c4e-a677-5b325965f8f9",
        "cursor": {
          "ref": "3c8821a9-f880-428d-9ed6-33bf2ad7387b",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c0eb9d62-3b60-40e9-b8e0-8c7e1fe2908b"
        },
        "item": {
          "id": "b424903a-4ff8-4c4e-a677-5b325965f8f9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4eead1be-17d3-4218-a8b2-7f70b0500168",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b424903a-4ff8-4c4e-a677-5b325965f8f9",
        "cursor": {
          "ref": "3c8821a9-f880-428d-9ed6-33bf2ad7387b",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c0eb9d62-3b60-40e9-b8e0-8c7e1fe2908b"
        },
        "item": {
          "id": "b424903a-4ff8-4c4e-a677-5b325965f8f9",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4eead1be-17d3-4218-a8b2-7f70b0500168",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eab6102-24b7-4560-9b85-6f8fe82ca266",
        "cursor": {
          "ref": "dfd14a16-a4b6-4d4d-8c13-780eeab5bb7c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dda09069-7e28-4f55-a787-94a28e6e7849"
        },
        "item": {
          "id": "3eab6102-24b7-4560-9b85-6f8fe82ca266",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "426d42a2-a614-4b30-a636-825292840afa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eab6102-24b7-4560-9b85-6f8fe82ca266",
        "cursor": {
          "ref": "dfd14a16-a4b6-4d4d-8c13-780eeab5bb7c",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "dda09069-7e28-4f55-a787-94a28e6e7849"
        },
        "item": {
          "id": "3eab6102-24b7-4560-9b85-6f8fe82ca266",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "426d42a2-a614-4b30-a636-825292840afa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd498ff3-0a30-421e-9cda-0833ecf3b6d9",
        "cursor": {
          "ref": "39fd990e-7983-49b6-afd3-eba0ce9f4b68",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6aedbb50-978a-4153-869c-e94d577110f1"
        },
        "item": {
          "id": "dd498ff3-0a30-421e-9cda-0833ecf3b6d9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "440a844e-15e3-4421-9cec-3ef3f1ef667d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd498ff3-0a30-421e-9cda-0833ecf3b6d9",
        "cursor": {
          "ref": "39fd990e-7983-49b6-afd3-eba0ce9f4b68",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6aedbb50-978a-4153-869c-e94d577110f1"
        },
        "item": {
          "id": "dd498ff3-0a30-421e-9cda-0833ecf3b6d9",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "440a844e-15e3-4421-9cec-3ef3f1ef667d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b29979-076b-4953-9991-6a9e0c470957",
        "cursor": {
          "ref": "d01c4e20-afdf-4bec-bfef-e2439e7af349",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "06e238f7-6b8b-4a59-9b3a-ce038750623d"
        },
        "item": {
          "id": "c2b29979-076b-4953-9991-6a9e0c470957",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "31c441d2-e7c2-42fa-b5cb-1bee68e60dab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2b29979-076b-4953-9991-6a9e0c470957",
        "cursor": {
          "ref": "d01c4e20-afdf-4bec-bfef-e2439e7af349",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "06e238f7-6b8b-4a59-9b3a-ce038750623d"
        },
        "item": {
          "id": "c2b29979-076b-4953-9991-6a9e0c470957",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "31c441d2-e7c2-42fa-b5cb-1bee68e60dab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c6906e-5ffe-4f33-93c3-236761540899",
        "cursor": {
          "ref": "b66ccf1e-c86e-473b-b391-34f46f3ac1e8",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "33c7a095-5134-44f9-b3fe-4cdad081795a"
        },
        "item": {
          "id": "c6c6906e-5ffe-4f33-93c3-236761540899",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "eac5a679-5061-4dce-896f-f53b08c7f121",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c6906e-5ffe-4f33-93c3-236761540899",
        "cursor": {
          "ref": "b66ccf1e-c86e-473b-b391-34f46f3ac1e8",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "33c7a095-5134-44f9-b3fe-4cdad081795a"
        },
        "item": {
          "id": "c6c6906e-5ffe-4f33-93c3-236761540899",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "eac5a679-5061-4dce-896f-f53b08c7f121",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a40b371-0308-42c2-bef6-ba9c8d841adb",
        "cursor": {
          "ref": "ffb5801c-d62f-4c9e-b201-3a4015862bc5",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "37ae9ef6-c8b9-4f2f-b3ed-53d4d612160c"
        },
        "item": {
          "id": "1a40b371-0308-42c2-bef6-ba9c8d841adb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a5ad0328-3b21-4ab3-bf6c-acdd189863f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a40b371-0308-42c2-bef6-ba9c8d841adb",
        "cursor": {
          "ref": "ffb5801c-d62f-4c9e-b201-3a4015862bc5",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "37ae9ef6-c8b9-4f2f-b3ed-53d4d612160c"
        },
        "item": {
          "id": "1a40b371-0308-42c2-bef6-ba9c8d841adb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a5ad0328-3b21-4ab3-bf6c-acdd189863f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8f4677-c060-43e4-a232-3fcc5de5fa11",
        "cursor": {
          "ref": "57b5b1dd-b93e-48cc-81b3-3e56b019ee7b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "20924907-6613-4219-a80d-95c5a2a1b75a"
        },
        "item": {
          "id": "4b8f4677-c060-43e4-a232-3fcc5de5fa11",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3f454ceb-4727-4637-b44d-44156e837bbe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8f4677-c060-43e4-a232-3fcc5de5fa11",
        "cursor": {
          "ref": "57b5b1dd-b93e-48cc-81b3-3e56b019ee7b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "20924907-6613-4219-a80d-95c5a2a1b75a"
        },
        "item": {
          "id": "4b8f4677-c060-43e4-a232-3fcc5de5fa11",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3f454ceb-4727-4637-b44d-44156e837bbe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c854e0-07c1-4fe9-b8f9-2c5df9604966",
        "cursor": {
          "ref": "32ff75f0-9a35-43b9-a8ca-6f38682355d2",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d15f11e4-daa0-4653-8e00-b87b23c5c77d"
        },
        "item": {
          "id": "25c854e0-07c1-4fe9-b8f9-2c5df9604966",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "66c1324e-dd39-45a7-99f9-87acb61a34fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c854e0-07c1-4fe9-b8f9-2c5df9604966",
        "cursor": {
          "ref": "32ff75f0-9a35-43b9-a8ca-6f38682355d2",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d15f11e4-daa0-4653-8e00-b87b23c5c77d"
        },
        "item": {
          "id": "25c854e0-07c1-4fe9-b8f9-2c5df9604966",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "66c1324e-dd39-45a7-99f9-87acb61a34fa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b596415c-193e-4c2f-b00e-7b72b432078b",
        "cursor": {
          "ref": "6ff5ed08-c94c-4c46-a68c-9f861749238e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fc73dba8-fb51-47f5-b35f-5b2603ea47d9"
        },
        "item": {
          "id": "b596415c-193e-4c2f-b00e-7b72b432078b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "08dec583-524d-468c-a112-c4218288caa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b596415c-193e-4c2f-b00e-7b72b432078b",
        "cursor": {
          "ref": "6ff5ed08-c94c-4c46-a68c-9f861749238e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "fc73dba8-fb51-47f5-b35f-5b2603ea47d9"
        },
        "item": {
          "id": "b596415c-193e-4c2f-b00e-7b72b432078b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "08dec583-524d-468c-a112-c4218288caa0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f6077f-16ea-4b53-906d-4c6cf32f45b6",
        "cursor": {
          "ref": "dea32938-f207-45d1-a2ca-9a6949086119",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c0ac3866-4c77-4f1f-bf33-853054980bb6"
        },
        "item": {
          "id": "c5f6077f-16ea-4b53-906d-4c6cf32f45b6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b8c0a3c4-c836-4557-816b-edaf7e503655",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f6077f-16ea-4b53-906d-4c6cf32f45b6",
        "cursor": {
          "ref": "dea32938-f207-45d1-a2ca-9a6949086119",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c0ac3866-4c77-4f1f-bf33-853054980bb6"
        },
        "item": {
          "id": "c5f6077f-16ea-4b53-906d-4c6cf32f45b6",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b8c0a3c4-c836-4557-816b-edaf7e503655",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3efa61c-34f5-4bba-b6ec-b01069228037",
        "cursor": {
          "ref": "699fd7ad-25e1-48ce-9d12-67f08364bef3",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2ab2aaa6-4d3f-4b17-8b9d-d01ed17934df"
        },
        "item": {
          "id": "f3efa61c-34f5-4bba-b6ec-b01069228037",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9f23ba97-49eb-4e91-a449-2113563b7457",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3efa61c-34f5-4bba-b6ec-b01069228037",
        "cursor": {
          "ref": "699fd7ad-25e1-48ce-9d12-67f08364bef3",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2ab2aaa6-4d3f-4b17-8b9d-d01ed17934df"
        },
        "item": {
          "id": "f3efa61c-34f5-4bba-b6ec-b01069228037",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "9f23ba97-49eb-4e91-a449-2113563b7457",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076394ee-200a-476a-aa84-03ae044ec8cb",
        "cursor": {
          "ref": "2d970158-431a-43d8-b0fa-7620969e225c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a5bfa536-65cf-41af-846b-40737d17ae26"
        },
        "item": {
          "id": "076394ee-200a-476a-aa84-03ae044ec8cb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9293d972-282e-476a-b365-3dba23197113",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076394ee-200a-476a-aa84-03ae044ec8cb",
        "cursor": {
          "ref": "2d970158-431a-43d8-b0fa-7620969e225c",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a5bfa536-65cf-41af-846b-40737d17ae26"
        },
        "item": {
          "id": "076394ee-200a-476a-aa84-03ae044ec8cb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9293d972-282e-476a-b365-3dba23197113",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b9bcad-212c-4a87-9cc3-1b37b3051cb9",
        "cursor": {
          "ref": "aa62685d-f56c-454c-92ed-a89bfc0a8e35",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "040428b0-6faf-48cf-a95e-528a72964b10"
        },
        "item": {
          "id": "78b9bcad-212c-4a87-9cc3-1b37b3051cb9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "37220def-4d96-4647-ab95-4c237152b6b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 93,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78b9bcad-212c-4a87-9cc3-1b37b3051cb9",
        "cursor": {
          "ref": "aa62685d-f56c-454c-92ed-a89bfc0a8e35",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "040428b0-6faf-48cf-a95e-528a72964b10"
        },
        "item": {
          "id": "78b9bcad-212c-4a87-9cc3-1b37b3051cb9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "37220def-4d96-4647-ab95-4c237152b6b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 93,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9072cb-8f38-46c2-8573-0bb7f6fff0cc",
        "cursor": {
          "ref": "d08c4ab8-26fc-495f-b7d7-a250a5aca420",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ada4c67a-6939-4771-b30a-9010c48d0b2f"
        },
        "item": {
          "id": "9c9072cb-8f38-46c2-8573-0bb7f6fff0cc",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "54234891-c6d0-49d4-85f4-bd6813725e84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9072cb-8f38-46c2-8573-0bb7f6fff0cc",
        "cursor": {
          "ref": "d08c4ab8-26fc-495f-b7d7-a250a5aca420",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ada4c67a-6939-4771-b30a-9010c48d0b2f"
        },
        "item": {
          "id": "9c9072cb-8f38-46c2-8573-0bb7f6fff0cc",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "54234891-c6d0-49d4-85f4-bd6813725e84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4801f994-53a0-42c8-80ee-6a9e9c17239e",
        "cursor": {
          "ref": "1aa32d1b-db0d-46d4-abdd-30484eac11a9",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "83a62887-62b7-4eea-8e8c-e48e50b46e1a"
        },
        "item": {
          "id": "4801f994-53a0-42c8-80ee-6a9e9c17239e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8b2c74cd-7bd2-4104-a94f-9a337c6ab562",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4801f994-53a0-42c8-80ee-6a9e9c17239e",
        "cursor": {
          "ref": "1aa32d1b-db0d-46d4-abdd-30484eac11a9",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "83a62887-62b7-4eea-8e8c-e48e50b46e1a"
        },
        "item": {
          "id": "4801f994-53a0-42c8-80ee-6a9e9c17239e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8b2c74cd-7bd2-4104-a94f-9a337c6ab562",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e81c3c-7809-4d77-9e7d-ffae512f5715",
        "cursor": {
          "ref": "99fa2878-6200-4d4c-a424-747cc6e8e9a8",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e1965fed-0d3d-4203-a4c6-86fcf699fd55"
        },
        "item": {
          "id": "97e81c3c-7809-4d77-9e7d-ffae512f5715",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "eee352ee-1508-4255-9dda-98d59a2b8622",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e81c3c-7809-4d77-9e7d-ffae512f5715",
        "cursor": {
          "ref": "99fa2878-6200-4d4c-a424-747cc6e8e9a8",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e1965fed-0d3d-4203-a4c6-86fcf699fd55"
        },
        "item": {
          "id": "97e81c3c-7809-4d77-9e7d-ffae512f5715",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "eee352ee-1508-4255-9dda-98d59a2b8622",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bd9efb-eefb-4e33-a79b-ea2ce74a066c",
        "cursor": {
          "ref": "dcc540fe-a5b9-43d4-b567-3a001924739f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "00eab493-3b11-456f-bbaa-1dd0050a0763"
        },
        "item": {
          "id": "66bd9efb-eefb-4e33-a79b-ea2ce74a066c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5fd3b06e-4c14-43b1-ad6a-02e61c2dda4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66bd9efb-eefb-4e33-a79b-ea2ce74a066c",
        "cursor": {
          "ref": "dcc540fe-a5b9-43d4-b567-3a001924739f",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "00eab493-3b11-456f-bbaa-1dd0050a0763"
        },
        "item": {
          "id": "66bd9efb-eefb-4e33-a79b-ea2ce74a066c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5fd3b06e-4c14-43b1-ad6a-02e61c2dda4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1bd733-b3d4-4da3-9d84-440a34f744e8",
        "cursor": {
          "ref": "6ba74841-a24b-4438-a90c-4f6a666626bb",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ea56dbd5-ea4b-4d8f-9c72-2df898612feb"
        },
        "item": {
          "id": "2a1bd733-b3d4-4da3-9d84-440a34f744e8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2523a28a-bd29-442b-9bf9-90cb34e495b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1bd733-b3d4-4da3-9d84-440a34f744e8",
        "cursor": {
          "ref": "6ba74841-a24b-4438-a90c-4f6a666626bb",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ea56dbd5-ea4b-4d8f-9c72-2df898612feb"
        },
        "item": {
          "id": "2a1bd733-b3d4-4da3-9d84-440a34f744e8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "2523a28a-bd29-442b-9bf9-90cb34e495b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975c6548-5ae6-4ad3-bcd5-2dd4b8399b3a",
        "cursor": {
          "ref": "7e93d01e-92ac-457c-a39b-bb7e29bacbe4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7199aad8-9964-4b90-983d-560525b28108"
        },
        "item": {
          "id": "975c6548-5ae6-4ad3-bcd5-2dd4b8399b3a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "69ec97a1-1be7-458d-be20-1e25ab6b16f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "975c6548-5ae6-4ad3-bcd5-2dd4b8399b3a",
        "cursor": {
          "ref": "7e93d01e-92ac-457c-a39b-bb7e29bacbe4",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7199aad8-9964-4b90-983d-560525b28108"
        },
        "item": {
          "id": "975c6548-5ae6-4ad3-bcd5-2dd4b8399b3a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "69ec97a1-1be7-458d-be20-1e25ab6b16f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49f7717-3bbf-4d7d-912f-ccb34e271e87",
        "cursor": {
          "ref": "7b510963-b7d1-4759-ab58-2563288764cb",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2248317d-d9aa-4bc2-87eb-3ca0855d4669"
        },
        "item": {
          "id": "b49f7717-3bbf-4d7d-912f-ccb34e271e87",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b7fea1fd-184f-456d-89f7-76a4110afcde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49f7717-3bbf-4d7d-912f-ccb34e271e87",
        "cursor": {
          "ref": "7b510963-b7d1-4759-ab58-2563288764cb",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2248317d-d9aa-4bc2-87eb-3ca0855d4669"
        },
        "item": {
          "id": "b49f7717-3bbf-4d7d-912f-ccb34e271e87",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b7fea1fd-184f-456d-89f7-76a4110afcde",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21f0a2a-b787-4772-ab13-3f4d1857617c",
        "cursor": {
          "ref": "5338af82-855a-4e5f-96d4-de91f1ab3997",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "90092cfb-48d8-4dc4-b418-36d05038be88"
        },
        "item": {
          "id": "f21f0a2a-b787-4772-ab13-3f4d1857617c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f865dd1c-aa3d-4044-a355-8dd070bf2004",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21f0a2a-b787-4772-ab13-3f4d1857617c",
        "cursor": {
          "ref": "5338af82-855a-4e5f-96d4-de91f1ab3997",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "90092cfb-48d8-4dc4-b418-36d05038be88"
        },
        "item": {
          "id": "f21f0a2a-b787-4772-ab13-3f4d1857617c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f865dd1c-aa3d-4044-a355-8dd070bf2004",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b104f50f-506b-4119-a6d0-9e24f6fdf1af",
        "cursor": {
          "ref": "cadded32-dcc4-44ac-a42e-b259ae9f3404",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7b366880-1b46-47be-b399-b6f6e190935b"
        },
        "item": {
          "id": "b104f50f-506b-4119-a6d0-9e24f6fdf1af",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c39ac84e-0f36-4276-9e00-43a515e72730",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b104f50f-506b-4119-a6d0-9e24f6fdf1af",
        "cursor": {
          "ref": "cadded32-dcc4-44ac-a42e-b259ae9f3404",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7b366880-1b46-47be-b399-b6f6e190935b"
        },
        "item": {
          "id": "b104f50f-506b-4119-a6d0-9e24f6fdf1af",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c39ac84e-0f36-4276-9e00-43a515e72730",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9951447-234d-4ad8-ac7a-c5a5604a92a7",
        "cursor": {
          "ref": "bd16b30b-37a0-465b-9baf-10ca6deb9a94",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b5e54635-92a4-4cb7-8391-c8c0823e2de9"
        },
        "item": {
          "id": "f9951447-234d-4ad8-ac7a-c5a5604a92a7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c435d0c0-595c-4823-b014-3d6c88eb740d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9951447-234d-4ad8-ac7a-c5a5604a92a7",
        "cursor": {
          "ref": "bd16b30b-37a0-465b-9baf-10ca6deb9a94",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b5e54635-92a4-4cb7-8391-c8c0823e2de9"
        },
        "item": {
          "id": "f9951447-234d-4ad8-ac7a-c5a5604a92a7",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c435d0c0-595c-4823-b014-3d6c88eb740d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20dbb32f-ce02-4a30-b5a1-854fffbfdcd3",
        "cursor": {
          "ref": "31d41c43-17d1-4e2e-a65d-adaf213ffa46",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "09f6cdad-711a-4945-85b6-29fd566f60b4"
        },
        "item": {
          "id": "20dbb32f-ce02-4a30-b5a1-854fffbfdcd3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b421b5ec-18b9-4acb-9069-e9179bde6581",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20dbb32f-ce02-4a30-b5a1-854fffbfdcd3",
        "cursor": {
          "ref": "31d41c43-17d1-4e2e-a65d-adaf213ffa46",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "09f6cdad-711a-4945-85b6-29fd566f60b4"
        },
        "item": {
          "id": "20dbb32f-ce02-4a30-b5a1-854fffbfdcd3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b421b5ec-18b9-4acb-9069-e9179bde6581",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4b8c05-b86c-40bd-b830-b6484d3748d2",
        "cursor": {
          "ref": "2ccc608e-06d3-4289-b877-cd9a84e688ce",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d40f1d8e-3666-4947-b27e-9e3a540ba229"
        },
        "item": {
          "id": "4c4b8c05-b86c-40bd-b830-b6484d3748d2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4b3139e9-8b77-4adf-a225-d150c14d2b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c4b8c05-b86c-40bd-b830-b6484d3748d2",
        "cursor": {
          "ref": "2ccc608e-06d3-4289-b877-cd9a84e688ce",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d40f1d8e-3666-4947-b27e-9e3a540ba229"
        },
        "item": {
          "id": "4c4b8c05-b86c-40bd-b830-b6484d3748d2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "4b3139e9-8b77-4adf-a225-d150c14d2b77",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b64450c-b145-4b22-bdd1-174d5ca14769",
        "cursor": {
          "ref": "224123b9-29df-4113-9e63-2ba6b5c6e8cf",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "66e5c22d-4986-4279-ba64-ba44a21ef01c"
        },
        "item": {
          "id": "8b64450c-b145-4b22-bdd1-174d5ca14769",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "42d0d361-90ba-4c83-8af1-a75cae7ca3ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b64450c-b145-4b22-bdd1-174d5ca14769",
        "cursor": {
          "ref": "224123b9-29df-4113-9e63-2ba6b5c6e8cf",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "66e5c22d-4986-4279-ba64-ba44a21ef01c"
        },
        "item": {
          "id": "8b64450c-b145-4b22-bdd1-174d5ca14769",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "42d0d361-90ba-4c83-8af1-a75cae7ca3ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9c0930-5183-4f56-b203-0ad0dc8f320d",
        "cursor": {
          "ref": "0bdc6ff0-0487-462c-8a5a-d28453666ba1",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1564b520-3b96-4ceb-98c3-4529ffc094c5"
        },
        "item": {
          "id": "bb9c0930-5183-4f56-b203-0ad0dc8f320d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2bcfc2a0-32e4-440f-94a2-1b114cb030c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9c0930-5183-4f56-b203-0ad0dc8f320d",
        "cursor": {
          "ref": "0bdc6ff0-0487-462c-8a5a-d28453666ba1",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1564b520-3b96-4ceb-98c3-4529ffc094c5"
        },
        "item": {
          "id": "bb9c0930-5183-4f56-b203-0ad0dc8f320d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2bcfc2a0-32e4-440f-94a2-1b114cb030c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8ca15a-83e5-4a76-a332-1eae9f21e90e",
        "cursor": {
          "ref": "bac62c5a-2eb1-4546-96e6-99db4619d488",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bc06eb38-d5be-4161-a69c-e9490a2276bd"
        },
        "item": {
          "id": "9e8ca15a-83e5-4a76-a332-1eae9f21e90e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "abb3b9fe-40e0-4d04-9dcf-909d33ffa89c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8ca15a-83e5-4a76-a332-1eae9f21e90e",
        "cursor": {
          "ref": "bac62c5a-2eb1-4546-96e6-99db4619d488",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bc06eb38-d5be-4161-a69c-e9490a2276bd"
        },
        "item": {
          "id": "9e8ca15a-83e5-4a76-a332-1eae9f21e90e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "abb3b9fe-40e0-4d04-9dcf-909d33ffa89c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f1520f-02ca-4143-a8e4-043c8935426a",
        "cursor": {
          "ref": "a7f2b0ee-9c42-468f-9213-4ef32825d733",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1d358a1c-2e88-498b-85b6-8753b86fa9f0"
        },
        "item": {
          "id": "e6f1520f-02ca-4143-a8e4-043c8935426a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "68856d59-5c42-4111-b66d-0b7ff2fbdfed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f1520f-02ca-4143-a8e4-043c8935426a",
        "cursor": {
          "ref": "a7f2b0ee-9c42-468f-9213-4ef32825d733",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1d358a1c-2e88-498b-85b6-8753b86fa9f0"
        },
        "item": {
          "id": "e6f1520f-02ca-4143-a8e4-043c8935426a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "68856d59-5c42-4111-b66d-0b7ff2fbdfed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835a787e-4db2-40a7-91cd-036dbe49f8e1",
        "cursor": {
          "ref": "3af37bbd-0013-4ab0-9cb2-4a7604e6c799",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "815b43e4-8295-417b-bc0c-11641a2d186d"
        },
        "item": {
          "id": "835a787e-4db2-40a7-91cd-036dbe49f8e1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f8267daf-8964-46df-90bf-4b6bec0413ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835a787e-4db2-40a7-91cd-036dbe49f8e1",
        "cursor": {
          "ref": "3af37bbd-0013-4ab0-9cb2-4a7604e6c799",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "815b43e4-8295-417b-bc0c-11641a2d186d"
        },
        "item": {
          "id": "835a787e-4db2-40a7-91cd-036dbe49f8e1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f8267daf-8964-46df-90bf-4b6bec0413ba",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5042a0ab-e41c-4e8b-a734-ee6188da53b5",
        "cursor": {
          "ref": "24d8f463-04d8-46c8-a025-1c95ba4668ef",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8ef6f1ab-6288-40c1-ae1d-40a62c1f07e9"
        },
        "item": {
          "id": "5042a0ab-e41c-4e8b-a734-ee6188da53b5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a999410b-9a19-4b0a-9d70-f013cc50593a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5042a0ab-e41c-4e8b-a734-ee6188da53b5",
        "cursor": {
          "ref": "24d8f463-04d8-46c8-a025-1c95ba4668ef",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8ef6f1ab-6288-40c1-ae1d-40a62c1f07e9"
        },
        "item": {
          "id": "5042a0ab-e41c-4e8b-a734-ee6188da53b5",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a999410b-9a19-4b0a-9d70-f013cc50593a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4f5cdc-7052-435f-94f2-3d6fc7d878f8",
        "cursor": {
          "ref": "e6cf8369-90eb-470e-9cac-1be742fc9036",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6a82c8c2-3a13-4bf4-9011-5b80f19b2865"
        },
        "item": {
          "id": "ec4f5cdc-7052-435f-94f2-3d6fc7d878f8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fe9d0a04-23cc-4884-86d7-c487acf92ad8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4f5cdc-7052-435f-94f2-3d6fc7d878f8",
        "cursor": {
          "ref": "e6cf8369-90eb-470e-9cac-1be742fc9036",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6a82c8c2-3a13-4bf4-9011-5b80f19b2865"
        },
        "item": {
          "id": "ec4f5cdc-7052-435f-94f2-3d6fc7d878f8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fe9d0a04-23cc-4884-86d7-c487acf92ad8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a1ce2e-9aad-4e63-86cc-5dd229b80735",
        "cursor": {
          "ref": "b02665e1-211c-4152-803f-d5236937a672",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8b4e0658-27ca-4bc5-b7bc-6e477c7e7dc5"
        },
        "item": {
          "id": "b2a1ce2e-9aad-4e63-86cc-5dd229b80735",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "00c98d40-9b37-4423-9bb7-1028f03d05cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a1ce2e-9aad-4e63-86cc-5dd229b80735",
        "cursor": {
          "ref": "b02665e1-211c-4152-803f-d5236937a672",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "8b4e0658-27ca-4bc5-b7bc-6e477c7e7dc5"
        },
        "item": {
          "id": "b2a1ce2e-9aad-4e63-86cc-5dd229b80735",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "00c98d40-9b37-4423-9bb7-1028f03d05cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7ac22d-278c-4637-9896-ee96732f4224",
        "cursor": {
          "ref": "8139ff43-35dc-4332-90bf-92183dee408c",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d0f26865-0a88-46df-ad9e-b0250070bcb2"
        },
        "item": {
          "id": "9e7ac22d-278c-4637-9896-ee96732f4224",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "bf81a956-872e-4af3-a7b0-a5d17c2d1678",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7ac22d-278c-4637-9896-ee96732f4224",
        "cursor": {
          "ref": "8139ff43-35dc-4332-90bf-92183dee408c",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d0f26865-0a88-46df-ad9e-b0250070bcb2"
        },
        "item": {
          "id": "9e7ac22d-278c-4637-9896-ee96732f4224",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "bf81a956-872e-4af3-a7b0-a5d17c2d1678",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d526da5-b69e-45d3-a39f-62a075f6274a",
        "cursor": {
          "ref": "ed990391-d662-4d65-a3bc-8f69aab2ffad",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "df387877-9f1b-4490-8204-dde2a3fe4d4a"
        },
        "item": {
          "id": "1d526da5-b69e-45d3-a39f-62a075f6274a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "69f0d3b7-b325-4d6d-9b87-c75557a6284d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d526da5-b69e-45d3-a39f-62a075f6274a",
        "cursor": {
          "ref": "ed990391-d662-4d65-a3bc-8f69aab2ffad",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "df387877-9f1b-4490-8204-dde2a3fe4d4a"
        },
        "item": {
          "id": "1d526da5-b69e-45d3-a39f-62a075f6274a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "69f0d3b7-b325-4d6d-9b87-c75557a6284d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db10af4-7f73-4adf-b9a3-672c1f0c1e71",
        "cursor": {
          "ref": "24065e40-0b84-4385-95bd-116a34fcb55c",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "7cae8b04-0534-4e03-b4d9-ca498c2be745"
        },
        "item": {
          "id": "7db10af4-7f73-4adf-b9a3-672c1f0c1e71",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3c683b8d-4234-42b5-a3b1-ef79c6bd2928",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db10af4-7f73-4adf-b9a3-672c1f0c1e71",
        "cursor": {
          "ref": "24065e40-0b84-4385-95bd-116a34fcb55c",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "7cae8b04-0534-4e03-b4d9-ca498c2be745"
        },
        "item": {
          "id": "7db10af4-7f73-4adf-b9a3-672c1f0c1e71",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3c683b8d-4234-42b5-a3b1-ef79c6bd2928",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd07215d-dfa7-4ff5-abda-6b9f54c60024",
        "cursor": {
          "ref": "c0a4fc53-bac6-43b0-adce-ab1a4dfe03cc",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "43d2da92-3014-48e6-a8e8-b4aea09d5225"
        },
        "item": {
          "id": "fd07215d-dfa7-4ff5-abda-6b9f54c60024",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c077eb57-10fd-444c-8891-e6406bc756a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd07215d-dfa7-4ff5-abda-6b9f54c60024",
        "cursor": {
          "ref": "c0a4fc53-bac6-43b0-adce-ab1a4dfe03cc",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "43d2da92-3014-48e6-a8e8-b4aea09d5225"
        },
        "item": {
          "id": "fd07215d-dfa7-4ff5-abda-6b9f54c60024",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "c077eb57-10fd-444c-8891-e6406bc756a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c916229-64f2-4db8-bd2b-a0f6b503c61f",
        "cursor": {
          "ref": "e4b9cf7b-91ae-4328-8817-e69c78004923",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0578fa28-bb72-4c31-9648-ca04fe8062f1"
        },
        "item": {
          "id": "1c916229-64f2-4db8-bd2b-a0f6b503c61f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "89135e27-a24c-45cd-8128-4108c6b8a6bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c916229-64f2-4db8-bd2b-a0f6b503c61f",
        "cursor": {
          "ref": "e4b9cf7b-91ae-4328-8817-e69c78004923",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "0578fa28-bb72-4c31-9648-ca04fe8062f1"
        },
        "item": {
          "id": "1c916229-64f2-4db8-bd2b-a0f6b503c61f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "89135e27-a24c-45cd-8128-4108c6b8a6bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0db785f-f56b-4359-aa7c-6974a1876067",
        "cursor": {
          "ref": "1eff75c9-3c49-4aa7-9fa2-c2d72c0c223d",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3857c787-591f-4c42-9dbf-ef6633eca547"
        },
        "item": {
          "id": "f0db785f-f56b-4359-aa7c-6974a1876067",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "228d018d-fa6b-46e9-87c7-6deb143a2ae0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0db785f-f56b-4359-aa7c-6974a1876067",
        "cursor": {
          "ref": "1eff75c9-3c49-4aa7-9fa2-c2d72c0c223d",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "3857c787-591f-4c42-9dbf-ef6633eca547"
        },
        "item": {
          "id": "f0db785f-f56b-4359-aa7c-6974a1876067",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "228d018d-fa6b-46e9-87c7-6deb143a2ae0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a7f8be-53bb-48b2-9cf0-080d6903e1d6",
        "cursor": {
          "ref": "bb958fce-c835-4267-92fb-f9a8e0598850",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "48e15a28-9a73-457d-83c8-cb13feef2922"
        },
        "item": {
          "id": "d4a7f8be-53bb-48b2-9cf0-080d6903e1d6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a8603559-c325-4ea1-aed5-40ba89f96848",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a7f8be-53bb-48b2-9cf0-080d6903e1d6",
        "cursor": {
          "ref": "bb958fce-c835-4267-92fb-f9a8e0598850",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "48e15a28-9a73-457d-83c8-cb13feef2922"
        },
        "item": {
          "id": "d4a7f8be-53bb-48b2-9cf0-080d6903e1d6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a8603559-c325-4ea1-aed5-40ba89f96848",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 45,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4182b16e-cdb4-4a55-9313-c1ab16ceb3b4",
        "cursor": {
          "ref": "ec560909-c825-4c5e-ac77-513577dfc619",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "691f7533-b855-4ac8-afe3-4d77f00dac81"
        },
        "item": {
          "id": "4182b16e-cdb4-4a55-9313-c1ab16ceb3b4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b9ce7b83-8b78-4368-af55-46e026a773d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4182b16e-cdb4-4a55-9313-c1ab16ceb3b4",
        "cursor": {
          "ref": "ec560909-c825-4c5e-ac77-513577dfc619",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "691f7533-b855-4ac8-afe3-4d77f00dac81"
        },
        "item": {
          "id": "4182b16e-cdb4-4a55-9313-c1ab16ceb3b4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b9ce7b83-8b78-4368-af55-46e026a773d0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae68ac5-9791-4dde-b5c3-7d744dc02467",
        "cursor": {
          "ref": "6f755c30-6064-4270-ba64-537b9e7962cc",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e2acb746-779c-49b2-bd28-c4d1141ba67f"
        },
        "item": {
          "id": "9ae68ac5-9791-4dde-b5c3-7d744dc02467",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8df2b6ac-57ea-4be0-9444-7805dba76a5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ae68ac5-9791-4dde-b5c3-7d744dc02467",
        "cursor": {
          "ref": "6f755c30-6064-4270-ba64-537b9e7962cc",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e2acb746-779c-49b2-bd28-c4d1141ba67f"
        },
        "item": {
          "id": "9ae68ac5-9791-4dde-b5c3-7d744dc02467",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8df2b6ac-57ea-4be0-9444-7805dba76a5e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c5fc24-a506-42d6-94db-94114283979a",
        "cursor": {
          "ref": "1dbdd6ac-7de9-46f6-ae43-909864896e75",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e1310e8f-9340-40d0-aa93-0918fabf6258"
        },
        "item": {
          "id": "23c5fc24-a506-42d6-94db-94114283979a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8ca89805-0f74-4983-9452-1ac790263dd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c5fc24-a506-42d6-94db-94114283979a",
        "cursor": {
          "ref": "1dbdd6ac-7de9-46f6-ae43-909864896e75",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "e1310e8f-9340-40d0-aa93-0918fabf6258"
        },
        "item": {
          "id": "23c5fc24-a506-42d6-94db-94114283979a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8ca89805-0f74-4983-9452-1ac790263dd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7912ed-4198-4f21-9225-524683c928e8",
        "cursor": {
          "ref": "da780860-cf07-4ed6-bd41-10be288b23f2",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e27ce9ae-41d5-4ed0-9184-a9c57d6f0669"
        },
        "item": {
          "id": "8e7912ed-4198-4f21-9225-524683c928e8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "97a5cf3b-13d5-44b9-9801-a3e86ad99a57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e7912ed-4198-4f21-9225-524683c928e8",
        "cursor": {
          "ref": "da780860-cf07-4ed6-bd41-10be288b23f2",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "e27ce9ae-41d5-4ed0-9184-a9c57d6f0669"
        },
        "item": {
          "id": "8e7912ed-4198-4f21-9225-524683c928e8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "97a5cf3b-13d5-44b9-9801-a3e86ad99a57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 43,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e471419-6aa6-4ec2-bb21-39bdbd30b0ca",
        "cursor": {
          "ref": "9d671ab1-115f-4b8c-948b-8e415506c115",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "cf84cddd-341f-4b92-9c3f-ea050737497f"
        },
        "item": {
          "id": "3e471419-6aa6-4ec2-bb21-39bdbd30b0ca",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0b1fb3b9-5025-4388-bbc2-a4e50c1b6a1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e471419-6aa6-4ec2-bb21-39bdbd30b0ca",
        "cursor": {
          "ref": "9d671ab1-115f-4b8c-948b-8e415506c115",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "cf84cddd-341f-4b92-9c3f-ea050737497f"
        },
        "item": {
          "id": "3e471419-6aa6-4ec2-bb21-39bdbd30b0ca",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0b1fb3b9-5025-4388-bbc2-a4e50c1b6a1a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3022e666-f9a7-40d8-b548-2a6a024f6b1b",
        "cursor": {
          "ref": "bf55ebcd-614d-4aae-a20e-080927c88e92",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "92c13132-2372-4152-b72a-21e117b0d2a0"
        },
        "item": {
          "id": "3022e666-f9a7-40d8-b548-2a6a024f6b1b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "21259b01-ee91-4f9f-ad8c-7ecca9820259",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3022e666-f9a7-40d8-b548-2a6a024f6b1b",
        "cursor": {
          "ref": "bf55ebcd-614d-4aae-a20e-080927c88e92",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "92c13132-2372-4152-b72a-21e117b0d2a0"
        },
        "item": {
          "id": "3022e666-f9a7-40d8-b548-2a6a024f6b1b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "21259b01-ee91-4f9f-ad8c-7ecca9820259",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0d89e1-d278-4d51-a4ea-221b9a890527",
        "cursor": {
          "ref": "2bfdf908-00f7-4f79-99c2-6494f7f9e436",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b465a1fd-715f-4820-b5ab-16fe0442fd90"
        },
        "item": {
          "id": "ad0d89e1-d278-4d51-a4ea-221b9a890527",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7b1cc59b-3abe-4beb-916e-db058fdc10dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0d89e1-d278-4d51-a4ea-221b9a890527",
        "cursor": {
          "ref": "2bfdf908-00f7-4f79-99c2-6494f7f9e436",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b465a1fd-715f-4820-b5ab-16fe0442fd90"
        },
        "item": {
          "id": "ad0d89e1-d278-4d51-a4ea-221b9a890527",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "7b1cc59b-3abe-4beb-916e-db058fdc10dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96946bb4-1e3e-4ff5-a117-d5095a29a3b9",
        "cursor": {
          "ref": "67af4c9b-aba8-437e-8c47-a500d0b10aa0",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c3937cee-19de-4f12-8cb2-0e2f10a4588e"
        },
        "item": {
          "id": "96946bb4-1e3e-4ff5-a117-d5095a29a3b9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fcec4c41-9df3-4153-a0a2-b9eb648d0b51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96946bb4-1e3e-4ff5-a117-d5095a29a3b9",
        "cursor": {
          "ref": "67af4c9b-aba8-437e-8c47-a500d0b10aa0",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c3937cee-19de-4f12-8cb2-0e2f10a4588e"
        },
        "item": {
          "id": "96946bb4-1e3e-4ff5-a117-d5095a29a3b9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "fcec4c41-9df3-4153-a0a2-b9eb648d0b51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c5c7c0-3da6-403a-a2ee-82fbd12aa763",
        "cursor": {
          "ref": "7010e9d2-f2bf-42f7-be45-c140d3de9f65",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c3d9245f-ddf3-4892-af32-aa9e7adf1308"
        },
        "item": {
          "id": "04c5c7c0-3da6-403a-a2ee-82fbd12aa763",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5aa6feb3-2f9f-4e68-a06c-620092c0dfbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c5c7c0-3da6-403a-a2ee-82fbd12aa763",
        "cursor": {
          "ref": "7010e9d2-f2bf-42f7-be45-c140d3de9f65",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "c3d9245f-ddf3-4892-af32-aa9e7adf1308"
        },
        "item": {
          "id": "04c5c7c0-3da6-403a-a2ee-82fbd12aa763",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5aa6feb3-2f9f-4e68-a06c-620092c0dfbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3dc124-d518-4b52-8282-53fbf8898a1a",
        "cursor": {
          "ref": "13513de5-cd33-419e-bacc-d3a44896358a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "8630333c-c51b-498c-a344-ba6213a9565b"
        },
        "item": {
          "id": "fd3dc124-d518-4b52-8282-53fbf8898a1a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fcd33e59-6e0a-4b04-9503-f91bf04006e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3dc124-d518-4b52-8282-53fbf8898a1a",
        "cursor": {
          "ref": "13513de5-cd33-419e-bacc-d3a44896358a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "8630333c-c51b-498c-a344-ba6213a9565b"
        },
        "item": {
          "id": "fd3dc124-d518-4b52-8282-53fbf8898a1a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fcd33e59-6e0a-4b04-9503-f91bf04006e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfb005d-59bf-4b21-99cc-a2812d89ceb2",
        "cursor": {
          "ref": "f0b5811c-e013-4b0b-a8a0-d495d11589bb",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2cbcd993-f53a-47da-87b6-f5c36d26f9fb"
        },
        "item": {
          "id": "9bfb005d-59bf-4b21-99cc-a2812d89ceb2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ffef1844-e0a5-47d0-b99a-6ef605b27374",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bfb005d-59bf-4b21-99cc-a2812d89ceb2",
        "cursor": {
          "ref": "f0b5811c-e013-4b0b-a8a0-d495d11589bb",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "2cbcd993-f53a-47da-87b6-f5c36d26f9fb"
        },
        "item": {
          "id": "9bfb005d-59bf-4b21-99cc-a2812d89ceb2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ffef1844-e0a5-47d0-b99a-6ef605b27374",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021d1082-801c-440c-b4d0-79097e60bd5d",
        "cursor": {
          "ref": "b25b1bec-69fd-40b8-ac4f-5737bfb00331",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "de1d72ad-4195-4e16-ad21-711f14f859be"
        },
        "item": {
          "id": "021d1082-801c-440c-b4d0-79097e60bd5d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "eaf74ce6-366c-41ed-90f5-3014de01d8e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021d1082-801c-440c-b4d0-79097e60bd5d",
        "cursor": {
          "ref": "b25b1bec-69fd-40b8-ac4f-5737bfb00331",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "de1d72ad-4195-4e16-ad21-711f14f859be"
        },
        "item": {
          "id": "021d1082-801c-440c-b4d0-79097e60bd5d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "eaf74ce6-366c-41ed-90f5-3014de01d8e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b867982b-f64b-40bf-9c5a-9bfd6ba07606",
        "cursor": {
          "ref": "bc19e9c5-f48f-44f4-a945-d697c532cd13",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "64ffedd9-9433-4013-bf74-8c91feb29e4e"
        },
        "item": {
          "id": "b867982b-f64b-40bf-9c5a-9bfd6ba07606",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "dff78f0a-f8a1-4705-9559-255a85824eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b867982b-f64b-40bf-9c5a-9bfd6ba07606",
        "cursor": {
          "ref": "bc19e9c5-f48f-44f4-a945-d697c532cd13",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "64ffedd9-9433-4013-bf74-8c91feb29e4e"
        },
        "item": {
          "id": "b867982b-f64b-40bf-9c5a-9bfd6ba07606",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "dff78f0a-f8a1-4705-9559-255a85824eed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1512b959-18a2-4950-a4b3-c803054f5699",
        "cursor": {
          "ref": "fb9017c6-1c61-4852-8d53-ee4c55ec5c0f",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f4f8708c-a699-41a5-a3e8-e22272ecd5f8"
        },
        "item": {
          "id": "1512b959-18a2-4950-a4b3-c803054f5699",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "10353aad-2cd0-4756-9643-f6da4d0faccf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1512b959-18a2-4950-a4b3-c803054f5699",
        "cursor": {
          "ref": "fb9017c6-1c61-4852-8d53-ee4c55ec5c0f",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f4f8708c-a699-41a5-a3e8-e22272ecd5f8"
        },
        "item": {
          "id": "1512b959-18a2-4950-a4b3-c803054f5699",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "10353aad-2cd0-4756-9643-f6da4d0faccf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82673fe3-ccf9-403a-bad0-c516507bd1b8",
        "cursor": {
          "ref": "8c378fbb-f27b-4589-a0a8-6a00418b1900",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2a7c263a-4eb6-4469-9314-a4cc2c3de56f"
        },
        "item": {
          "id": "82673fe3-ccf9-403a-bad0-c516507bd1b8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "51972ef7-9c70-41b1-a275-7d810fed808c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82673fe3-ccf9-403a-bad0-c516507bd1b8",
        "cursor": {
          "ref": "8c378fbb-f27b-4589-a0a8-6a00418b1900",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2a7c263a-4eb6-4469-9314-a4cc2c3de56f"
        },
        "item": {
          "id": "82673fe3-ccf9-403a-bad0-c516507bd1b8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "51972ef7-9c70-41b1-a275-7d810fed808c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c577b62-c02a-40b7-87a1-ff61a8700828",
        "cursor": {
          "ref": "c0f681ef-7c87-44f8-b758-011ab2b5a4bd",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "80e927d7-a3c5-4ea3-82e7-deb1854485b3"
        },
        "item": {
          "id": "6c577b62-c02a-40b7-87a1-ff61a8700828",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8dc1ed12-ff80-482d-a8a8-034661b7266e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c577b62-c02a-40b7-87a1-ff61a8700828",
        "cursor": {
          "ref": "c0f681ef-7c87-44f8-b758-011ab2b5a4bd",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "80e927d7-a3c5-4ea3-82e7-deb1854485b3"
        },
        "item": {
          "id": "6c577b62-c02a-40b7-87a1-ff61a8700828",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8dc1ed12-ff80-482d-a8a8-034661b7266e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895339ab-8b61-446d-ab5d-2ca1905e297c",
        "cursor": {
          "ref": "be5fed52-f3fd-4c24-8482-8b7665ada5a7",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "535b09f0-992a-4f13-9f7b-65d20780df6d"
        },
        "item": {
          "id": "895339ab-8b61-446d-ab5d-2ca1905e297c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1237066e-cabe-44c4-bcef-51caf39aabad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895339ab-8b61-446d-ab5d-2ca1905e297c",
        "cursor": {
          "ref": "be5fed52-f3fd-4c24-8482-8b7665ada5a7",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "535b09f0-992a-4f13-9f7b-65d20780df6d"
        },
        "item": {
          "id": "895339ab-8b61-446d-ab5d-2ca1905e297c",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1237066e-cabe-44c4-bcef-51caf39aabad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9ddc9d2-bedb-404c-8e76-57fcb835fb04",
        "cursor": {
          "ref": "9ca8ff6c-fe9d-406b-a20a-d32edc482c3d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "035229e3-9720-4683-a067-bc50d1151a85"
        },
        "item": {
          "id": "a9ddc9d2-bedb-404c-8e76-57fcb835fb04",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3e8fb03e-d794-47c2-b415-b6a5c0714ea6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "a9ddc9d2-bedb-404c-8e76-57fcb835fb04",
        "cursor": {
          "ref": "9ca8ff6c-fe9d-406b-a20a-d32edc482c3d",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "035229e3-9720-4683-a067-bc50d1151a85"
        },
        "item": {
          "id": "a9ddc9d2-bedb-404c-8e76-57fcb835fb04",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3e8fb03e-d794-47c2-b415-b6a5c0714ea6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "8d24c7c6-1770-4354-ae9c-f296577f4e15",
        "cursor": {
          "ref": "b2f6bc5a-12cd-4c90-8d12-e13613c22ad3",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "eef99ed1-28d4-4034-ba67-2ac640c51380"
        },
        "item": {
          "id": "8d24c7c6-1770-4354-ae9c-f296577f4e15",
          "name": "credentials_verify"
        },
        "response": {
          "id": "85b3c0eb-cb4a-435e-8707-e3f13a89cacc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "8d24c7c6-1770-4354-ae9c-f296577f4e15",
        "cursor": {
          "ref": "b2f6bc5a-12cd-4c90-8d12-e13613c22ad3",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "eef99ed1-28d4-4034-ba67-2ac640c51380"
        },
        "item": {
          "id": "8d24c7c6-1770-4354-ae9c-f296577f4e15",
          "name": "credentials_verify"
        },
        "response": {
          "id": "85b3c0eb-cb4a-435e-8707-e3f13a89cacc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "bd8db642-30ec-402b-9415-c129bed4bec3",
        "cursor": {
          "ref": "13701de4-e73a-430e-bbec-bd5d1e8e2b5d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4327e71e-48c2-485e-8a3c-3cb445fcfa1d"
        },
        "item": {
          "id": "bd8db642-30ec-402b-9415-c129bed4bec3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b0ddb770-5279-4712-a221-d057781db608",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "bd8db642-30ec-402b-9415-c129bed4bec3",
        "cursor": {
          "ref": "13701de4-e73a-430e-bbec-bd5d1e8e2b5d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "4327e71e-48c2-485e-8a3c-3cb445fcfa1d"
        },
        "item": {
          "id": "bd8db642-30ec-402b-9415-c129bed4bec3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b0ddb770-5279-4712-a221-d057781db608",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "b23e0a74-6f82-4be3-8b5e-730216a31180",
        "cursor": {
          "ref": "e5900721-1706-4529-b27a-2ae47d4582bb",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "abf77ddd-78fb-4fde-92a9-33e62e7c5969"
        },
        "item": {
          "id": "b23e0a74-6f82-4be3-8b5e-730216a31180",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d79e42b1-b51e-450c-93a1-a7fe1e6fb3f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23e0a74-6f82-4be3-8b5e-730216a31180",
        "cursor": {
          "ref": "e5900721-1706-4529-b27a-2ae47d4582bb",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "abf77ddd-78fb-4fde-92a9-33e62e7c5969"
        },
        "item": {
          "id": "b23e0a74-6f82-4be3-8b5e-730216a31180",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d79e42b1-b51e-450c-93a1-a7fe1e6fb3f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b23e0a74-6f82-4be3-8b5e-730216a31180",
        "cursor": {
          "ref": "e5900721-1706-4529-b27a-2ae47d4582bb",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "abf77ddd-78fb-4fde-92a9-33e62e7c5969"
        },
        "item": {
          "id": "b23e0a74-6f82-4be3-8b5e-730216a31180",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d79e42b1-b51e-450c-93a1-a7fe1e6fb3f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1213672f-4dc5-4d0f-8ec4-15f1d40d2fdc",
        "cursor": {
          "ref": "f9900bc3-ec0e-4ca5-8273-ca8ee02a16c2",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "899e3504-fe88-4f19-a1bc-e840ede5276f"
        },
        "item": {
          "id": "1213672f-4dc5-4d0f-8ec4-15f1d40d2fdc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c1faa492-cb52-4183-a9eb-f1f0fa4f12ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1213672f-4dc5-4d0f-8ec4-15f1d40d2fdc",
        "cursor": {
          "ref": "f9900bc3-ec0e-4ca5-8273-ca8ee02a16c2",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "899e3504-fe88-4f19-a1bc-e840ede5276f"
        },
        "item": {
          "id": "1213672f-4dc5-4d0f-8ec4-15f1d40d2fdc",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "c1faa492-cb52-4183-a9eb-f1f0fa4f12ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ff8167-961d-45cd-8583-666be78e77ee",
        "cursor": {
          "ref": "12ec1f49-895b-4e52-a157-b32efc04a7b4",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "36a459b9-021b-40c7-9d24-57a56d79528f"
        },
        "item": {
          "id": "67ff8167-961d-45cd-8583-666be78e77ee",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "38e69c4c-f061-4485-91e2-29a93ae77993",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ff8167-961d-45cd-8583-666be78e77ee",
        "cursor": {
          "ref": "12ec1f49-895b-4e52-a157-b32efc04a7b4",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "36a459b9-021b-40c7-9d24-57a56d79528f"
        },
        "item": {
          "id": "67ff8167-961d-45cd-8583-666be78e77ee",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "38e69c4c-f061-4485-91e2-29a93ae77993",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}