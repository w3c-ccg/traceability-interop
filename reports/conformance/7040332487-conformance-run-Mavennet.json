{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "61846851-d2c6-4794-84c5-3a76a6264242",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d1cbb43c-e185-4a76-8fe4-c3c8ac3986b5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "018b174b-e465-42f2-97e1-850e6f038997",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8a4cbf11-d056-4cca-898b-46c640d22fa5"
                }
              }
            ]
          },
          {
            "id": "b3e05222-84cd-4761-b4c0-9c5857721569",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bcd9dc59-a470-4d71-9e7c-268546876350",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dadc8add-7efc-4a7b-af82-01ab4faf6b4d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "17624737-e0c0-430e-86f7-356aabb3dbc0",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "097092a2-84a6-4469-acdd-d343fd791521",
            "name": "Positive Testing",
            "item": [
              {
                "id": "302fee61-b303-4215-9454-7ce60e1c6496",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "619341f9-2d60-4c16-8f9a-cf5d4a253a7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "991539b8-d105-4080-84ae-8fbe1cf4a193"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3b6a34d1-fbab-4686-9299-2d6d9f027a0d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee3f132f-7c2b-43cd-8c73-81b5f6eeec8d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a933c4ea-ac08-4b1f-b534-e2b858570e7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab5afd2c-38d1-4365-8a62-a8017eacc97a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "113bf2b5-38cd-487c-96fd-79299f0a877b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "bf03c084-866e-4b51-8933-d7295f3878fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6d3a0b40-a748-4209-b86d-192735e07345",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a2a5d53b-3e05-4333-a98c-5e8744cef87a"
            }
          }
        ]
      },
      {
        "id": "f7ad9c91-7aa0-4d31-a9f4-765d72210ff5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4be6c555-b595-43f1-a115-c0ad2a9a7497",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1475b0cb-eaf9-4ac9-bc36-6a0516032655",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a46d5397-e8b3-487c-80d2-1a3ec813fd91",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498b02c8-6899-44aa-ba9c-6cf04efe9c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e6d5fb4-9890-493f-bc9b-7a9db83a0d8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b315bd5-6f6c-41b5-b96d-c1245972a7fa",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05205f9-237e-43bf-96cc-d82a02a0fab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef8bb557-8edc-4791-8866-3a2e0f6d5229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063524ec-a110-40dd-9854-05092d302f67",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83259ce-ddab-4a5e-976c-2af3108f5f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22b8ba32-edd0-4ca7-9b65-062075fafa59"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "673a30b8-9056-4388-92e4-4f1587ddf1b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86463058-e119-4696-90cc-8727d88adb3e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d671443-49ef-47ea-aa62-8f5d44dbae1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82bbcadc-3e68-416a-8226-05236ad3049d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c59753-b803-4645-8d67-6079c50ca8db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff0caeb0-a2f2-4ae6-8553-d55c0212c882"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c8161adf-944c-405d-9f95-e9de7713a326",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f2c9101f-48c7-4300-b8a0-39c93505caee",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "71445e69-d340-4ab6-aa48-0650c2a079fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "ecb602c2-bb3e-4f3b-a495-7dba368fc523"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "74c7950b-c02c-4401-8e28-683f437f569c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "b8d61375-2d29-4315-8c6b-04ef53840573"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39661c0a-0d5a-405d-b22b-cbe0a512d4de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "16dcb359-451b-425d-a920-29487c1c09f9"
            }
          }
        ]
      },
      {
        "id": "73941779-2eb2-479e-b609-4a4b4e560f55",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "36b1fce2-4ffe-4874-9cbe-f629797c7dd5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ab5cab8d-b344-4295-bf3f-aca1840ffd3c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "178fd588-232f-4a5d-bad5-4a227b0c50c1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcdbe9b-3d9e-4995-90bc-48277bc8bcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4901cf7-e4a9-455a-8e31-513959275cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15e2a887-cc8e-4d84-941d-e0e9ed7390eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d96bdd44-e067-40bf-863a-141529e116de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5c3f21-6b54-44f9-bcee-8c61f06ac6bd",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d9f825-d09e-402e-9b04-40619916a0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "629e792b-12d0-4e98-bec2-7fdb3d86bd68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b287d9-4f6c-415e-9397-487344015f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2b9b079-51ae-4fad-b034-b3e0a04f4881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69a0904-1f2c-4618-92b4-a910a3ef7038",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711f9ac9-f3e8-4046-9762-8e95509ed322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23329f9a-57aa-4121-9cc8-f8218ff024bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc35bbc-4470-4b28-894c-3ddc81d46e89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fcec06d4-2a7e-4edb-b638-9bcaa61f9675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182ab8ac-42d6-4706-83d8-b8d889f8442b",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493b86f3-b576-461a-b42f-fa4e9d459271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31879b5b-3a5b-499d-9c77-b6d06c0eb7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad513a3-ccca-4a88-ab19-f2c12397eb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef255096-5b48-4b8e-b2bc-6b234f3def8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1771411f-5b24-40a1-9c8e-114c19a7d007",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4c2570-129a-4835-8cc8-e0725a66e6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b645ec58-5b3a-48a1-8679-efe0a400b04f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b06bb80-74b8-4771-880a-c27d629e805b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf92ca04-30fb-4718-addf-acd7b7f1cc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8244d96-5d81-4d7d-883f-9ff26c5933ac",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0432fc-68df-4f4a-915b-96b079f1df8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf348747-51b1-48a6-a763-4ebb149b749e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8238f5f7-1359-4861-ba61-3d90797f52de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "701884aa-c93e-45c8-a504-1f9890d24685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ec4a3c-faba-48c6-89a3-62814790481c",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d08daf2-08f2-421d-9cad-dc069b26a000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49a1524-9892-40f1-a593-1fef2d98f5ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f74abd-17b6-45ac-8750-9a27dec762a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9e43426-3aa4-4ede-a271-fb203a6a1b8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc8b3dcb-3f1c-4877-9c1f-581cab4c24b6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af39bcc9-a27e-4eaf-ae3e-f7fd80a963bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "513e89e7-3d44-49a1-b703-28f221e77df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512d22aa-c65e-48fd-8e67-247cc87ed971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c6954fde-da27-455e-9ee4-fc7449b4c01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d67819d-6607-4456-9f03-20242abf0098",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa039873-eb77-4708-91b4-b4bf9c591c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8496383f-8737-493d-bf51-0ea9a15c9cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d183a6aa-3135-480e-8d7f-e4223392e67e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b5f1585-2c35-4bd1-887b-013a8e0a03bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a94d164-127d-4f8e-8d2c-8fd3dda6c09e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505e04db-f60a-41b5-a78e-53e438038760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b858a710-93a1-43e3-a208-3b9c06849086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6aa6b41-d004-4626-8299-c245f1476c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "592bd338-27c3-40b7-84df-8b5d45f37cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44e1c0c7-2af5-4c26-a262-5196453de0c5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24b8660-2e32-4950-a4b9-77fda4d131b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98c2af1f-4ec1-4acd-a1ff-730efb81e8f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1559d5ec-8352-43c4-affc-f4c40f03a1a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "014bffb4-bcd8-4b81-bf4d-106cbcf6bf6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22092492-adf5-45a1-b675-fe92204b37ea",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f511a6c1-b1fb-466d-ae4c-74cf9ad81c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29171b38-70bf-4fc0-9650-ef257443a3df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650981bb-4810-411a-8f99-6171c919a10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "193a4723-40c3-4a05-b24e-d3516ff824ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429a0199-01d3-412d-bcc8-eebb92e9a279",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfd651e-7f5d-4660-b8f6-fd3841629009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "603c8888-d501-4b08-a507-f3c18b10cc7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3d9da7c-3559-4ce1-896d-46457e2939d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6da688bf-ae1a-44d0-855b-77bbefce84be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223364da-08a8-46a1-a1c6-e91bce3be9bf",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d094871f-adc9-4262-af01-22f28e5f4568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9daac66-9822-4404-acf1-7f439dbc813d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70c5aa7-c62d-4302-a240-0076cb7ce920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99a8b261-2a7d-4342-8c22-a9a54be068ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5ea109c-c181-43d0-b4fd-c68548b31ac1",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00eb95d7-17db-4d68-8b62-f93d2b7ae013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a0ee431-3181-43af-b667-3e5d3f645446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f02333d-3dfd-4abd-9c26-5a20cf006957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8e829b5-ce11-45fc-9af1-d94d9c1632e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da88164-95fa-4ee1-90ca-5bc7e6af8c41",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edcb1df0-7fb0-4ed2-8006-cf46f9e52727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adeebc15-7dd8-4d7c-956a-7936028983b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2341c5-0e02-4797-b6f8-002c8fb5bc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3679d54f-46c2-4249-b004-4e0f9f757ca2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d53ed2eb-4710-4c7d-a825-952549c5527f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088af3a1-509b-4521-878e-aac91f51eed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "681e0056-fba7-45a8-8d6f-2e0afa176ca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bab70d91-668a-49a1-a366-b5e13b87f99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "650f9729-cc92-45d5-9499-4d6a80c2c898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2643954b-130d-4587-9d61-ffbaab975aaf",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397e4aae-be3d-4f8a-8035-bb1989e69233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99c71584-9cc2-4f12-85c1-d54b90afddb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e48669d-9c48-4518-994b-de87a2786a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "148f0eb4-ede1-42ae-b0f6-9d0cdfa506f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b568d42-95ad-4144-98f1-05e6cb2f90e8",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5368183-7df1-4269-a2ff-f2e302555397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e89802-17eb-4292-a040-5250b2c26c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f29c51e-8ae7-4ca9-a4c6-ec8f71385daa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9e91407-f6a6-4be2-93f6-7a6c5afdd280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81706b76-6985-450b-adc0-90f91acd2327",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05bd7d1-f208-4ca3-a703-998b44a31427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18d6dbf-69d3-47a4-ac21-c97a3b650b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e353394-4e74-4e96-8022-a2e6bf509d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e499753e-5a8e-410c-be03-aa3f5d106523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d92cd3e-3cc8-4ba6-af01-b3a46868ee92",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd5c0bd-6774-44b7-8e16-5c5b59ea6148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c22ebbbb-e978-416e-b79d-a96768ede779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "451200c1-9446-4672-b32a-3882f2b336e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d19d3db-84a4-4795-b2f8-54b33e821f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cc05c0-7f01-4b69-bc69-b89465462427",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "318dbe2d-6186-46aa-912b-dfcb5834b723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05f1794d-6d79-49d8-afa5-2d0d548a3d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44b72aae-b2ce-4202-bc8f-b831fa8110be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f52925-d736-4876-8d4b-668c29cf5cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efabdcc-a0b4-48d0-9642-c598da00f8ba",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea52c013-e7e8-4642-9f73-2d195a4649e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ff387c-a2a6-46ad-8369-ef23e04d30ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b69eeaa-1675-49f8-a80f-35ceffe46d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "598e2a42-0dfc-484f-9931-dd814f137f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409dca6e-52f8-4a63-a5af-3f6cef70d72f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3419d75-d955-49ee-9ceb-7bbe0c6056c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e80855d6-6d3a-41a1-94f2-e213064d596f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8871d0-25ad-495a-bdc5-38e7e0e2ee9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d50c586f-7590-4adc-8f52-fa52fb8c6217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e3c25e-8483-4bed-9c7a-60f240676f6c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eaf0bee-c3e9-4627-a085-583fff1ab70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5c441e8-6e39-4996-9713-63c6942db869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19bdee1-6149-465d-9796-fa7da03b21ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a167ca9-90c0-4da8-8b48-c1111c565864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343210ac-f422-4ddb-9572-8f534abd3d78",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa9288e-ace8-42ed-a3b3-1e1b0127b7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0fba9a-ad39-4cbb-b2b2-e2ab337d3733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869e305e-4aa6-4771-804f-1793d0380933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "458963e1-b56b-4d1e-842b-f30a0866fed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc48d740-80aa-4db6-a308-3001b70d4f8b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e2d452-7d37-446d-b121-c69a183b5b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7df7d96-6ce2-49d7-a5ae-6bf11aa44d91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e310539-4a0d-4aed-81e1-76e00657c8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "117ff0d4-e78c-414f-934a-303ceba08a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b63dc2cc-7a34-40a1-b32a-57ebbfaf61b3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c4c26e1-7f3a-444f-9b97-9050cdfd5474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2480e5d0-4474-42b8-80d4-cee4ada2183f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9745e6-a335-46ed-a112-4cb5ead166be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f039bb9-5695-476e-ae44-2beabc61f6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77794de0-bccf-43a5-aabb-8bea696e5736",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c8a7da-bdab-4edb-90ac-1e11e404c6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584755ec-8dd4-461f-acba-eafa4714b90e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b64685-d0e6-42de-9acf-7b87cfbf83b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "211055aa-98ca-464f-88c3-5baf6179e394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f40f9c-f2ba-4abd-b5e9-23cbce0820e8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cce0d70-0ed7-42c2-ba4d-5e205f10683d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d4dd08-3ca0-424e-9281-65d39bd81dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1aee056-4190-46bc-918e-c207faa7acd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f8b819-8549-4346-a74d-51e6fd6cd035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c9ae55-22f0-4e47-adbf-7a5a96de4a1a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "367e0b91-90f7-4d57-a814-f0419c87cecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de77547-688c-4af8-a729-4e157ea455f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7552bc-9db3-434c-88c9-1726d0acb9b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "589f1c40-7210-4e90-8056-e2c598bb2c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb233844-09c9-4c94-9c51-b6d9f3c152a1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b279a08-4432-467c-afe0-57a34deb77f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c04390f-0916-4dfd-84c6-65c7dcc57b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "715a248e-2e69-44f5-b2a4-579b0c97c01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a382c4a-7f35-41af-b8c5-6e83bf653866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1399d06d-0973-4110-979c-bd158e433981",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b841b6c2-13c9-4a53-b71c-6fb09d4f1e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40315a85-92cf-4248-9a1d-e97d79dde24f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cfed20e-6149-482d-adb6-a5c3790df1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3133159f-9f4f-4a77-b72f-b1b18eed10a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4768d9e-d682-4e9f-a6fb-ecba88c7852d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5246ed-6066-40c1-8c98-490603cc97c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ddbf4e7-8847-40db-8c88-a94e37fc9314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2c022e-546d-4f6d-be06-34e0a9625b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f39a4a4-555e-4a04-b3d2-9b316081e1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0982ce74-2537-431a-a692-b8e0746b3bfb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b001057-8472-4668-9f94-e34c3a4b754f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4ad740-8cb3-48f3-9731-05896a268215"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5618bea5-d4ce-40c0-8101-5976fb11ca6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1feaa7ef-f22d-4daa-9c78-bc8a58b99a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cb80c7-c63a-46aa-83f4-163ddfbc9451",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2869df18-8921-4a58-923a-988eaee15f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2befa81f-8d88-4381-9bf8-da7c2b49cf8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6786402-8333-46a8-993e-1154d64bdbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9608d5b7-f9cf-4eed-bd83-188a218f9b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664ab110-d407-4ad5-b98d-d8f3be406c00",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22803c28-e8f3-474a-9421-4ad36d23ab53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cab86c16-5ced-4411-b37d-2ca24941e356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6ee687-f191-409d-a413-2f5665af826d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1557c2e-01d5-4c01-9582-97725ca48aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c06857-4d9b-42fc-93fc-acce791465f2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efb72a8-aaef-4c91-b71b-b59b7b965173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e99d60-e0f0-477b-9248-55dbd49ee645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50278015-fe82-49e2-a697-cf7167a206f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec7477b-8c59-47bb-bacb-a2ef66d991e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b65f143-01a2-47f2-893b-cc2489d67478",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40111fb-3536-4f61-9d2d-c5dd9cdfd3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61bdf189-214a-4a99-879c-0b948ba176df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "544b2090-9a08-435b-a003-944420d00c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "51b832f2-342d-46e7-a61a-6158a86750f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d7b001-0103-49e2-aae2-6585ba11703e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "894c6c9c-8348-472a-b779-00d1442dfd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37026b4f-0204-4d67-9d81-96a5b85d2f42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90616e6b-23a1-4181-a5e2-112c5280c12d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a05b72c7-c71e-4491-b4e6-99cd90ca4750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567de07c-2fc0-4bfb-9a24-159b96195585",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee54137-3b2a-404e-8869-b550cc2c7393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77709095-5aac-4a38-8e4f-1bf8fe19ecb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a98fc6-be48-4bdf-ab12-9257a1dfef90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2565412-fdad-4bf9-a015-58afca1f0f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11cbe098-1cbf-4b6e-b947-733ba5b0f3fd",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d89017c-c748-47a4-8225-f94dd122c165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589726cd-46a3-40e1-8da8-ee940ac3fe40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1688327c-a983-4e72-8803-79fbc0df3499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "6fda2be5-78dd-4dcb-9c65-00ab08892f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0651cd8f-9ba0-4544-a4bd-f3643fce437e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d468ea3-97c2-422e-9c16-24561b2ab77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772ea127-42c3-4988-afce-b37c2c9f9457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7cbf43-2d81-4b53-8143-1113729c3bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e313cdb8-00a6-4a75-be31-eaf305460cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c8dd39-d8a4-404c-aa12-c48b158044ad",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "976ca51b-bdfa-41dd-9faa-8f180cf20778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7efa9df3-e793-4341-b6af-3e2c1fad5c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7831f4fa-dc6b-4a3a-8cfc-a3fcea7ae299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6111d7-576a-4af8-a5ef-1cc4abb1facc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b352d063-e460-41b8-bfbd-fcda8faa53f3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e27c83c-45c8-4d73-a62c-005ea73ea53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4c87d2-6566-4619-898f-f5045238043b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2305cf5-d8a9-4044-b500-0d3eb590bf4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4fc2d73-dfa8-4a4e-b5cd-ff0eeb3dd47e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6397707-f62a-425b-b8f0-8159613a9db2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e05a68-0994-410e-bb08-e0087d2155e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b03d92d7-5d16-4589-9f47-790882d61d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee6ab39-a6ea-40a9-8f79-7e769471180c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55409d76-eb0d-4333-971d-df22c62cf155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94df4474-0a0a-4658-bf16-e442bd858490",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34372e61-0193-4f0c-a84a-adf8e2684501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e6c74a4-f716-4dc7-b964-f0f4774051ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67df5844-e3d2-49af-a474-9a3a9e978946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "73f3829d-1df3-41f3-b6e7-89d7c92ad8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fc4cb7-89c0-425c-83e2-ba2abbf53087",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47535095-ac05-4571-ae66-10588a8818c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2628ac1a-a2f0-4277-8ce4-4f2638d266a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c817b1-9326-44ad-ab53-a0115db3e485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfd205aa-a2af-43aa-89c7-28fdccc1851e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bdd2d11-350b-45d3-8dc7-249e0082a4c9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1604dcc3-e634-494f-8e1b-4dc21e91573a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82bd003-c47a-466a-9508-0404f871fe41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b48c9c-a2bf-4735-9ba8-1262f36e908f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1bef7a7a-9e84-4fd4-a369-15dd5625d09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbb4bc0-adc9-417d-b38f-27f5d30f48e1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1a4d30-373c-4374-9b4e-4213d734638c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "208d6246-de17-4045-9a61-3370dd7bd706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b450c5e4-dc57-4f55-bf5d-9e099b10eb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a38dc108-dd81-4af0-bdc1-017fa72c276f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "752f56a3-93da-4b02-b922-f62ba90a7527",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ec7c01-9eb6-4bc3-b8f1-8b0a694b40e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0962ab30-4534-4d8b-aa46-9074646cda26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7343ece-a90a-4f40-8112-29b95543a3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "48e37156-930e-4382-8205-e9ee36df2c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270fa91c-b130-44b6-baec-48086de31d18",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47c32856-0c16-4c14-bf1a-122b37cb19be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afcac487-23c4-4c03-95dd-81c13308de4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03069a7-f813-4dcb-8db1-9c81b39c0ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7cf3ce5-0f9a-4a30-824f-3ec79af9143b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185dfe53-f759-4358-8785-4e653d306f93",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39f88b2-bc91-4aab-8ceb-98e46a0f8c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02b0efec-192c-4dde-8792-4858169771b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f6d319-1c58-4bd9-9a1e-02e5c4e7777f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad44298-beec-403c-90ab-b1ba11903e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d5cf5b-ab98-4059-9ad4-399a7e47d9da",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9023553-cb70-4946-9312-2ec901f377ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef9ba0d-20fd-4f8c-a200-80c6beec7915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9f0a05-f829-4e40-8f85-01a72f1c26a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c9cfda-9007-430e-9750-b7c23fb0f25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee3a3a1-ab6e-407a-afaf-3fd5d47e72d4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e6a490-fa43-488d-bcf2-e1c2629aa04f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e40598fb-e9a7-4d11-9e1a-0ce0540280e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcd6b5a-ffa3-486c-859a-44963daa5d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3e12b5-7ffd-423d-a408-4ce60f5f5986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890cb301-fef8-4bb3-be76-b0011cbaa33c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99686961-8e48-49fd-9085-69ac06513d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bef6f075-3c75-40f8-b06f-c83324bab63e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3327a14-732c-4663-a1c1-54def66d6a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1556a7a9-1e10-4695-92dc-9a5fee4aa7b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dee0a01f-08b7-4b8e-8ceb-61b7e5fafe2b",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac99b615-df6a-4eb2-b329-c4b0edca90d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471330b1-135c-46dc-a670-17e54c7db861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1811087-e9bf-41ed-8093-4daae56a0e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "814dac25-e137-4f58-90e5-e7b0bf50d2f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "451443e1-177f-4945-9845-facf70aafe4a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b9d111-0531-4515-9ee1-db907e8c53b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02db13d9-4e65-4689-bcbb-bddd6d20cbef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7070f0-a33b-4fe4-87a9-0c16b2e34634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fd5e7f-69a8-4432-8d58-f2af25bdcb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae7004a-699e-412b-a3dc-6d2e91f84f73",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2faec7-1c21-448c-adfd-ae84a065bef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9f3736-9656-4306-9dc0-06d4027aedd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1ce20d-a107-46c7-a786-4a6d73357433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a1e8357-3d61-4ce0-be0e-3a4e583b626a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0463fca3-b270-4492-87be-1ceda8251de9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3dcb3a-e253-4b1f-accb-ae356fe661d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a9bc8a-6a36-4ebb-8977-06077824424d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4938d7d-c784-4727-b948-4b0977b86665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d978e1-345a-4495-b379-c53a230f7738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306ffbc4-e696-4d4b-a1b6-db4e3745b20c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f918e1a8-7956-49ac-854b-02584aad8d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0c0b36-baf5-4106-a149-6162be81f82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422386e9-83e0-427c-8f29-bbf3990d7e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cd69882-82c3-4396-9e35-7d8b6515dc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95bd00d9-acf1-4616-8672-d4b1d712eb2b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1821990-159e-45d1-ac62-cbd879d45cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d77506-bfdc-4cb6-880b-fda11a03028d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf57902-0497-40a6-82e5-1d09dfed2718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff102262-309f-4d00-a56f-057100f064ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e44db5-dbfc-4d69-b1b1-f8b4e76759ea",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ad2216-2431-43d9-9037-d4b9fce9f18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51136d73-d3aa-40b4-b185-31fe5886eed4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41887859-18a6-4285-86a5-bfa3eee7fd1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9268a9f0-13e0-442f-934a-6bf71c314487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fc27137-0c79-422d-a9cf-be9fa7e5a021",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f72b3d95-53f9-4583-8cbc-ea091df52c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67125a6-1540-44c0-82fc-f3e07c3b804f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c421cb7c-a4f4-47f0-9cf7-4d86c448bd8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c124c2cc-0eba-4261-a07b-ae87e22d70cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf573105-c6e6-4c34-94f0-0041266f0206",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5399442c-b96d-42b4-9362-03b808a8ee2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cab73d6-7be3-4357-b0d4-8ccf9ecba2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b317286-7b87-4f47-ae8d-3fc91bba4349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64c8fbce-98a8-49e5-9d7b-ac07835e00ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ef2910-ef53-46fb-8207-fc77ef95d872",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a34d84-4ab7-40e1-ba1f-df98de505ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "577984d6-fd3f-4184-87e4-26c06dfe8566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba87c909-9961-4163-8a26-32a83e6aed88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f147cf0a-66d6-4ab1-a5b0-d04882ae5e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0996ce-ffb9-42a2-9c5b-7bec5e25a8a2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a042819-bbeb-47a8-ab7c-61fcb2f18ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea4b3ab-e949-4dae-8bb0-2916cd0b8715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c794f87a-403e-41ab-be3c-69d8834ef6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5372bd48-a7ac-4249-b40e-2c5600bdcef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f23f59-e9fc-4ce0-bd9b-63e5a5fc80f8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe6d2ff-9ba7-4df1-895d-0557c8db5e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428e4c38-1dae-4112-acb3-1367a455e764"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed39077a-1bdb-4b5a-804f-07ed83c78e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9eefd86-caaf-4fbe-aa88-7b047e206996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe39601-c3da-45ff-9884-70d1b6981850",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3bb65f-1bd4-4b47-a31c-ddbbbe3c707d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f494753-449d-4642-a2d7-5675cdec871a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168fb9b1-916f-441d-92db-a91d52d643f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "06289b23-aae9-4a8f-80f1-1ce311e02c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9735b07a-b86f-43fc-982f-04683268bb22",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b57fd1b-ccc1-4d71-aa7c-bcd42d998b90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ffa4dff-6fe3-4b5d-a17f-4b7856634c15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71fd56a2-eb4c-4719-be27-41b51b24f96a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad5f4703-339c-4f36-86f9-f638b076d3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f794b259-0d31-4538-ad14-e6c53a6cb2c9",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15451b55-4a38-456c-bba5-842978e25e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b57e88f-973f-4397-84a2-bff0c9734bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3590a1e-4c2e-48b8-892a-0ecd5f3241db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba4b15c-25dc-4232-bc01-c1e6f651e9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f280ae-1654-42da-a9ea-abfc7738db48",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11529e46-b354-465d-a6d6-042b8c637dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bbd1b6f-10a1-4038-8a36-e5dd3e2da479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c8ddb3-d5b0-42c5-a35a-6ef21caadfaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3bcefbf-cbd9-45f1-8a75-7cd20365ba6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fbcee7-8fd9-436b-a2e2-960736730e66",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d00cf5-4366-45ec-9b6d-66d9f6d7f8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc859105-0a40-41bf-b4c4-11b352aa78b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095260e3-beb1-4551-baf5-72ce69a770cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c779e333-44d2-497f-91a7-b0fdb3551f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5dbf18-6979-4616-a9c4-bd1a3b1a84bf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3dbfa9c-9575-422e-a7da-5425ae78196a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02146e9f-eeb8-4077-83ac-e583e55ed053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b3a2f6-f3e4-4604-a7e0-da8cd2b6a4d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9c016b6-1e85-465f-b67c-a732547e2051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90f2157-1c1b-4c61-b445-c2eb23e6d757",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1ec7c4f-9c7c-4d70-8a5a-b6593413b4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f592b7ac-fdce-40d2-a784-7f0aec6e3b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049d3e6c-b50e-4ba9-871b-24bef2e59cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "27b4b085-a1a8-4746-b984-c2d30ec60885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32abef5b-de94-4199-9534-8ffe9e18527d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c1eef2-58b3-4ef8-a5eb-2072365dfd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4c547c-9baf-4197-ba79-57a49344faca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf26c59-5764-456c-9ea4-11af73db1c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c07f9f-b2dd-4f8b-95f3-0c107380af01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aea1001-36a7-4435-a6b5-62365b08ef03",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2fab51-fd6c-4e23-b32a-926181b5bdea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4afacc9-c32c-416c-a22f-61a0031bf06d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb44759-09d9-4580-8bec-33fc636f31dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ff5aa5-c631-4800-bc49-1cd4d782923b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcf8d8d-ee9e-432c-904d-22ff8def6904",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c07136-19c5-4882-aa3e-ab09bd02ade0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6122c450-3854-44da-9785-d3d9ece30439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05041f26-5633-4214-a326-0f831aadf50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b004a2-65c0-40d0-87e3-32de5c6db46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b85114-4f34-4414-9c2c-3871b0114c68",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48994ae-6c4a-4fc7-a129-d1e81806f31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4f1c4ba-4828-4381-b42b-d15b0fa4d8c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f719b54a-a4d0-4282-82b7-23e1af2e00b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "07af17cb-5290-48f5-8ed4-61295b103e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5ea15c-b849-48ef-9d69-070bcbb39527",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ef97a3-743b-4b72-87c6-930900ae705d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2589f0-fa30-4a12-a2c8-06d987f79793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef3fba9-63f1-4a30-8c82-eb0e98f1e293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa208428-bcc4-4bc6-81fe-ab96bd84b9a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defd5e4a-b9f2-424b-9ea0-5ca65650353b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfccc6b-9106-45b1-aab0-6cb402b010ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9dad949-95d0-4efc-9079-6c756cae366f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bfdc22-5569-462a-ab93-b639bad502a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c6d572-5ef0-4984-9195-1421fab39619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ffc832-da7c-4fb2-88f7-29072230ab17",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21185b59-e9d3-4844-967a-d36fd1352b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19720af-54e5-4bfe-b720-a7bb6778933b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29d8e64-2f37-493d-a14b-3e628841d11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b56b7638-2af3-41d6-b0ed-49b968ced23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe74a703-b19e-4f2f-90af-53016016f656",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b8fab9-00c3-4877-9f0e-7459583b61e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7ea398f-19a1-4d04-8e40-bf5c4e46e374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90560f9e-fece-4e0a-942b-3a0f5e43c4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14eb4d01-beb9-4815-a222-4328524c797a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fce82b1-eff7-4f03-a7b5-9c630ddf229c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f7993c-1b60-483e-b964-97ad2fc0edfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185f292f-8e35-4bfb-8185-df7849a84e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6533abf5-c926-4c87-80d1-7c75121540e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53582133-a072-4ff5-9d20-2d02c92b6326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80e0593-4996-481e-a630-7b6f1b0bad17",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b0cd7a-2185-4bcd-983e-8746743da1e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb5ebc5-8792-458b-8826-80d757f1b3f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2d6939-3301-40d2-9d44-c5cd8c7475c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2385b2b6-570d-45aa-ba54-ffbdee005d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695cba14-de72-4abe-b6c6-654194542b32",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f97f7c-e766-488e-bc76-b8c877612c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bbd7100-47ed-46b1-9c58-5a1a9bc85ec5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce0bf37-87ca-46c7-89f2-ab6e71b83369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "095898ec-752c-4d1f-b2e9-92abe1ae997c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7f55e8-251b-4928-b971-1d424192f39d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb88bf6d-5380-4c6b-9693-060815037697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7a13b7f-0dd3-49b7-9791-3fd70c8fe105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdf63634-38fb-4af4-b3de-3c573a355ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "61ad48c5-4466-4af7-b52a-eb1b7c8bf97b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49b8f98-067d-4a91-890b-a5af5bbbe837",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d571c4c-a833-4dd2-8df8-3d820138afc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c14bdd7-788c-4cc9-a203-7094d5fe08e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d878393-11c6-4351-8b49-eb7707d34fc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e48f002-2673-4d13-83f5-b428235995ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6902fa0b-5cc4-4dbb-8b3f-f15e6c0abbe4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4a21bd1-7c5e-4214-bc99-af5f3b218bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433868c1-4aaf-4d5e-bf2a-9013db0afead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636f9857-297e-4ba0-9617-3b5d72a97aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2b0b46-f840-4e7d-83da-8a7d227d007a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37a38ea-c746-411b-9a89-5d79706d629e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce611ab2-5602-4f9e-8393-d42bdf7aa018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58db9eee-f6e4-485d-a0db-fda4104231e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d96dc49-5f6d-4903-b336-23c2e94b7492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "245669bf-31f0-4954-9e85-aed33f8f3ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afb1069-4f9e-4697-b2e3-c91a16bb7134",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d369d478-eb1d-4b06-b589-b13b41892f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c353bf6-ca07-49a3-a832-fe20ece57645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518762d4-fb09-4afa-b345-495bbbacc691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c5e1df-b766-4493-9a88-1d13baea70d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb86031-5f65-4622-9522-aa2ad2bc2310",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "074ed08c-481b-497a-adc7-b38d312c0f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6791b9ea-b675-4e02-86bd-c3a415399cc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db027007-ec4f-4757-9ff7-7e062287d487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "848e791f-9ef2-4b37-97ff-24989802391f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "093bd78b-bad7-4154-b8c2-53ac3e7d923f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "285e0666-461b-4a6a-8538-ee65dd02f76e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c56421-042a-471a-8b7a-e86944540c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4111dc89-06b5-4111-aebe-3025e4550d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204b9dad-b424-4417-bf60-558700ad0058",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cf66d807-2701-4f27-bee7-70b7a4b7c730"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59f4caff-d415-4cdf-b05a-c297e329b2cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f63cdb08-b1a1-4d49-94b7-2e433065de0f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e7daeaf-5355-480b-be5a-bcdd5dbb4c28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2771a2c4-3dc5-4dae-8208-c9989a8597d4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e2172928-6548-4746-b856-b7820c8ae050",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3fa041d4-8a3c-4eec-b4dc-cc99a713089b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fe818173-b9f3-41dd-8d7e-dd4eef93ccb7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d9731e97-8e19-4583-9c2e-7c65173bac21"
                }
              }
            ]
          },
          {
            "id": "7bee3498-9d38-49fb-a1a5-16d18567b683",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5e6ee30f-b863-4f22-aab2-b68333ed24e0",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ab18f4c2-d8fe-47fb-ad80-70e40f385860",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b27c33-4f3b-42b9-ab8f-9e440640ffdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "87abc5b1-053a-43de-924e-b4abb5f8f6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab73f59-a6bf-405e-899d-36acf5c2d0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f866c535-d233-4c2d-b2f2-d6ec85798671"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ddc715d9-9d62-4d5d-977a-756e200bf218",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95318ff7-0819-4701-81ba-5ab254906312",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac9281ee-cefb-42ae-af91-4adafb0dad60"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "37d07d33-5730-4ddf-ae9a-69c8ae0fc589",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e516670-9051-434e-b7cc-c6747bf5cddc"
                    }
                  }
                ]
              },
              {
                "id": "4778d6f6-1db2-4716-91c7-a11f2985a4f1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e12b3d6-4b4b-45ac-a5b1-f03233a5c7bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "47d28d60-47e4-4780-8f54-b4917de1a883"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "572e4685-35b3-4a4c-b6c0-b1254065375a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e3d7cf37-aa35-4036-b1c9-ccb9f40d0ad7"
                    }
                  }
                ]
              },
              {
                "id": "47b6bc15-0d37-47ed-ab14-57e2aa1503c3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9dd56023-35ab-4103-a2fa-60e1a996878e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f639d71e-4efe-4bda-bf98-374c577a1b16"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58288671-5a58-49e8-995b-0772a1793d4d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b48cdb68-0d9d-4d4e-b5f1-6273a94a66de"
                    }
                  }
                ]
              },
              {
                "id": "790970a5-79db-4155-a014-a0f81273a923",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae52c837-731c-4409-9830-a708c785b5e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7ce0ad6-a33d-4fb6-aaab-75253f93716c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2965645-c01f-4f93-99fe-354f352cd398",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7394bdb7-8d6c-486c-adfe-9162e792f111"
                    }
                  }
                ]
              },
              {
                "id": "fbda39c5-9721-4a0c-b349-3a9e3f50d636",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "64de7068-1755-4a84-89c0-3fcc8ae75b57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d359135e-e46e-4117-a41a-199fba73a7cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc3afb61-da1d-437c-9605-ce048246911f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "bfcedff8-e98a-42bc-9528-d53e87396ee2"
                    }
                  }
                ]
              },
              {
                "id": "0b33fb6d-ffd0-441a-aebf-a2c45f87880e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "effc672d-6901-44e8-883c-e3a6f34053a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "378f7f4e-66f2-426f-a617-8c7f164a03d3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "558dd96c-85ba-4b99-9f26-350d1696a15f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fe31c220-616c-4b0f-b7fe-363871f10bbc"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "03cb8f11-e7bf-49d8-a237-51c97e4ea7b0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c396351b-dc91-4e0b-9c18-f5bb8c4e1ba4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8668b075-2391-4940-8ffe-1b12e48d03fb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc0a1d70-8fc4-4a8d-9a9f-42952c316bff"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9829ccd6-d926-4a05-ae69-53a41f67a642",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a9265a5f-bb44-43a6-a089-d2eea1526fb9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e5ccd97e-c45f-4486-b28e-cbd7393189aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dba9d829-bd5c-42ba-9c66-4e14940f86b5"
            }
          }
        ]
      },
      {
        "id": "18474fb2-600a-4b34-ac4b-2e4b0f68cbd4",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b1ad3ed2-e093-4d29-a853-ac23b3fce3ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "65216e1e-63b2-4095-ae09-1227699e9de0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "09dfdcc9-1e55-4598-b840-7863a7cb7a71",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1347ff6-59cc-4c89-b5a4-3439c81d5ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc3c0ddb-5f57-4b03-9f53-358a19309ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccd87ad7-ab93-4e91-a67c-e81f016d30a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a8c6dc-e9cf-4f8a-aa4b-2b96a6c2a718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ebbcc0-4a23-49ff-b91c-44cd410b42c6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0935fb8e-95cd-4b9d-8db7-b69f435417ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04054080-e8be-4e57-bbca-8cfd772d36ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8343e2da-003f-4fe7-9829-b5eef76a5539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e52342-3385-4b19-8744-a48fa9217844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d50bf1-82dc-48f2-bbde-0c9352ad7652",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "291a690c-ea58-4568-9c3e-69bd01f8e4ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a99644-122c-4cb7-b0c1-3fdbd616bc76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1bc57c-6dbf-4a80-a12a-62333bbfeb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "41ed0e28-fb62-48ea-9faf-6c89a9268292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c914eb3-27b5-4022-8b58-838d71c66811",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a90aa2bf-dfe6-4fcd-8eef-4ff632e4f551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adb451be-f03f-4257-aec8-177c845c891a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64df23d-56a8-45eb-bd50-9a8ca26d5eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d28c5b4-7cb7-4b1c-baad-9272753a23a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c44c51-e6cc-4638-836a-d5c87f567832",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fe14b1-f24e-4fc4-a0f5-9dcb3e219f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee53d5f-dcb1-4be4-bf82-cad9e5c7001a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31de738c-711b-4131-9109-881255a59283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d78aca2b-4ceb-4e39-8e70-fd90e5b30874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b13c560-1a30-4ed2-8a67-cab7fa00d623",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17ab50ac-aead-41e5-acc5-7135ffb0bb26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f1026be-9d69-4aa0-a63e-0fe973b6ccba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ae024f-f8e6-4d39-8d80-c462df449845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "17edd3e5-beea-48a8-b9ff-d3ed494e846d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa50502b-d2e0-48ca-8a6c-89423de4cd23",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c9f012-434d-4901-95d5-c597371cc06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "419334df-c7a6-45b4-a495-1e3c3d4e5873"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbbb6c4-e1a1-42f3-b3c6-551a9962938e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "743deb3c-ecdf-4438-b96b-5f790503a7dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf3bd605-2535-4601-8ded-4c83d1dcd990",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d3e9ae-6865-4ee1-9c18-b2b25f9dac8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77a39b2a-f928-49d4-8613-90eee6edbc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7a30bf-a80a-467c-abb1-b2fef7c6d6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ee0a88-1a30-4809-98ce-c9f12a580d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2781be9f-c3c9-476e-b615-085db77198d3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb5342a-f06d-458e-b17c-fe69ae0e8664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ad7055-00ba-4245-9baa-4986b0f7473b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f9deb1-4ae6-475d-adb9-41ba6f98b98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15449e07-e14b-4721-b7c4-7d8bbbe99d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b832bafa-d4ea-4313-8718-38770bf8e7ac",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9fb5249-8f32-434e-a014-96172735fb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e2765c-c4c6-4712-9a0f-f065502e88db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9497ec83-8129-47a2-8328-e6d3a1904427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9759b960-fcc3-4da9-b8be-9bdb496e2263"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9218331-33f2-4be6-9bdd-026583e03328",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a8767c-0f78-454f-ab6b-0f9be8a2c1d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90fcc68b-78a5-4519-b085-12561e9c129a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d03b0c-0914-4c7f-aa11-8aa5ce47f597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a1495895-5b99-4a90-9b83-7e3fdc6b5f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf8cd80-25bc-4284-bef8-1a953d5b5723",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e9eded8-c12f-42b7-ae57-b03c66c8f381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fcbdd9-7b0c-462f-8d96-7dd94c2b50e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "577dcb5d-3490-4a87-8862-546345a50562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "921d0115-1739-4572-a5bb-871a00330131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd0dd7c-ed71-4883-933d-f21af09912c5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c36d33a-2f32-4b29-b910-ca1cd2154887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66804c9e-78d9-412d-8fa7-d56c4b2820ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9276820e-0d54-4b8a-abdf-dfa8b8678eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0151f7-ab3e-4985-88c6-2a0281afc662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fdb888-b73b-480b-8483-3f885a8966ac",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18911d1a-e2b5-4b51-8d4e-5ab5db1692e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "435ebcb6-59fd-43b1-beff-b1a69f41f989"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18069b4e-4753-4036-bd8d-92ab7ba0eef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a75b723-ba64-4828-a926-e358771e9dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93369c20-b7d1-437e-a5a6-eac11204b26a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e571a19-abdb-4c2f-b77a-17c46688d9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68f4943-7dea-4a94-9336-c9593f67f318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37d65bd-6444-41bd-bc6c-e1b9271a11a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5b8970c-c87b-40a5-a8f3-ddc35b65d08f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f363928-d941-4dfe-b375-cf890448ac1e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e39f129-9862-446d-a21f-f254b44c767d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aec825a-a0bf-430f-b4bc-ce98a7ed73f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6788c5-1f9b-4f5c-84fe-411e890eabb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "451357e8-925a-4a4e-8981-1df847a988cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686f39bb-a609-474d-9f18-12bdab31c841",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7292b7aa-e0b0-4854-9fae-7651a4449638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58efc827-6ce5-47c0-b5cf-c3ee67dca42b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e69ec1-7f10-49ce-9d34-0d8860ba3238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f649a6-6e93-452f-a159-ac6b39b4cd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8708bc9-9b11-43d3-aa0c-b1c3989475ba",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b0bf45-27c8-4304-9502-0d54e3327390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d72e848-e90a-4603-a4a3-5470af2304e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f046a373-f439-4b22-950c-730e6f8f6915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "850f0ebd-8281-44a0-b1c7-6b06ac1bd1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bd4f89-31e6-46fa-b30e-a7938043e5a9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a894ebd7-9676-4cde-ac3e-4de8a0dabfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612aa5a2-9a5a-40f0-86b3-e020c67ef190"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9437ab-6980-458e-a529-6ae3f04f479f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a917e2d1-f436-40c0-8fc5-56eec6eaee37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a647948-aad3-4f7c-8be8-9c4a84171fb7",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d488548-39f1-4f83-ae7a-48de8cd24ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b98812-8c19-440f-afc3-21afc9404bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088f0f9f-93b4-4b1c-ab3a-4f2426e4c92c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8526959c-f4f2-4ecb-a814-c35e8686ecf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278e052d-fcfa-455b-8668-f0132437182a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6377af5-704d-4b9f-b2ff-38958b63dc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b36b376-13b4-4a5e-852c-5bd11dce3343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d607f872-0417-4f30-8f27-9af966d50457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c12ac1-83f2-4905-8eea-6d3d08752c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfc9180-91cf-41d2-9e33-eaf075e3c2af",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e01426f-c3de-4001-9827-5609fe0b98ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cb1646b-0f34-435a-8a5b-8b24fccbb534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7410aaa9-1fd1-4c1d-ac6c-cb85539cb828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fddd82bc-a566-4c46-82f2-8a48d6295061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a527dfe-998d-4985-846b-efeb4f62d0ae",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25188236-5162-4961-954e-fee56494b82e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4b186d-cdcb-4819-ad44-ff9dba8f0c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e27f813-1098-41dd-8ba6-1933867ae719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17b08fc7-f9c5-4755-a9d6-45185f19bfa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b949cd94-c6c1-4298-8388-c104d85e15a5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ddcd5c3-e1f0-4faf-b4ac-fb9adc3bb5c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72857591-b95a-4bcd-b63d-7fffd2092512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d85650-08ab-4f90-af2a-76d3f2cf271d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cacde03b-a0eb-4026-bc9b-042937ce1892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8375f2ea-a7b7-47d4-a054-acd42f37bb88",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad63f7c-670c-476d-bdd6-c62cb834e8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f2acb46-c58b-46aa-98d3-ac9da2d42490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968e59fb-7204-4e1b-b3a4-b4538588a2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "134845dd-38bd-4543-917b-eb9437ee8806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e07abe-fe6b-4089-a37d-44f4dbe11a45",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23e63b2-2eaf-4cce-a771-151a2c250860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dd75d0d-f264-494e-89ff-c3fbb1cb4cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd9e558-e53a-4800-8f22-86d81b588097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "398c6d18-1111-4b57-8261-a91c33c124e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20f7dd3-2d2e-49c2-a03b-0b6cf5dde5c1",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99eb49f0-81d3-4e66-a3c3-a228fabacdd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f638b01-bf07-4c25-ac8e-35a162b806bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528baa35-6092-4344-ab81-ddd0cda274e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "369d3538-3143-4bbe-8118-9b5303a301bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959b5795-ad0d-46fd-be41-c6d7ad9cccd1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffec4e2-7a5c-44d5-a487-e6ba87fd108b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10630ee-5aae-47a5-8966-5f727efd6399"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220c5b0e-b3f5-4cdd-8cc3-ef08a74b1a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75b11dd1-2078-426a-b094-c85ebfcbb58f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6211641b-511e-477f-a451-feab883800b3",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bbe185-ede4-4ece-9144-46bd12e08fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517643c6-049e-4df7-be01-04bd1c28717e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01cb3263-5704-4900-8402-570f292625fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0607b76b-d466-43ce-81c6-8f4920cc56f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198284e2-99df-43c6-963b-b08cd11fb8dc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "669a5cef-736c-4cba-964a-6d4c13ac0da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0083212-ea4f-4b9f-876e-cef3d43eb862"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e92da1-6a19-4d7f-8cb3-3702905a3b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "455c9fff-26da-4c21-83e3-277136c479a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e290ba3-7a9c-4a8d-9203-0ffeb4c3c3bf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f77edc6c-aaa6-4373-b37a-c86a218b48cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73284a2a-50ef-4840-8ec1-1597f053d69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3cef2f-12e8-4ebc-a8d6-48c7c598bde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9cb5cfe-0471-4400-9701-036abc51cdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76722a47-eed0-4c3b-be57-709afe51a6c6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76001200-7b70-4614-9d01-559297f6e8a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edaa728b-c2ac-46bd-9c55-233343f52769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c48162-aa5d-4431-b9fa-376ea72e33a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ba6db98-3d42-47ce-b379-3e99904ef2e9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "85c727a6-6076-43ea-b507-659f2f682b44",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12738331-5634-4a35-a9d6-5653fc8b8841",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307d67e1-57cc-40cf-92d9-2476ffc990e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e07e7f64-9912-414a-a7c6-c00a3bbfbd75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5aa485-6c88-4e71-997a-45b05486bfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5dcef25-fbfc-42e7-a22c-25a60f184f16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7442328-af24-4bce-855f-3c681373edc2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1982a43c-824d-45cd-948d-ee277d0d600e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d871d1c1-b584-409c-a838-2a3d710c42d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b2edd9e-6180-4cf4-9de5-aefb0ba2e3c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "680352fe-8228-448f-970c-27dcad2594be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "841d593f-2313-4040-97f5-e82007f6e439"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f191deed-e762-4a5b-b49e-559fc995c183",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "756c27a2-1db2-4484-809e-ab6aad72ba71"
            }
          }
        ]
      },
      {
        "id": "10ef52be-c123-4863-81ca-1f4dfb8e0df0",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "61f49a47-4b6b-45c0-bde7-4dfd5041ff58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fad60543-0b38-4bab-a8e5-b4dffb06c562",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3f59b5e8-9f04-43c2-a8d2-cdd6f7469d22",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39199d5-39f0-48d9-a5fb-7af3b37fd904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1df56895-843d-49a5-bdae-7ede2e62ae7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728cf88a-38bd-4d53-9bd8-73bc7e8aa4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f77e53b-849d-46ab-aff9-545987d511bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4614193-e3d6-433e-9b02-ae58a6f2685f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1d656a-bb44-4543-b4ce-716a437a15d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6070beb-58fa-4142-bc74-0d447d37060d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0d1fe3-bb69-4b36-ae95-f88dc5a42fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "098029f4-97d8-42e2-9ff9-b06c61902e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd51b09-88d2-4510-a0b0-d6f731fe3446",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c8af04-168a-45a3-9886-90d60fac1cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7530c0-256b-4f77-879f-f0de2e09fdf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbf39f3b-788d-4289-aea5-a718c94174c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7564e49-fb16-4c3e-a432-cb8b61bfd761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe29aa54-f4d2-438e-94e2-5c1845488471",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8942c99-082b-4fe0-a2cf-43fec1611b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f653a1f9-8501-4907-81de-56f3878b72c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35bc86d7-d4d1-4a63-ad12-1f6ac66e994a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34c85c4d-cc15-4c3b-b380-2bfe39518f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed60c44-67bd-40b3-bddd-5c7735eaa81c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577d715f-164e-4214-b544-a9f86fecf311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b682ab2a-c809-486b-b55d-3142116fd550"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680bef42-4a28-41a4-8937-62b5f4156b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c5c319a-e2fd-401b-ad25-9679da9dbb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d479d58c-a4d6-403a-a092-e0261c700591",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1dbb2cf-95f1-4bc5-a349-0ba44c8838cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8dc1e11-ca65-4f9e-b4e8-2769568836b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fe84d9-361a-4e1a-8d62-2068bc323f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "182d2b64-6eab-4b49-85ce-acb7e06d745f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0f6179-772b-4954-b40b-5f7802848b85",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710afda8-f82f-478a-a20f-e56b980d9ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b69536-2372-4736-a1f3-fbba91ae5847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e033d33-a8ba-476e-b121-edc65410d48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ca07f6-e499-40f0-80cc-5fe38684d18e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22789b2-04fe-4134-8e66-b4c78b036f7a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94854297-c048-42d5-b3a2-b35cf4bd4493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a266166e-9e48-47ad-b204-a9279216041d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea23309-4e35-4bad-9309-da6a0f2bf4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aea38647-7a88-4cf8-9488-d009352f32e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11d01d0-e569-4192-8518-25dccaf1d46f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37108a06-f5d2-48ef-800b-8a41b03eb886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6a0ca2-bac8-4455-b0ad-19306a6ac1c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad98d58-88cc-4bc5-9936-ccc1ef783996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe70d798-3a93-4054-886a-dc5bdbfa6465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aacec10d-bfb3-48d8-a5ef-b763313729aa",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21df148d-be1a-4efb-9e0e-6a9c16ce561e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e23060e6-1917-46aa-b01b-8d4608d0c224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf62fb3-2a43-4af3-b4f6-e40373b2ade9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f28b399f-7000-4e90-99b6-69c4106fa532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b8405c-1c29-43f4-adc9-c576108f9846",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea27d7d6-36ee-4c4e-98ea-fd74de2565b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a645599f-1902-47f2-9546-427d31789c9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66c54a0e-7fe1-48eb-9492-8a96bcdb58fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0341be1d-5bf4-4e7d-82af-f62e3e1029ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b874c4f0-a7c0-4844-b68e-584a69fdd1b9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9332d64-7967-46b2-be04-3a996b07c09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5861d10e-b2ef-44d7-8615-2e2769630ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643abb79-b839-4ca7-baf4-77ff56757969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "748c0a13-7afd-4cd2-8093-0e728f394aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef03fe9-3a60-4911-a1a9-1f3ad3e10ab9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35f12891-66f7-4146-88c0-e906d65331d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b90bee-434d-4a57-81e6-e1ca79e6c9da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355bac86-4ce7-4342-ad03-831f8ee1edd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8ecba3-da91-4d93-8800-c8ba78d819bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69159de-26af-47e3-a63d-0b53644813f8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4b6d22-c65f-4b4d-879e-9d61d92337d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "562bb4da-c394-4fe2-9a5b-db2ceaf628ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b501308-fab2-4952-aec4-a3253365dc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5023bb3c-40ec-418a-b88a-c6169fbe6c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cde69a6-7577-4e97-9f10-34bc648b2f6a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086823c8-597c-4568-8430-ad6609e119fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8721a32f-952e-4e0e-8d14-4679084e8712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bface20f-6765-42ca-a044-903ffa81bf49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3d49f2-b47d-44aa-a658-6e75b4b295e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6df14f-787b-4748-a205-ae1c226e0f6c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae9be47-7081-42db-91cd-61cc52e9a793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15588a1e-cc6c-4a1d-9759-d933a397c405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9635d3a-2608-42d3-99a3-2add5c4ebbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a39cc09f-bca7-4f05-89b4-80384474fec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76632339-fd16-476a-a228-8072a4189466",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87cbab63-bfd6-4c28-b83d-d297231768f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "878c7d39-cf53-4d2f-a2ea-fcdf728e4669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39cde1b7-2acf-4c4c-a28c-0097d2c20615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdebe536-b2bf-451e-a7df-26a5a245d51e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147d3649-a0b3-48cf-a285-4876da70a97c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19514b0-1e7d-44d3-a7f9-0d6710bd9d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4e100ac-28a8-487f-bb73-0acf6329e1db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86057c33-a5d0-4b46-9aa5-4e7bbe52b0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "edbff105-1ab8-40a4-84b6-f8ed27be37ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28b4517-12bd-426c-8944-f73e2cdfcb8b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f025792-0a11-48b1-afb0-97555783292b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64647327-ce7a-4717-9f0b-228657cc97ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af478d23-9aba-4a60-b0b0-22f9acddbfa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2675db30-fc1f-41f2-a55a-8ad77fe46138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b694e40-bed0-4d93-b513-2bc156e09f38",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37dde563-ba75-4513-8bd7-641535c38e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8088a21-adc0-4902-81f6-5d17f4cd741c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fe596d-f9f7-4ab5-ad24-144ea0eaf664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "198c8208-1737-49ce-a689-6ea107f30c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d10abad-e57b-456e-b775-f232bbe9029b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d631693-478a-413f-919f-d22599abed2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c37ef9-f74b-46b6-ad4f-6adb95604d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd300fc2-477d-4710-8614-add332e8c8e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f16bdf3c-078c-4b69-be26-e59ca2e7c3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c4ef69-b132-47f3-8c8e-f95efbbd6a39",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca1f1ef-3ff7-4279-ad27-b559348d940c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8b252cd-5327-4994-9812-84db7eb03e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54fd19d-4c5f-402f-82fb-83c8cce501ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76875d29-6d3e-4ff9-aa01-ce6316889b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40550c8f-fe4d-4b36-9f72-6c0e3e424427",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea1513e-dd27-4b22-b313-292d5722886b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62531396-45d8-4c3d-bbc8-e8e4f9d1e4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a90bb76-48bc-492f-af24-e5dc0fa7276b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9274f7d-c058-4c6e-9975-926425eddf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ca5af0-e762-4c6c-aac1-31200c3902ee",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221eb01d-6ec6-420b-b672-6b8b71dd831f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a87549-df06-4b8e-a3e2-148c9f03eb46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c66459-8c6d-49a3-8162-1d370c2b6e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9571b9c6-5195-48f0-89e0-8fa3733a2892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d8d2dd-6211-432a-8f44-badf416e5508",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fb9b90-ee4b-44b1-84ab-3f7fbe4746d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "273e7cd8-7daa-49a9-834e-4a5375b0669d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5e314bf-bb04-43a3-ab93-7ce4a992f245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06068671-28de-4528-9ab7-f69678c696d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e1377a-a2d5-4460-87d1-2fcf28af16e9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d89fcfb-292d-4dc6-87ff-59f802b3d2ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c91aa96-b8e0-401e-8a6e-2287d2b8d889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49611c0-7a18-4b58-8881-75b1af2f2cb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e07404b3-de8c-4650-bf0b-f8c09a9353ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf3c3d1-dce7-448c-9346-13c1cd8bf457",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbd4084-5e03-446b-af4f-5af1f7876949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b8fd88-6a85-49d8-be8f-360842eee197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc87e04-fb52-48dc-8ff3-c0c35cb490de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ce46ea5-34f2-4f29-b919-7413c075db63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab93197-814f-478a-a323-f0afb4f55906",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03103efe-e871-4315-920c-1e62173ae187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b0ff95-ba7c-4871-8512-9cc54fd6ba42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "807113a3-8f6b-40b9-952a-6a0d678f7c51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5a981c8-be27-4db2-9421-772c2ba42a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b16f1f4-1fda-4cc0-9b8c-ea0de477a35b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d428f60-df41-4375-abf7-043f9eaff2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce555818-29ea-43c1-93b2-96b0bbd544b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08011701-b8bc-4e31-b9c3-6a1da0c30bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b667152-2bba-4317-8bd3-0e667d5153e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abb28ba-d53d-4275-b01a-654326a52cbe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8adff3-d812-4d45-8851-43cf1389d6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92194a89-dd59-45ea-a5d1-6a330efe22a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390874ce-a8aa-4e6f-84ef-973f416b5e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc33775-4be0-475c-a5e7-29934cc3fb24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b69c95-9c07-44d3-9d5e-781636c20199",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bff6df1-6093-49ba-901d-5a3b2184a1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d677800d-9310-47d4-bc3f-3b4e1c175fff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ce2c36-b0e5-4341-a3ea-5344574710f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad08baab-a6b1-4f8d-8d97-db2ed0bd391b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd1c46fc-e82e-4bb2-9fb8-ec60ac37c097",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0207df-cf89-4769-9629-5fb443ef97d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a318c392-a5d3-4425-a599-773083257033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5b3561-8f2c-4873-b5f0-861554e41684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3cae44-d75c-4092-bcbe-dc781c8a930c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48cceaf-e9f1-496a-a651-22ae959fdc68",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a484be06-90dc-4c85-b4c7-14e89c45c268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea1393e-9b0e-4165-9b1e-70d595290f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fd96cd0-8aee-4b53-8e8a-9af98c1db962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc65964-7a61-4888-b125-19d34ba6cbe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948807e9-3540-4db5-80ce-1b5cccdcbae7",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4da263-83fa-46d5-9bfc-b4c0573a8e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3285dc35-57f4-4082-b65e-46f324172808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4273537e-e0ae-4f6b-83cf-20564f7c6405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "620df7ba-4831-41b6-89d1-84e088399cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bd73ab-1310-4b0d-8bc7-40033c29c895",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d3c273-576b-4299-98bd-cae36d00f7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc09f119-4d04-4a0c-a0ef-73f23866055a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20cba334-4748-4c75-8f88-243e498d404b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1372474-b375-4ec8-88f0-44e7ff9ff9c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b1ab46-abe2-45c0-993b-f1f3a3d2711f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69214fa-f8e4-4d73-a0a7-753ec8f2e692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a94942-de65-4e62-9829-f383aeb76d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a883227-1197-47b5-b37b-d09cd050f53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3e13d6-d033-44a5-8168-d41cef127121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f0293d-6450-41e2-9794-b7e48fd04a1d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "022d1538-3dae-491c-8010-5d439c67d3a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa912bae-1e44-4ec6-a12e-1b66bd1ffca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93dfe40b-b31d-4742-9e4c-8dd405f47a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c44c83f0-c677-42f1-b0c8-2f9764347b65"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d6569778-2ac1-4572-897a-ea9055a5aef6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "302cff99-1a0a-406d-bea3-cc82df95c5ba",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ab2990-312f-4afb-9997-903a3126a493",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "603bbddd-0b7b-4a38-9f4e-aca82f41c7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c8ed2f-9e2b-48ed-bdcd-7c93ec91f7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "429c9cb0-aeb9-4616-962c-2f9173bc9bf7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b261e08d-fb02-4c0a-89f2-41d7c04dd572",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f185349b-9811-4c0b-b4a3-b2dfdf826567"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8acf2995-028c-4370-aa32-077a408e60ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bcfb143-3ebc-4892-84c9-8468372dfdb0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0beb3749-8410-4b3b-901a-65e1bf2346b5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "88ddb217-ef1d-47fe-9a01-33eb51511451"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "751d7b86-acd6-4ffb-bff2-a0906f53475b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44be5f36-9089-4eac-8497-a2b84daec3a7"
            }
          }
        ]
      },
      {
        "id": "ec6de23e-9242-4a76-8409-7c43065c012b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "12a03aa2-7bc5-4b72-911f-f95da9275317",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7ab049d-3f5c-4560-8965-f7754acd9092",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "252d534b-8ac2-478c-9750-ed282b708420",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00bafaf-ee2b-4227-97c6-9834700c7234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfa69d5-2938-4ff4-b0f4-b0cbe96e7a33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e57903-1dcd-4a2b-b127-90ca9dd98a3f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b550e2b0-8def-47a7-a03c-8531f29d3fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "448cb6f2-a2d4-4224-943b-9657f0c84783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850f8714-0ce3-4a4b-a1b0-22c308a084d9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c01ff21-9f76-4788-8485-61a060946389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ba5f13-c7ad-43f5-84dc-fef88591ba8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d08a4b55-2261-4d44-ad31-fc90b6136144",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc7218b-b672-45ca-bf86-a3cdb4325879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18247bd-c8c6-4190-bedd-81d47e45a310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5a4a15-7ef3-461a-8bd4-a5e255e1227c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2036b6f4-8f36-40d5-b23a-44ab81fee133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43611e50-9052-4c7a-8e4e-5e355fe82da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ce5bae-e568-43a8-9677-5a308f49b689",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28afeba2-8223-4aa6-923f-45ff2656e8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82cea6af-54c9-4b9b-b8dd-ee4558cc9bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7616b0d-e806-411e-8aa4-75a2cf0b6e59",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5faefe0-6ab4-4d8c-8670-8ee57ac00495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bcfaf67-884e-4327-a03d-1201326df721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf94f92-5da7-4501-bdb2-d276dd96a333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7598f4-224d-45d6-98ba-60e8af6a2677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "754be613-50ef-4978-889f-d7a114e2ccc9",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15db5c05-3f93-4110-83b1-3add5d05ef10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d63c01a9-0d06-4c28-9761-8f07ca873afc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e62284-d1a9-42ac-b31c-d7a85db55290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19cf8c74-d37d-4a48-9f05-56ceeb7935ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dccf07d7-61f8-4327-ac8e-1b2f964ca5ea",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f83194-ccce-4a17-8639-4e2b0201b29b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b48b6f33-bef8-4318-9d29-b94f44b5d618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08917364-a711-45dc-b7fc-5f83b6167fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb48c969-aa53-4c75-861f-c6d9785f5181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1568098-125a-4a4e-b814-93d056eecf98",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f8a9e4c-4768-49c6-9d48-cf8f4fb025a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95f6c408-044d-48d8-8623-62c68ffc5ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67267e16-9605-455f-84a7-b8637bdcd02b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ac7dc8-0b8b-4c69-9648-95d22c8631b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925d7490-49f7-4535-96af-0008c964b87a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b04c8b19-05f1-4c9d-bf49-8072438a9f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f08d6fa-f34a-4368-955a-acc7f9494efc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "314a5fba-22d3-430e-a749-1aa6f420b353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00cff6c7-3c4b-4345-82f9-328c9620219f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "278c102b-9f74-4fe9-91bd-cba65bc303f6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408fc914-2bcd-4d5d-a7a4-d58a5eb84141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9707a633-1fba-417d-b132-51d84c028874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a952ebf-6787-4fc6-9026-d7a16ef778c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21342163-6df8-4eaa-95d0-f10e4898bc22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4584770-b062-464d-981f-3e6c2846a916",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b46bd92-b8ee-4fb7-9488-090c717958e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd02484c-408a-47ee-b545-65f9d9a9b7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c1f875-e8e0-4b31-908e-7998df984ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72cf6316-b50b-4a86-97be-c891d725757a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdcd1b4f-77d1-4f0f-b871-50ddf46bcd10",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80b669a2-f9f0-491f-b9ad-ea2e6ddaacd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b71b3b81-4888-492d-93b2-68909aadb529"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86423041-6eff-4ea4-8f11-1f202f9feb0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ef0f4a-5e2b-4fb4-8d68-6b891ef25080"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71355db2-fb19-4dca-b427-3c4a38bb3122",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be922355-34a1-4573-9e81-ef1e7fbf96b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdee841c-c2c5-4278-984e-12aa8ca0b666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9285422-2dd4-47bd-a279-c4f549b1aad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c87d99-094a-48ea-a6eb-c60eb20910b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e544ad8-d70a-43cf-85ed-160355678abc",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71b64761-a7a5-4fe9-a49a-dd2847667e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "123c4095-d1ef-4cd9-8ab7-01ac111d887d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e006b41-6f80-4135-911f-3146b7e37703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc01b79-f901-4bf8-87e5-fd4746d1b191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5f16783-9a30-47cc-8048-0ab141058e79",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a656c0b-6be3-49dd-ac30-e38b06fe26c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034b85e9-7246-4cf5-bab2-589d1afa641a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2f6f47-45f3-43d9-9c2e-d93141999e89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d4d588-2dc4-4619-90eb-fadba235f8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b6f7d3-1717-42dd-bbaf-ebeb1db8ba30",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f5d8ec-e9b0-4da4-b47b-2f0a1879091a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d4e925-56ba-40bb-a828-80f06a1b5713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "030492f3-6b31-44bd-94d0-b1449d311ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0577fe-ceda-4093-95fe-98d0d9f60faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7725103-5157-4789-8245-64251406ffe2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d04046-0e8a-44e4-b9e8-82a9e9f97d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dffed71-8e89-46da-801e-8831ca9e9293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6f2c5b-d6f5-46bc-a635-6aa809292dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9747209b-bdb4-4fd6-80f5-c93b586360df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0eded0b-458c-423d-bf8b-6d7f66f093c8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c64365-8ea2-44cc-816e-313e65131098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e53f683-3633-46a6-aac4-a4c79fd6e691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2caa66ba-df73-441a-b27e-54de7159da82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558472fa-b9a7-4fc4-b4f0-ba352000ff7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c8987e-b8ec-4f78-8b60-8f1b3204b1e9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66660106-cd4b-44d2-82b4-3b5b28761e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba52e6da-ab61-4f55-be53-389620b7bcb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c21f44-4eb4-4adb-b94f-91fa8ab9f51d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eee401c-6cfe-4f33-a1a1-0bb61802b05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a601ad25-781a-4388-ac91-ce36c846f0e3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6944d0f0-ef4e-466b-b65e-13afb0983117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46a2a845-c84a-4a39-ad8a-318c6662db18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f64d10-024c-4582-813f-3cbee653b431",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cf1d7bf-b7ac-4b2b-9bd6-2fec981b22aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e1e1e4-6466-49cc-b0f0-ee31525b1d3c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ec01496-7813-4346-8d53-1077cc58e4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db6c326-8b64-4361-98a5-192e44cc3886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ead857-1d8b-4bc9-925c-8b36746a10ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19caf7a-6a98-461e-887e-4d1c2a5b9225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05049bcb-76a2-4f9d-b504-ae116027bf29",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7465d9cb-bdc2-48f1-aeab-7624770d4650",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "676249a0-7390-4abd-8ebe-042dcde51da9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b121b83a-20f3-4675-a788-223d71391a8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95605274-6493-4457-98b0-02d80319379f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d2d38f-3f75-43eb-a803-742fa850a05e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d65c25a-6cfe-4c14-84e7-b78c0e6e2bc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "105fdc6d-149e-4dbd-9583-9760e286d5bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5ee35a-7c67-46e2-bf1e-8c87af75590c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78779bda-920d-4058-9c8a-124b84adbbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d0322a2-c448-4a9e-be04-ce6cf7a2d2d4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5399bd9-cc0c-4dbe-b813-8f50397468b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ade8d3db-c50a-4f84-8a8a-f3acfe8c7751"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d530a4-0277-4f98-86c1-bc9e712ec7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7b1f2e-9628-4035-898d-73b1c1fdb2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29b76dd-d817-4853-a29b-b4824bc651a5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5841e15c-3bf1-4464-a46c-10be56ad2f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b5eb873-6540-4506-b9fd-ed623b028b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31fc1b4-09bc-449e-a52d-c6e175331b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f586ad16-9da2-4710-b6a4-0c9ac8973eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b5c3be-b2c4-41b3-9d58-cc2d180e1d53",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fd5598-c442-4051-91cd-91902ca58884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70628ec0-7e86-42fa-831b-cc030d79a551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1343755-07bf-40ef-9dce-7420030cd1de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415db128-c3f8-4e83-925f-f302ccf902c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75ca42f-1c33-4533-bd66-d9c1d78f33e8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6507230-1e98-470e-aaf5-d2018926aea2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e2c32bf-3b19-4665-917f-a85853888a06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff6365d-56bc-431a-bcdc-fa6aa7354918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1b5c66-373c-45b7-bc1f-6de4c6dd00b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95ba3b7-61bb-488c-bfce-ac6e58781b94",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d3fb51-de4a-4b0d-a6b7-fe5a36292846",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8e7ad91-72d6-4bb8-9c24-e59edff92e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4e9717f-1f23-433c-908f-28eb8a163644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d177a29d-a04d-4680-8362-87ce8f24f7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585a4196-6cbb-442f-8f45-650229072345",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3446b6c-6ace-4ab0-b580-a00ee1624c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8975491e-1636-4e40-a0e9-113b23504b83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01d5a36-43c0-466e-bce4-3192514f5519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd0aacab-074e-4077-b342-7f15ccb78d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a78e7e3-3d99-44cf-9c8c-1eaaf1f8b46a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1f7da1-e24a-4a26-88f7-fe9f1a559c2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a8639a7-918a-4b3f-8484-e3cc41f9572e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f744ad-4f7b-4b28-b263-c87a0aa3df13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22aac743-abab-4168-ad63-49126dda296f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455581b4-4bee-4558-8745-921be33cbc49",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22be6a5-5699-44eb-b74e-8e3af1478c73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "242b8b9c-46eb-4010-ae24-5caee7ccc38a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "495608ea-c17d-465f-bb50-76fae8c0fa69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0257bbc6-ccef-4a7d-a845-cf94266aaad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eef7e67-cad2-4dcc-90b4-5345a3fe028e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a55e64-4c8b-4f2f-a9c8-589d0133c535",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e57510d-c487-4c42-a5f4-9c58be722a20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63896e4-cbb1-4afe-9732-4a75f494ee27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430cc46c-a6de-45c2-ae6d-b5f6cd223a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43fd8c90-6909-487f-a2b1-fff166beda34",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8af7442-bbcd-459a-bb29-9884306e2a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4845428-37ce-41c6-b3e0-8dbadefb1810"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac1ea5e-f31d-4a50-9319-80f4100e9479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358a2da3-50d3-477e-ac3c-a4a7b3053095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32564b6-b0bb-436d-97a2-49efb2ef14f4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3329cd33-298d-46ef-b333-76287269bfbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f72db7d-b260-429a-9d60-070bd0f699a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7ee48d-f30d-4334-b709-8fd439a394db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba61fef-ece4-46f9-9a9f-02db86832b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605e53f9-744e-418e-bccc-9427b74e4846",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31d91f4-471a-4e69-bf3a-64b94afc8fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f3954c2-e8ef-4698-8f85-da0b3b397a2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7062e24-ba7a-4812-af72-89a1db343f6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19555743-cdf2-40d1-bd6e-0266f105d074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361eaac5-a878-4eb2-a044-9737de2dd3ed",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508ee891-047c-4cce-9a06-cda9a0a2f86d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3001370-8436-479e-b41e-5882e4581a6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b24d930-4323-4bcb-a5c6-59b4848889c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33cf862e-c561-498f-a746-398145f9f424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb8b8e3-999f-4ed0-bf06-061392690c27",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959f925e-ac9c-4024-87dc-5e525fae1612",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168d1b08-9273-40f3-ad9c-07911d88bca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c810067b-6248-4735-9e41-82e849e614b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b50cec-0d01-43c9-a268-85c60e93cdc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da65160e-b654-47e0-8db3-2f0d0cb5faf0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5dd6cf-7f29-4de0-8889-6b376c02ce24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b25f54-f0cb-46b9-9d4a-33f1acd3fcb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a29926-03e5-4121-b411-36be3674b421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f6990fe-9e85-469c-a69b-25b868866288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14992ce2-331a-4e4e-84af-f9daed1626d8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ae97c8-1cf7-4d8f-8a52-8a6ca1f09b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c004043-c717-4baf-b2c4-dba065502676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25905b6b-f1a2-4905-93f4-be7cf9b94907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a4e08e8-4080-4f1a-8ddf-d92191ca7afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b418ea3e-9a1d-48d0-8b7b-4584dc5643b4",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873b4e43-89e5-4b38-82f5-8d64e82d207d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b1b69f6-a615-4012-8a02-38d121e0f9ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a59bc03-26fe-4397-88cf-f7c8c4b2253e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dfcba3e-7f23-4a94-9e8f-e8069f98f706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137556b7-fbc9-4d32-8661-a29c6b0543e0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21945148-8fa9-40e8-abfd-4bcf5c971aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba2e436-f16a-4ffc-89f3-cbb7400c193d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b8d54c-a8b2-4f8a-a8ca-d2861dbd51c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5057c7-e4f0-4d18-b499-ba0b81c3cadd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4dfaf44-b23a-42ab-a044-a80bc078276c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f16529-38cc-42e4-9ca7-e91d67cca696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf83a268-a0f4-42f5-acb0-a789cca35880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f5d84e-62a6-4847-9f89-dd6ad8d12fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d043c49-5a5c-4fbf-9a32-895511aa6c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791bdd2d-7d68-414a-96b7-07f34895f194",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317fb9e4-61de-4162-919c-5a0cf3df509f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b13e730-617a-45ae-977c-d8cd9d401371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ebbb9fd-7e5f-4315-8268-41a57f105403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d538cf-00fc-497d-83a1-a340f44242f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f021f0-f8c6-4284-ba83-3a0dfcaea8fa",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d4d9e4-7f0c-4be1-a005-dd2b7fceedc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52fc067-f300-48f8-926f-f843fb13995c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7677313f-9c83-4e9b-9353-0900c76ffaac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a62284-2118-494a-9ed6-88adb1c75e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "100b71be-5f3f-4589-9a43-fb5f91eb7c83",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66333adc-8f22-45eb-93fb-a55dd4b94ea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b5d284-8e82-4b7b-bbee-5845a37e8813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4bf6f5-6b35-4489-acdf-151662e9bb64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9948ca34-7815-4953-8781-be528f9fed23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1826a010-5294-41bc-9ea6-0d8d39b675e2",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d613152a-1615-4976-9153-321555edbb66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f508167-a707-4b6b-a620-f40a4c218b45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e038887-a704-4111-bc3e-c381ca359e33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84dd0a05-45e2-4939-a84c-1b7d5879cbe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e099ac1-dbe8-4f80-94ee-43e12d403c74",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b73d62-49a7-47f7-8cf4-6e280be59b1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b758fea-8ad6-4bb8-8533-4654caf67015"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d01d3ff-9884-4b53-91db-3fff7444b6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9738e509-9184-49db-a50e-03a5e3b8a49a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01ca32b-9871-4909-8471-6544fe887763",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68feb537-5d24-4f51-a11e-eb26b3c17448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6ac843-b89c-42f9-93ba-24604a5218b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5ed98c-b296-40df-afcc-2f99033aee67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf6f4e7-3d6d-4c17-8e9e-f839f5ec98f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1612481f-54ba-4352-9572-5b5e9f4e432a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e47a2a9-cb29-4109-94fc-dd410f7670f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fa1d30e-38aa-4d8d-9be2-fe296b296aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4902547c-024a-4a08-a177-9cc741a10e78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa3ba3ae-5a38-46cf-9555-b33326afba3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0f5ec3-09f6-4027-b852-13f859cd1419",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e39e754-766d-4c14-8804-53483acbc81b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17b7a965-4f23-4310-b8d5-5970dc55a7ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b3a391-91df-4d37-8f89-f7e34a8c2015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4265865-c942-41f3-aef9-bc3796217793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbaae897-d821-4f7c-9d4f-94d7244c9639",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e135e5-75ed-4e17-b4d8-1f752cf904cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3557c03-8880-4472-890e-ca7c2cc18fac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcaa6ef-56e3-4581-af76-22a886911d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce251443-545a-4650-8e03-96cc8e245bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f47422a-9af1-47ba-9af0-4a806e508530",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96f5266-b1f3-414c-90a9-fbfae4115a26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a75d2d7-5dad-4fe8-a480-df0e69146292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4b38aa-82e6-4687-95b4-a89b7678af59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d7deb4-6df3-492f-921b-e1a5fa2614d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c944bd75-9a54-40a9-823c-7864d3a5f90e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19088784-5123-46d7-94ed-dba91db5f75f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e648fc0-09d6-4913-809b-7fb759d09fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8eb721-1c4d-4460-859b-47039f0139ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3038390-5bdd-4c62-9a06-557356d3ec6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d97d2c-b297-4655-befd-f03a901d1774",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9907f9-e1ed-44ae-9d52-3cede0dc80a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab3ad97-8daa-44c1-be35-edc1cd8c5ad4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4309052-8991-4f31-86e4-6c7ead048f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c09c9fa-d2e2-48a3-8a1f-b2d0e79908a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fcad97e-b3a4-4f38-96d2-8e8aafbdcdc4",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8866da80-9cb4-4862-ab33-6b8704e97166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05093573-8e2e-486f-8716-75ef28762c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880be442-dc2e-4ed3-84e2-69577402eea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9a6c24-7856-44ea-8f8b-5a2ae7cb9ea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d618bf63-3ebc-4cee-98ec-553b394c8a30",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6e080e9-5b8d-499c-981e-b9cd78f09d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36969c4a-a04a-48b5-8369-3a74f545f6b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fba3190-486b-4994-b01d-7500dfb18512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47f96350-5594-4bef-8fb0-774ab7f3cb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9843aab0-49ce-48f8-b432-80e8f988b7ea",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f42719-c7c8-4a54-817a-9adeee66baa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe2e161-7a1e-496c-af9f-7c546bc2b4ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7a041f-c49d-405e-a53b-96c44c6d23d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac129bff-87c1-49d0-9bc0-1c4890fb6c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8dfcba-6b3f-496d-9374-8a9f6860eb68",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04b5794-c076-4c93-a3de-e9991cb58dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fc4368a-2a5e-4140-9f4d-a495a02ca761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ca22c1-fdc1-4f4e-860e-dcef62c36cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c80671c-db97-4e9f-9701-93af8b5f1d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca31efa6-dd3c-45b0-918f-d12da548d1db",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64e9fea-5a60-45c0-b5df-723270ca33a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c52996a8-0821-418b-a15b-1471257c20be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6838db7c-3c7a-4aaa-bff5-cd1524a7db7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b3d5b95-ce7d-4bdb-8a7f-35bcec1b9c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17aa657-6ab3-4696-b558-e9538b5ad5ee",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d3599a-be92-41d6-8fdc-15e60fbe9efd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9632c65f-e5c7-4c21-b71a-d59d33c2dd26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19a0ed1-a322-4e97-bc1b-3fa1383aee05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f13a7474-543e-4d82-af37-df74007ed629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bde3c96-34ca-4952-8148-a9535d713580",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a525443-6882-4fbb-9b6b-a6c11d267cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0356f62-dffa-4793-84d4-cf8aa200f417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf5b620-4954-4e95-bb8c-c9330cad86be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f28a37e-8a00-479c-bd8b-a3ae31980882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43dbd158-c012-4756-b480-2ad21a486c90",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ece333-3e86-4a31-bf68-3ba8a195e0b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef41600b-061b-4e74-b46e-26a4edd9e5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed938583-c02e-4155-9f08-465e18349fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce7026ec-5194-46a0-9c1a-1aafee5c953e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a4c14f3-e485-46b4-bcdc-62275495e7ba",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258f53ce-12f0-4785-bb7b-61b64e9b35f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3d7c3b6-a83b-4337-92fb-eeedb5faca16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aeef7da-3277-443f-a3b0-750cc0acbf99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fbfe578-57b5-412e-a3f9-37cc51251c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513830b1-14ba-4146-9fe5-3c34f91bebe7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306d1ac7-7b10-4731-9f4a-f3f7ad43787d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72b62243-dae7-421f-b99f-3c6f4354ff20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05c4220-c368-47a1-8513-5c6b97eb91e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b739ee3-a03a-4c90-85ce-e01286577e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4a66fb-b0d3-4b8a-8234-a9cf538488d0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b2a2ce6-4115-4d29-8842-5008c17631fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d193ed75-0504-4313-b58c-32c2f2735746"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60a6244-53b2-43cb-a348-4ec5e105de2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcb8df56-7215-4f2b-93d6-75180817d62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc78d46-8d1e-4072-8f88-c2b13b9e7cf0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d669c6b3-2bbf-4679-87be-5d56c33e94d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a74bde0d-8d87-45b4-9596-15924ff9881d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d044e4c-ba2e-4386-a726-6423058a1edb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a6c4252-3a52-4b20-b1fd-d1d1dcf89683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24a7c25-eaed-447d-9d0e-9aaab12b7736",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d883a4e2-5268-4c51-aef2-0b7e21984de1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70316f6c-cf6f-4e66-a6d2-176d2d2bc098"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2473ad3c-41ec-4471-a10a-c5970905b413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91d87ab-1355-44e8-94ef-09d09fb92ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bae1fda-ca5e-4d8d-8585-4df19e9af59e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fc0170-02ee-46bf-9d9b-f2a1cde2fb1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "468dfe9c-0634-4522-9b86-e35e1694ba9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c274cf7-0777-4834-93b3-4ab4f0af138a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f1dc2b-5039-4bae-909b-6822b206ab98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ffd5d3-913a-47ea-9274-7449f058d439",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f1d9d3-cd2a-4701-a039-ff1dafe873ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e369f93-1fd5-4f33-b371-229183af512b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd8ccb7-9d0a-4344-bead-ac3453772bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6744c7b2-dc12-46a2-8abb-f78107f272ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01ca4c3c-f1dc-47ea-8082-3b461c3e78fa",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b147480-a914-4b35-bc62-974a5cc33144",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22d2831e-269b-49d5-9b4c-f2c3ed46ff79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc86d16c-a088-41ae-abff-30f955fe7383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fadee33-628c-44f1-a1bd-8ddc7c696520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c1abb2-9067-43e2-a8f7-5ddbaea94f79",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655a8051-17e2-4394-81f9-afac46c3f998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "652e7ddb-c864-4ae2-b360-b930bb30c21b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdb833b-4779-40b7-854a-29742dd69233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0527ada0-b661-4570-af03-740b8c6e8c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89ac99c-244e-4875-8835-f473eb4b20ea",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3eed1a-c821-4477-875c-713700bdf299",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0a34d06-4826-4e52-9359-2354d70b6f07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1501be71-2589-4d55-acd1-dddb04cd8100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2862d6e9-c58e-45d7-86e2-ef5dbdfc39e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c39240-b1cc-4d89-bf5f-becc8a2863e5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76efae9f-a252-4a73-a802-e4f0171e7768",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7153d4b4-1f3b-4a44-8048-d04cab84dd7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ac6b3a-3eeb-47d9-89d2-e9a6618fa677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56cff75-6118-4f4a-a1a7-cfdd5976428d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af3c095-bce5-4236-ad49-8fb60aa6f689",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fd9341-9463-481a-acb1-1c4fe8e5afd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd705885-fea3-4787-b190-cedc845824d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9935345e-52e0-40ea-a2f8-5e9a857156bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f4ec9e-fbb9-4597-9622-9f738c5a484c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4181bb59-c31d-4286-b103-de9fadcb326f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63e1b5e7-b9b3-4712-b0c1-24bf18fdaccc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aea7b0c8-ad05-4876-a78c-7191931844e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ef221a3-d3bb-441c-b06d-ff094ba2646e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "359f79b1-61e8-4033-a3b9-34e60fa23dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a70bb71-015f-4219-95f6-7aa2d4318e5c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafcf051-3916-4b36-98ea-c441cf1782e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83dd2b5e-1410-42ee-9044-7d3f6f0fe2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aedb3b7-2610-4d09-825e-c8790f97f925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e8324c-3f85-4fce-87c3-7a0bb9aa1a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d093f3-3da3-4ec3-bf53-5905c6f1eee1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9eab04-57a5-41fa-9e47-51e11f329d02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af091b75-1b5d-4f0d-8b2a-5af47b3123d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efee5494-806a-407d-bf29-668a42b320aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbb23fe-b54f-4a86-9273-bc47bb09ec2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "367b8dae-9396-418a-a98f-cb6a692b5400",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10160c98-386a-4a17-9b1e-4baa18a7e65e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12cc32df-1adb-40d6-9caf-d9049d0a5fe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "861741d0-abf4-4cc7-af37-b434ae74ab13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35322844-a68e-45e4-b4ba-184b72055772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8276631e-53d2-4cd6-a1dc-b85c10d133ca",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce735a6-993b-4b5d-8618-697a29f1e261",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86662c68-7f06-4721-9975-8e5e58b9d5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f57f34c-4618-4f20-968c-176c226a6be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e2df622-ec4a-45b5-a0f9-283a2d942c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beca1fb4-1901-4bb0-9387-45dfba833788",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795208b8-350a-44c7-b636-37ff8fc99ed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bcc5a96-c82b-4427-b204-d4d9ebebf780"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80833b08-3b48-4b11-b4cf-e2cb3115a52e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd786e0-5814-48f1-b731-e3820adf978b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f5eded-857c-47ad-91a5-c0b3ac53539b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8261e25-d59e-4fce-9fd6-4a826294b73a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88453f5a-f685-48f2-8153-081bdf9663ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45693eff-ccc1-4eea-a730-35ebd99950e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4de8b9-a4f2-475e-88d6-f21ae5c55596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5957dffc-d852-46a8-b659-975287a4d0b7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4ce3d6-c1a0-4f4c-afa3-488a3578302e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9e3d344-d7e4-4ea9-b8c3-6c3a5157ebc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56df79c5-03d1-4d99-b898-9640c519fa31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eeab9c2-d99c-4333-9445-ee8af7346388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00844096-dd7d-4e3b-8055-e29bf7e99f52",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd7c32b8-d8c1-4797-9012-872b09e34bc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eab2572f-1649-47be-9169-90d1d3662854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67312d93-1900-489b-98e6-41a4d7dd3375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "986fdb47-48a3-4e25-aeaf-7dde37e6e096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ca090d-3b8f-46fa-84c6-3509b6a16d37",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc5bfbf-982e-4c32-972a-19a4b995da7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea08ca36-e22a-47ff-b05b-c40b77d61903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1836a59-8c52-4933-b0ef-6a46cc52bbac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a3a0dc-1eb5-4b7b-9e11-c82a87dddc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996eff0b-a695-4994-b9ef-bf8be5ea8800",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3919342b-06bc-48bd-8453-187f03bfc790",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b107a15-6901-4f69-8135-32ffb726f7a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "510e6897-5c64-4884-befa-f9512bdd6f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c39cb77b-9c58-40ab-9728-d5ef3c77e73e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3893331f-907f-4da5-b4bb-a20fa773b3cc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7260db07-bd07-4492-af3a-3a29f1da9d5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d69ddcf8-ebbe-4127-8e0e-c1f4eba1c1e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76b2bac-ccca-4b9b-a0d7-915c4b40b7ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df8b179-faf7-4f85-8063-e955f693772b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5a2dac2-e4aa-43a2-89d1-87c82741537d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655d49b2-f352-40b4-9489-cca961045b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3351246a-f3f7-4e4a-9246-abffae6aaf65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8631f2-5c30-4edf-b0f7-0346b7c61130",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e922e4d7-0975-46dd-aabe-3870f447a0c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c741318e-970a-4228-9dd2-56db37a91c9b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915a1826-1058-4d75-bd2f-122a53332363",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c989c103-88c7-48fd-ab73-99e2ca5fc1c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed2cf52-fae0-4a59-88ef-57d58325dcd4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba4a01d7-0d93-48c6-aae1-54519dcf750c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12123621-3364-4fb1-aaf1-5f0827bbbcc0",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6b9564-9aee-455f-8fe0-be6410c9f2d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9078df44-15c5-4c6c-81e2-91c27519c4c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a9a3d5-1ff8-44ff-a992-7c5c926b6078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa170384-5f33-4a66-b539-762d70aa26ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85d06af8-6efb-4d6e-8c40-b05fa2434131",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc99535-a9b8-42bd-b596-bcb8ea89d151",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d3985f4-8e4d-448d-be5d-7cfbcc69abee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0060dec6-e457-4757-82c7-41b00cc8060b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2821f3c-86cd-4278-b98c-94cb211afc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a00ecf-a8a1-42fd-bd6d-a0499f1f899e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9edc34-aec2-4b0f-a851-fa8a1a8c7c8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6220cc84-083e-45e2-b479-07322f9fd01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4609c715-44a2-4f3c-a152-ecdcd7b25a27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee98cb6f-968d-4dcf-a632-8a086e515f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7c975d-5806-4bf5-b4c5-74f64228b93d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad225dd8-4e56-4091-8ad9-cf8a31734cb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1660035f-fd80-4fd8-ab11-5d46cd6ab689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d01b5d-88b2-4863-9d56-7e9d39cf7f6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31fdfa1-bf59-4b1f-9604-d42afee80682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24875149-bd0c-4847-8fc8-3180780ccafa",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cc51cd-df15-4f40-afa6-9b1f38df068f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9d49973-f43a-4c81-b960-db7f21a4eaf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da36337-f7ba-428f-8206-fa753cdafc8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0042923a-8477-4020-9672-3c04a80d2a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee2cf42-85ad-4592-9df3-28025eba736b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "829ab5ae-2188-4a67-b8f1-08e1b49cfb05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "672a7751-f168-4ae3-98cf-1b68d55d7795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1090fd6-b18e-4249-98a4-29c52ebc1f5d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be36680-5f7e-4b53-b5bc-7f8a3a1d382f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8d17d8-22ca-4374-8b97-887174aef6b4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fa7c6c-9478-483d-bd3f-acb09573958b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5add84ae-4edb-4c0f-bea0-92edf67d6a79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "984f85ef-5cef-455a-a7df-709085817a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22a4fb4-f300-4b3a-874f-57a3fb1661a4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c2870fd-b0ae-47fb-ae07-c9f53648a2b1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9f895ea-194b-49a5-bc84-7c0425fe73ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6abaa0cc-fe6c-462a-8618-06a73096d6ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ee7f55c-d490-4478-b48e-72bef441a1ab"
                    }
                  }
                ]
              },
              {
                "id": "9c775bef-127c-418a-a518-d1eb0c240672",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61b58f19-4668-4cea-947c-88c18c5d6dcc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3adf24-de58-41aa-8475-df90422bb9d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2455a7f9-57bc-404c-9fec-48019ae88de4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68978a7-dffa-4388-a9f0-86819936969e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0f636fee-fbcc-41d5-b35c-18c1e85a9d13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae7696e0-fe4d-4e48-b31c-f358d210dc4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6d8c6ab-75b3-499d-83b1-09baa96c7f9f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "affc9210-da51-41cc-9a87-fac75525d5dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24999327-b1a6-4d04-8a70-0cf1bbb58821"
                    }
                  }
                ]
              },
              {
                "id": "fcee4385-2fcc-47af-b8db-ae6b6c812a34",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "652ee958-63c4-40b2-b9b4-1ac2cb3f292f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3515623d-7766-45a6-a2f9-8ca528390d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d2449100-6153-4590-9319-c53d15b1208c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f11fd28-2115-4004-b398-219b94271424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "000f54f9-5b1e-441c-843b-104639d062ff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9a504d0e-1c20-41cf-bce2-f80107b412f6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4c8664ad-dcab-47c8-b834-cadc30d5661e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae83ec3f-8ca3-447d-b7a2-06cf640f80e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0941408f-3623-4840-a528-0a53bd85fe87"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2251b372-d0b9-48e1-9f93-b9f7990953e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79b808e4-875c-4af1-91a1-621a4f11195a"
                    }
                  }
                ]
              },
              {
                "id": "dfc32b23-ef2c-49bf-a085-18243809058d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f05aa14-3e96-4bb1-9403-d5b9740aed38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "872b5f08-a7f9-4e68-9093-f1587cfd72d1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce6f4d7e-71f2-4c0e-aea7-87a27a36ed50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "57cd1d36-236b-409f-a74f-9e25432fee89"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "03f0c2ff-80a2-4b4d-9d5a-4fed8001a92d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c98cb634-f8ea-43fb-b437-64b13a0a2103"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbd1aa47-f5a8-409d-8684-f3588ef1114a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72df864e-63af-4c21-919e-a7956b61ec3b"
            }
          }
        ]
      },
      {
        "id": "3badcdc3-08dd-45e2-b731-65f6dd6d397a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f8c95a38-a8d5-4c37-b1cb-4a8f1fc375ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7fd1edf2-b29d-4565-a5e9-9e8d6f9a52c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3b192067-3b53-4bd3-ac78-8167e6699282",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd435f7b-8c24-4591-ba15-1462b8c083aa",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "42b8fd42-87d4-48b6-bc1d-544cdd0348bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "960b0abf-2224-4647-9ae2-7efcfc3c00a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4525f496-6e0b-414e-9ecb-e6fe704f9b9d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0ffe437-0d5d-458f-a290-84157dddccf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b072d472-fabf-44b5-8360-e3e337499132"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05555835-7b3e-4859-b586-d1dab22d13db",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de2ad1eb-d06d-4889-bab2-99754de00421"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1110c4a9-36cc-4270-9dcc-f01794001dc1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0cf9c741-c770-4f60-803b-1d39943af176"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fc4bff4-f378-455e-9dc0-2c89c4f64706",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50fe3d10-d79c-49a5-a5c5-20c531a58240"
            }
          }
        ]
      },
      {
        "id": "88e5e95d-bde8-45cb-ba16-0c2a3c5b509c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5a3717d2-e725-4579-82dd-91f8158116f3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf6891ed-7d0f-4c45-9418-3cf84432202f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5cd66963-f20e-4696-ad97-b915186e5e39",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bfbac0d-71da-4bdf-9f07-22653d14223f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c40b96be-7426-4683-8db0-3b54fc25a4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6bbede6-f9dc-4aaa-8fa0-51a0a13aea35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f7cde664-cc99-47e7-8100-7c01cad204ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d908415b-8b1b-440d-b486-64a2c893c119",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f9240d8-b62a-4974-bd80-dbc126b4545f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a881b89-eebd-4b5f-979a-bbef306926de",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a04947a0-bbd2-45e1-8aa9-a6f38ea6788f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cb4ff0d5-1eef-496c-b941-21475bd1ec01",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "57628d37-cef4-4162-9fc9-0885def85442"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c21163b-d288-4cce-86ad-cdb31b70a16f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eec1435b-eb2a-45ff-a4ad-4d0563d3d0dd"
            }
          }
        ]
      },
      {
        "id": "c6788a8a-d0c1-4515-a2a7-021e9642e33d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "413a9a80-eca6-4ed4-81eb-377c6e5e5621",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e316edb9-b831-4bc4-b3fa-52b6bcf1be6c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "826d22b4-dff4-40b1-a345-46b4e9f9a4f7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171e663b-7989-45b0-af94-2f2bc48f0f59",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfb878a3-bad9-419f-a8e9-03eb3cd69915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1076b87c-d60f-45c1-be48-0cf1ae80d52e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7b907b0-6401-4bec-9bac-bb810da17866"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a672a65d-cfd5-4f86-8019-a16f3487bc33",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a16fca70-bb5c-4467-83c6-6986d7577d2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20bd9eaf-fcf6-4b10-b8fc-58c4d4213b62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16e5068f-498d-49a1-8ecc-a8bae52d50f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e3403644-dd8c-4bb7-bb8d-f243c80e5ab4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a3d07ea2-9065-481b-984d-e06ab732120b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38896f2f-69b7-423f-8720-18ab9b13d948",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ecf266f2-1926-42a9-8343-b47f02b36505"
            }
          }
        ]
      },
      {
        "id": "9985b683-d0e8-49ad-9327-0af0616a5102",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a2e53cd8-0970-490f-86ae-9e42c78e15b5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcb1b7cc-98e3-453e-8d76-1fb02e76a448",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4ad81621-3f85-4ec7-94e2-5e558200e28a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae9b3864-f45d-4bff-bac9-a36585e61a1f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "44709a5a-e5c5-4df9-88de-5f3130f9303d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 65.87719298245611,
      "responseMin": 5,
      "responseMax": 472,
      "responseSd": 65.77160646268305,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701304552408,
      "completed": 1701304580635
    },
    "executions": [
      {
        "id": "d1cbb43c-e185-4a76-8fe4-c3c8ac3986b5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ae4e5ddb-39ac-40ef-9c16-35f88b0dd0f9",
          "httpRequestId": "ae410fc9-e476-4479-9bb0-3e019026b8de"
        },
        "item": {
          "id": "d1cbb43c-e185-4a76-8fe4-c3c8ac3986b5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f89b4f2d-d7cc-4d62-88d7-f42e489eed90",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "b3e05222-84cd-4761-b4c0-9c5857721569",
        "cursor": {
          "ref": "1d0cdc30-6504-4df9-8dff-164724230cc3",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0da744fa-007d-460d-b3c3-ce990294b33f"
        },
        "item": {
          "id": "b3e05222-84cd-4761-b4c0-9c5857721569",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c26fac09-75b3-4c99-af7f-1a4e239f7d5b",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "302fee61-b303-4215-9454-7ce60e1c6496",
        "cursor": {
          "ref": "52d5cfc1-ccaf-4535-8f0e-4d177d54dd4c",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "890fbb28-4804-4d48-b244-45702dde979d"
        },
        "item": {
          "id": "302fee61-b303-4215-9454-7ce60e1c6496",
          "name": "did_json"
        },
        "response": {
          "id": "ab35c3fb-01f4-453b-b620-e9b109bee978",
          "status": "OK",
          "code": 200,
          "responseTime": 404,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46d5397-e8b3-487c-80d2-1a3ec813fd91",
        "cursor": {
          "ref": "7fd9b5a3-3a23-4ee1-b97f-db080ac908d1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae1aa80a-43de-4a8b-9944-c3eefd376f4d"
        },
        "item": {
          "id": "a46d5397-e8b3-487c-80d2-1a3ec813fd91",
          "name": "did:invalid"
        },
        "response": {
          "id": "bc407557-8317-4d83-aec4-94a32052bda7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46d5397-e8b3-487c-80d2-1a3ec813fd91",
        "cursor": {
          "ref": "7fd9b5a3-3a23-4ee1-b97f-db080ac908d1",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae1aa80a-43de-4a8b-9944-c3eefd376f4d"
        },
        "item": {
          "id": "a46d5397-e8b3-487c-80d2-1a3ec813fd91",
          "name": "did:invalid"
        },
        "response": {
          "id": "bc407557-8317-4d83-aec4-94a32052bda7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b315bd5-6f6c-41b5-b96d-c1245972a7fa",
        "cursor": {
          "ref": "98388e45-7770-46fd-af0b-f8b83d44b533",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "758daa5e-281f-41ea-9385-795e514e7f80"
        },
        "item": {
          "id": "6b315bd5-6f6c-41b5-b96d-c1245972a7fa",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b70db519-a4bd-4107-843c-96d1ac4d9f6c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 98,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063524ec-a110-40dd-9854-05092d302f67",
        "cursor": {
          "ref": "c4ebb74c-a615-4b9a-aea4-3775b5a19259",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6d8d47d3-9b24-4cc3-b4a8-8877b95892da"
        },
        "item": {
          "id": "063524ec-a110-40dd-9854-05092d302f67",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f351af7f-7b83-4002-a7dc-17c7a4b186c5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 55,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86463058-e119-4696-90cc-8727d88adb3e",
        "cursor": {
          "ref": "75a39501-2074-4e96-84e4-2211543ef124",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "448a196e-8f20-4dc9-9cde-10f54bd22142"
        },
        "item": {
          "id": "86463058-e119-4696-90cc-8727d88adb3e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4faa0222-3899-425a-ad01-b34f9e83fdd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2c9101f-48c7-4300-b8a0-39c93505caee",
        "cursor": {
          "ref": "4c12a982-f6ba-49a1-843a-d2d60ae4946b",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ecd5b086-82a6-48ad-a31a-6c3b0a5c71df"
        },
        "item": {
          "id": "f2c9101f-48c7-4300-b8a0-39c93505caee",
          "name": "identifiers"
        },
        "response": {
          "id": "542e9614-5deb-49f6-a346-958afdba637b",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "178fd588-232f-4a5d-bad5-4a227b0c50c1",
        "cursor": {
          "ref": "b5f8739d-fd82-4274-8c3f-ee5d56d9b1db",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "10ce18bc-eb53-4db1-af92-cebac83edbbb"
        },
        "item": {
          "id": "178fd588-232f-4a5d-bad5-4a227b0c50c1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "4ef95013-be13-4cf0-864a-e05441fc0b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5c3f21-6b54-44f9-bcee-8c61f06ac6bd",
        "cursor": {
          "ref": "d617cbbb-5bea-49c1-a027-8c113c89085c",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5b950170-3a75-4325-953a-b515ebcb941d"
        },
        "item": {
          "id": "ec5c3f21-6b54-44f9-bcee-8c61f06ac6bd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5dc4dbac-3590-40db-b8dd-3a08116f252b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69a0904-1f2c-4618-92b4-a910a3ef7038",
        "cursor": {
          "ref": "d42b2247-4bae-4af3-9ad1-b073413d242a",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "83b3eb28-5021-4f5a-8fbf-2e60b5a92706"
        },
        "item": {
          "id": "c69a0904-1f2c-4618-92b4-a910a3ef7038",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bcdcd448-ee33-45cb-b252-49411b2f1f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182ab8ac-42d6-4706-83d8-b8d889f8442b",
        "cursor": {
          "ref": "4e2e8c22-60cc-4051-aa49-99b4c5a2c0e4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "98c8d342-ccfc-4be8-9bab-d9b5b1d40909"
        },
        "item": {
          "id": "182ab8ac-42d6-4706-83d8-b8d889f8442b",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f638555e-61e7-459c-9430-2ff1b5d8d1f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1771411f-5b24-40a1-9c8e-114c19a7d007",
        "cursor": {
          "ref": "49d0fbc1-530d-4dc9-98e0-cb0b705645b7",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "11628149-cf2a-47af-b9dc-26bc6a255cc5"
        },
        "item": {
          "id": "1771411f-5b24-40a1-9c8e-114c19a7d007",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "490ad4cb-37f1-402a-840b-8ae56c110fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8244d96-5d81-4d7d-883f-9ff26c5933ac",
        "cursor": {
          "ref": "241f20a1-7f50-426a-9492-c9d8e0981011",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "88d6f4e2-d959-4e43-b279-54fc54a191af"
        },
        "item": {
          "id": "d8244d96-5d81-4d7d-883f-9ff26c5933ac",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "54f39b48-b035-4e6f-b05f-0c8e7b3b28a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ec4a3c-faba-48c6-89a3-62814790481c",
        "cursor": {
          "ref": "fbec130f-d18d-4d9f-8ab2-25a39732968f",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "1f0ac86f-aad4-4d3c-b917-d6988be8b7fc"
        },
        "item": {
          "id": "75ec4a3c-faba-48c6-89a3-62814790481c",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e3eef076-d52a-418d-80d2-931870991963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc8b3dcb-3f1c-4877-9c1f-581cab4c24b6",
        "cursor": {
          "ref": "1879f7fc-aa71-485c-b680-3dc8a09142e6",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1d5fc409-476c-472a-b22c-8a4abe2bbe9c"
        },
        "item": {
          "id": "dc8b3dcb-3f1c-4877-9c1f-581cab4c24b6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4ccbc6dd-376f-4eea-b7e0-e2237e0322a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d67819d-6607-4456-9f03-20242abf0098",
        "cursor": {
          "ref": "dc6c4052-ec61-46af-b557-3c599b222eec",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d57bd391-b64f-45d4-a235-c4c88c935c9a"
        },
        "item": {
          "id": "2d67819d-6607-4456-9f03-20242abf0098",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "8ca1dd75-58ba-40f8-8e69-ae4d03eb487c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a94d164-127d-4f8e-8d2c-8fd3dda6c09e",
        "cursor": {
          "ref": "656cdd2f-f961-485c-b5f9-51c9e864bd89",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "895d5f0c-a7cc-45e3-af85-cb3f3b436620"
        },
        "item": {
          "id": "7a94d164-127d-4f8e-8d2c-8fd3dda6c09e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "073483a7-3bd1-4058-9392-5c062c7f8e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44e1c0c7-2af5-4c26-a262-5196453de0c5",
        "cursor": {
          "ref": "770163c8-4ffc-430d-b409-a2db6d062e31",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f1134a73-6285-474f-8afc-f8f41a48059c"
        },
        "item": {
          "id": "44e1c0c7-2af5-4c26-a262-5196453de0c5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5b035834-053e-48d1-89f5-03006b86618e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22092492-adf5-45a1-b675-fe92204b37ea",
        "cursor": {
          "ref": "5261a61e-63af-4bb9-8972-b42e6ca925b5",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7237f8f7-414c-493a-afde-fcc596369a0a"
        },
        "item": {
          "id": "22092492-adf5-45a1-b675-fe92204b37ea",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "cd7e3974-817b-4fb5-b004-38bb67ff3808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429a0199-01d3-412d-bcc8-eebb92e9a279",
        "cursor": {
          "ref": "db055fb5-c88c-4c83-b21e-3312d841cd75",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "09c639e3-baca-4bdc-8fac-5abc7a877e03"
        },
        "item": {
          "id": "429a0199-01d3-412d-bcc8-eebb92e9a279",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "281ac6f3-d683-478f-9650-e14453e3a30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "223364da-08a8-46a1-a1c6-e91bce3be9bf",
        "cursor": {
          "ref": "31dbf837-b83f-4597-b589-a84930d9221f",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e30373f7-2697-4415-9520-3d2c935bb78d"
        },
        "item": {
          "id": "223364da-08a8-46a1-a1c6-e91bce3be9bf",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "43147485-b9f8-4130-8cbe-62e9bf0fe407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5ea109c-c181-43d0-b4fd-c68548b31ac1",
        "cursor": {
          "ref": "6796d0da-4653-43cb-8789-e99a56954753",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b1be9f27-5a9a-4816-a460-6f11418f8a2c"
        },
        "item": {
          "id": "f5ea109c-c181-43d0-b4fd-c68548b31ac1",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3f11e4c1-05f8-4927-87d4-ff574bd2f5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da88164-95fa-4ee1-90ca-5bc7e6af8c41",
        "cursor": {
          "ref": "6afae798-2e69-4dc4-b15e-0fa7f8b62a55",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "faab7173-95a5-40a0-86fd-1281e66f8a37"
        },
        "item": {
          "id": "2da88164-95fa-4ee1-90ca-5bc7e6af8c41",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "02318335-542f-4367-aeeb-37f556c3f971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d53ed2eb-4710-4c7d-a825-952549c5527f",
        "cursor": {
          "ref": "1d4a4c27-53e7-44ef-ba54-4bd389952054",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "37f25fd3-cc3d-428c-92bc-dbb3a280ea05"
        },
        "item": {
          "id": "d53ed2eb-4710-4c7d-a825-952549c5527f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "dc1757ca-8bb5-4f0e-8cea-c4e207f2e63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2643954b-130d-4587-9d61-ffbaab975aaf",
        "cursor": {
          "ref": "b27ac90e-b594-45c4-b3c2-e00ea8e8c9ee",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3f50f8e4-2bbe-49cd-a123-1b79617e64e7"
        },
        "item": {
          "id": "2643954b-130d-4587-9d61-ffbaab975aaf",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7ed637fa-e052-4d80-b560-8b90255f74b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b568d42-95ad-4144-98f1-05e6cb2f90e8",
        "cursor": {
          "ref": "2746aaf3-ff48-4483-b425-61fa7d71464f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c7a71501-aae9-4607-b720-af0efe1c5bb2"
        },
        "item": {
          "id": "7b568d42-95ad-4144-98f1-05e6cb2f90e8",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "41afd49c-15df-4131-8fca-e8ed7d43e3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81706b76-6985-450b-adc0-90f91acd2327",
        "cursor": {
          "ref": "2c6f63a0-5400-4d49-ba5f-a7fd31f599e7",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "7e35d75f-9a23-4881-8a9e-8e45cd3e440a"
        },
        "item": {
          "id": "81706b76-6985-450b-adc0-90f91acd2327",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f7e690a8-6aa9-4325-8a41-d5889bca5153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d92cd3e-3cc8-4ba6-af01-b3a46868ee92",
        "cursor": {
          "ref": "0e275fd8-9fe0-4294-8b04-ec49e4f75ec9",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d5479bd2-e850-4e51-8108-e7bcca16047a"
        },
        "item": {
          "id": "0d92cd3e-3cc8-4ba6-af01-b3a46868ee92",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5cd5b695-2230-4fd5-925b-12da3e296686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8cc05c0-7f01-4b69-bc69-b89465462427",
        "cursor": {
          "ref": "7c8d6d11-24f0-4b5c-866a-0e5748a783d0",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "40cf2153-d345-4079-a520-d55edc45b62d"
        },
        "item": {
          "id": "d8cc05c0-7f01-4b69-bc69-b89465462427",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "3914d4e4-a1a1-43a6-9aa7-a2f130b764d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efabdcc-a0b4-48d0-9642-c598da00f8ba",
        "cursor": {
          "ref": "27be4093-833e-4786-8bdb-a301ef511c1f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "87308649-23e4-4910-883c-0a1e2b0930b4"
        },
        "item": {
          "id": "4efabdcc-a0b4-48d0-9642-c598da00f8ba",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "58bde243-69ce-46db-bfa1-5552c235b28f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409dca6e-52f8-4a63-a5af-3f6cef70d72f",
        "cursor": {
          "ref": "02ef5bb4-ec9f-44fb-ba5d-94edf4595d3f",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "987eff2f-1726-4cce-b5a0-81a7ba04ef44"
        },
        "item": {
          "id": "409dca6e-52f8-4a63-a5af-3f6cef70d72f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2a3f56c5-0dcd-489c-b546-d900beab1a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e3c25e-8483-4bed-9c7a-60f240676f6c",
        "cursor": {
          "ref": "1a974aea-e834-4225-88d8-fe3be79d3bcd",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7efc713f-6582-4b41-9b98-9988e66cd81e"
        },
        "item": {
          "id": "96e3c25e-8483-4bed-9c7a-60f240676f6c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6de5eb91-b82c-4eee-bad2-a03b23592254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343210ac-f422-4ddb-9572-8f534abd3d78",
        "cursor": {
          "ref": "d27429b3-fdfd-44d6-a633-70be385e8eb1",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1914663a-c074-4ab9-97e0-dde10c2a1275"
        },
        "item": {
          "id": "343210ac-f422-4ddb-9572-8f534abd3d78",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d4393ea4-27ff-4b72-895f-48aaa822a81f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc48d740-80aa-4db6-a308-3001b70d4f8b",
        "cursor": {
          "ref": "4d489fa9-87d3-426e-a7a7-8a31e2b2e0d9",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "78b786c9-f355-4ee8-94a7-befe05098e15"
        },
        "item": {
          "id": "cc48d740-80aa-4db6-a308-3001b70d4f8b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5bb3347e-c855-4f83-8bbd-b4b25e0d8d9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b63dc2cc-7a34-40a1-b32a-57ebbfaf61b3",
        "cursor": {
          "ref": "aebda41c-0e6c-4afb-82bb-cb7523c17b3b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3ccd0291-b409-44fb-ae75-3fc294efa34d"
        },
        "item": {
          "id": "b63dc2cc-7a34-40a1-b32a-57ebbfaf61b3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "46688481-6342-417b-95de-7e6566fffa1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77794de0-bccf-43a5-aabb-8bea696e5736",
        "cursor": {
          "ref": "6f1801d9-d48b-46fe-9a93-18ff3c182d94",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c3a511f4-6c84-47c3-a249-93f098536605"
        },
        "item": {
          "id": "77794de0-bccf-43a5-aabb-8bea696e5736",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "7aa735ff-1295-432b-a49e-c8e0326a16fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68f40f9c-f2ba-4abd-b5e9-23cbce0820e8",
        "cursor": {
          "ref": "e2c464c8-3e51-4d20-a16f-6b7cd9c8aec3",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ff92cc7e-98db-4603-b282-672310c35f17"
        },
        "item": {
          "id": "68f40f9c-f2ba-4abd-b5e9-23cbce0820e8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "568f5ada-9242-416c-a8a1-bbe859f25854",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c9ae55-22f0-4e47-adbf-7a5a96de4a1a",
        "cursor": {
          "ref": "743b0a02-f213-414e-93c3-9ae7c99a9295",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a63189c2-fab2-466e-8693-b37da3f8d65e"
        },
        "item": {
          "id": "78c9ae55-22f0-4e47-adbf-7a5a96de4a1a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c2cbeb13-59be-4065-8e77-6ae23d6f9f1a",
          "status": "Created",
          "code": 201,
          "responseTime": 472,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "cb233844-09c9-4c94-9c51-b6d9f3c152a1",
        "cursor": {
          "ref": "91dc588b-8632-4637-b52c-64a420b94cec",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "28b7fbf4-1c96-4af2-bf2e-1299fcf8fe57"
        },
        "item": {
          "id": "cb233844-09c9-4c94-9c51-b6d9f3c152a1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "75e2032c-43fd-4b3b-9ed2-b0ce51ab711d",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1399d06d-0973-4110-979c-bd158e433981",
        "cursor": {
          "ref": "ebd5b267-d586-4961-ba01-fac667c6a1c2",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4f95c16e-a03c-403a-b541-471e7e4be6e8"
        },
        "item": {
          "id": "1399d06d-0973-4110-979c-bd158e433981",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8b792a1a-306f-4176-90f8-6e52c0fcfda9",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a4768d9e-d682-4e9f-a6fb-ecba88c7852d",
        "cursor": {
          "ref": "da31e84c-e600-4f66-a288-58337b9caaa4",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9afb58f1-c533-4771-9859-36796a4b6fdb"
        },
        "item": {
          "id": "a4768d9e-d682-4e9f-a6fb-ecba88c7852d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "8277cb87-586d-4a2d-a39d-3dcdff265bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0982ce74-2537-431a-a692-b8e0746b3bfb",
        "cursor": {
          "ref": "d08ca399-fdbd-4570-9436-b55de2f56412",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "26c9abf5-187a-41e1-ac9b-f97d2ab7f3d5"
        },
        "item": {
          "id": "0982ce74-2537-431a-a692-b8e0746b3bfb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "145d539b-0019-4416-b885-646bc9d11854",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "a3cb80c7-c63a-46aa-83f4-163ddfbc9451",
        "cursor": {
          "ref": "e487b0f8-01f3-4ad5-88df-5b3eb55c7d54",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fc7c6eef-92f3-408a-bac0-0c1e56980bd1"
        },
        "item": {
          "id": "a3cb80c7-c63a-46aa-83f4-163ddfbc9451",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "dbbede2e-e4ea-432b-9952-5cfbd9f6e44f",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "664ab110-d407-4ad5-b98d-d8f3be406c00",
        "cursor": {
          "ref": "acd3c6be-b62b-4065-bbb6-7a61c2489d47",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8200a3ce-36a0-44b2-9129-699c30481601"
        },
        "item": {
          "id": "664ab110-d407-4ad5-b98d-d8f3be406c00",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2f50b4bd-ea08-4ced-8111-096fb7e3397d",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e4c06857-4d9b-42fc-93fc-acce791465f2",
        "cursor": {
          "ref": "d6351cc7-f2b1-44ca-ba3a-b100e1ee9046",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "97d14181-31bd-4056-ab4a-c126d863cc2b"
        },
        "item": {
          "id": "e4c06857-4d9b-42fc-93fc-acce791465f2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8e201c33-cc7e-451b-b283-9c29d6f2c294",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "3b65f143-01a2-47f2-893b-cc2489d67478",
        "cursor": {
          "ref": "0df54cf3-b0f1-49e6-a4f9-e1bf07b35ebc",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "de3c4355-1cf7-448e-8604-513cac5997ee"
        },
        "item": {
          "id": "3b65f143-01a2-47f2-893b-cc2489d67478",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "eaf1c6b7-274d-418e-ba81-676246abb669",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "d7d7b001-0103-49e2-aae2-6585ba11703e",
        "cursor": {
          "ref": "c58e4b4c-fde9-4a67-b08f-ff21772138c9",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b525115a-a07c-4d8b-884d-773294e4dfc9"
        },
        "item": {
          "id": "d7d7b001-0103-49e2-aae2-6585ba11703e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "be16afa6-ebbe-4f42-90d5-531ae1f07dfe",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "567de07c-2fc0-4bfb-9a24-159b96195585",
        "cursor": {
          "ref": "e94f6313-13dc-4ec1-8b8f-ed18ad52cc2d",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4e3d9348-7397-443d-b719-fb0ab1c70ba3"
        },
        "item": {
          "id": "567de07c-2fc0-4bfb-9a24-159b96195585",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3048bd55-9cfd-48a0-9ece-733b5deb224b",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "11cbe098-1cbf-4b6e-b947-733ba5b0f3fd",
        "cursor": {
          "ref": "ce46f564-5523-4e8b-815f-dbc18568731d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a09ad38d-7584-4077-9c43-43ba2174fa1a"
        },
        "item": {
          "id": "11cbe098-1cbf-4b6e-b947-733ba5b0f3fd",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "78a60d86-7bbb-4753-b5a4-44c4aaee4d88",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0651cd8f-9ba0-4544-a4bd-f3643fce437e",
        "cursor": {
          "ref": "6526dfdf-daf9-4ba7-8700-0b45fe8b66cb",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cca7a617-f705-45df-846d-bfe6596f1ec2"
        },
        "item": {
          "id": "0651cd8f-9ba0-4544-a4bd-f3643fce437e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "372f6bcf-6b35-45e7-9600-2d4183fa471c",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d4c8dd39-d8a4-404c-aa12-c48b158044ad",
        "cursor": {
          "ref": "c24e6dd8-9cca-4212-a188-bcc647c679a0",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a2520e81-8271-4056-b7ef-0968b33f9655"
        },
        "item": {
          "id": "d4c8dd39-d8a4-404c-aa12-c48b158044ad",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "90cd31e8-0057-4826-8bf2-52f64a3cfb70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b352d063-e460-41b8-bfbd-fcda8faa53f3",
        "cursor": {
          "ref": "99bce7ff-aa05-4476-887d-89ca043e8977",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cd08a20e-49ef-476d-aea7-c632d1dcaa70"
        },
        "item": {
          "id": "b352d063-e460-41b8-bfbd-fcda8faa53f3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "3ded0ae3-9d15-4fe4-81a4-b0ccc613140a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6397707-f62a-425b-b8f0-8159613a9db2",
        "cursor": {
          "ref": "9b43f76f-38c7-4edf-b2db-bef32b3da9ca",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c08e05c7-c45d-4e7e-9150-3769e9363c83"
        },
        "item": {
          "id": "a6397707-f62a-425b-b8f0-8159613a9db2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8a2889b4-553c-4fe3-96b3-3cea39b3948c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94df4474-0a0a-4658-bf16-e442bd858490",
        "cursor": {
          "ref": "c9a7dd42-befe-40e6-8b9f-5005e51aeef0",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "da57abcf-2825-4639-9621-7c9ee73e4750"
        },
        "item": {
          "id": "94df4474-0a0a-4658-bf16-e442bd858490",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "793dfa22-510c-4bdd-9f33-a49b29d3f13e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fc4cb7-89c0-425c-83e2-ba2abbf53087",
        "cursor": {
          "ref": "893220db-83cb-42f4-b548-efdec20c7a32",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1b6f13b9-cdc6-4e1d-958b-b262094c63d9"
        },
        "item": {
          "id": "d1fc4cb7-89c0-425c-83e2-ba2abbf53087",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a1eb6c62-ea5c-4bf0-a0ff-d7a9b4cf562a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bdd2d11-350b-45d3-8dc7-249e0082a4c9",
        "cursor": {
          "ref": "d01c6c3b-b401-42ba-936c-1c4dd6c878df",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "25a555a9-bf2f-456f-aed1-4275bc908f99"
        },
        "item": {
          "id": "1bdd2d11-350b-45d3-8dc7-249e0082a4c9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c2a23895-e181-48d1-a5c5-1587b625b788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dbb4bc0-adc9-417d-b38f-27f5d30f48e1",
        "cursor": {
          "ref": "5fd4aa3e-47dc-44d3-87e6-6fc410805908",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0b9ac751-00ee-4ca1-bd48-bd39c55a8376"
        },
        "item": {
          "id": "5dbb4bc0-adc9-417d-b38f-27f5d30f48e1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "99b89547-eb3b-4b60-80d4-06e3a74e79dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "752f56a3-93da-4b02-b922-f62ba90a7527",
        "cursor": {
          "ref": "db8b61c9-c777-48bb-af21-7ffaef9da051",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8bc9d5b9-76cb-4679-927b-c0c77a3d532f"
        },
        "item": {
          "id": "752f56a3-93da-4b02-b922-f62ba90a7527",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ca7e6742-e1a1-4709-81ee-14313f1213d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "270fa91c-b130-44b6-baec-48086de31d18",
        "cursor": {
          "ref": "8ef4a63f-0296-4ebc-bd04-1ef1eeb6433c",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "05ee662a-c241-4fdb-a3ea-ffaf3792c885"
        },
        "item": {
          "id": "270fa91c-b130-44b6-baec-48086de31d18",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "09724a73-5c5c-42c7-83a6-ef20b26ef24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185dfe53-f759-4358-8785-4e653d306f93",
        "cursor": {
          "ref": "64e90f97-895a-475e-848b-088588414df5",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1d810d74-7a77-4f8e-a450-aff0180b2d93"
        },
        "item": {
          "id": "185dfe53-f759-4358-8785-4e653d306f93",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e1ff4d7d-1fec-4245-913e-101684b33525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d5cf5b-ab98-4059-9ad4-399a7e47d9da",
        "cursor": {
          "ref": "f8eb387f-fa12-4cbb-9091-704fc493e9e1",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "198972da-13e7-490f-ac46-b67e370a6ebd"
        },
        "item": {
          "id": "c3d5cf5b-ab98-4059-9ad4-399a7e47d9da",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1fb4ba2c-a8ca-411c-9f10-34632b925f87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee3a3a1-ab6e-407a-afaf-3fd5d47e72d4",
        "cursor": {
          "ref": "c226054a-e5b8-40a7-b754-51db36b44a32",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b354c473-4d68-44c2-bd90-639b83ec114c"
        },
        "item": {
          "id": "1ee3a3a1-ab6e-407a-afaf-3fd5d47e72d4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "cb24b1f4-619e-44e4-98ca-c23e152aff3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "890cb301-fef8-4bb3-be76-b0011cbaa33c",
        "cursor": {
          "ref": "20fdad86-f941-4b90-90b4-54160a897fd7",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ee285a0e-c020-4b3e-8652-2eca1c710998"
        },
        "item": {
          "id": "890cb301-fef8-4bb3-be76-b0011cbaa33c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "e4e84ac0-a23d-444b-8d54-dd1b24a1b552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dee0a01f-08b7-4b8e-8ceb-61b7e5fafe2b",
        "cursor": {
          "ref": "672301a9-8211-47f4-a45f-41c0835ea4de",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "55c6200b-92ba-4122-a310-e4792f2f8449"
        },
        "item": {
          "id": "dee0a01f-08b7-4b8e-8ceb-61b7e5fafe2b",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2329f406-ac2c-4994-a9f7-99789ba35e8a",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "451443e1-177f-4945-9845-facf70aafe4a",
        "cursor": {
          "ref": "d43af8b4-3e8e-4a3c-8aaf-76b3a19caa01",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7f184a30-d186-4514-9a0e-e36b670bd5a4"
        },
        "item": {
          "id": "451443e1-177f-4945-9845-facf70aafe4a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "75b6f4af-2de4-4ab9-ac5c-fbb90c265231",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "6ae7004a-699e-412b-a3dc-6d2e91f84f73",
        "cursor": {
          "ref": "3cd62b37-39c0-4e7c-9df0-ee31c1e619f4",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "eb2fe3fa-f274-4561-bee3-334ff3765166"
        },
        "item": {
          "id": "6ae7004a-699e-412b-a3dc-6d2e91f84f73",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1727c6fb-e866-4853-9c8e-cac11bd469d9",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0463fca3-b270-4492-87be-1ceda8251de9",
        "cursor": {
          "ref": "4d513c65-80b1-4741-8a3b-46a3af130417",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9c76e555-f74b-4d8e-b6ec-6cebe040410f"
        },
        "item": {
          "id": "0463fca3-b270-4492-87be-1ceda8251de9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c834e951-b8e8-4984-8b20-32b2117859dc",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "306ffbc4-e696-4d4b-a1b6-db4e3745b20c",
        "cursor": {
          "ref": "8eacbc57-db09-44d6-864e-f4cb244f901b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "39fbdf5b-184f-4a99-b27e-dfc0e4c8ccca"
        },
        "item": {
          "id": "306ffbc4-e696-4d4b-a1b6-db4e3745b20c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1c06a12e-52f2-4e7b-ac1d-0af2fcde976e",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "95bd00d9-acf1-4616-8672-d4b1d712eb2b",
        "cursor": {
          "ref": "bff662f1-3234-4a4d-8d52-6e071ef94acd",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "00d21964-93c5-47a2-b013-9a7ea972bdae"
        },
        "item": {
          "id": "95bd00d9-acf1-4616-8672-d4b1d712eb2b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "795ceab6-7211-47a3-a31c-cb6defd75451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e44db5-dbfc-4d69-b1b1-f8b4e76759ea",
        "cursor": {
          "ref": "7174e073-172c-4d33-971b-c5af8642dea5",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b4ed91b9-48d9-4371-be9d-043b088cc15c"
        },
        "item": {
          "id": "e5e44db5-dbfc-4d69-b1b1-f8b4e76759ea",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "60fda412-3bc9-47fe-b479-9d91b05a0daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fc27137-0c79-422d-a9cf-be9fa7e5a021",
        "cursor": {
          "ref": "b9b26b06-192a-431f-9ccf-6fc69e074d01",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "082e9c4e-6951-4645-9d52-ae760d0fb6e8"
        },
        "item": {
          "id": "6fc27137-0c79-422d-a9cf-be9fa7e5a021",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "781f94c5-40a8-4c0a-9cdd-a6bccb154d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf573105-c6e6-4c34-94f0-0041266f0206",
        "cursor": {
          "ref": "31fbb4fb-9af3-473e-8e58-80e02ba772af",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5582b1be-f416-40ca-803f-6abc3958ca5d"
        },
        "item": {
          "id": "cf573105-c6e6-4c34-94f0-0041266f0206",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ab3820e0-5145-498f-bac6-0903f2e680c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ef2910-ef53-46fb-8207-fc77ef95d872",
        "cursor": {
          "ref": "08368299-9f80-496c-a7af-184d41dfc6d5",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "e72a512a-6f17-4283-9b6b-377580b89eee"
        },
        "item": {
          "id": "91ef2910-ef53-46fb-8207-fc77ef95d872",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "21d1830a-9de3-41b9-86fe-d6f4b9c62407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0996ce-ffb9-42a2-9c5b-7bec5e25a8a2",
        "cursor": {
          "ref": "6cf5fe02-e901-494d-8e7c-fcfb19c85b6d",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "40448542-73ba-4a42-b3d4-4ba424ac98b1"
        },
        "item": {
          "id": "ba0996ce-ffb9-42a2-9c5b-7bec5e25a8a2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4defc724-d8ab-429b-8092-e82794e84291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f23f59-e9fc-4ce0-bd9b-63e5a5fc80f8",
        "cursor": {
          "ref": "cfa69e63-b9d3-4257-a95b-0f5c88e88266",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b8ceb3b5-ad8a-4e55-93ce-32dce82c6eb3"
        },
        "item": {
          "id": "29f23f59-e9fc-4ce0-bd9b-63e5a5fc80f8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "42f49d5d-cc2f-4601-aedc-a80366a084bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe39601-c3da-45ff-9884-70d1b6981850",
        "cursor": {
          "ref": "4c174ee6-f55f-4075-b588-c534bb002b2b",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cabead93-d522-4d4f-b8aa-6993440bb0e2"
        },
        "item": {
          "id": "3fe39601-c3da-45ff-9884-70d1b6981850",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7d96702b-dcc5-4a77-a1c0-bc133cbd3487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9735b07a-b86f-43fc-982f-04683268bb22",
        "cursor": {
          "ref": "0d3f8d65-48ac-4bf4-82d8-74672adb628d",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "622958fb-e87f-4a99-b52a-026ac6f1203f"
        },
        "item": {
          "id": "9735b07a-b86f-43fc-982f-04683268bb22",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f5fc9ec9-2f6a-4861-87f5-98e73eab1446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f794b259-0d31-4538-ad14-e6c53a6cb2c9",
        "cursor": {
          "ref": "deecf7c2-1b3c-43ac-81fa-d2260d10f720",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "913dcd6c-1a7f-42e3-8b6d-08b69cb6d799"
        },
        "item": {
          "id": "f794b259-0d31-4538-ad14-e6c53a6cb2c9",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "660858ac-543c-427f-9ac2-d2b4aaa79324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54f280ae-1654-42da-a9ea-abfc7738db48",
        "cursor": {
          "ref": "e5023a6d-c96a-4597-936a-36f9f5e3199d",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "73e49511-d083-4678-b3ae-4a13750b44a9"
        },
        "item": {
          "id": "54f280ae-1654-42da-a9ea-abfc7738db48",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d10ec5b6-5542-44ac-a3df-71df6ffff08d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fbcee7-8fd9-436b-a2e2-960736730e66",
        "cursor": {
          "ref": "bca6191d-4ca7-46ae-aad4-1d0ecb443ef4",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "99ea4bd4-c266-439c-8534-902a59fda100"
        },
        "item": {
          "id": "04fbcee7-8fd9-436b-a2e2-960736730e66",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "63b4f729-874d-493c-9d9d-ff2cf31880c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5dbf18-6979-4616-a9c4-bd1a3b1a84bf",
        "cursor": {
          "ref": "1c443e70-4ddf-4175-8c98-0a40c2ea6557",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4c4d15f2-2f6e-452b-9677-68e35c76a63d"
        },
        "item": {
          "id": "0f5dbf18-6979-4616-a9c4-bd1a3b1a84bf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "80cb0f5e-6fab-4096-8d27-cab786c9f3b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90f2157-1c1b-4c61-b445-c2eb23e6d757",
        "cursor": {
          "ref": "8d13aa83-4857-40a4-a123-a69c1077463d",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "15a4a11f-06bf-4b97-abfe-43dd28710642"
        },
        "item": {
          "id": "f90f2157-1c1b-4c61-b445-c2eb23e6d757",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "98724e7a-5917-4020-98d7-68c6aff525b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32abef5b-de94-4199-9534-8ffe9e18527d",
        "cursor": {
          "ref": "969a50d6-09b2-4dcb-b467-6eb09e19d2b5",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d6257d26-9a12-45f2-aae9-d2f63901d696"
        },
        "item": {
          "id": "32abef5b-de94-4199-9534-8ffe9e18527d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "72cbab24-fea4-4582-9af5-0a7653c73cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aea1001-36a7-4435-a6b5-62365b08ef03",
        "cursor": {
          "ref": "e88e5ba6-c60b-49df-85de-017f6ebbf54d",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "8ee1f885-0896-4ac7-847b-35cf5421fec6"
        },
        "item": {
          "id": "0aea1001-36a7-4435-a6b5-62365b08ef03",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7c923d19-6d29-40b5-9744-10a960b50e90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dcf8d8d-ee9e-432c-904d-22ff8def6904",
        "cursor": {
          "ref": "b480560d-178d-4c8c-9594-c5ce6bf3edc8",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8a564e4b-6c1a-4c87-832d-fb5c3b696548"
        },
        "item": {
          "id": "8dcf8d8d-ee9e-432c-904d-22ff8def6904",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "8d95c450-b144-4c3a-9aad-ea0a4f941288",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b85114-4f34-4414-9c2c-3871b0114c68",
        "cursor": {
          "ref": "60937306-0d8d-41d7-b3a8-1a5b703164fe",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "527da5a4-9977-434c-96b2-c5d5ebdd74d7"
        },
        "item": {
          "id": "05b85114-4f34-4414-9c2c-3871b0114c68",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4d52a04b-d32a-4584-ae85-4d90c6b84b06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5ea15c-b849-48ef-9d69-070bcbb39527",
        "cursor": {
          "ref": "1553b073-c064-440c-93f8-7600b384468f",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "f990aa3c-f572-421d-8a08-cc6bd6bd6252"
        },
        "item": {
          "id": "7c5ea15c-b849-48ef-9d69-070bcbb39527",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4ef99682-2619-4b4d-acd8-8dcbfab0f879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "defd5e4a-b9f2-424b-9ea0-5ca65650353b",
        "cursor": {
          "ref": "95712791-b312-4c2b-826c-e99e44ba220e",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d469dbed-0f74-4fcb-ac81-24321b0c5a20"
        },
        "item": {
          "id": "defd5e4a-b9f2-424b-9ea0-5ca65650353b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d239a04e-9e26-49d7-b016-cb6ef54de279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ffc832-da7c-4fb2-88f7-29072230ab17",
        "cursor": {
          "ref": "2bf73bbb-2d99-481c-9c82-b38d24cccf8c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "37066eac-b980-42ce-8927-abf7aaaf5d47"
        },
        "item": {
          "id": "15ffc832-da7c-4fb2-88f7-29072230ab17",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "67bf9c37-2b67-4086-b3f9-a21efa87129c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe74a703-b19e-4f2f-90af-53016016f656",
        "cursor": {
          "ref": "c66c7afe-ce0c-4ba4-99eb-8d989be736b1",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6da00ed4-e9da-41c1-91fc-d94a3d3ff637"
        },
        "item": {
          "id": "fe74a703-b19e-4f2f-90af-53016016f656",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "51c97fd9-d165-4d80-be9a-c84cafa6b3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fce82b1-eff7-4f03-a7b5-9c630ddf229c",
        "cursor": {
          "ref": "00067476-4b8f-47fd-9356-c8b7a63763dd",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "134dde58-9b86-45b5-859e-73b689e0eb0d"
        },
        "item": {
          "id": "8fce82b1-eff7-4f03-a7b5-9c630ddf229c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "92c49c9a-1f0f-4546-b817-89e89aab8a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f80e0593-4996-481e-a630-7b6f1b0bad17",
        "cursor": {
          "ref": "845532d6-101f-4f5a-b0fc-a9003dd1d8ba",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "32d562a3-1898-4adb-a1b0-108a3549695f"
        },
        "item": {
          "id": "f80e0593-4996-481e-a630-7b6f1b0bad17",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a5ecb754-fec4-4af1-8b39-b940752fd327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695cba14-de72-4abe-b6c6-654194542b32",
        "cursor": {
          "ref": "d4270d2f-a969-481a-93bd-429801c4f5e8",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cc512600-9961-4084-8db6-ef59e0f77e87"
        },
        "item": {
          "id": "695cba14-de72-4abe-b6c6-654194542b32",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3586dbdd-d5be-4d52-9bef-3ee82e2bef99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7f55e8-251b-4928-b971-1d424192f39d",
        "cursor": {
          "ref": "eaf524e7-0c87-49e2-8964-a27f86824985",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "13d8db90-cb80-4b0e-86c4-3082ef562685"
        },
        "item": {
          "id": "1b7f55e8-251b-4928-b971-1d424192f39d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7f370c23-4505-4f2b-ba69-112ddfef567e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49b8f98-067d-4a91-890b-a5af5bbbe837",
        "cursor": {
          "ref": "e46ccb1d-0e3a-4b58-9fe7-25501b1b530a",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "18470d92-56be-41eb-812c-3b8cba9a274a"
        },
        "item": {
          "id": "a49b8f98-067d-4a91-890b-a5af5bbbe837",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "880a3a67-e2e4-4296-a15b-403b807dbe6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6902fa0b-5cc4-4dbb-8b3f-f15e6c0abbe4",
        "cursor": {
          "ref": "f24fb7dc-92a6-47dd-aaa8-bc617c96882c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c215b8fc-e85f-45df-b69b-24bb038e9384"
        },
        "item": {
          "id": "6902fa0b-5cc4-4dbb-8b3f-f15e6c0abbe4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b9b2106a-55a3-4a84-a114-dc4180c9af55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37a38ea-c746-411b-9a89-5d79706d629e",
        "cursor": {
          "ref": "430ccd2a-394e-485c-b49a-4ca1a724b7aa",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c92ee56e-f214-405c-bd84-c9ae2fdee15c"
        },
        "item": {
          "id": "c37a38ea-c746-411b-9a89-5d79706d629e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "dded5a3d-4b85-4868-9f2b-c62f24caabdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afb1069-4f9e-4697-b2e3-c91a16bb7134",
        "cursor": {
          "ref": "387adf8e-d8e0-4e18-9e96-5204fdf0aa61",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1132ac49-e68a-4681-ba0f-86080299e7e5"
        },
        "item": {
          "id": "3afb1069-4f9e-4697-b2e3-c91a16bb7134",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "27e657a9-6a42-409a-a3dc-abfaa0f05da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb86031-5f65-4622-9522-aa2ad2bc2310",
        "cursor": {
          "ref": "05d4b98d-6ef4-4e7f-ac47-042aaee2c509",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "372bbc64-97e2-4909-8160-d011dcc6db5b"
        },
        "item": {
          "id": "7bb86031-5f65-4622-9522-aa2ad2bc2310",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "851786ad-5098-4089-8d8c-9670f14049a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285e0666-461b-4a6a-8538-ee65dd02f76e",
        "cursor": {
          "ref": "22c6f34c-94f8-4997-ae6e-ed7bea2f5288",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8deb26b3-8c43-4a4d-90b9-704a25b72c31"
        },
        "item": {
          "id": "285e0666-461b-4a6a-8538-ee65dd02f76e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "17b0cd3e-ef6f-49ac-8fce-9110b4f6d41a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab18f4c2-d8fe-47fb-ad80-70e40f385860",
        "cursor": {
          "ref": "49e4d535-9c9a-462e-9ac5-3f987714f04d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "baf2eb7d-35ab-4cd0-8e80-9c876040f294"
        },
        "item": {
          "id": "ab18f4c2-d8fe-47fb-ad80-70e40f385860",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "47ec21cb-c338-422a-b052-b63c661df041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ddc715d9-9d62-4d5d-977a-756e200bf218",
        "cursor": {
          "ref": "e6166c15-98d5-46d4-9644-9ac60e96b5ab",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "99129fbb-9187-480e-b8d6-dbdc67963895"
        },
        "item": {
          "id": "ddc715d9-9d62-4d5d-977a-756e200bf218",
          "name": "credentials_issue"
        },
        "response": {
          "id": "67444533-7c78-4cd8-a75d-e7c1df7e98a6",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "4778d6f6-1db2-4716-91c7-a11f2985a4f1",
        "cursor": {
          "ref": "6f552307-2572-4d2a-bdbe-ac1f49c07a86",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a0d03165-7d1f-4e69-a098-9b60cd91f549"
        },
        "item": {
          "id": "4778d6f6-1db2-4716-91c7-a11f2985a4f1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "2e95dd4c-2cc9-4d50-8441-2eafdda6b134",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b6bc15-0d37-47ed-ab14-57e2aa1503c3",
        "cursor": {
          "ref": "b1a839c2-5edd-4e11-873b-cf2236ad4e41",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e91fe538-9264-4ed2-b4ab-831870e46a35"
        },
        "item": {
          "id": "47b6bc15-0d37-47ed-ab14-57e2aa1503c3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "b37a038c-b982-4518-8fd0-6a913bb001e1",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "790970a5-79db-4155-a014-a0f81273a923",
        "cursor": {
          "ref": "0d031180-14c2-4e80-b3ad-c7c5d5f8c24b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "fc0a6bc9-dc87-4dee-9e25-023e432f3298"
        },
        "item": {
          "id": "790970a5-79db-4155-a014-a0f81273a923",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "49e3abdc-fe6a-4887-a0f9-5ae1e490ae8e",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbda39c5-9721-4a0c-b349-3a9e3f50d636",
        "cursor": {
          "ref": "835b9e1e-8489-4153-9a08-686fb3cffb57",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0e4f6bd5-1a86-4bcf-bd76-bf493b345ed3"
        },
        "item": {
          "id": "fbda39c5-9721-4a0c-b349-3a9e3f50d636",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "273c5eed-c7d1-4771-a137-ba02ccf69242",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-30T00:36:06.236Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-30T00:36:06.236Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "0b33fb6d-ffd0-441a-aebf-a2c45f87880e",
        "cursor": {
          "ref": "867aabe4-14cb-41cb-8572-69a8458f6fa5",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "90197685-fb36-44b7-a5b6-12d9e7a00d5c"
        },
        "item": {
          "id": "0b33fb6d-ffd0-441a-aebf-a2c45f87880e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8ca2a5b5-8f89-4b37-8d6f-801922e71b9b",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dfdcc9-1e55-4598-b840-7863a7cb7a71",
        "cursor": {
          "ref": "70a65f4a-894d-4bd2-82a9-6ba5e6a01880",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9c3e2df0-312c-4da9-9cc6-b824a5eef57d"
        },
        "item": {
          "id": "09dfdcc9-1e55-4598-b840-7863a7cb7a71",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3af0bb13-9cca-43c9-84f9-0e24570b87f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ebbcc0-4a23-49ff-b91c-44cd410b42c6",
        "cursor": {
          "ref": "3124c5cb-46a5-404c-9beb-d9707ec1ad5d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "57ea40ae-ac9f-4f00-bfa3-fde43f06cfd3"
        },
        "item": {
          "id": "b4ebbcc0-4a23-49ff-b91c-44cd410b42c6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bf7deb85-bf55-4873-836f-6946550df724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4d50bf1-82dc-48f2-bbde-0c9352ad7652",
        "cursor": {
          "ref": "64892f92-fb0d-47af-8531-154656bbef53",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "10a2e1d7-22f1-4c98-bfc6-4bf7eae4f344"
        },
        "item": {
          "id": "a4d50bf1-82dc-48f2-bbde-0c9352ad7652",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9230460b-7372-4a8a-8e7b-3e1428ce1b46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c914eb3-27b5-4022-8b58-838d71c66811",
        "cursor": {
          "ref": "0c60d212-1f3e-4b6f-9172-3a7de0b039cd",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "1bb2e778-bf16-48ee-ba29-9bf00ac39dd7"
        },
        "item": {
          "id": "5c914eb3-27b5-4022-8b58-838d71c66811",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a51146db-e643-4e1c-bdb2-42263e694e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c44c51-e6cc-4638-836a-d5c87f567832",
        "cursor": {
          "ref": "0fbb3486-2239-4f71-a770-8988fc0b8f17",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "98f2b5a7-a95d-4e60-b179-dd705277f528"
        },
        "item": {
          "id": "b8c44c51-e6cc-4638-836a-d5c87f567832",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6575a13d-9300-4b86-ac72-d2ba5fea96a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b13c560-1a30-4ed2-8a67-cab7fa00d623",
        "cursor": {
          "ref": "eb840b23-d081-4578-8e5e-d3a4bb47bd70",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d8b05f1d-5d96-4a86-a65e-f904a719ae2e"
        },
        "item": {
          "id": "8b13c560-1a30-4ed2-8a67-cab7fa00d623",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eeb860f7-ac11-4f3f-9fd4-0c420469257e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa50502b-d2e0-48ca-8a6c-89423de4cd23",
        "cursor": {
          "ref": "13659d5d-db9b-471c-b8e9-676f99c0afd6",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4aba784b-ef49-4b7d-b758-53682d6eb87e"
        },
        "item": {
          "id": "aa50502b-d2e0-48ca-8a6c-89423de4cd23",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1921385c-aa63-4cf3-890b-bdb5b65ced1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf3bd605-2535-4601-8ded-4c83d1dcd990",
        "cursor": {
          "ref": "d843a5e1-b365-4037-bd37-0237b0be384f",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "0416e906-1c26-4ffb-aaec-8664cb53780b"
        },
        "item": {
          "id": "bf3bd605-2535-4601-8ded-4c83d1dcd990",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1446b4e0-2c59-46d1-aa83-d193567570a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2781be9f-c3c9-476e-b615-085db77198d3",
        "cursor": {
          "ref": "7597dd51-7218-40e7-a307-4f0c85579afb",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7f08210e-e1a0-4568-9fc4-c3193e01c49f"
        },
        "item": {
          "id": "2781be9f-c3c9-476e-b615-085db77198d3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dcaf1fbd-ba84-44c8-98d4-52497be1d5d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b832bafa-d4ea-4313-8718-38770bf8e7ac",
        "cursor": {
          "ref": "dab64575-8ca3-406f-baf0-05ae6b4b7cf9",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a0d53e84-8073-4f54-97ad-997767f268a4"
        },
        "item": {
          "id": "b832bafa-d4ea-4313-8718-38770bf8e7ac",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "fb542088-99ed-4dbb-9af1-8cd87969f183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9218331-33f2-4be6-9bdd-026583e03328",
        "cursor": {
          "ref": "2b08496d-12f8-42ff-a0dd-1fffe2bd426c",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fdc677ad-b041-4810-9c4c-5146163c67e0"
        },
        "item": {
          "id": "d9218331-33f2-4be6-9bdd-026583e03328",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "107edcc7-a1e7-4b94-97c0-0a3cd4b6af69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf8cd80-25bc-4284-bef8-1a953d5b5723",
        "cursor": {
          "ref": "3f76ef27-a2ca-444a-8bf5-043d47a3f56b",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b700ea40-e36d-4089-aeba-dc1b1f04a726"
        },
        "item": {
          "id": "8bf8cd80-25bc-4284-bef8-1a953d5b5723",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8ed81f6d-0702-4cb9-8ab3-dda8ca4cf22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd0dd7c-ed71-4883-933d-f21af09912c5",
        "cursor": {
          "ref": "a85c5909-ff98-4b39-866e-76f51a473242",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "7b550ed7-ee8a-45f1-b0e6-fd8142cf9924"
        },
        "item": {
          "id": "5cd0dd7c-ed71-4883-933d-f21af09912c5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "48da791f-afa7-492f-a7be-a33531d63497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fdb888-b73b-480b-8483-3f885a8966ac",
        "cursor": {
          "ref": "1ebbb539-90b3-4f18-9a8e-26e515282cfe",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "f9ba31f7-906c-4eec-94fd-6d5e33dad6c4"
        },
        "item": {
          "id": "97fdb888-b73b-480b-8483-3f885a8966ac",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f1c556ae-cfd4-415e-913f-aebf04fe6e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93369c20-b7d1-437e-a5a6-eac11204b26a",
        "cursor": {
          "ref": "b2480ebf-a25f-4903-8ac2-fd2834336b0f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d7fa6d0a-d027-4b0d-b7a6-465b6774ec32"
        },
        "item": {
          "id": "93369c20-b7d1-437e-a5a6-eac11204b26a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b5fa7594-7768-4688-861b-3cdfc8785c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f363928-d941-4dfe-b375-cf890448ac1e",
        "cursor": {
          "ref": "da349a10-669a-4430-9500-ac6ea01a5fe3",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a3145578-3e3a-47c1-aea9-ab22d9820517"
        },
        "item": {
          "id": "6f363928-d941-4dfe-b375-cf890448ac1e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d6b738e6-ed7b-453d-9d56-b02a5ce3c095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686f39bb-a609-474d-9f18-12bdab31c841",
        "cursor": {
          "ref": "0795c5a7-ce77-4396-a3db-85109d14def3",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "190b3c25-d338-4f45-8ce1-714504d94c67"
        },
        "item": {
          "id": "686f39bb-a609-474d-9f18-12bdab31c841",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "993e726d-0dee-4a42-9564-73905612f3b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8708bc9-9b11-43d3-aa0c-b1c3989475ba",
        "cursor": {
          "ref": "e5462926-2ee9-4690-8232-8b9e344a581a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b4aa43ef-1af4-4197-83d2-e346fd891d2a"
        },
        "item": {
          "id": "a8708bc9-9b11-43d3-aa0c-b1c3989475ba",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f49fe576-40bd-4089-bdc5-bb2db13bc300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34bd4f89-31e6-46fa-b30e-a7938043e5a9",
        "cursor": {
          "ref": "6ba2c530-4e64-4983-9cf0-beb787a03313",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e295ee4e-fc0d-4bc6-a4df-1697ed8b4b4d"
        },
        "item": {
          "id": "34bd4f89-31e6-46fa-b30e-a7938043e5a9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "68e65645-f110-4537-a6ab-fafe4eeb1b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a647948-aad3-4f7c-8be8-9c4a84171fb7",
        "cursor": {
          "ref": "51731c73-9317-4cc1-a9d6-c1e5e2deeb07",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ded07075-deb2-4c36-a295-3e80b3f631e4"
        },
        "item": {
          "id": "2a647948-aad3-4f7c-8be8-9c4a84171fb7",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "38fc0c61-ab97-4927-81ae-f8b7d24cff92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278e052d-fcfa-455b-8668-f0132437182a",
        "cursor": {
          "ref": "001dbce8-d6bf-45dd-89ca-ef0d3ca8408d",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "8ebc895c-cc1b-430a-acb6-641c48344dec"
        },
        "item": {
          "id": "278e052d-fcfa-455b-8668-f0132437182a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8ab8de07-8bdc-4c09-bc74-418f5af382ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfc9180-91cf-41d2-9e33-eaf075e3c2af",
        "cursor": {
          "ref": "c4522065-ba74-4aa4-ab75-2cb842499e61",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "031997fe-2735-4cc9-b14f-a5da7209f9ca"
        },
        "item": {
          "id": "dbfc9180-91cf-41d2-9e33-eaf075e3c2af",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f08aa435-826a-4b36-a492-e316627836ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a527dfe-998d-4985-846b-efeb4f62d0ae",
        "cursor": {
          "ref": "5533e159-21ce-41f7-94a9-93a02a6207b9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a56f1936-2248-4585-9fa6-056ed6f7ebc8"
        },
        "item": {
          "id": "5a527dfe-998d-4985-846b-efeb4f62d0ae",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2032d4f1-50e0-4c5f-b81a-97069d050b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b949cd94-c6c1-4298-8388-c104d85e15a5",
        "cursor": {
          "ref": "7f25a825-1820-49d5-88f3-9f4bd1e66e93",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3c1e65c7-bab3-4820-b616-a49bdff60e65"
        },
        "item": {
          "id": "b949cd94-c6c1-4298-8388-c104d85e15a5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ad012802-01b8-49fd-8181-9a33d35597c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8375f2ea-a7b7-47d4-a054-acd42f37bb88",
        "cursor": {
          "ref": "53d90530-e3c8-42dd-b64e-7a4af06615f4",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b1324bae-eec5-4a41-be37-71131ddfb431"
        },
        "item": {
          "id": "8375f2ea-a7b7-47d4-a054-acd42f37bb88",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "209e78ac-cad0-407a-9f9f-43284ed51430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e07abe-fe6b-4089-a37d-44f4dbe11a45",
        "cursor": {
          "ref": "a4bdc9e8-e55b-47a7-a14a-759a5b49dc73",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "70274796-046e-4fb1-ab89-6102df092c74"
        },
        "item": {
          "id": "37e07abe-fe6b-4089-a37d-44f4dbe11a45",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6a3e73a5-1b83-4b9c-8238-066c0d682dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20f7dd3-2d2e-49c2-a03b-0b6cf5dde5c1",
        "cursor": {
          "ref": "04aed516-4b75-4759-a372-91d780376d29",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c90536be-2ab0-461d-b728-337a5d95675a"
        },
        "item": {
          "id": "e20f7dd3-2d2e-49c2-a03b-0b6cf5dde5c1",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7be6bffd-8b24-40c8-b0bc-1aa91a68d5a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959b5795-ad0d-46fd-be41-c6d7ad9cccd1",
        "cursor": {
          "ref": "cbef4d94-d693-480f-baf5-97200f6a4cd0",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e8ef38ea-8f7f-46e7-b9d6-ac2693f2bd24"
        },
        "item": {
          "id": "959b5795-ad0d-46fd-be41-c6d7ad9cccd1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "527dc721-5723-4fc6-91ae-0ccb458c4829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6211641b-511e-477f-a451-feab883800b3",
        "cursor": {
          "ref": "f8703614-8ce8-47c8-9a82-ab2ae94b12d2",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "dcd98be0-4674-4e17-961a-e1a6d68f3dfc"
        },
        "item": {
          "id": "6211641b-511e-477f-a451-feab883800b3",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "902ea026-d8f5-4ed5-89c7-abb8e3eceff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198284e2-99df-43c6-963b-b08cd11fb8dc",
        "cursor": {
          "ref": "5550bfff-6f4a-49f0-b6f3-7490f85cb3a1",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "740a0862-f99f-4f77-ae7b-ce41a35da814"
        },
        "item": {
          "id": "198284e2-99df-43c6-963b-b08cd11fb8dc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7c0347b9-38f1-4e0f-a85b-ffc8faa52f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e290ba3-7a9c-4a8d-9203-0ffeb4c3c3bf",
        "cursor": {
          "ref": "caae3239-8e11-4149-9935-c1ee01a37968",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "9f2835e6-4a1c-48b4-9841-1fe8eecb19df"
        },
        "item": {
          "id": "8e290ba3-7a9c-4a8d-9203-0ffeb4c3c3bf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "348b247e-9349-42de-b8cd-c30668d692b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76722a47-eed0-4c3b-be57-709afe51a6c6",
        "cursor": {
          "ref": "c444c0f6-52ce-44ec-a959-c5b81a8f1024",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8bd0d905-0e0d-4fe2-ad68-bb7c8f0e4959"
        },
        "item": {
          "id": "76722a47-eed0-4c3b-be57-709afe51a6c6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d17ac2e2-e30e-4bd9-8688-65ad54c1d3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12738331-5634-4a35-a9d6-5653fc8b8841",
        "cursor": {
          "ref": "b5b312bc-ed1a-4cc5-8fad-1b712b5be4a5",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1d806604-97ea-4874-8d85-4a1f74cf750a"
        },
        "item": {
          "id": "12738331-5634-4a35-a9d6-5653fc8b8841",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "577fc594-71c8-46d6-8394-d7516ce017a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f59b5e8-9f04-43c2-a8d2-cdd6f7469d22",
        "cursor": {
          "ref": "39fb4c67-d1a3-4471-bcee-e71c0721a3d1",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5ad9e9e6-e47c-42af-9fc1-2ff710292022"
        },
        "item": {
          "id": "3f59b5e8-9f04-43c2-a8d2-cdd6f7469d22",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e8644114-c6ed-4fda-a4d5-e16c6fba063f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4614193-e3d6-433e-9b02-ae58a6f2685f",
        "cursor": {
          "ref": "f6e2cfd0-f6b8-444d-af4c-ccb9ce58e9e7",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "61bc2248-cd0e-4319-a12c-4b99c3809028"
        },
        "item": {
          "id": "c4614193-e3d6-433e-9b02-ae58a6f2685f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "9a7abb62-8dca-4e02-90f8-d544db35288b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd51b09-88d2-4510-a0b0-d6f731fe3446",
        "cursor": {
          "ref": "140b28cb-3582-4834-822f-f18432ba8fa8",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "1f1be883-7e7f-42bf-ac21-dbb0eb964020"
        },
        "item": {
          "id": "ebd51b09-88d2-4510-a0b0-d6f731fe3446",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cb190676-c68f-466d-81a8-b8ac568e8b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe29aa54-f4d2-438e-94e2-5c1845488471",
        "cursor": {
          "ref": "22572cac-9c32-45fd-9d4f-663ed4e914d9",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d033ae60-13d1-47c0-8fc0-425b421889a4"
        },
        "item": {
          "id": "fe29aa54-f4d2-438e-94e2-5c1845488471",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "96961557-9692-4c55-b14c-28ddc85742ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed60c44-67bd-40b3-bddd-5c7735eaa81c",
        "cursor": {
          "ref": "35397dd3-a1e8-44f1-a070-8437786d40fa",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c3bbfa0c-d83a-471a-92a0-b0ee4c069fad"
        },
        "item": {
          "id": "aed60c44-67bd-40b3-bddd-5c7735eaa81c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f69ad3c5-d766-4886-a17e-90f2013a3179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d479d58c-a4d6-403a-a092-e0261c700591",
        "cursor": {
          "ref": "8aeeca86-e886-4231-956e-5c1ac1804e03",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "21dfb3f7-2ae9-4723-9fc0-704c4471a6d6"
        },
        "item": {
          "id": "d479d58c-a4d6-403a-a092-e0261c700591",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8cbc9e79-365c-4394-9ef1-9d241ecb23b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c0f6179-772b-4954-b40b-5f7802848b85",
        "cursor": {
          "ref": "4174a7da-cb8c-4ca2-bf76-35cbdf835b37",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a7d76c3d-1b73-4348-9494-ea40493ac07c"
        },
        "item": {
          "id": "8c0f6179-772b-4954-b40b-5f7802848b85",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "77f50156-a05a-447c-a8ab-aa8defe2d847",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22789b2-04fe-4134-8e66-b4c78b036f7a",
        "cursor": {
          "ref": "211dce87-092b-4ee7-a7f0-54436428388c",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f66f4e9f-ef13-4a46-95bf-3f5e9f954c13"
        },
        "item": {
          "id": "b22789b2-04fe-4134-8e66-b4c78b036f7a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "036bb84d-6294-4f3a-899c-fcc764b32808",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11d01d0-e569-4192-8518-25dccaf1d46f",
        "cursor": {
          "ref": "e938453c-f8e2-43c0-95b1-952689aaecaa",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "5ff5f3b8-707a-4186-96eb-9b82c20f95be"
        },
        "item": {
          "id": "e11d01d0-e569-4192-8518-25dccaf1d46f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8757cf92-74c1-4fd0-bfe6-b614da09e2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aacec10d-bfb3-48d8-a5ef-b763313729aa",
        "cursor": {
          "ref": "69075dd9-2fa9-44d1-9711-8cda40366c83",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a1923b0f-2fc9-4834-a839-4f4bec251d5f"
        },
        "item": {
          "id": "aacec10d-bfb3-48d8-a5ef-b763313729aa",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "14b92901-7b8b-45d0-8dd1-afedc8cd5c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34b8405c-1c29-43f4-adc9-c576108f9846",
        "cursor": {
          "ref": "5c98b84b-16cd-4764-963d-38b97c7c9be3",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "ba562286-fc94-4059-8251-6c44e574b396"
        },
        "item": {
          "id": "34b8405c-1c29-43f4-adc9-c576108f9846",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "014a4a31-4dae-41ec-be84-5db899896ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b874c4f0-a7c0-4844-b68e-584a69fdd1b9",
        "cursor": {
          "ref": "b194c90e-67f2-484b-8d86-248708c78282",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2018a522-5ab6-4a61-87c0-73dddd6cd7e1"
        },
        "item": {
          "id": "b874c4f0-a7c0-4844-b68e-584a69fdd1b9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "53cfa66b-b75a-49ac-81e6-72095032a462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef03fe9-3a60-4911-a1a9-1f3ad3e10ab9",
        "cursor": {
          "ref": "4075e296-9d43-4b4d-9de5-42bce20d185d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9373d55c-9228-46ef-adc9-b840895b1e23"
        },
        "item": {
          "id": "aef03fe9-3a60-4911-a1a9-1f3ad3e10ab9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "06930bc1-efda-4fe0-8ef9-eebb591116bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e69159de-26af-47e3-a63d-0b53644813f8",
        "cursor": {
          "ref": "61d838cc-d9ae-4ae6-b90a-c4f77309b936",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a6a075e1-f9ed-4037-877a-e39255b75c80"
        },
        "item": {
          "id": "e69159de-26af-47e3-a63d-0b53644813f8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "8ca1b595-dd70-4c2b-b7b3-8d0d55baeebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cde69a6-7577-4e97-9f10-34bc648b2f6a",
        "cursor": {
          "ref": "0b97ff61-62b9-4ed2-b4ff-fa6814c5ffed",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0e4131e7-2ea9-4347-92c4-6eabea1a286f"
        },
        "item": {
          "id": "0cde69a6-7577-4e97-9f10-34bc648b2f6a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4506969f-7abf-4ba8-b8e4-1cbc637b1e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6df14f-787b-4748-a205-ae1c226e0f6c",
        "cursor": {
          "ref": "88c0356a-1cf0-42a2-83ec-9ba1bd23c1fd",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "01838d29-d29c-4d8f-8371-0273358954b2"
        },
        "item": {
          "id": "2e6df14f-787b-4748-a205-ae1c226e0f6c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "95672336-34b7-4505-af48-b9b59a346d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76632339-fd16-476a-a228-8072a4189466",
        "cursor": {
          "ref": "06fb6d1d-0d00-40d7-88fe-6d5190eab666",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "82090120-513e-4316-aac4-e29527d030a8"
        },
        "item": {
          "id": "76632339-fd16-476a-a228-8072a4189466",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f0d5712b-e0ff-4491-9c6c-f13dfaccf681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147d3649-a0b3-48cf-a285-4876da70a97c",
        "cursor": {
          "ref": "dc91ebd7-6f5d-4aa7-98d4-f60bd8ed72b2",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "97416287-55a5-4105-a405-980400df5696"
        },
        "item": {
          "id": "147d3649-a0b3-48cf-a285-4876da70a97c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ab5bb6bb-12ee-45a9-bda7-d7a30c8a84a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d28b4517-12bd-426c-8944-f73e2cdfcb8b",
        "cursor": {
          "ref": "85eef619-ac89-4d98-a6ff-4911de291c7a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1753e3f3-57a0-4b23-badf-89f375f2d4f2"
        },
        "item": {
          "id": "d28b4517-12bd-426c-8944-f73e2cdfcb8b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f0bed261-eccb-4a9f-81e6-d132b6e86919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b694e40-bed0-4d93-b513-2bc156e09f38",
        "cursor": {
          "ref": "969491a6-37e8-405f-a280-c8fbad8f102e",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "79e012cc-bf4a-459a-8e83-1143d92f98d2"
        },
        "item": {
          "id": "8b694e40-bed0-4d93-b513-2bc156e09f38",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e295d225-e09e-4724-8ad3-8a22fbe8af69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d10abad-e57b-456e-b775-f232bbe9029b",
        "cursor": {
          "ref": "8f6cb3e3-27ce-4d97-9d37-116ff449389c",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0df63d47-7ebd-4276-9681-d5381d1906c6"
        },
        "item": {
          "id": "1d10abad-e57b-456e-b775-f232bbe9029b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2d85f821-0a16-469f-9066-229a4573f1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c4ef69-b132-47f3-8c8e-f95efbbd6a39",
        "cursor": {
          "ref": "ef67fd85-756e-4b5f-a936-6104653e378a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f6ac3271-8368-4652-8afb-becfe5ca6253"
        },
        "item": {
          "id": "39c4ef69-b132-47f3-8c8e-f95efbbd6a39",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4e9a0c25-b599-4007-8675-ed8b19a1498a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40550c8f-fe4d-4b36-9f72-6c0e3e424427",
        "cursor": {
          "ref": "dcfbde2b-5def-4e2f-b40b-1639216629c2",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3204427a-2966-44b8-aaf2-271fa2d77650"
        },
        "item": {
          "id": "40550c8f-fe4d-4b36-9f72-6c0e3e424427",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6c4a893b-834d-4073-ab8c-4d0ac1af7e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ca5af0-e762-4c6c-aac1-31200c3902ee",
        "cursor": {
          "ref": "aff7fd4e-71e2-4daf-a628-9c65ac63a3b1",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8528c0ae-6dda-45a9-8760-66b414c97864"
        },
        "item": {
          "id": "f2ca5af0-e762-4c6c-aac1-31200c3902ee",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "3920b47d-daed-4871-896d-9aca93c629b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d8d2dd-6211-432a-8f44-badf416e5508",
        "cursor": {
          "ref": "cca8f420-c7a7-4ace-b2e4-d77a316b8f21",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f3657142-5077-4fd5-a606-0988b8570e5a"
        },
        "item": {
          "id": "b2d8d2dd-6211-432a-8f44-badf416e5508",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "0cb38618-9cdb-48c1-8a23-5f4e5c98473d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e1377a-a2d5-4460-87d1-2fcf28af16e9",
        "cursor": {
          "ref": "53859896-c954-4e79-8339-1c43396b6805",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0700469f-2f17-415b-8e01-0239427c517f"
        },
        "item": {
          "id": "c0e1377a-a2d5-4460-87d1-2fcf28af16e9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "1ec53355-166b-4e3c-8325-8627afd31f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf3c3d1-dce7-448c-9346-13c1cd8bf457",
        "cursor": {
          "ref": "46c93e4f-0a7f-43c8-9a10-d75bd8518f0d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1e6ebf44-c530-4b48-bb87-93a8b5abef50"
        },
        "item": {
          "id": "cbf3c3d1-dce7-448c-9346-13c1cd8bf457",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "6ef4804d-54e2-48b4-b15b-33c16e51f99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab93197-814f-478a-a323-f0afb4f55906",
        "cursor": {
          "ref": "ce2427f3-4621-49d6-81bb-20f195bc003c",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6ae9117c-e93c-4ceb-9b7b-867418431ac9"
        },
        "item": {
          "id": "3ab93197-814f-478a-a323-f0afb4f55906",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "25eeb9df-5abf-4fdb-944a-72495c63d92a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b16f1f4-1fda-4cc0-9b8c-ea0de477a35b",
        "cursor": {
          "ref": "92fa033f-3838-47b5-8868-4425ee71146f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4321d638-121e-40b1-bd3e-10cd58dd290d"
        },
        "item": {
          "id": "4b16f1f4-1fda-4cc0-9b8c-ea0de477a35b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2a9577bd-9f94-404f-baf0-144f2353c629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abb28ba-d53d-4275-b01a-654326a52cbe",
        "cursor": {
          "ref": "9b1969a5-4fc8-4d7b-85bf-20fbc8bd34b7",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "50b781b8-167f-488b-8252-903b3b8125f8"
        },
        "item": {
          "id": "4abb28ba-d53d-4275-b01a-654326a52cbe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "77c799f7-5360-489a-b54f-528bd7fcff09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00b69c95-9c07-44d3-9d5e-781636c20199",
        "cursor": {
          "ref": "2066796a-869e-43ac-8dfa-4414b62fa0dc",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f67b35c2-43c4-4913-9908-260bbddfc6e0"
        },
        "item": {
          "id": "00b69c95-9c07-44d3-9d5e-781636c20199",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "025a35c1-8265-4671-ab67-3a55bbf5a884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1c46fc-e82e-4bb2-9fb8-ec60ac37c097",
        "cursor": {
          "ref": "2b25597c-a014-4cf2-aab9-39d20b0ed13e",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "591167e3-4db9-467e-8409-699cc85d5f07"
        },
        "item": {
          "id": "bd1c46fc-e82e-4bb2-9fb8-ec60ac37c097",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2acdea64-3937-43b1-b3fc-60a73c446b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48cceaf-e9f1-496a-a651-22ae959fdc68",
        "cursor": {
          "ref": "81d79c3e-9f08-401a-8cfd-fa91dc08dabf",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6625e450-fb03-41a1-a3cd-8d9cf21a9a45"
        },
        "item": {
          "id": "f48cceaf-e9f1-496a-a651-22ae959fdc68",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "12f7bc56-0b64-4757-afb1-a135cbc5d179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948807e9-3540-4db5-80ce-1b5cccdcbae7",
        "cursor": {
          "ref": "149d34cc-29f8-4b3a-afb3-fe50116b8777",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f7972f03-6bd6-443c-882e-04c34502aac6"
        },
        "item": {
          "id": "948807e9-3540-4db5-80ce-1b5cccdcbae7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "38ef2262-0611-4c2f-9c5a-b97589391c17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bd73ab-1310-4b0d-8bc7-40033c29c895",
        "cursor": {
          "ref": "2c81394f-1f93-46f0-a572-8e33dd6e697c",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "71d78a40-3d4a-4e92-83f0-9e4d620dd96d"
        },
        "item": {
          "id": "a9bd73ab-1310-4b0d-8bc7-40033c29c895",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "f9e6c186-ee28-46be-85c6-85aaa4d4b8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b1ab46-abe2-45c0-993b-f1f3a3d2711f",
        "cursor": {
          "ref": "31dadd51-2723-4c12-b920-9bdb8398b1ef",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d7de04d7-174b-4bef-b67e-0ed4277799d1"
        },
        "item": {
          "id": "16b1ab46-abe2-45c0-993b-f1f3a3d2711f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f5d6b23a-fb95-4e6c-814c-e04f5cd9b4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f0293d-6450-41e2-9794-b7e48fd04a1d",
        "cursor": {
          "ref": "b207e74f-ee5c-4e64-9575-e9ba16308046",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "47964ec7-d06b-48d3-8558-9b7c170dadb8"
        },
        "item": {
          "id": "39f0293d-6450-41e2-9794-b7e48fd04a1d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5d63c271-39ed-4d25-968a-4709a77fea9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "302cff99-1a0a-406d-bea3-cc82df95c5ba",
        "cursor": {
          "ref": "2bcdddf2-2d25-47ea-9085-6425076cc1bc",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "362ffeb5-2d67-47d1-b805-84377f2c10e0"
        },
        "item": {
          "id": "302cff99-1a0a-406d-bea3-cc82df95c5ba",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b0cdb04d-5afe-44c8-94f8-1fda8b948a54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252d534b-8ac2-478c-9750-ed282b708420",
        "cursor": {
          "ref": "dfe7e676-1cf5-4ed1-8df2-900c4ab70c5c",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a8963646-d04e-40a0-9951-e06600dad668"
        },
        "item": {
          "id": "252d534b-8ac2-478c-9750-ed282b708420",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4f4b2087-de52-41bf-8c9e-d5f6c355367a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59e57903-1dcd-4a2b-b127-90ca9dd98a3f",
        "cursor": {
          "ref": "ac22e479-fcbe-4729-87be-ac6a688af9bb",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "dcbe63b0-1b70-4ad0-9b41-2cd3d5d9b165"
        },
        "item": {
          "id": "59e57903-1dcd-4a2b-b127-90ca9dd98a3f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "16ef4b3f-1fb6-4883-8c1c-9c180fd2c6c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850f8714-0ce3-4a4b-a1b0-22c308a084d9",
        "cursor": {
          "ref": "fb682f06-1f4e-48f6-87e6-9341995625f5",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "58965e6a-e5f3-4d14-86a7-e90a1df0bc8a"
        },
        "item": {
          "id": "850f8714-0ce3-4a4b-a1b0-22c308a084d9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9ac2b24d-b895-47a6-a85d-4a4200173ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d08a4b55-2261-4d44-ad31-fc90b6136144",
        "cursor": {
          "ref": "2af744b2-ffea-48bc-9c1e-00b29d4bb021",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e66772ed-a55f-485a-ae42-91d9258ff73c"
        },
        "item": {
          "id": "d08a4b55-2261-4d44-ad31-fc90b6136144",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b7d65112-417f-4e59-a1a7-af5d7357c23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5a4a15-7ef3-461a-8bd4-a5e255e1227c",
        "cursor": {
          "ref": "379c617d-21a1-43e3-906b-2a4afb84f551",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f1590d0c-3f01-4a05-b474-dcdc5814bcd4"
        },
        "item": {
          "id": "6c5a4a15-7ef3-461a-8bd4-a5e255e1227c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3aec9dfc-f488-4dee-a667-166cd9c0113c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ce5bae-e568-43a8-9677-5a308f49b689",
        "cursor": {
          "ref": "0d5263e3-ed64-4ef7-a7a3-18c3d60bb98e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b1e495dc-839b-4f86-abbe-f6fe856d0164"
        },
        "item": {
          "id": "72ce5bae-e568-43a8-9677-5a308f49b689",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3c31d814-7b4e-4c90-aeda-9a36367fe04d",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "a7616b0d-e806-411e-8aa4-75a2cf0b6e59",
        "cursor": {
          "ref": "9af85047-075e-457d-ad1d-443e054a66ec",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "cdb988f3-8da4-448e-9ffb-da1471d3da34"
        },
        "item": {
          "id": "a7616b0d-e806-411e-8aa4-75a2cf0b6e59",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "37c25de6-b757-4157-8c3d-7f70065bf08a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "754be613-50ef-4978-889f-d7a114e2ccc9",
        "cursor": {
          "ref": "8e264f19-005a-490e-94f3-b392e2434fb2",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dbb31ce8-ee27-43d9-9023-1f4a9d79da64"
        },
        "item": {
          "id": "754be613-50ef-4978-889f-d7a114e2ccc9",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3f5aa8a6-d575-4a2b-8991-eafa6db09b6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dccf07d7-61f8-4327-ac8e-1b2f964ca5ea",
        "cursor": {
          "ref": "943701fc-741f-4eb3-a86d-1149af855341",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "102c1ec2-1924-4c07-8a5f-c939c5fdff96"
        },
        "item": {
          "id": "dccf07d7-61f8-4327-ac8e-1b2f964ca5ea",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a8f2c8a1-aac7-4c31-93da-20bdb8e08ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1568098-125a-4a4e-b814-93d056eecf98",
        "cursor": {
          "ref": "6ad2fb85-d55a-427f-a24f-a3c227247f4a",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8609d0fe-1045-4c0d-840e-90b3d32a9d71"
        },
        "item": {
          "id": "b1568098-125a-4a4e-b814-93d056eecf98",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3a21877a-6729-4f84-bb09-3ec30598ea8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925d7490-49f7-4535-96af-0008c964b87a",
        "cursor": {
          "ref": "0724d9f3-4030-44c0-8db5-211b02501044",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "637c7ff7-2fe7-4e68-ab31-c4735e6eff4c"
        },
        "item": {
          "id": "925d7490-49f7-4535-96af-0008c964b87a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0b8ef339-bb4b-4c61-b63e-61a24e79b841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "278c102b-9f74-4fe9-91bd-cba65bc303f6",
        "cursor": {
          "ref": "892d8644-e3d4-4317-b9e7-f305bb4cab1a",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "dc6cf135-8c3e-4ce4-aa10-a60f0c432d12"
        },
        "item": {
          "id": "278c102b-9f74-4fe9-91bd-cba65bc303f6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6bb95fce-3f5c-4a00-a740-6351dc6c7a05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4584770-b062-464d-981f-3e6c2846a916",
        "cursor": {
          "ref": "69cc811d-3008-4667-adde-70c9124e0787",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a41f422a-43c1-48c6-a452-339cbe44b1db"
        },
        "item": {
          "id": "e4584770-b062-464d-981f-3e6c2846a916",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "391ac489-b64d-449b-beb0-ee8548e3fcac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdcd1b4f-77d1-4f0f-b871-50ddf46bcd10",
        "cursor": {
          "ref": "e3c479fb-ad5f-4383-88f6-feeb7439145d",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "0a1c6f66-645a-409a-b45c-ee8b085f2870"
        },
        "item": {
          "id": "cdcd1b4f-77d1-4f0f-b871-50ddf46bcd10",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a8c2ca14-6494-47f2-9cad-56f718820f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71355db2-fb19-4dca-b427-3c4a38bb3122",
        "cursor": {
          "ref": "f082d524-66ff-4430-a389-7f5987b6ce7b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e162da68-3e06-4a04-b707-d183071c3d08"
        },
        "item": {
          "id": "71355db2-fb19-4dca-b427-3c4a38bb3122",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "652cff7f-f232-4312-903e-e8739122cca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e544ad8-d70a-43cf-85ed-160355678abc",
        "cursor": {
          "ref": "eac19e14-42db-414f-8422-5ec8c3a77657",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "912f2d0a-b1aa-44e9-a964-ee8ac145ca34"
        },
        "item": {
          "id": "8e544ad8-d70a-43cf-85ed-160355678abc",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "7024d54c-a376-459a-94cd-7bb0ccbaaa47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5f16783-9a30-47cc-8048-0ab141058e79",
        "cursor": {
          "ref": "e99e68bc-879e-45a8-a5d1-f7f1ea3d253e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f09bc27b-9639-417d-8388-ad3674b135d1"
        },
        "item": {
          "id": "c5f16783-9a30-47cc-8048-0ab141058e79",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "4699d51d-a3ec-4031-b654-b2731b01c3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b6f7d3-1717-42dd-bbaf-ebeb1db8ba30",
        "cursor": {
          "ref": "386e3bf0-e61e-4703-bbe7-26a68c406fd8",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6a7f66d7-3d66-431e-8bab-4d2b5f3a7ea4"
        },
        "item": {
          "id": "d1b6f7d3-1717-42dd-bbaf-ebeb1db8ba30",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0d9bda98-0ea3-400b-a25e-fb8072e26c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7725103-5157-4789-8245-64251406ffe2",
        "cursor": {
          "ref": "a3ef1799-d9a1-4e23-8bef-bfb384d52f7b",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "88e88500-158a-4042-8b58-a62683022d32"
        },
        "item": {
          "id": "d7725103-5157-4789-8245-64251406ffe2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3ac3ace4-4c10-4cc2-9711-862e2499d15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0eded0b-458c-423d-bf8b-6d7f66f093c8",
        "cursor": {
          "ref": "54b67806-e8c4-4073-9e3f-29e948ea5398",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "23903184-c826-499e-afa2-d5cfbfdbf44f"
        },
        "item": {
          "id": "b0eded0b-458c-423d-bf8b-6d7f66f093c8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f0094fcb-2e85-487d-a918-c581c75e3f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c8987e-b8ec-4f78-8b60-8f1b3204b1e9",
        "cursor": {
          "ref": "2e9e4c09-5094-439c-ad9c-0daa375ad0ed",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "dfc6b835-39af-4e61-adf4-28e63137c4bc"
        },
        "item": {
          "id": "89c8987e-b8ec-4f78-8b60-8f1b3204b1e9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ae318c3b-d779-4aaa-82e3-6eb27cd9fb83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a601ad25-781a-4388-ac91-ce36c846f0e3",
        "cursor": {
          "ref": "36948b94-bd3d-4f52-a849-04c0e05fd5d9",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "678c0cf8-172f-4b86-8deb-0df2d5184a51"
        },
        "item": {
          "id": "a601ad25-781a-4388-ac91-ce36c846f0e3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "439d988d-a100-4713-995a-709b559944a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e1e1e4-6466-49cc-b0f0-ee31525b1d3c",
        "cursor": {
          "ref": "be375ef7-2ccc-4286-9fbc-7b1dbc0cb8c6",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "0aa77d11-0234-4b7f-9148-f6ea6b4b305e"
        },
        "item": {
          "id": "75e1e1e4-6466-49cc-b0f0-ee31525b1d3c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "49493c37-9eda-4391-98da-94ce47cbc9e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05049bcb-76a2-4f9d-b504-ae116027bf29",
        "cursor": {
          "ref": "f6ea6fb2-8df5-4a4d-952a-0f4997403991",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "48479ed6-8a22-47d9-ae24-5dd24c5b935f"
        },
        "item": {
          "id": "05049bcb-76a2-4f9d-b504-ae116027bf29",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "4c2df11a-1531-4537-a556-136c4ba2e72d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d2d38f-3f75-43eb-a803-742fa850a05e",
        "cursor": {
          "ref": "65831a6c-4f5b-4edc-84e4-57121b420332",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "003b9175-ad59-4c81-905f-48c2f9a331f5"
        },
        "item": {
          "id": "e7d2d38f-3f75-43eb-a803-742fa850a05e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "26f4495e-adc9-4340-b51c-711bb92059e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d0322a2-c448-4a9e-be04-ce6cf7a2d2d4",
        "cursor": {
          "ref": "cbcb47ad-2406-4dc4-b962-cee2a668c461",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a6711796-2247-46ab-9e1b-56653b102ad2"
        },
        "item": {
          "id": "4d0322a2-c448-4a9e-be04-ce6cf7a2d2d4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "aa50ec5a-bea3-4445-b4a2-e0d18c1c36fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29b76dd-d817-4853-a29b-b4824bc651a5",
        "cursor": {
          "ref": "049a36d6-7350-4de3-8d1a-045882768da6",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0278bce8-f249-4743-8708-37b1f1093461"
        },
        "item": {
          "id": "e29b76dd-d817-4853-a29b-b4824bc651a5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "937a901c-3b1e-4c8e-b272-e10df192e99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b5c3be-b2c4-41b3-9d58-cc2d180e1d53",
        "cursor": {
          "ref": "131d5fe7-320b-4de6-aa91-d6445c70d384",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "909a290e-b321-4e71-9553-dad146ad6ce6"
        },
        "item": {
          "id": "92b5c3be-b2c4-41b3-9d58-cc2d180e1d53",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8e55bbf2-de3d-41fe-9222-2f68a40de4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75ca42f-1c33-4533-bd66-d9c1d78f33e8",
        "cursor": {
          "ref": "3f4091a7-e5f3-4ac2-8dcb-0e69d44a9161",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1dbe509c-0d2e-423b-9622-4d4feb3d7252"
        },
        "item": {
          "id": "c75ca42f-1c33-4533-bd66-d9c1d78f33e8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7064fd91-1c96-4d48-bd66-9d1d32260da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95ba3b7-61bb-488c-bfce-ac6e58781b94",
        "cursor": {
          "ref": "c87f7302-1162-4269-9c99-c717603ecc47",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d9b8137b-2bd3-48cd-aa53-1b0bbaee3d97"
        },
        "item": {
          "id": "c95ba3b7-61bb-488c-bfce-ac6e58781b94",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "68ee74c4-1a99-4fa7-b550-a93f8c68bb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585a4196-6cbb-442f-8f45-650229072345",
        "cursor": {
          "ref": "ca16831d-5b36-4430-9fef-ebc2001608cf",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "f088332c-9813-4006-b5d5-32c19e38e25a"
        },
        "item": {
          "id": "585a4196-6cbb-442f-8f45-650229072345",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ecf5f7e7-3ed4-436b-8e1a-af0afbe95c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a78e7e3-3d99-44cf-9c8c-1eaaf1f8b46a",
        "cursor": {
          "ref": "687d3382-c1c4-4cbc-91f6-dee12788ebdc",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "8f90b565-f4d6-466f-b124-ed6527615d83"
        },
        "item": {
          "id": "0a78e7e3-3d99-44cf-9c8c-1eaaf1f8b46a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "23bac97a-7476-496d-9549-a221177aca8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "455581b4-4bee-4558-8745-921be33cbc49",
        "cursor": {
          "ref": "227cd4c3-8027-43e3-8747-537e5a731889",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2cd7cbe9-2bf1-43af-8dcf-22eb2f102ea7"
        },
        "item": {
          "id": "455581b4-4bee-4558-8745-921be33cbc49",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "49a7b08e-97cc-4b05-898e-5cc0239e8a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eef7e67-cad2-4dcc-90b4-5345a3fe028e",
        "cursor": {
          "ref": "285d04bc-9bb2-4b25-a821-97259283bf93",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9da24ffe-4cda-4ba3-b50a-3cde1af49adb"
        },
        "item": {
          "id": "2eef7e67-cad2-4dcc-90b4-5345a3fe028e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "478ed90b-4351-4764-ab54-26afa1fb4085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43fd8c90-6909-487f-a2b1-fff166beda34",
        "cursor": {
          "ref": "bbadf3a8-179c-4607-9966-2fbdc5f4075d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8a569b46-fe96-4940-9c60-71be3ab08289"
        },
        "item": {
          "id": "43fd8c90-6909-487f-a2b1-fff166beda34",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "59bb3cf8-78d7-411a-b8a8-a6b6cf7729e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32564b6-b0bb-436d-97a2-49efb2ef14f4",
        "cursor": {
          "ref": "946220ab-3625-4f88-a5d6-ecd8c7112fad",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "6d6d2aef-fd31-40ad-ba1c-e1f235dcca34"
        },
        "item": {
          "id": "e32564b6-b0bb-436d-97a2-49efb2ef14f4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "843d2402-8f14-44ab-a718-c512ffb290dd",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "605e53f9-744e-418e-bccc-9427b74e4846",
        "cursor": {
          "ref": "5f62fc10-587d-4f5f-8d2c-34bec7234652",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "283398e0-4927-4a52-b798-25bd09bbf94f"
        },
        "item": {
          "id": "605e53f9-744e-418e-bccc-9427b74e4846",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5832c7a6-81b8-416f-a4b2-7ff6d6ada143",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "361eaac5-a878-4eb2-a044-9737de2dd3ed",
        "cursor": {
          "ref": "7b7dc45e-8f23-4153-9a84-656f9da2df85",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a53162ea-e776-47f5-bd86-2e708dfd5102"
        },
        "item": {
          "id": "361eaac5-a878-4eb2-a044-9737de2dd3ed",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "be65b2aa-4704-4544-ac81-52cb6077e58c",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7fb8b8e3-999f-4ed0-bf06-061392690c27",
        "cursor": {
          "ref": "0f603d2f-4741-4f5f-a02b-43b00efd8c8e",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "06c35f23-4ae0-41c2-83ea-1ef11fafe165"
        },
        "item": {
          "id": "7fb8b8e3-999f-4ed0-bf06-061392690c27",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "843beec4-fc4d-4a0c-8c1a-49cb3f1d39fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da65160e-b654-47e0-8db3-2f0d0cb5faf0",
        "cursor": {
          "ref": "c543361d-cf8a-4492-bfd0-2ed7c61cc7bf",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "57b86ecb-8d19-4b6f-8482-42ec81c1acf2"
        },
        "item": {
          "id": "da65160e-b654-47e0-8db3-2f0d0cb5faf0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "096af573-8306-4a67-88e8-5e351aef9461",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "14992ce2-331a-4e4e-84af-f9daed1626d8",
        "cursor": {
          "ref": "da73ddf9-119e-463b-9b07-a3cf3d158022",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b3811abf-8635-463b-8f68-f0fcea0d1572"
        },
        "item": {
          "id": "14992ce2-331a-4e4e-84af-f9daed1626d8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "1aab0dfe-13f0-4116-869b-4345cd2b8dce",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b418ea3e-9a1d-48d0-8b7b-4584dc5643b4",
        "cursor": {
          "ref": "e920afa9-89ff-4097-85f1-775ce6d83dd3",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "841ff8bc-343b-4308-831c-5a3bb2e84eb7"
        },
        "item": {
          "id": "b418ea3e-9a1d-48d0-8b7b-4584dc5643b4",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f6e2a6d1-7482-47ad-b600-4b48dd4e54ac",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "137556b7-fbc9-4d32-8661-a29c6b0543e0",
        "cursor": {
          "ref": "b49d70b5-4b06-4577-b774-4837a6ea01f8",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "72a8fa7a-b47f-4422-8492-db56643290d5"
        },
        "item": {
          "id": "137556b7-fbc9-4d32-8661-a29c6b0543e0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d7959600-0344-4d92-965f-4fec3f3f2e99",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "e4dfaf44-b23a-42ab-a044-a80bc078276c",
        "cursor": {
          "ref": "6dc8acaa-2f0e-4172-ace0-441e71d79801",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "aec31656-2407-45c1-a0dd-47e9e2a0e48e"
        },
        "item": {
          "id": "e4dfaf44-b23a-42ab-a044-a80bc078276c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ece3dbce-1bb5-4b18-af73-7c5e158e69ed",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "791bdd2d-7d68-414a-96b7-07f34895f194",
        "cursor": {
          "ref": "f9a5357f-c204-4d19-a1d7-c67423a115ba",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ac88fdc3-d2e1-4e84-bed4-bfc8c352b060"
        },
        "item": {
          "id": "791bdd2d-7d68-414a-96b7-07f34895f194",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "937bd6fb-eedb-4f96-b291-c23311e1f90e",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "90f021f0-f8c6-4284-ba83-3a0dfcaea8fa",
        "cursor": {
          "ref": "10330f44-2e11-43b3-92b9-879c29120131",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9e62ef4b-a77f-4a22-b6ef-5a148180368d"
        },
        "item": {
          "id": "90f021f0-f8c6-4284-ba83-3a0dfcaea8fa",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "32e07b89-e11e-4817-ba3d-6765f674ce19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "100b71be-5f3f-4589-9a43-fb5f91eb7c83",
        "cursor": {
          "ref": "64e10e20-082d-409c-b9f4-66f608b4ebe1",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8585c853-d073-44f1-9e63-f29c7c141afb"
        },
        "item": {
          "id": "100b71be-5f3f-4589-9a43-fb5f91eb7c83",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "90ed900e-c671-45b3-9269-7a8a1b4a1bd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1826a010-5294-41bc-9ea6-0d8d39b675e2",
        "cursor": {
          "ref": "079abc08-2543-4e8c-954b-31c47c74b211",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "848833fc-a173-4f3c-a12b-1872822cf45c"
        },
        "item": {
          "id": "1826a010-5294-41bc-9ea6-0d8d39b675e2",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "d2f40871-6692-4c88-924a-d616cdc22b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e099ac1-dbe8-4f80-94ee-43e12d403c74",
        "cursor": {
          "ref": "be88e1c2-df63-4903-a39d-495e1673f684",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "522df86e-d7e4-4691-9b5d-a9846b002490"
        },
        "item": {
          "id": "0e099ac1-dbe8-4f80-94ee-43e12d403c74",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "90f0990b-91df-407a-af9d-009af9953ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01ca32b-9871-4909-8471-6544fe887763",
        "cursor": {
          "ref": "a4353aad-514b-4e0f-b501-3d75871bcc03",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "644085bc-a7ab-4625-ad9e-cb831fc10fff"
        },
        "item": {
          "id": "e01ca32b-9871-4909-8471-6544fe887763",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e31dbdca-f852-4611-b589-115bf3ab62af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1612481f-54ba-4352-9572-5b5e9f4e432a",
        "cursor": {
          "ref": "5e60de41-d0b5-4f9a-853a-81d1f560f091",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9e893242-95f9-47f4-9913-e916dc65e9ff"
        },
        "item": {
          "id": "1612481f-54ba-4352-9572-5b5e9f4e432a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "dc42ae15-1734-4ce1-a158-05afc5f7390c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0f5ec3-09f6-4027-b852-13f859cd1419",
        "cursor": {
          "ref": "e36bd0b8-4d95-4f94-b01a-65417cfe05e7",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a319822f-16a7-440a-afc3-ebc7082fd0f6"
        },
        "item": {
          "id": "fa0f5ec3-09f6-4027-b852-13f859cd1419",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "79f1d687-2b4b-4b99-89b0-7fa6b92c3f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbaae897-d821-4f7c-9d4f-94d7244c9639",
        "cursor": {
          "ref": "e93bb3e6-9e68-434a-9cf2-fee9bd615a4d",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d8125686-df26-41fc-bed5-7974058c81d2"
        },
        "item": {
          "id": "bbaae897-d821-4f7c-9d4f-94d7244c9639",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "654e7d57-a4d6-4035-a4e1-450e6e207cc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f47422a-9af1-47ba-9af0-4a806e508530",
        "cursor": {
          "ref": "90b472de-fac9-4eaa-b4cb-aaf0a210071a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a832a64c-2947-4d58-bd10-e3a0b40e84ac"
        },
        "item": {
          "id": "0f47422a-9af1-47ba-9af0-4a806e508530",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "ffef2888-355a-4ab0-ab32-814fc5f8a6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c944bd75-9a54-40a9-823c-7864d3a5f90e",
        "cursor": {
          "ref": "16fb4049-d3af-4574-81d8-074cb46518f1",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "ed8b5b02-44bf-4af5-8510-83979dfb8c38"
        },
        "item": {
          "id": "c944bd75-9a54-40a9-823c-7864d3a5f90e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0012df2d-ed57-44ae-9635-4c4a7931757e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d97d2c-b297-4655-befd-f03a901d1774",
        "cursor": {
          "ref": "1b35826b-6995-4929-84ed-6a948509fede",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bc06dbcd-7fe0-4d8e-87eb-2364d2ec3b0d"
        },
        "item": {
          "id": "71d97d2c-b297-4655-befd-f03a901d1774",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "b6cdce07-1fa1-454b-b3b1-4202e3532269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fcad97e-b3a4-4f38-96d2-8e8aafbdcdc4",
        "cursor": {
          "ref": "01ee6918-e54d-4f18-a547-dfb848db0b39",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b0b57cde-075e-43cf-b600-5624f496a102"
        },
        "item": {
          "id": "4fcad97e-b3a4-4f38-96d2-8e8aafbdcdc4",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "dbbe9c11-64cf-4f66-91a1-4a37e846e1d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d618bf63-3ebc-4cee-98ec-553b394c8a30",
        "cursor": {
          "ref": "a8fe16df-d7e7-46df-a5af-4374873fd9bf",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "94fcb514-1620-423d-92fa-88350982a2b2"
        },
        "item": {
          "id": "d618bf63-3ebc-4cee-98ec-553b394c8a30",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4d5a5874-ecef-4d80-9753-066ff1d84ab2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9843aab0-49ce-48f8-b432-80e8f988b7ea",
        "cursor": {
          "ref": "74d8ddc7-ee03-4445-9953-ea131b179f68",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "93078215-7ffb-4228-9b49-5828355cb690"
        },
        "item": {
          "id": "9843aab0-49ce-48f8-b432-80e8f988b7ea",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5032b222-e39a-49ab-a199-50faabdc2cd8",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "8c8dfcba-6b3f-496d-9374-8a9f6860eb68",
        "cursor": {
          "ref": "7caedc4f-8323-4581-b6a1-6aa2e2333d5d",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "87773076-01ac-4918-9276-353e16563c31"
        },
        "item": {
          "id": "8c8dfcba-6b3f-496d-9374-8a9f6860eb68",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d9e092ee-9fca-4a52-9270-a17d8e3a5fda",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ca31efa6-dd3c-45b0-918f-d12da548d1db",
        "cursor": {
          "ref": "ee8d05e9-0e58-4c6f-a2b5-9449d562eb50",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9823092f-e8db-4258-8ab9-6ba1b1a1b2a1"
        },
        "item": {
          "id": "ca31efa6-dd3c-45b0-918f-d12da548d1db",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b5e79327-0b2e-4181-8749-4fa574f0a481",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "b17aa657-6ab3-4696-b558-e9538b5ad5ee",
        "cursor": {
          "ref": "2324268c-1a49-4013-b066-dd53e8325b9d",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a7d82658-e0fd-4c84-9035-1e3243cc2b7a"
        },
        "item": {
          "id": "b17aa657-6ab3-4696-b558-e9538b5ad5ee",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b574193e-57a1-4070-b014-78fe39f7e48e",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9bde3c96-34ca-4952-8148-a9535d713580",
        "cursor": {
          "ref": "804cb844-8c24-4866-b764-ebff85db58dc",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "05270ed1-f2cc-4872-bd10-75a491f72663"
        },
        "item": {
          "id": "9bde3c96-34ca-4952-8148-a9535d713580",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "016c8006-cc8b-4552-be3c-b6a4b0af6296",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "43dbd158-c012-4756-b480-2ad21a486c90",
        "cursor": {
          "ref": "1c012e86-f501-4f2a-9b05-b2eb80004894",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fd3eb640-bbcc-4fc0-8db7-8f85bf3d3e46"
        },
        "item": {
          "id": "43dbd158-c012-4756-b480-2ad21a486c90",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "32604640-e6e6-4218-a920-68d0799b8d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a4c14f3-e485-46b4-bcdc-62275495e7ba",
        "cursor": {
          "ref": "dcf521ce-8087-4e17-a5f7-6210d71b30ad",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3de173d5-2d11-4494-9cba-203dd7ac5e33"
        },
        "item": {
          "id": "9a4c14f3-e485-46b4-bcdc-62275495e7ba",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ee35f436-ba14-4119-806f-db9659cf6fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513830b1-14ba-4146-9fe5-3c34f91bebe7",
        "cursor": {
          "ref": "ebf07b1b-2367-4299-94c7-ff50c1c0d2e8",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "799f884b-336d-4f26-a6d8-e56d74d6086d"
        },
        "item": {
          "id": "513830b1-14ba-4146-9fe5-3c34f91bebe7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c75d62db-821c-491d-a096-5b30fac481b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df4a66fb-b0d3-4b8a-8234-a9cf538488d0",
        "cursor": {
          "ref": "c2f72219-61bc-49af-82fa-8fdc2a74ca34",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "68c44819-3315-4acf-ba93-621b1931d9c2"
        },
        "item": {
          "id": "df4a66fb-b0d3-4b8a-8234-a9cf538488d0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7079e905-6e0b-4abf-bd52-5d039c9d2cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc78d46-8d1e-4072-8f88-c2b13b9e7cf0",
        "cursor": {
          "ref": "8b53fee9-3615-4d22-a88c-f420071da512",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "cbcd93a0-2a32-44b8-8821-2cb810b10725"
        },
        "item": {
          "id": "bdc78d46-8d1e-4072-8f88-c2b13b9e7cf0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "4ee029dd-9fca-4764-a99b-b11be9cb7e4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24a7c25-eaed-447d-9d0e-9aaab12b7736",
        "cursor": {
          "ref": "883e5da2-2726-4f78-8caf-2c6ca6dcb191",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "55e3cfb7-5f93-46d9-8810-14b59df05e51"
        },
        "item": {
          "id": "f24a7c25-eaed-447d-9d0e-9aaab12b7736",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "c746bf02-a07a-4d5c-ad36-0727993201b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bae1fda-ca5e-4d8d-8585-4df19e9af59e",
        "cursor": {
          "ref": "e966df95-efb6-4509-8160-95d4d68593f8",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "5789d740-8331-4fc7-9940-7373ffe738a5"
        },
        "item": {
          "id": "5bae1fda-ca5e-4d8d-8585-4df19e9af59e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1b589daf-16de-4d73-866b-10ff4d3444ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ffd5d3-913a-47ea-9274-7449f058d439",
        "cursor": {
          "ref": "87a7434a-6d62-4ec4-8420-af15b90216c6",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6ce6598c-f8f7-42bf-9d0e-dbf58001de94"
        },
        "item": {
          "id": "d3ffd5d3-913a-47ea-9274-7449f058d439",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6663c73b-e3da-43d1-bd2b-538604464c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01ca4c3c-f1dc-47ea-8082-3b461c3e78fa",
        "cursor": {
          "ref": "959dd2c6-8d7a-43a5-9840-3e047fb99162",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "195324c7-32b5-4fff-87f6-10fe3171a456"
        },
        "item": {
          "id": "01ca4c3c-f1dc-47ea-8082-3b461c3e78fa",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "21471313-6000-4619-9322-4b4406155cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c1abb2-9067-43e2-a8f7-5ddbaea94f79",
        "cursor": {
          "ref": "b1fdedaf-3d37-4a72-bbf7-4c0f726fd4e9",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "323e3760-3a05-4c51-b26c-1b9c2be92f42"
        },
        "item": {
          "id": "e5c1abb2-9067-43e2-a8f7-5ddbaea94f79",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b2b390b9-423a-429e-b106-77a3ab80cb06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89ac99c-244e-4875-8835-f473eb4b20ea",
        "cursor": {
          "ref": "26524609-4bf2-4a52-acf1-0d214529d1df",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c06aca23-78db-4ba4-9bec-29f0fc5a9e1a"
        },
        "item": {
          "id": "b89ac99c-244e-4875-8835-f473eb4b20ea",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6f967666-ee93-4750-9486-3c40033334ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c39240-b1cc-4d89-bf5f-becc8a2863e5",
        "cursor": {
          "ref": "261edbdd-dd11-4b4a-b6c5-5ea33dc61819",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "acffad00-fbfe-4e75-8392-67d1a7c7985f"
        },
        "item": {
          "id": "09c39240-b1cc-4d89-bf5f-becc8a2863e5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7ec7d19d-a4d7-4839-b491-be488b1bf79b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af3c095-bce5-4236-ad49-8fb60aa6f689",
        "cursor": {
          "ref": "b5b2afe2-2e18-477b-914f-20b6a352e73e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "c30dc728-981a-4bf3-8f75-57d02f895af6"
        },
        "item": {
          "id": "2af3c095-bce5-4236-ad49-8fb60aa6f689",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c6ccacb1-498f-4979-ac8c-30ad7f234b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4181bb59-c31d-4286-b103-de9fadcb326f",
        "cursor": {
          "ref": "f1496bca-a506-4eb8-85bb-1f50a8da4650",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "79138994-fdc9-461f-b782-90e7d0095c83"
        },
        "item": {
          "id": "4181bb59-c31d-4286-b103-de9fadcb326f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "40918267-a50b-423f-a35a-6ab07c9c3c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a70bb71-015f-4219-95f6-7aa2d4318e5c",
        "cursor": {
          "ref": "9a27cb82-229c-4543-8274-d42a760e9bc7",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a2c8562f-b2cc-4a21-b2e2-1553639c35f3"
        },
        "item": {
          "id": "7a70bb71-015f-4219-95f6-7aa2d4318e5c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "cfbec1a8-7f99-452d-b383-6adc17f4f941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d093f3-3da3-4ec3-bf53-5905c6f1eee1",
        "cursor": {
          "ref": "bb53ee00-f515-4264-bdc2-3fbd66234cb1",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f3575d19-45dd-4fb6-bb11-3ce19e619430"
        },
        "item": {
          "id": "80d093f3-3da3-4ec3-bf53-5905c6f1eee1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3d33c8af-7f1f-4e30-95f8-a68867dc1c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "367b8dae-9396-418a-a98f-cb6a692b5400",
        "cursor": {
          "ref": "fde14e1a-62d7-4ca3-a2b9-c0f9a4a3283b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "cde3635e-f965-4334-9879-eaa320f03ac5"
        },
        "item": {
          "id": "367b8dae-9396-418a-a98f-cb6a692b5400",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "a9811bf6-2886-4f94-a099-b66815925dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8276631e-53d2-4cd6-a1dc-b85c10d133ca",
        "cursor": {
          "ref": "ad2f1e2f-e9ff-49be-90d6-171a6b509992",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "77337e9a-5918-4c47-a731-6238d644727e"
        },
        "item": {
          "id": "8276631e-53d2-4cd6-a1dc-b85c10d133ca",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7d01ae52-6b39-4d2f-a64e-a9ca0b8bdaa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beca1fb4-1901-4bb0-9387-45dfba833788",
        "cursor": {
          "ref": "0be0268f-522e-4d5d-95f8-de1171e9faa5",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "918b5922-31e0-4807-93af-38e55dce2980"
        },
        "item": {
          "id": "beca1fb4-1901-4bb0-9387-45dfba833788",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d7db3b67-f741-42e4-a2c7-4c73f4a8553b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f5eded-857c-47ad-91a5-c0b3ac53539b",
        "cursor": {
          "ref": "b9eb068d-0be9-4c3e-9df6-7f10c00e0225",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5080ed66-2a14-4e13-85aa-8eb340184b5c"
        },
        "item": {
          "id": "77f5eded-857c-47ad-91a5-c0b3ac53539b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f618cc19-da69-4173-9b41-e88c5db09233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5957dffc-d852-46a8-b659-975287a4d0b7",
        "cursor": {
          "ref": "3c1fa518-89a5-4687-b3e5-57b5a9391b90",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "19967705-877f-4367-afd2-407b30cfc114"
        },
        "item": {
          "id": "5957dffc-d852-46a8-b659-975287a4d0b7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "39d2ba87-7284-42a5-88ec-995e68a41019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00844096-dd7d-4e3b-8055-e29bf7e99f52",
        "cursor": {
          "ref": "4d1b3a15-ff83-4b7e-91a0-834cf0328d3d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "1d36d8b9-3b6e-4f50-9891-711ea6b6ab7b"
        },
        "item": {
          "id": "00844096-dd7d-4e3b-8055-e29bf7e99f52",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "6ae346c3-9df8-4f6c-a589-47b3e4f5c2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ca090d-3b8f-46fa-84c6-3509b6a16d37",
        "cursor": {
          "ref": "efc70090-4cfd-4f61-97d8-c3bccd8d35e5",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "21e2a9d5-dee3-4655-93bd-09584cb1fa2c"
        },
        "item": {
          "id": "05ca090d-3b8f-46fa-84c6-3509b6a16d37",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ad7d40f0-8d9b-43ad-ac23-a07f18acc6d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996eff0b-a695-4994-b9ef-bf8be5ea8800",
        "cursor": {
          "ref": "9d42ea8f-575a-4ce9-933b-99729e82ad03",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a4f35976-1bf5-40d4-880e-5c3a44af895c"
        },
        "item": {
          "id": "996eff0b-a695-4994-b9ef-bf8be5ea8800",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d9d6f93a-d7d8-4185-9c86-5572cc84312c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3893331f-907f-4da5-b4bb-a20fa773b3cc",
        "cursor": {
          "ref": "814c785a-6aa1-4db6-8e7c-2313b100e58b",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b06cb145-3675-45bf-880c-4012badb0854"
        },
        "item": {
          "id": "3893331f-907f-4da5-b4bb-a20fa773b3cc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e4650b08-121e-44f7-89cf-f796ef857cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a2dac2-e4aa-43a2-89d1-87c82741537d",
        "cursor": {
          "ref": "57de571a-e8d4-4755-9b04-2553bbd1c0c0",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "1c46b525-66e4-4148-835c-2a6043762d7d"
        },
        "item": {
          "id": "d5a2dac2-e4aa-43a2-89d1-87c82741537d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "342cb701-6b58-44b1-8962-67ce8f1ea300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c741318e-970a-4228-9dd2-56db37a91c9b",
        "cursor": {
          "ref": "2fd8a314-138c-4546-9942-dc3b689584d4",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "215c14cb-057b-4646-a75b-a0ba34e80c2d"
        },
        "item": {
          "id": "c741318e-970a-4228-9dd2-56db37a91c9b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5c2da136-f820-4e4c-b17c-20dcf588523a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12123621-3364-4fb1-aaf1-5f0827bbbcc0",
        "cursor": {
          "ref": "9dfce693-20f8-43d6-bf26-dbbbc1a7100c",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "57a3a8ac-105f-4ce8-befe-7c873d383b9b"
        },
        "item": {
          "id": "12123621-3364-4fb1-aaf1-5f0827bbbcc0",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "891f23f1-6bee-4a9b-902a-72ff3a595b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85d06af8-6efb-4d6e-8c40-b05fa2434131",
        "cursor": {
          "ref": "f031d7f8-8c6b-43af-8556-d60679770423",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "354e31a1-c507-4bf3-ac97-dedf81b578a8"
        },
        "item": {
          "id": "85d06af8-6efb-4d6e-8c40-b05fa2434131",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "28a71607-1666-4a89-a551-097f8d8a9c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a00ecf-a8a1-42fd-bd6d-a0499f1f899e",
        "cursor": {
          "ref": "8d963b35-96ab-4450-b037-5f1de5e39aef",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "eefc89a9-f0d5-4b21-82c3-33741a0d3620"
        },
        "item": {
          "id": "24a00ecf-a8a1-42fd-bd6d-a0499f1f899e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8dedd879-5cc7-4b11-9591-5f83abe79da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7c975d-5806-4bf5-b4c5-74f64228b93d",
        "cursor": {
          "ref": "8b64b782-6d29-4f1c-a4fa-05a008ff3bea",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "7dcf67e8-cada-4404-8740-6aabb89fe664"
        },
        "item": {
          "id": "be7c975d-5806-4bf5-b4c5-74f64228b93d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1ab15d98-4286-4cb6-8358-237244c5167b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24875149-bd0c-4847-8fc8-3180780ccafa",
        "cursor": {
          "ref": "78191a4a-d07b-49d4-9a80-8a75008ee726",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "d7c45e22-f1b4-469e-a493-e15ebfef3dc1"
        },
        "item": {
          "id": "24875149-bd0c-4847-8fc8-3180780ccafa",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ddfb5804-7b34-442a-b677-903335cbd42b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee2cf42-85ad-4592-9df3-28025eba736b",
        "cursor": {
          "ref": "d31dd184-26c3-457d-8598-916f89f5a282",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "9b48f49c-ee0b-4f08-8f8f-8e46b5782803"
        },
        "item": {
          "id": "1ee2cf42-85ad-4592-9df3-28025eba736b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b7a3cb07-16b4-44d2-a24e-808ef25e2035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8d17d8-22ca-4374-8b97-887174aef6b4",
        "cursor": {
          "ref": "cff1a3b3-3a10-4c1d-bb68-ba0ce4311d64",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "bd5057cd-9d91-4bbf-a535-b4c5c0d837b2"
        },
        "item": {
          "id": "1d8d17d8-22ca-4374-8b97-887174aef6b4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e93116e0-8cb9-4cdd-91c9-76edc75fc2f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b58f19-4668-4cea-947c-88c18c5d6dcc",
        "cursor": {
          "ref": "9e0c55fc-7c47-48da-aa02-180039db5588",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "74036587-0d75-412b-bf6a-ca6af457ae8e"
        },
        "item": {
          "id": "61b58f19-4668-4cea-947c-88c18c5d6dcc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "afffc700-3194-4b54-80b6-99dc7e731bf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652ee958-63c4-40b2-b9b4-1ac2cb3f292f",
        "cursor": {
          "ref": "da8599df-cd2c-4f01-a055-a594846592ed",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5332e0e5-cfa2-4554-aa83-ce07e767432a"
        },
        "item": {
          "id": "652ee958-63c4-40b2-b9b4-1ac2cb3f292f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1ea39dbb-e307-41d2-b9a4-96c1a866891a",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "4c8664ad-dcab-47c8-b834-cadc30d5661e",
        "cursor": {
          "ref": "be396dea-2961-4e0d-8439-4cc4cf6ec67b",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "a6165902-cab1-4e4f-93ae-cc4292566fb0"
        },
        "item": {
          "id": "4c8664ad-dcab-47c8-b834-cadc30d5661e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a520dcec-6cb6-4ca9-a40f-c131af977930",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc32b23-ef2c-49bf-a085-18243809058d",
        "cursor": {
          "ref": "ca83756e-c3d9-44a5-9669-86fedae6fc14",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "63484f63-dba0-46b7-9c1c-91aae569614d"
        },
        "item": {
          "id": "dfc32b23-ef2c-49bf-a085-18243809058d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8d48945d-9c2b-4e0a-845c-78f2919c8608",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b192067-3b53-4bd3-ac78-8167e6699282",
        "cursor": {
          "ref": "ba6c5376-f6b1-490a-b38d-812e6341f813",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b39074ad-b8de-48ce-a309-47023db9c6ab"
        },
        "item": {
          "id": "3b192067-3b53-4bd3-ac78-8167e6699282",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2527c59f-b0a2-4684-9ee2-2d72eb5a39e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b192067-3b53-4bd3-ac78-8167e6699282",
        "cursor": {
          "ref": "ba6c5376-f6b1-490a-b38d-812e6341f813",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "b39074ad-b8de-48ce-a309-47023db9c6ab"
        },
        "item": {
          "id": "3b192067-3b53-4bd3-ac78-8167e6699282",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2527c59f-b0a2-4684-9ee2-2d72eb5a39e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd66963-f20e-4696-ad97-b915186e5e39",
        "cursor": {
          "ref": "e13d215d-66f2-48f7-a7ed-3be9e8c0bda9",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "8ef99c0f-7531-48a6-ab85-f79c6993c32b"
        },
        "item": {
          "id": "5cd66963-f20e-4696-ad97-b915186e5e39",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "58402cb9-e6b5-4184-8ba0-0624b97c4190",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826d22b4-dff4-40b1-a345-46b4e9f9a4f7",
        "cursor": {
          "ref": "c6292c7a-35c4-46d1-a4dc-789f20e140b2",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "49ff34d6-c1c5-4601-a479-9958d951bc15"
        },
        "item": {
          "id": "826d22b4-dff4-40b1-a345-46b4e9f9a4f7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7f5a55eb-9027-4d9f-a1f2-f7333c258f70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}