{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5806076c-16d4-4838-bf90-4fbf8f078eb5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d1c635b0-f329-4f44-b5e9-2fd3a0b8313c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "97540620-0cef-45df-9d7d-858e65834c6f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c95b9442-9627-46f0-9e58-04daff011db9"
                }
              }
            ]
          },
          {
            "id": "4cb735a1-7da1-4976-9b60-2cd82190d309",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "74da4fd0-6b19-43a6-ba4c-19ad8d25b770",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8ad45a23-124b-47cd-b7c5-3665c55c840c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "35fbd756-fd23-4c1d-97f0-007f2b329407",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d60d939e-9bb3-4b11-a621-778b68d31df7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8f9f9c3-2f54-4389-bd20-ab6da5ff4d3b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86c4e556-9f72-47f9-8578-9ab2c382af9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f697015-126d-4eca-b3de-e1ea6e620bdd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d0343b0c-4fd0-4032-8978-d56562628685",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a871b527-4642-4f1f-95bd-0947e8c94745"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "90862926-0f85-4624-a932-71e140fa6ed1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3d750af4-e499-4320-8b5d-652d6772961c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8631c8a-9a25-43f5-966e-01c5d755e403",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "23a189e5-c4eb-45fd-bbca-f74ca6155527"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8119acfa-a5d7-4a9a-84d0-268a5b9279b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0be58986-b1f4-470b-bf3f-0af0365b33b1"
            }
          }
        ]
      },
      {
        "id": "0389b0b5-ef60-4d85-b5a9-03e833fbc3fb",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "59b7c106-fcd8-4893-99cd-b925484c89d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6ca7c793-5ef2-4110-a8b4-00262a4c0313",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1c5b88b0-5420-4c84-bb57-4a1639fcab87",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a44e1ac-7330-488e-8a0d-76382894bbbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9c255b5d-da56-4727-8de4-bc0d5d23a7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3b0625-764e-487c-86d6-6a5e01f3d25e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af933374-6c10-43d7-976e-8290ee3d8933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5cc4b83-9539-4b2a-a92f-8ed65162793c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee009a9-9d54-469a-a4df-f28cfc21b077",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6e2c0a-10d0-4248-87a0-ee693275aa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01b32315-dd04-401e-8928-dac95735ebe6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "619a05ff-b503-4a58-884a-4a1e1bb9acdf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d7281fd1-2fc9-4b19-b736-e147024d56f8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf4b19f-6c41-41eb-a26d-3c30ff0f88f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f0e24208-d8b9-453c-b51e-58e93018e29d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a8ef95-5823-4214-983f-b15f646dc08d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79823c83-75f5-4613-8c38-8351781bfb4c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3b51b969-4a09-40bc-815a-10d2f5973c97",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b1fa6bff-8fd8-4d5d-839c-b41485bd9232",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "171cb252-6fc6-44ed-9427-9b0f1ca43d85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "153f9e6e-394c-4b0a-9683-c49b56de26ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c84177c-d710-4030-9274-e4163dfda1f2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "68aec012-cd40-4c4a-992f-df184abc3021"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9aa95b3b-f37f-4128-8e56-47e1b00a707f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "abd78848-0c9b-476b-be45-7aae7224b8a7"
            }
          }
        ]
      },
      {
        "id": "8bbef00a-99fe-4e32-baee-55435c0c3222",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0be975c3-4542-4f40-a06a-ce034cea2ec3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4dbd89b1-949d-4a88-a648-57ecd3fe2688",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "781999ce-7446-4ccd-b2e4-1baa4f5d25ff",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db2e7c6-3ec7-4bea-b9ca-2cb073a57d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81ebb992-628a-485b-a62c-1a86ed2cec1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1743973c-15c0-4b9c-8964-8038431f903d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c3aff0c-0cba-4e83-b1df-bec434620a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1deddbdb-6bbc-4ca6-9a7b-631535ee84e5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4e744f-6d9e-4df0-a680-21d5d791dade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e40c65-4adb-43e8-8e0d-a704d70653eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827910d2-849b-451b-b017-2e4c37272a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46935bd5-fba7-4248-a0fc-7445c6b66e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68cd209f-dca3-4c2f-bf66-5147015bdc83",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07746d2-62a5-4a61-bde8-10ad12fa4249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a9d0ee0-2d05-4966-bf6d-b1ca70c28f91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a9b532-da61-4714-be8c-36d5404e97b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c04e9970-ca87-473f-8adf-3d60bb9095ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f141b2b-283c-4ac0-b404-67441ccc97d7",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfcf0e8-3409-448d-a3e8-fa5b6f41c3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3b26e2-a39f-49d6-876b-6fc33b072709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "259b8f37-4733-4dd2-af87-fc08cdacd69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a52fcad1-e5a0-4772-82e5-dbbf293f5e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316f685f-1589-4263-9d7b-0f92ece6f94d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe5b8dd-31fa-4587-a08a-47c60ac92eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89d3ea53-fd34-4854-b4bf-91ca8c2c433a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc25309-b7c6-4523-8d3b-194eec3778a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8b6cc223-ac64-4033-b865-5b1d34909e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5a634b-ab4a-4686-864b-171e0b249849",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba973ab2-8420-4129-ac54-772039723fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d26b1bd9-9825-4020-afdc-79c1bbdc334d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1693e448-b745-45b7-b89d-2a3eacc32453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7966b2ce-d860-46d9-9fe5-bea104954343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5749f0-a4dd-4b01-b5dd-fc799a7ba7f5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826eeb15-653c-404d-aaef-ab354e7e2c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c067ca85-bea5-4e92-9937-2b7d19d3ba2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d63464a-f767-4900-b735-5f9708d6fe4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d20147ec-7103-4b78-9f79-3324de49581a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ec05d5a-2f7d-446a-8543-8ba927559c56",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a547d26d-d8ab-49b9-9437-f61e4f880c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35917249-8c13-4b39-bc3b-d33b6f8836c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02826054-2f86-48ca-963c-8824c3b8a623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32556e52-5bae-457d-9253-ebe2ee7ff924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f972468-fdfb-49e2-9219-7d8575e5c722",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e31ba529-719e-49a6-8ffc-0292c600bb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a51d4d-38f1-4e73-b7f8-191a5f34dafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "040499f3-1f1d-4ce9-966a-6f07ba0fb912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a04437bf-b425-4d7e-b8e3-da2e60f2c84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38039d37-2c45-45a5-a953-c0facc2eddfd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b974ada5-49c4-4590-b5d2-52e048e944ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf8f0da-2b94-402c-a79f-be7b3bf2f7ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0056174-21d4-4d21-a50b-c7e5e10a5ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "004f9f4e-b737-4615-8fcc-6fe5b629ac7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3bdaad9-a99a-4074-adec-9ef982359df7",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad23584-8601-49ed-8889-73ec991e494b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "257fa1c5-5cc9-49aa-acdd-b8d20411f066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844ff93f-77f2-4932-9ceb-39eb06d129ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbdd64b4-abb4-4d2b-8793-16e0fc99a665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3569583e-6f70-4c44-97af-09ef3c1560b9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e52b7fa-cbc8-491e-9b45-2102e458b8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6af13c2-a4c9-4064-84ee-2266569b2e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa58f810-8b48-42f0-99df-494ea9e4ac4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d538cb41-ed16-4d0e-8815-405593984793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b1144c-9f72-41d2-ac3c-9d2617bf1c6f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e8599e1-861a-4cf1-845a-0aab521feba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda75423-4294-4e45-a630-205f0c0ffa04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1affb5b-2d83-408f-8e47-fe0ca87fca90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1445a4dc-ac1c-4394-ba92-f13ec6424ce7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fe1cc4-5bf2-4bd3-b594-973e5b9a5c11",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78904544-72f2-48b0-bfaa-43f8a225a757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a411d64-40a4-4fb3-b39c-b180b1d25682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a72e94-bd55-4a04-b216-3c79db320238",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9db2a913-4dba-4239-b1dc-138c2de680cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716e2a17-1a47-4ebe-902b-739460d2564d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e15e6ea-30eb-48b6-9fb5-5fbe22468b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc90954f-e9e0-4544-87fa-71ebae5e6a51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1497432a-8257-4072-956c-d2c17395e8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da77880a-158b-41dd-8c0c-a34f860dce5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f98516-d7a8-4cb0-a80d-81f9ffc1283c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9dc0007-a172-43fb-9167-ebcdae68ded9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb3e41d-6e17-4b8b-8371-a06f04a997d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdef365c-cfc7-460c-afcf-be4d92cd0ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d43a65aa-44a6-4aa1-a141-374a2ff570c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d390cde4-e71b-4c73-ab64-0fc6a48a0951",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab94e86-6842-425f-b9da-e131c49d40c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae13235-8995-4e73-909a-80d697d98183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5587956-1751-4ae6-a403-69ff2e51001b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a15022c9-d70a-4105-a377-fbb4f381561d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d2a579-9b83-495b-9169-43c704a93a30",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "774c10b9-0079-45d9-b4b1-394799e70be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bff83ad-47ba-4098-8185-8d0e76dd6e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce3b0e1-6613-4ca6-a95e-d1ef9c3429af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e14375c-699a-4272-8eae-a72fa010b309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27317ed4-5c73-45e5-9cf3-4c0db29378e6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e175ffdf-2350-4890-b483-50e954b04eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0993641b-80fe-4bc8-87c1-538d82ddce7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041c8039-2392-46bc-8c14-121859ffff76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40e82121-34df-4dfa-8513-f4d8dbfabc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce52b5ab-3c59-46f9-8e9c-def27b12eccc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29c58f9-a5d4-4db7-8023-a6e09aaebda4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "824d87f1-9f13-4874-8e38-ec1698aaf529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ae0480-c71f-43b5-add3-3a3702a9ef9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c5b0e55-002e-41d7-9b54-57248e5ce433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c33e8eed-a521-4e26-9da6-925a117829aa",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7dbe1b9-b63d-4c99-ba91-0c44aedcf88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06887a1b-403b-4cd6-b2bd-d77d45bd555a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a9330e4-8967-4dd3-90d5-21fc23a9bf1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5278108-c298-4f69-8fc5-cfaf6d8977c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77fd91c0-351d-48d9-a100-41ba11969136",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08608f78-63d9-48e0-a264-a4531d40b7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "486e6310-8ef2-4ba6-8585-b5554aa47373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e8750a-be3f-4e29-913e-c72adfa0c9e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa896ef6-a944-40d3-b0b1-154083958f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44462bed-4a6d-4883-bcb7-889de18858d9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1faa0c4-e154-4dc2-8980-53bdaf7f9fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "032ebcd4-f200-4128-8ba9-312cee74350c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235c82a1-19ee-4258-8fcf-3d41f85f0d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e370598-5110-4998-9d9d-e33d7cfafd2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc87df2-36a5-4541-ac16-108511eff254",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d82068-98c5-436c-8795-8ef073b85bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8885c460-0347-48a9-a493-cf68d697f5a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc90ad36-8875-4c39-b53e-7b25d83d13a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a18a127-0049-4a52-a432-bc47f237a2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c70487-48ab-4027-8405-9f5ab5fa278b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5ebaa0-5656-4993-b783-f14db98cc831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba380703-fc8b-4402-8cbe-56a0bcaecd8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11df3390-4d56-4b58-a285-0cef262e8352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67da8958-9065-4962-a447-b73077ef6883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f826b3-414b-436b-898f-bf903784e966",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb44f805-adad-4ca5-b93b-d091c9c2d721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "046c7b67-fdd1-43fb-a9cd-f463fedca7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe7c572-c1f7-436a-8083-afcb0f69c399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd9ba778-3fab-4e56-ba0c-e073f9c833bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88f6eb9-8607-47e2-81bd-b199db7d8c3c",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ae16ff-e18f-4791-ab58-63700a7b619d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b15d531d-84b9-47eb-813a-369b6da2508b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ab5f6a-fdd2-4f04-80a5-4463920b26e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a626fbf3-a063-4318-873a-9eae82cf579d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03d36d5-0315-42df-82eb-80c480c35f5f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08440288-a40a-4240-8d12-463924879729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10058047-413e-4d2c-bbf5-037b5bf2600f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83dbf354-80cf-4a21-8bc0-60575f422dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de605e7d-fd8b-47be-b046-6c9da6b8a3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df375c10-6fa4-4e7b-aeaf-bfffa44b2c03",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fda69ef-995e-4468-a86d-66876555f548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1b5442f-7202-4c0a-95a6-6e1e13323914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b687a8f7-f0d4-46a4-9eb1-095899bc84f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "009f050d-1312-4bd8-a24d-90a49ec98586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0799ce4c-b801-4a85-bdca-69efb16cefb2",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72b4234b-01ed-4940-bbce-99e3cb9162e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed24a90c-3104-4870-a70a-55873639f6de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cef9704-5f93-4ba2-9111-5ecbd61d46b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e096bf6-cd17-4ffe-ad64-39fd34f14860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3a053d-7b77-4d02-9398-d773420ab152",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e41b4bf-c1b5-4a13-ac11-656ca9eea58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667d8933-88b8-479a-8b8d-16662d941055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7cb06fc-f42a-430b-a5b2-813be314b8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2fe6093-0e22-46a3-9578-4b539c143e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd00bd7-8941-4a86-b451-4c85108d7881",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49498a1f-7f9d-40d0-a4a0-8779a9c9aee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ee35f2-e906-476a-b60f-2cb03deaec6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613ccc1d-6e61-457f-b68e-f4e557821fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47a69d7f-7248-4508-bf10-b98cc83665fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab6a64a0-ded6-4b5d-ba1f-fbb7ac65bae9",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4d0569-21c6-4853-8ec9-e97d62cb66bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "370ceb96-4c5b-4e8b-8145-6fa3d123a460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0346ed-3627-4095-b7d3-56ede0a88738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f65b3d4-9577-4a28-89c7-b65edc0e3a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0505f93-5af8-4ab7-a82f-0264d9d52218",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84aef74-e3cc-405d-bb3d-de64bfc053a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25efb890-ddb8-4751-81b2-4b9b0cdc5cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a323121d-4626-478c-8430-5c1fbe603da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae722cc-0023-4d31-bf4a-0d02dd448944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3040c22-503f-4ed1-9d25-f6063fbbd868",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bb6b85-36ca-4fdc-acff-b3e0eb688bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e3a1cbc-255a-419c-9019-a6b519bff06f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc25a25-c179-44c0-9dff-8c4ff5095b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "2fafadb8-ebec-49fb-8719-e4d6f94c983f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc3659c-2c60-4cad-8fb7-13a9e28af017",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2eda15a-bc48-4d11-a9a7-3e1a0d537471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "347e4ae6-e112-4ca1-b9f3-bb642fd85f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b84cbdd-bd63-4dcc-a539-2cc03b1c4e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9e6b3c65-225c-46d6-9316-1d1485ac0fa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27bf0366-e6af-4952-9dd9-fc9b5c1012dd",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7321dc0-fe05-4b26-92b4-6cd95461529b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f52a1d-b96b-40f1-a2b6-ff8daa8ec32e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24bc56c-8880-432d-8c39-b9205e3955e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "463ba9c6-3aad-4896-9c8d-b0ecff1a463d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc081ae-e5df-4596-a80a-9308dff88943",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0260319a-0b8e-4ead-93ab-e4af42e063f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf02f5fb-be81-4cb4-9c78-9b7433edd138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b889dbf6-6127-4dcc-a87f-dedb698b6f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5710b9-de20-4ce2-97cc-d4be92a6f438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b17979d-c000-4419-a661-a5a799440083",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5100ba02-7621-4e78-93a9-76aa197732e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63b9561-b8bc-4e94-b2a1-a1265c994878"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7bd1c8-a6ca-4107-b0df-babfd165ed47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "85e41c1e-f71e-4656-b1a7-d60d494a37bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b346908e-c427-4103-a3e5-a8025f65605c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3545050-7f3d-4190-9d3c-ecf4d7652ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e15356eb-68ef-4260-8403-651b9328e2de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6554c81-0ca2-4e3f-8b81-0ad559812627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "621f9485-d4a7-4259-9a48-028d5d7ce450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b85221-e026-4284-9e52-51599e244b5c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74a8f57-52d6-41f2-8b2d-357fe4b49f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19c3c2a9-71f4-46fe-a3df-f7db188f8911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e84513be-de0d-4503-9fc5-b2d4df4f5ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "91d57b3b-1b79-436a-9be3-bc10bc9ab957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b3b2793-bce4-425c-89f3-12aa540b5e92",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117722ed-01db-4922-bc08-2cc6053db394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c466d6f-6d67-4353-8ca3-b7e9d174c3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a160e8b4-3a59-47da-ab21-1bfbef847904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5c0c35-601d-44a8-b66b-68c39a0d4933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff66fd0-eaf2-4757-9e68-9570f2d72623",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7669dc9f-790d-4725-a102-3880a0c15a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053596d2-f8c7-45a0-9bf7-2e8ba606be1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0c2e406-09ae-4ecd-aa4e-9e5aa67e364c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "4dcc56bc-9ae5-4a8c-974e-33a37b2a4078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c58ae92-d014-40e2-b68a-7955d04a911a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1a7c4b-fdcd-4e81-89e3-802f7f92189b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e0e07b-1e6e-4abb-9458-6ef95ac7dc62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013f6ab2-8a10-40e4-a8d8-244fc8a6f2a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "717202d2-f568-4a9c-a925-4d7565b2a09f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa19460e-2ad3-4659-b312-fd8207986afd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010ed973-279f-41ee-ae67-36e059537d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb71ad30-9aa6-4d2c-aabf-e74e67c2a884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0125160f-6002-4a83-b309-38523b7010c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1672d635-14e7-4f5f-a6d8-34bffcb20e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f4d7d8-8523-48a4-a6ab-66442bacabac",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41674cc2-1513-4bc0-b3b4-2c22f250ed95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18f3dc40-eeb1-4044-b525-68ce1e065f29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b55882-ce28-4d92-88af-0fc118fda8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95b2498d-f2f5-4c83-a519-21b16826a7d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68df9efc-578e-4492-acf8-d58182c0c5de",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972474e0-6017-49c3-a2ad-2819089207dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb40d27-58ed-444b-ae1f-dc353077ac12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8d11b0-0f43-4ff5-9edb-fa68d73dadda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b89f5b09-aa3f-41c5-8913-4cf053a4533b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a6365d-9dea-476d-b288-d5581285d340",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8887f4b4-ea49-4e85-852d-27c138f04734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9336e7-66b5-4d67-b1e5-5bb1feb7a963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04857ba1-d85c-43ad-b185-6047a0f083d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9068b62f-8e7d-4514-bcd9-cb0c3d40fbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132775d6-3837-4828-b992-b60fd1644606",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c50b753-345d-48e3-8fd1-d4163d94b822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd883ff-144f-43f6-8e25-598696f29120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a996cc5-6777-4627-9aac-6e37f2a9a3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dae34540-1cb2-4c74-afc8-daad9220f697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "388f0c59-49bb-4422-884e-12c2c79a05ee",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128d206c-8613-4baa-b89a-87d5a3fe009a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d977452-cdf7-46dc-9d09-d3f9c155d59d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b481edd8-036c-4f72-967c-16f9c5fc575a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f90b2d73-5b65-49ad-8ee2-811483f423ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19156a04-5bd1-4c60-9559-874e99fc39ed",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28859ebb-0466-4832-98bc-8474f00c1d3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c74ec75a-b72a-4976-932f-b22252e710f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2eedaa-d676-46eb-bf2d-36f29f01a64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c46ba85-27f2-4895-9698-fe97be99b4e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582fa53e-82ff-44d2-aef1-d1c1cc977e6b",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76088e17-3532-4aa0-816b-ca6c18e05438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce2a53d-68c4-4caa-8b10-70aa491e055a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d1ed44-88d4-4a66-8254-d09c50627e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c352b1-cf4e-406d-8db1-28edaff97d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f34a92a-6aba-471a-a02b-2a7075d0d24e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6ef0b6-46fd-40e1-b89a-dc2c07293b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "460b99ea-5809-44df-b40d-3910153e91de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82653e2-64c9-4d2f-a991-9066b414c665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa42f524-287f-49a6-b86f-b189a19bf3f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17586a94-4dbe-4bb0-8007-06fcf5e62413",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabe7991-7c36-4ec1-8ad3-305b43cbde4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ebcbac-76e8-40ae-8f92-7aaa872102bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e65139-0e90-4674-8e8d-80273849fc1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24ff2f23-8128-4f70-aa83-57def7469c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "802ae8e6-5341-4a90-87f1-27c5da448d01",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba0e87d-03e2-44de-9a42-ba28fb88e3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc493c9c-429f-4f5e-a93c-0b8134d85abe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e30b97f-f2d8-4766-827e-c89bca32ec6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3860f8b-99ce-4456-b438-74cc6465a553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d41fa6-42ad-4e90-a707-37b1a1f7c0c7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4642bc2-63c5-49e6-a09b-d1ef757282e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dc764d2-3008-420a-af48-81875172dc0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0940f9-6256-4044-bdc3-b55638cbb6bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d3aa3b35-75ac-48a5-b0ac-786e451dfc25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc335000-23c9-43a4-b3f4-1270abaf3b23",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dfcf8dc-e70a-4b03-953a-d42875618a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c371a7c-5f63-4a2f-872c-98e3a270a20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af0b15f-6ec3-410d-830e-ee46a1c65074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "49d8811f-43ca-4d15-86d8-d262f29fa0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6a1215-9e2f-417b-b0ec-7b9974420d1b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b31662f-7b0c-4d43-840a-0ee4adfa9050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ec5e57-c8c4-45c8-bf69-679d23f879b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56f1e5c4-208c-4a2d-a4bc-bb7660da5a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "af99d4ad-6a9c-4cab-bb26-8dafc36749be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e007c450-4e9f-46d1-9973-e1628995632a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd3f399-5e06-491d-92e4-accab557fba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97177046-8782-44db-b377-c1a6e9150238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07bff8f-8e66-4679-8fef-3f1c2129331d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3be43846-994b-496a-9a16-3d11f90f111a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d36136e9-72a2-40b9-92ed-bd0be71e0a9c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc9a8ff-d076-40b7-a47c-50c6eb6683c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e9b147-ecee-42d7-b64b-a66731d83a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f62c762-662a-4d35-ba0c-909709aa8d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb6b67a3-6ed4-41d8-9c49-bfb52ccb15a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0ccd4e-07e7-4db1-adff-ce45395b1872",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5376d0fe-fc2b-4300-8a12-0a0f066c7677",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c165ed64-ab3f-4287-8e6b-7271ced02009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27686e34-61ab-4219-9ef0-b4244a2d7bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0793ba16-8914-449b-8922-2ef7fb4ef02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d97509-e0f1-4d98-a206-d30b32b146e6",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae50d44-8b4d-40a9-8c5b-af96b464aade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54a452d9-af45-4760-8dcf-87e5abcb50d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133d9aaf-7276-4227-b4f5-19b06acc3a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "423096ca-8d3b-402a-aea1-50faa019ed28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1a6a0f-f242-4a58-846a-d5ddd3769a6a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d773ef5-a681-4bd6-a0b7-c7e654a80be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbd6f759-cf87-4512-864e-da29868540fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18da9f16-ea06-4f77-ac88-be4610306b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3f9046a-7979-4c76-bfd0-f4a7e6244de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bbcd44-1ea8-4000-b20b-f7f925aed645",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31c52307-30cc-4739-8183-13d710eb481e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce35a9e5-d675-42d1-8ffc-d5e053a24413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef33b60d-76e9-43e3-b5eb-84607ed0daed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92bd1ebc-3718-45e9-8575-d38421ced875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c56081b-6dcd-4b37-8441-fd4e58ab13c0",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f3bbfd-be77-496e-a0a6-8fdbeee3142e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74979ec7-c862-48b6-8473-b45935aad81e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140398c3-afa6-4240-b71f-91e6165f8244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "50700408-11dc-4393-9dce-7aa943e1a3ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c9efaca-7bfd-4ee5-8b39-c37dd4f1d6d5",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e59d08eb-8cee-431f-b703-62415c01f20b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67568e1e-18ef-4aa5-9f85-4885d9483555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede9a435-9e4c-4d19-847e-d1de8a28c972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "774de7a5-aeb1-48df-b403-57a0b20eae9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df70662-627a-4a21-95b5-0b9f84ec21cc",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ce5404a-d4a4-4776-b722-0484ae991d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f70cf0-c024-402c-8a7e-9f046358e68e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "712a00f5-ba78-4ff6-aca1-3698f2592762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e85420ff-022a-4f58-85c2-65f907b385d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265ceba0-336c-49ca-be2e-934357804fdf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5215e72-113e-4ca6-a0c7-b236884dd90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f4d85af-3379-4f55-885e-bf358acac11b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438851cc-8869-44d0-8d5d-e5b88729a279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cca5435-6be2-4fc4-a374-909713f82c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d304c1-dc7b-46cb-907e-03d83b8378fd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf5f130-4082-46d2-ade1-da718c46d502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "659a185d-e597-47e1-9703-147b04108f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f131675f-1f86-4293-8602-4a60b6f4e1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c65390e0-3fb5-4119-84c8-ddd05e56a6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6de372d-06a0-47fa-b9ec-4a8ee51370ef",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1608a692-b23a-404b-ae60-53ff1be62fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea48931-f930-4adb-a989-c44337709b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ae8e4f0-a1a3-47b4-956c-b788ddb15523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf71c9cb-4886-47ff-91bd-2a4b1370b533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6a63bc4-8bde-4e0c-a277-a6d258c453fc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61661ba3-1b73-4db3-a0e2-d389c44db453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8454148-a61a-40db-ab87-285ba453f801"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b309657-c769-484f-97ff-0af8d04e1fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f410b4-6bb4-49a0-ae04-9bf70cc3627f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39640a8b-773a-44d7-b0bc-e511d6213836",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5feb63-7e90-48a0-b744-c002baba9f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a53cf63-a437-4d8d-b914-90d1d5660caf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43afbc2a-a2f6-4abb-8b99-89ca90354a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b79c0f2-d440-4470-874a-980614aa1b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b066b0-09bc-4c46-b117-b597469324b7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3232529f-b51f-40a3-868b-29005e8502e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30f1626-7ceb-412b-a4bb-78b04108ec0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707ff396-d0d2-400b-996d-24ef2fcd57dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "881b2627-5a8e-4238-ae79-f841af146da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682dfc3e-6f74-4e32-8554-560cb487749e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9955a301-fb1c-4497-90da-380a8ea9b1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92a1936-f3d8-4c39-b2ce-fd418865a3bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf95dba0-c0e6-4b86-bc51-312c90e387d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e68603-3d86-4041-ac2f-44d164c8b42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ff8225-ae17-473c-a67c-ffdb402588db",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d74cc0f0-fb76-4658-ab42-af982a2b8f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6bdcf0-1ed0-47c8-b238-8e4cab2ebbf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdf904f-7396-421e-95bb-0e4cc2b32941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc762a77-24b6-48d6-a039-793143051bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35de670b-dfb7-43cc-9ed8-b9ec939c3ba4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a314c864-f014-410a-936d-324ed69f1945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e26bab37-8687-4bc7-b783-02b5735284dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e66a46-993a-4a60-9584-b5cb58053082",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bceffc96-40b9-4735-95e7-1eb48bc74aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a34e7df7-55ad-49a0-a40f-1509e55918bd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac93e5d-cc08-4521-8302-a321b3b77ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d86e6b11-ba28-4757-8590-fdd7903a8346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8b6ebc-f575-4b68-857c-791e2bc6288b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2df65b65-0577-4ebd-b3d8-ced2352f7f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a2cdc56-bbee-41e8-b627-d116498e56af",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26e47446-4d16-4eab-86da-55c7024d83f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9def1c9-19cc-433c-b794-b011708ee752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69edbfca-4c2f-4d7a-b9c7-3fd80fc5c7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3670c7-a3a7-4123-a516-3f4694d8f27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e2f1ea2-c9a8-406a-9659-cf0d55a892db",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d7dfc0-bbd8-455d-9a89-9d998f63c3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e33acb60-18ed-43ce-be24-1a1e60d29b1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4ff2bb-5979-4556-8763-a6cebff1331c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b66db1c-bb39-4356-a771-6ae586a1608c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf30c33-5004-4491-b1dc-f6b3ac184bb5",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d178add-ec65-4162-92f6-251d5e7e7f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f3f396-a818-4e49-a5ab-5b3f6cc99c54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "019cbcc6-3193-4d44-ac36-eac126ed3332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4feaa427-1dcd-4627-8683-0830d81fd6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "964abbf4-7b16-4cef-a742-be635729a306",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78758ae8-fdd7-427f-8cc7-0ef9c58aae31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a52746-4ea4-42ff-b6f0-f38d82dcf70d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d276fbd9-f37b-4692-95f4-9fe02292857c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e083cc12-23d0-4414-b63f-edecaebaad63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebde240e-3ac9-47e8-ab12-8b1d56aeac98",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda061a7-d801-415e-aab2-bc05083a3cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee331fc7-11f7-4cd6-8db9-8138adceefd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47998e7f-8733-47ec-a9ec-d7e210542c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f2ab03-974e-499e-b03a-8857d41e29d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaa1a879-20d6-4ff1-a12d-5e9314e3e8d2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b74ddd-e777-419d-84cd-f27862aa8ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d13068c-09cf-4db9-a949-ce91178c95d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a143d08-37bf-40b2-98a0-2da78c6d2f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc18c529-4ae3-4567-a425-456a84be5a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a90284-c481-4cb5-8902-00592613773a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef29c627-dee1-47be-8986-c9c5b53823b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ba2139-f23a-4939-9605-6c199dbda70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45c0be59-96f4-41e7-bfe5-71921a6ab17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "67229ae2-71fd-4357-8ff4-f0581fa0cb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3ec37da-786c-4a92-9502-f762b910f4aa",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6291d70-8bd4-419a-8302-90daa9d32142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fbfccc1-8e92-46f7-ae0c-ae159da2ebca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361ed786-b463-4108-a2a8-4871efdead89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0fe37a-2e14-4a05-9ce1-3b3d9e617060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b2a02a-66d6-4c32-804c-4ceebeed272a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd9f9b1e-828e-4e17-b791-8d1c0c9a4dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b337bacc-59a5-454c-ac45-96d49e731647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa36844a-cad6-4d13-bd9b-c39f163a08fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4064ca00-5567-4adf-a761-e7003b8b74b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705ec5ef-959f-49ee-96e3-a611ae62d586",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c01c734-f6c1-416c-8f8b-13d2e0abf6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810453e9-76f5-40d1-8d51-084225351fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "191955b6-62ad-475e-9855-d98a39bb5879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2d7a22-2929-4edb-937f-a31ee1a23289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da2b903-216c-4bc5-9a69-279284f844af",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba0c9f3-9186-4512-831d-a383dd873b65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02491fb1-101e-4b44-82f1-762d69946d2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05f9f62-740b-43b5-b96d-5ffb04a8aa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "898bed7a-1ee8-4298-b49b-fdc101519a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b16213-5c25-49fd-8347-ec6c6e0995b6",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c4b938-b34d-4d8f-8915-aee60a9ddb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f4beefe-c5af-4472-b20a-64e8c86e5294"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a681cc-1705-4da7-b44e-6a83e5a95134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c18571f7-5fe3-4d60-b5b5-586380796bc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9718121a-9527-4d84-91b8-d2f327455235",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f601b9-d9c7-47f1-bb4b-4787a48cd2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06c617c9-931c-4363-8eb6-30538e01f1ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ea117a-501c-48fd-973d-88d14feb0ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "754b4822-9a12-486e-ad20-87949146704e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a54ed4f2-679f-4a88-879d-d5caaa44e589",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "566999ac-3432-4053-88c2-0c587ee82bcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2efc12f1-874e-4b2d-b2f4-bf9854a2514c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f621577-617f-4689-a724-ae394f85d8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "223e0b55-bea5-4e4b-bb1a-ee01a7351521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dbf5989-8531-439d-bf65-181225befcb1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90069f52-8bf7-4dbb-8c53-614f0bf8cf14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "09083c53-ffdc-4a8a-ae10-d6ad34b1f564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a472b0ee-d32b-4869-9840-6ea42eeaf68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdbf599d-1e6c-4007-9e26-0bed636b6e70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "780d8ce7-dd0c-45c3-adb8-40ee40b0f079",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e88599c-ea49-4692-9b79-684ab5b4e8c2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "793f305d-1f7e-4ee9-b712-63a3c434e98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d71907d-9bb2-42c4-9f95-94574125214b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87177e47-5bff-49dd-b9ed-dbf8de8a89ca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0660d97a-0e73-4ab3-8cc3-8910dd136c21"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8492149-0ecd-4042-a457-f1b7f2899946",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab2fbe29-202e-48bd-be9a-923775afa667"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fafa8cdd-1e36-41b6-8b09-d63db69ec226",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1df6c2aa-aa4f-46f1-b20f-3aaa695d04bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b38a148-6b9f-4d61-92ee-3317d2b52626",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57e25d55-ae00-4cc7-8af3-3b43f47deb9a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d1dd927a-f40a-43b0-b92a-974766e5aa2a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "db049b90-faff-4766-8ff2-cd815471a2d3"
                }
              }
            ]
          },
          {
            "id": "a15ada35-0e7e-4323-b1c8-3583e704d692",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4eff6fd1-8459-4878-b79b-7f26d9332f88",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76affbb4-e275-4986-8847-3beca9edfd01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26776241-d3b1-4c35-95b1-171942aee280"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6dbf2bb5-8ea1-40ec-bd9c-429f125a708f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b5b20cbb-11af-48b3-951f-077094adb354"
                    }
                  }
                ]
              },
              {
                "id": "100734ea-4e25-4f33-af71-b74432a47fb5",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e95d0f9c-34c7-4ede-ac9b-e3133e4fee4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1909a51e-9735-4c00-8422-64bf48195900"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92c92209-3529-4aa9-81e4-4a49599cfee3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "87e7c5a3-fbe9-482c-b8cf-b5875b769e36"
                    }
                  }
                ]
              },
              {
                "id": "362af58a-b87d-449e-a6cf-91fc45c111dd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc5019df-8a38-4833-9ab0-7eb811f1c266",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b10afcc7-f505-43b8-a6ea-167ad61c141c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12db4ad9-d71f-4aec-99af-e49fd7692015",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5f5c95a0-5ef5-44a9-937c-4f7c635a1c54"
                    }
                  }
                ]
              },
              {
                "id": "9122a8be-ab35-4a2d-9bbd-72963d47a891",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "53ae3898-4376-4dea-ad15-5414f1e33847",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a0db7c7-2e1c-49f3-bd80-cef4b82d8236"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87268186-6d4f-4f4e-83bf-24864f3f8699",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7e631f3a-cf32-4501-94a8-9bc4739dc4ab"
                    }
                  }
                ]
              },
              {
                "id": "9dbc208e-db77-4744-b4fe-0be8a3ea2b82",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d7554b0d-ac29-4e4f-bb95-226cbc052b31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "751fcf74-8152-413e-b6de-e198faf4a337"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edb7dd92-3002-448d-a905-2594f9e24474",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "27a62aba-bf53-4772-a7cc-cfb2b5f2eb55"
                    }
                  }
                ]
              },
              {
                "id": "53ce878b-6692-46cb-a3c5-9ad6c507ac9d",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc0080fe-3c17-4705-aa0a-4bd417b2ff37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e3c67bd-e902-44e0-a78a-93154e6b14f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57dafd24-6c2c-4d1a-ae43-05201e22ac96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6981c59e-36b7-41ca-9702-9977ca9caf3e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "92434fc0-f83e-4b32-b794-35ac1cc8b27e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8ddd6679-d020-4643-a690-b95aced8ff37"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fc80f7e5-96d5-4283-9f4f-dbded86c0c52",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "321cefd4-2ed4-4baa-b023-5aa92590c8a7"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fea1d059-387b-49fa-a04d-1b9c7eac6e47",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d22801f3-6f02-410f-bc14-739d9f7e0f8c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40d03f7d-ebc8-44a6-a086-55323b6b3463",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91027508-6fb8-4de5-97ed-09f0ffb0640e"
            }
          }
        ]
      },
      {
        "id": "b5d3ccda-cfd6-4e97-9992-c02242053bcd",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a69290fe-597a-49a4-931f-4a97d93b30d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ebc22722-6bfb-432f-a27e-32df6a9380c1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "408d52e3-493c-457c-93b6-a5b2fdeaddbd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a87f404-9c90-4f63-a518-be9b56f7302d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8e90ee-01f1-4631-a933-92eb806da121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9ea1f9d-089d-4457-9910-ae19c4f65b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf26558-073b-47d5-adc5-6b261079474d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90bb9ba-4d0d-4d5e-aa30-674af75218f2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4807dd4-03c4-4cb2-b205-1b3b45bde48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b9c1375-5875-436e-905b-0ccc2f651d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd8d637-84e1-405f-8ed7-fcfb2105285a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c08d7ef1-1c46-49dd-b8f5-08f509770b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccda03c6-2f4c-416a-824d-57c4bd600f10",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "086b777a-dd01-44b7-b27f-b2eba2a3c310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e701ad7-d122-4596-a722-1657c5cea991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdadbff-5af0-4b80-980a-b20782c21af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc304b0d-8ed9-49bb-8801-503fc1893cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9708e71-9b54-4c7f-940f-88f57893405b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629b9602-7422-4f30-acdb-c9a98b169d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7630cc7f-20cc-4bc2-8dcf-3cf874a4eba6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257ba558-3466-41d1-bc11-7ead17ab4fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ba35132-5126-4454-9897-b0d9c756fb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305ecd8d-0e90-4c29-a6a3-f325b61fc47c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bcd9590-6a72-422c-9c6d-dcc49ede53ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a02965f-56d4-46af-aa19-70a5a00005e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1319bc6f-a6c2-4174-9d2f-e310b5fbdd5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd959839-b7db-4055-9521-ce15f315daea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76244660-9d34-499c-b3cf-f8b3c8189a13",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef8c4cad-44bc-4154-beba-692c2dc6c5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b94057-182c-4cf7-9a25-21a59597f02c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dc82e6-7f38-46c1-bcc9-f162e720d9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7674682-e96a-41d0-88ce-e7322702e94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc42404-aa25-4204-bce5-713af9c00050",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8627f4-f2e7-4894-a7dc-4a1816367ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "112d9d5c-59ec-440a-87d0-b028d25f1e25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef50fa9-d1be-401d-a2bd-65023ba27dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "99a47ad1-9c27-4410-a33d-4938896a2061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f5713a-258f-457f-893f-3ebdf75b56c6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e637bff3-43db-4ab0-b0b6-5826e880adba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01f83816-3e36-412e-b5fd-859049a6daca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe010f6-119f-422a-946f-d6f34c82791b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9976fbfc-9687-4fb2-ab11-09dcbf62460b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff10283c-fb57-4a8b-8234-262f5e68a008",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54ebf68-724f-4e33-9d96-fd24849e20e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32292446-a1cd-4920-a775-b3a4a91e09fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626fcb46-fab0-4fd7-bc93-f5315ff2f6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68455270-226f-40fc-abb1-48d701528d05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814a4980-82ab-4d51-862e-34fc0693a2bb",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8740a4a-cf78-483f-be6d-b152a5cfdc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d5c585-9ba5-4490-b6fe-ce4d5963cc4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09073867-09b1-4fc8-bf00-81cd2c94ea3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b27597a-bf33-4dff-ac90-f19a0c189cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f42c56c-fdc0-47ec-8376-55b99d7d9e20",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbda3b5-29f3-47c3-b649-68b213985f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f705c05-d909-43f7-ab5c-f01efb7e5f34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55ee14fc-33cb-486b-9a3a-944bc229a225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "31f5b183-18d9-47d3-8b8e-78cee80b20f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e0318d4-c080-4b37-a9d5-24dfdde6d2b5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "250e5592-6507-4edd-9111-1de723881e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4d21767-6cd7-4768-90fb-ff0655b58692"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f29e7d-df4e-4240-ba60-df06cd0f7235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e276a860-7ba8-479e-afdd-c9ef0e01c469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d16d73e-1438-4640-b2ef-8ed1b3c9a1f0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae41a40-f28a-4d94-afff-9459d886f1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "441103e8-3d68-4993-81e6-0dc6089bcbf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5951144c-4d85-4c5e-be45-23e84201b8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a228acd-a597-4038-8220-bbb4bc5a46b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a78a40-b9cc-41ed-a4ee-c0b27be1b69c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8776b4-100a-4c27-8e8f-050cdd548baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c906ceaa-7816-4a3e-bd1b-ba397a882e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0acc051c-a5d2-411a-b14c-4c9c446fcdf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "48eacf76-f0da-4aa9-abce-0e9ea41cb33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d4bc12-b5b3-4fe7-bd57-1f48251738c8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817d5761-7f6e-4a24-afbc-3c5c2441b0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4dd38e-808c-4996-9bfd-9a5d8f48c2e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2eb4be9-292b-4f2f-a03b-56ec51f9f2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5add96cf-6ef3-423f-b7d8-2ea639c96957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c0953b-7f79-4b78-a1a5-bb7ac7cf0ed8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82548c47-db1b-46b1-b69b-fd4ad8774d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289bdaa4-7aed-4315-8859-8746bae29430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afad487-4bfc-4326-bd54-d3abc3d8fd85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd3c73d9-fb16-46a7-86e7-137b2ed7e8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "550305db-3988-42b7-8ebe-1370234c8471",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb07a79-6bb2-4782-a692-1a863bf48e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d65e71-dbd7-4a1d-afb3-51fb57dd001c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75dcf42e-e55f-42a8-afef-82ce8711c3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc877b7f-8309-4304-9e84-d88f1ad1ca05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ea1734-f4bd-4d67-be15-c5b5ef8f8b14",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8f3d27e-1399-4f49-bb55-dc85d814c0b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c300a26-1b94-4966-b4ad-ba86633b5af0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f214704-1348-44b4-8660-1f48508cdf1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7107410-800b-4557-b6b5-844515e10a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8250634a-e2e8-4d0e-ad5b-7821f4eae3c3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b241ad3a-6b67-475f-bcb0-1e054eedaa34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e7a18fb-6839-4a8e-8a33-f692f2e4fc7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb9be06-29aa-497b-9492-efc888173102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59689eeb-9e4f-428a-97c9-6c7afefe4aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e45bf2f-3106-42d7-9e70-9f41930c70c0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cbfe74-1b08-4823-94f7-1089ee320e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36940cdf-6c0f-4f6b-a68a-5ffe5dd2528e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81232864-c3b0-4624-a313-c018fc1e37a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41a863ab-0bba-45e3-83ea-eaf993ec4acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbb4468-ff5b-4fde-88a0-0fd61adf47cd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abed4445-6726-4b6e-8f68-f0609e7b999b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2b30aaa-cb73-49dc-9f1d-31cc2b390c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4783828-d801-4d40-b025-760fde7a2cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca449e46-2a7c-4b76-904e-c5ee246fc12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9707e50-565c-494a-b3eb-f2ebd5d769d9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7219a066-c37d-4d55-9fe5-26dd334dadcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b97764f-0921-4f37-9307-6b4e0a4d80ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bc547a-d256-421c-8845-d3af595c1259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc980a8-434d-4f7d-8f74-f4a08f55d561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ecc158-d7e6-4340-aa00-fa78f44d2bc3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e64a99-5d7f-4626-bc99-d22406515f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "630009ab-4c45-4625-8c2d-ac7a6efbf22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a9c091-e061-481c-a520-8917195bd2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb672ed2-9634-410d-9f55-a0003bfb885a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aec7fbf-245b-4ffd-8d65-599bdea6ec6f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d98831-b9d5-4109-86ed-e178788df36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2986bb8e-0442-4c0c-b0cf-d9b15a51fd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3afebb4-f179-4e05-a9db-ba55dbbead25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0920c7a0-6c6a-48d3-b182-a11508f63948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79906e18-1c4e-4734-b259-852eda9fbca4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "726b2ac4-2351-47ae-bc1a-0315b73f35bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "617169c8-bc9d-4efb-848e-ffa12ae4d919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6da4dcbc-81f0-40f5-b7c4-b190549b0c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72fe0008-5199-4407-9151-1d7cb018f17b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83b43db-2129-4110-af4f-e888893f055a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35aa712b-387d-493e-b378-b8d3ffceb303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7478e48b-7560-4fe4-9080-c5a3feba730e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2720bef-b434-48ce-82f4-6d291d8aae8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c0e8ce-21a7-4368-ab13-77ed124e53c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3094793b-3c9f-4418-93d9-5f76f15d85d9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe777cbb-fd40-4972-966b-aa5eed26fc50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b92a3cc-587a-42f7-8b94-63ecc462cda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8631357-f39c-45d8-8046-b5b1c1b22ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1043e11-7637-4ad0-8031-4011762e8914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16ed1b5c-cd6e-4f90-bef4-b9ff5ca83c8f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cddbb97-6745-4b79-b8a3-b9e38794981e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fb287d-0895-4f2b-9099-d90d47c4984f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806859b1-6ae1-49cf-bf63-53fd10f93226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1babafc-432f-4133-8c01-77a92d8f94bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bceb9792-1e76-42fc-bab8-325d06e0ac1d",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50194783-9c7c-4946-903a-7ccba521b219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a3490f-582c-4651-bbc8-f1feece7fd91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339845d4-8cd0-46d1-82f4-07d8127deb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eda94f8d-5f87-447e-b0e8-6cf3c16d69d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9bb647-36f5-4305-b8e9-6b7d97d210ac",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b608fd3-ab28-4480-9604-573596ea35a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cdd6d52-ac49-407b-b0b3-d71bc6d1364a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b196669-4e64-429b-a997-89116a158671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "222eca13-7528-4548-9a81-ee8f9e3e6ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98ba61c-2f8d-43af-ad23-e10254cc2e22",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1159f5e6-5007-4d85-abc4-ae47a44da4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9782baca-0a04-4d0b-9cb1-e93fce7f049c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5320ea69-e921-4894-b5e0-fca2443670e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e010aeb-488f-4761-9801-b0e78feabdd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e2ad607-1da9-4841-a562-281c2e0d7686",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7bc8dd1-825a-4291-815c-41b8a61b7a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "749ffab4-74c8-4e7c-b76d-a31726e97837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab14f0a0-2cb0-430a-9839-55e5652e0a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18290479-a1a1-486f-a948-2797596d8184"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "16cdc825-466e-4a39-82b8-0accff717b67",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "94a6cd66-fbce-41bb-afbc-1a335f9d6c5f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "746be629-1494-4ff8-b61a-b1e7aa1d792d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed5f5f2-35d1-4804-81c3-53a6c9aed3ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c62c5240-f152-490d-a631-63d3c74cdcda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d703e4b5-80a4-4574-9dce-32c2088b129e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35e0da59-cbc2-4e5e-b68d-1c7338b49493",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f00768d-1a74-4981-aedc-4d54bac3d328"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ed9da15-82f8-465e-9080-c17d941d7e60",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37f59f18-f66f-40b5-8a08-b13e0a0f487d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1773c88d-f341-4986-9e6d-73286a0ccc9c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5e102572-7e9f-4d50-a668-8d89a4c39e19"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9436eac-395b-475d-9cf7-9d19ae51a509",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "575c6176-9276-421d-b2e4-eac66f267d62"
            }
          }
        ]
      },
      {
        "id": "38a682d4-11dc-4998-86b4-633e2f29bd6a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "887f46d6-4efe-43c9-9f34-70ccb6aba3ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bc8bad4c-01fd-46f3-b4ce-0e37475b5601",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "46cef697-d9df-4d29-99a5-4283debd056f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f692564c-fc22-429e-b246-0cf36c23233d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35e6ec95-2f64-49d1-9e02-f1d993a38a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b50d8c8-1b74-4111-91bc-bb5b2467f611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "66ca1ba3-50ac-4077-9b52-aa2cbc9f969c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9f53c69-f79c-419a-9ffb-012c51fc7770",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05ede9c-da7b-4240-b588-5755950098be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a30c10a4-6bdb-4a98-ab3d-b3d4faade39a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adc93f5-31bd-49c0-969a-3e7e69482ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b40924ec-cbc6-4776-b965-e75319176a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cbf5f8d-1040-4db3-883f-3089261d1a87",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a26c7f-c022-4840-a17e-7552edc064fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cd16967-85cd-4f1f-b460-341519e2aca3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f56f7680-6ebe-4136-bffc-5f0ddb434cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d81674d-266a-4b18-884a-f4cd98d1de87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65a80fd-12f2-4ec0-a5dd-05ecd558e0b0",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99af47f-8ca1-41db-959b-8201d8def297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02b154ca-6b99-4990-ad58-83f27b595915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc41db4-cf86-4764-99c9-ff32e0cfdf2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2882411a-35c7-4c84-8580-5b712d5f7b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9881b5-1e06-47a7-ac7a-8e898b11fe49",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c55be88-d097-47c0-a9c9-48ce19104949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5285743-656e-4017-af1b-0f5ad8cef810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d000eba-9de8-4286-bfe4-9ddb46402ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf4b305-462a-4102-ae56-d99e76311b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f392ee5f-e50f-4135-99cf-a84242d0b764",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0184953-8869-4f57-afe7-56909aaac057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27ef2eaa-0e07-4c92-b9a4-672aa1b14b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bece99d6-0749-41d7-8e91-332ea6dcdd52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b446657-1a46-4643-810c-e17a3ef44a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a3bd43-fb47-4bc1-9f82-8302bcde518a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ca36a7-f1ca-4b15-a224-4be8a1be4267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb858c0f-1e97-4083-ba8a-ec0aa6ad43d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edde9a28-8f09-4f34-b925-d81911e24feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3322246c-b946-4985-80af-fcd55b97f396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b995896-a754-4c7a-b666-49fea2cb9d01",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3705d529-c284-448c-9243-933e70e75111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabf4cbe-e341-49e1-bc95-231ad395d462"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6868bf-ef55-41c3-8b10-d7d04ea2b766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d799cf7-dac1-478f-a13d-832f286ff90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "321538a0-0a13-4669-a532-a13d9f6a3931",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456b85a0-a576-428e-815c-14324901a626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fce8af0-ab62-471a-a98f-9b111f999b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e10529-75c7-4a58-b048-9ac68344612a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6840b415-30d1-45f9-b536-d2b51632dced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a25fbd-3769-40f6-a6ed-18567dbbdadd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69fe66a1-9811-4b92-a1df-544e607d12d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c206fa-7b30-440e-8a0d-aff1426cdad3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9648dfc3-b6cf-4438-b0f6-19ff2c8b0936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "806bc1a7-6e03-4dd0-8e87-383aaccbde1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24abac9-30d1-4f0f-bf88-9749500e5d7f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cffe8063-433f-4565-9bf0-c56722077230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afab4f1d-40a4-460f-9270-e27d16e3d444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7158020-6629-45cf-ad15-26e3a004953a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0b158b03-5a12-4691-a748-08c5b352a65e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286be04f-e279-4c7b-85e2-6ef7098cff97",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07bfed77-5b5a-474d-8d76-2be4cfe84459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feeae612-ba2e-499a-ba6a-93e0449932c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3e74c5-bb36-4579-a8d2-c09cfcacc391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "877105e6-b369-4102-92c8-8f714fa87df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1b08f6-8ce3-453b-97f1-91e94510d752",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9532e486-11d0-40b5-a133-44a2ea1aa542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0439fe90-c8ae-459e-ade1-0c0ef54b52fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46d5875-25fc-410e-8087-53f993969d3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "caed1294-1385-4e80-a66f-d058e532ec94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "516d1a67-fe58-435d-9aa0-18ac8c09db71",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cdbfe01-65d5-4d99-a402-2f2c14e4dee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae80dac-c176-4009-a5ec-8482dcc9e807"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b302cb4a-95f2-4792-ba30-2d96c02ea14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3bac81f-6125-4d83-ad64-d37c69f59a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d6f9bf-681b-43d1-9b76-89e708c9b7be",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7fed81-afc2-4525-afb3-11f803a37e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077a5f61-0aa1-4bad-8739-4af208b255e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40fc6b0-c7e6-4faf-9a1e-9a209ece7caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "14a2c898-1877-4954-b583-b7015c9c65ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dd3672-7f8a-4657-b925-188c10cf5e94",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd910909-cd50-4cea-a5ae-761bebbe0d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a962702-f58b-44e3-8ecb-768d1cf05a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d17cde70-5058-4338-b52a-7d29518e23c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd35836-ecbb-4305-a125-8465bf21549b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6867cf-9287-4884-a71e-91d9bdff0e87",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b5a649-e02b-4400-a5eb-d1e69ed703e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda4e6d3-b691-40db-887d-ee885b80989c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9cde9e-4ae6-460b-ab49-574ff8212296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "19903b54-8387-4fed-a6f0-787f196c6f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57ebd65-8525-49a9-8d27-332e8a1a0d8a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d9f674b-0a16-4242-8ce9-fea55cf75bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c5cbf74-700d-4a68-89e1-9f5217590758"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4159096-3663-4d97-a49d-6b3b8787b807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f99a3273-a3f3-46e8-b121-0bbac9db5a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "293c4e0f-5858-4838-9604-e09f147c3606",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0e5600-2de0-43fa-a005-888857980e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6bb27c-51b7-407f-a1b3-22e99ad7d284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d68c6863-b251-4fe3-8560-50621cfef95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb60863-3409-48c2-8b1e-a8aac0757cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7a6073-d4e1-42b4-8418-01edcd5b18c3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbd19a5-2c9e-4bab-b04b-1fd920a07ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8bf98b-7bb3-4cee-b6af-c35887ff2a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133d2889-db36-4e46-a8e3-9dfdf2284ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f11044c-9818-4273-beb0-9c9bf0cb4828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fac79f-4add-48c6-acca-dcd6b693e10a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fc7c6d-d4fb-4e06-928e-6249231046b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ef2414-69ac-4d6e-a27b-51796ab72811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "275f7e96-687d-446e-ba34-323dc13cd1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "213c246f-c0ea-4c87-9ea8-87dee417d177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06f1a2d-7135-490e-b7af-206850eb10d0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423e9a1b-2fa2-4ae7-90b0-8cc1dd8a8fe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda0829f-7b9a-466a-87c5-e4b898bb0613"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac22232-b6d3-4672-a4e9-2ffbc328b1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b7fe01-e2c3-4ce1-8d55-d76bf0e0aeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06f537b-a97c-4e4e-bc4c-492ec818991f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900d1c0a-e9a3-448c-af38-30ce7c7cd8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ee2aa6-965a-404e-9894-72421ec8ab46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fcdbdf1-bbe3-4139-a0d1-fbc2bb099698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d28863ba-b87c-4f34-9ef1-a7942409a5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9c0f3c-abc3-4f12-a874-e33598b06b8a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27a5f020-d30c-41b4-b39f-dfffe8124c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7c6f0c-1314-4c08-aaa7-f4bf1b6f5ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d542cf-c617-426a-8eae-5750dbc63112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d18796b2-1a19-43c7-90e0-2c0b8c972d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad1109a-726e-497b-bc29-42909ce8a908",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adfd924-8860-41ac-82d4-e723c9ecd88e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c932971a-6868-4e16-ab96-0df058725b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2529bd06-d2bb-4bce-9539-9bb8d50a8e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09cabc01-bc08-4747-9c4f-5e9afa2dde12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816aea8d-f3b9-48e8-9f3f-98997a0543b7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5f5fb8f-5668-4503-a7a4-0b7a313a47d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0130b4d6-2359-4534-b427-793d037e62f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0a9998-44f3-46e3-81e8-16da17feadd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74bb73a4-4df9-4fc3-b74d-0bb98c48f1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5898102-92ee-43ab-99fa-7fd7c6bcd8de",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7406c635-7e73-4255-b682-2fa961a74747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "713121a0-fb65-4735-97a8-6518c4ac7b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e8d005-ed01-45c0-9a36-1a6ab3c75d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dcd0839-985e-431f-bdc6-96824068b8a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e821e53-63ff-4fee-9161-0b3f40603cf8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8ff9af-5d64-4ca4-ae76-0175fdaf2b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddee69b-99c5-47dc-b5d5-0ac7954b31d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b6a3420-097c-45ca-a87d-5732c0f1189e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5676b229-03c9-40f0-8630-8fb5118af424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfbac88-86af-4f32-a3b8-74cbf7b0bc44",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79c610d-9c26-443e-8a45-f3578e9584b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9123ce92-c1b3-4a09-9fcb-9e94d753e361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2f1c79-5b46-4cc4-892d-00bfa597701d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8254130-d5e9-4a63-b3a3-a6c853a0dd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24165217-c771-41af-b19d-b4875a9352b8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "910feca6-068f-46cb-ab62-311aaddba58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a134d95-bc9e-4bf4-8a34-2f4fb73aaf34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b345fd-c355-4cbd-b0d3-c57ca18ef7d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd0e236b-f487-41aa-82e7-5a59e72e6fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0e6439-7781-417d-8873-3df218f57660",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f4713d-6322-4876-8529-bf081999bdb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53168c00-6e11-449a-b34a-bae6ba63eaeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd579ca-ab17-4b3d-acfb-d79ecbb8505c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0d1b36-8f96-4c93-8752-5bc0c3063c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cec403-96f0-40d9-849b-a91a4786cf3c",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b2c9e0-c267-4f1d-a3da-36acfee2158a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94447741-4cd7-4815-8b02-79e7a3c95b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e28368-203f-4e19-9b82-3772346ec3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc6ca6b6-a50e-4fa4-af36-2b10c7846a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6195932-b8d7-4739-a99b-f0115737c1ea",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb326751-104a-47bc-82e9-77bb484419a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af066ff6-8ed5-4c6b-92ca-f8cd58791c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ef0a76-784e-434a-9eda-b5d00740bf89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f712b638-fb23-415c-a31c-ee3af7ed40a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff799c18-af68-431e-905d-107f01e9af64",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4701113d-680d-41e6-9a9f-28fada865e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8c4746-9aaa-4313-a5f0-49873a2e5275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af9e742-a7f7-4a91-9402-4ef8a1b6ceae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3962b51-857b-43e4-a5ef-fb75b84c81ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ad1718-d00e-4772-b978-46d72c5b1208",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e747d845-0907-45dd-b9e8-4243cbd37b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42294e26-c217-433f-b769-0ef110dbc5a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfd98611-3e74-4d28-825c-ca4d99626ed1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b69f7fd3-dde7-4669-81a5-30cbd1cfc153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60a4e47c-b9ce-463e-9b7d-78da489ca26f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5622b13d-dc90-46c0-bbc5-e8c1a0289f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23fcaa3-9393-4b85-99b1-9529c5b8f92c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09bd0c34-7203-4ea5-b5b2-03c48f5968c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af177098-6923-4d0f-936d-560a71f7e7cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51e4c8ec-0751-4701-948f-4e16d17e7ed9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83172f0a-a24f-4eac-831e-9ddce90c31cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b2f70e2-d01d-473a-925f-802ce626ceea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a66070-9530-4798-a783-5afaa655cef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed15e26c-23f7-4f4c-933e-a8c73bd52e2d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "62132bc1-04e7-4e9d-a459-37646db53caa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27b74bc5-51b0-4c5b-a40e-c60958f131e4",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389201fc-7152-4291-b874-a7f551df55ba",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "409536fa-c3fe-4fa9-b7b2-d5b38d82273f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1f81452-034b-4e63-b6db-2603a8ecedca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0b123b1f-38ba-4647-a6a7-1b9c0aacc151"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9742b3d6-2e0d-4cc5-a219-bda3ff6d6d93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5d23950-fc88-452e-98ad-97a6999b9c7d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17287040-bf1d-40e8-ac94-028428502fc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f911e57-da73-46c1-889d-c15440528dd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c6c1d719-b9ec-4855-95ce-24d13e38502f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c132f32d-f948-4225-b797-d67152a624a0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "da9a6ee8-f28e-4796-bc40-ec2e0998bf35",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76e5a824-1451-4153-a0b5-cf4620e6dc21"
            }
          }
        ]
      },
      {
        "id": "1d70fcdc-d791-44d6-b860-23995eeb31e8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d6347d73-e546-4a5e-b3d8-402bf92cbf38",
            "name": "Negative Testing",
            "item": [
              {
                "id": "de54c130-7901-4c8b-9564-b84aa67f9ebc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "03226b91-3319-403d-912f-9d5994a771a8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be37f7bb-bb7f-468c-a90e-ef35a29515cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802cca86-d521-47ab-a2dc-1986476e2216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ca495dd-c293-4aba-a3fb-d0bdc243af7d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214a3d08-484a-4add-aaa5-18fa4501ed12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0735273-f807-4011-80bf-396e908cf0b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44153a76-1e49-4604-b133-72f67c23748b",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5a4f668-71d6-4f27-904b-533bceeb4df1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae0d2b3-614f-4b8f-91be-1ac6ec76349c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc08bdf7-6366-4b20-a2c5-ff971388f18f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4abbd7e3-3839-4fc7-9e2a-57b74344f342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1bd18b6-7d1d-41d1-8502-1b4bdefa5af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09aedc78-cfa6-4585-8602-a77449896b8a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f20283-8bc3-4ceb-94eb-f96400ddab13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f0b2b9-84b1-4c77-bb19-ea36b3991405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ec3edd-617e-49ca-af22-75451c30fc23",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2585ec56-77e3-4893-9d9b-3fd5681acbe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6bb3ce-a366-4bb5-bd22-38f3fd7f1ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55189095-796b-4bb5-ae50-292725c953d0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf3b7ef-1d16-4fb3-9a7b-65bdefa99cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6375f9b8-51c1-4f56-ba47-9594d001155e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce48958a-5ebe-4615-91e9-b4eb27eef9f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58525a4b-4303-44f7-be3a-a658251c67de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dbae457-3d0d-40d5-a88a-f4b214dd04ff",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff0cdf25-7df1-477c-ac97-51aa31efe665",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bea6910a-8e8b-4d81-8d66-3a7b6a9f9f99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac68e8fb-7336-42b0-9436-effaf6d0b555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a0993f-306b-41ab-946f-85130c689aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7195cc3-5e68-427c-9f02-645d85e4564c",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6d269c-6bf7-4730-94c4-ef8b85a92e70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d30b3723-512b-4c92-a84a-96cdeceb515b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2990a0e0-50a5-4abb-aeec-31ae6dcf99be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20e683cc-d28a-4d89-9e38-52b24c572e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324ba6f1-29f3-42cf-a6e2-3a765fcf0ad6",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52038a04-8dc5-44a8-9815-6e32376d1ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a40403f-3ede-49c5-ac6f-76fc4ce6e922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a786d2-6eb3-4768-9850-9820b5a09546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49025fc8-3ed5-4b7b-be34-159f5e755e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efdacad-a22f-4f55-8218-c23b0ba95f08",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6041d16-0fd2-4579-af5f-47dd4067abef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c881ada-4ca2-4c62-b8f1-7ded31211335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17aaca1-fd8a-4f06-a67e-50985269ffdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf14bda0-974d-4339-a666-2ce0856176e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276bda51-afa3-4c31-9625-439c4c6cff28",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e222f04d-298f-4819-a12e-97b5a7c47e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc2dcae-2024-40f7-a619-b1dfa3bb1b42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1e8575-7feb-4ef4-b21f-43716a200448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba11c42-1ae2-4ed7-84d4-a8c453419a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be548171-70ab-4bde-aaaf-4179b653f253",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a566d7-c0ed-47a8-839e-03fc3eb7c41a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee4f8d43-83ee-4aa2-a79f-d3b174155aa5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dad932-081d-4c08-b071-e0923ee63b60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f9701c-f97c-4322-8a2e-ef4dade5067e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "379a00d7-ecb8-488f-bc84-cdedd3760958",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "769e25e5-cb8d-4fc0-b5b3-3edaf000433b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64f85a85-2be9-46da-96c3-51686412daff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e20e9b-4301-417e-8fc1-0c9ecf959ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76853f9f-1de0-4d07-8b56-ba0d69edfdb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929003e9-3eb8-49fd-bab0-3e7513247a2f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0bf9c22-a064-4175-a308-d0059fa845f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "167e6874-af8a-4308-913b-20aab674f9b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c543b272-ea17-4b69-9fad-be033103114c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b83c5e77-b266-407f-9f44-00642567613d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c0fd56-0813-42fa-a8ab-131200d56783",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4ff05a-99fe-4afa-88c0-535806e10552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2632fff6-3a9f-4d7d-9a5d-2d7052ca5c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80674350-ef04-4369-8961-e25ef27d393d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1612acde-e011-4fed-b606-6aaa227fb381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cd1dd77-ecda-45ef-80c0-73bd8a8c6316",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a943019f-e96f-447a-94a1-a7d8a0d9a634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0265ad09-29a8-4355-8539-9999d0f80402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b2ec66-f00c-4cf7-986c-c6eb19b38608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc0e0ae2-c59e-4e75-8054-ab52a3a62c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c494b3fa-e81a-4982-a73d-ee01479a3961",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2d7f6a-e33c-4f0f-a40a-f12adc3cbee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88352fd-71e0-42cc-9587-f35224e7b141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3183f99f-b652-4dfe-ab73-bdc47ca84a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68defe34-962f-468e-9ed8-17ac4dd56e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ce7068-000c-4812-8058-5dc3960b3d3c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8f6cb51-9632-4a14-b6da-beb803feca89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ef2c6b-fbe0-439a-abb4-9c9394ded64c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed6ea5f-dd23-4ec2-94fe-b9d846687804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97d3fcb2-34b7-4559-9cef-3f8eca2d56b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a77ca88-8be2-4d72-888b-2ee33d3d84e0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f8860f-796b-4440-aaca-930154503779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1d71e8-c426-4905-89f0-f2777ac4557a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fa4867-70e1-4a97-9c0c-0aada9bbbf95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a20993cf-4b46-4dab-a075-43b0e9ffbb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09047ac-97fd-47f9-aa4a-8ab59e762189",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58e8ed5e-7bac-461e-82e6-33a49095c9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37c5ec2f-bf80-4e24-8db5-0b3aec430f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc69081-91ea-4d20-a0b8-27bc2538d126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83fed186-a0aa-4958-905b-aef11060a3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9d0602-c243-470f-a222-236e1d89dcfe",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fc8b6c-5047-4a21-948a-ffcba710bd03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba4b398-657a-4bde-ab78-7307daaeb83a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "943d04ba-a6d6-4eed-b616-e0ce5c278fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "734a2e61-4a16-4d78-acb4-f9041a41c0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68c6440-898d-497c-a531-d5a2e7cfffc6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e91a026-6c9f-46ab-9170-f1d4f399f169",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38dcaade-da5a-4fcd-bef1-0dae17a33c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452288ed-4797-4d91-8ce3-6b7c1127978d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e584b15-905a-4572-bb38-3db8a7d3da39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce800afd-2a8d-4ff7-9eeb-be6dbbd6252e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ce77be-8522-438e-bd25-102fe15bfeeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04fc7d0b-77c3-42af-9df5-ca0deb3f8300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5dea5b-cbe4-4821-a355-73f150445053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66a582c3-a0f7-4223-af5d-5842a2c1f447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37655aa1-4fee-4e42-8cef-a3a507f2d836",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1940d911-751f-407d-98a2-1c3626a3fd1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f69c952-9d23-4ed7-b671-0e496caa7373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3a1a6e-8fb9-4b9b-a912-1891e52db4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de33741-281f-4de7-8785-7d9ebc82574a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807c2f29-db58-4162-8f26-14009bf5dd2e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c44d46-5c5c-42c5-9aff-f738831bfe73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e51bd0-836c-4755-b856-b3a39c145bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566af385-495f-45a0-95c2-f6a98e47ad4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe47201-a219-473a-8150-b9721906449b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0e42183-077b-4d05-b3ce-e81e5d5d9c99",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796d4c14-2c45-4ed7-b1a9-551d1367d0de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e7a332a-5edb-4f6b-b16f-2a898304d8ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81716a6a-7d10-4638-8e56-720445e90bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71a265a7-bda3-475b-8ede-85b5139d7103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f72d62b-4ae1-4f15-915c-5670725272d6",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fea7ba-727e-428a-93bf-fbda48a9ce53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1e3e38-771b-46be-8594-b31cc82299d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6befa22c-0b34-46a7-8859-733201064351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51f5da68-0884-44f5-b8e1-a2dd85b292d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e895e4ea-51d2-4951-baea-c137bd70727c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be0a7da-4412-4801-a436-0d1a4c18f41f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac4d8972-885e-4a4e-a6fd-70c919eb7638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36638892-746c-4178-baee-7669a12cff11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "681297d3-d5ae-4d56-990f-c197fb52b82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f3a0d0-0b57-4d3f-ae51-77a0c6c4a285",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dca53d6-eb9f-4ea6-905c-b4062e066ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d01a650-e0d7-4d0b-af2b-ef2ff47e2fe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "310c30df-a3c9-4062-8d3a-b400a4e82172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea5d4cc-4d67-4f8d-a195-cd0143343bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc2b42c-bddd-4d42-a378-1765e0b2228a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df17a1b-25d8-4742-8184-b3c2f5770de7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7133b196-2af8-4640-bd0d-e6f4f4c9df93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdbdafc-e85e-454a-8504-ee2df6cc121a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6bbae7-30f3-483f-9c5d-891327a48501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7c5545-85a9-45d5-861e-615d1e322cf9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00a39a17-eef6-4b37-8630-4c24a91d1ad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68a9dc6c-c009-4dee-9834-5193ba1e80f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6301f2-a1a1-4dcb-8380-01925a69bae2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4ccecce-b12d-487f-ad2f-2f4de11fbe50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e9f97e-1ee6-491e-90de-b815c23ff4f3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3cbbf61-b185-406e-83cb-506b20c0416c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ca31067-71b0-4df6-b449-2fb197f8b1b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e6b21d-9e7b-49c6-91b0-b82f4f8f8473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c28d0e-2c29-4b35-8c29-d1d39772e7c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0bc4536-87fc-42ec-bd48-9e4f4896a50c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e05199-1358-4a0f-89df-0e9eaeecc43b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9fe205df-a0d9-4f26-bd66-ee39f7020223"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74b5ab4f-b1e8-4077-b9fd-40a7cd0c8d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3711de70-dadb-4767-b4c2-07639a0a161b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b54e76-63d4-4720-91cd-f92978ef8682",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "680fd038-92ad-4d7a-accd-ee69d9a1bd43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49e77b01-62f2-4f9f-aa58-dadf03ce3b5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf875ec5-43e7-49e3-afd2-1918a869b5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d3bb6f-8029-4aa4-a3a5-861b24485520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623cce8e-5321-4dc3-bcea-84818820583f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40307d42-a939-40b6-91ea-30e6f2389ca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3ac623-4324-4ac8-b039-e048ac0d8a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ee9d32-b158-4c8c-a5c2-16fb0a67c131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6ff79c-e2f1-4927-b9c8-489a4708109f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043987f1-37c1-430d-9868-7b1672f17cd7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90653159-7b5b-4cbf-b19e-ba89e27a369a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5e57ad5-d4dc-481b-840f-943de13d49a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee78573-17d4-4c20-a341-da9e43f4db26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fbb148c-d084-4b15-9ec3-a51affc32c4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410bd6bc-0bca-4132-ac77-72fdbb6e3e85",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb494bb8-7b59-49f3-90d0-17ab5cdd68a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "198cd6d2-0ec0-418a-9ad0-fcbf02bf97ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f4f7324-7833-4488-8075-96e10d7b4599",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b89c7ac-a8d8-41b6-949e-3d7dcd6b8ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd4c112-8a62-4bef-ae54-377206761792",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465b92d1-2c80-4bf4-9bd2-16e9ce8429e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a62b7d7c-be66-430e-8e17-b21102dd48c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4943fc2-c17e-4a16-af88-093c6547f1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217571f1-b90e-4fa5-af27-b6b921464744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51cdd199-2d9b-4e5a-8d53-233fe9ce297f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2bf49c-30f9-4c04-8628-d8df5d580891",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e32b3ba-77fb-4718-b9fb-9a4cb885a92e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "798f8067-912f-4860-8f04-cfe0997b7090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a3ba2ca-f6fe-4221-961a-b6d6343193bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1899a94-676c-42b8-8450-490f24173b49",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4887bcd-c7cd-4fbe-979f-c146835a7011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f41caf3-a191-48bb-bfa0-2111c076285c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4380a8ba-9928-4def-a8c6-6406ef30a9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7c23cd-11f9-4651-8c2a-406248210402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da009ed1-9483-442a-94ef-c411037f512d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f11bb2-b81d-4264-adc6-592b043d06dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f11ecfc-dbda-4869-b094-58f4c9eb75db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c51200-397a-46c1-9352-8b66cba7ee74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cebd63cd-371c-4c0b-a40f-0c53911f6753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7a4a7d-c771-4b2b-974c-dc9175b2f7d1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb44a9d5-b788-4ca8-a295-eefa86614633",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2eafe2-b683-4638-8157-6cd16a45b4c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0d1c4b0-5fd1-49dd-915d-ba4c7607ab4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f677ef85-2a86-4301-be67-46934fe53403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cf8cced-39e0-4e67-92c7-91124f73b69d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ad5dee-5bdd-4bec-9801-72fa0f6cb290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79285a55-ee33-4e32-b6d2-8e1b4dc68704"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d367d68-4a51-4a18-9a6b-665cf5ab8b68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98073ca3-2a72-49a8-82f9-f663e1f8d2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28c5b67-eb51-473f-8376-3c1eb1dd9887",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f99901c-4a13-45ba-be1d-6dab05b753e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577fc1c4-27f3-467c-97f0-451eddccc825"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e19950-47ef-457e-aa63-bdd93c3cd70e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38e31951-2af4-4b5b-ab5b-e3a5c3f2a0a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab79799d-e411-4a77-a682-f3a650653093",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2aea58-dd62-4e93-9fa4-d0fa42bc6d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c5037de-0288-4bfe-ac66-d66312ba6f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05dfbe7a-fb91-4b08-b22b-b24f47e06634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f503a76c-35fd-49e0-b29e-a32b0c5d2bf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00cce99-8516-4e84-abdc-51f083ce7d7d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c7f8bb-a461-4269-b623-8967b2b6c6cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9daf4d8a-41b9-4f37-80bc-f877b47a22b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f1bfdb-8467-4465-b58d-5bec6c80f09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec98815-af19-4cf3-927f-86bdda15b01b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f9d14ae-84c7-4b6b-b65e-bf40d27210fe",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1629fa9c-849e-4d38-8453-25babe41cc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86cd16d5-f62e-4f7a-9816-f9feff668060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc1efef-3ec1-4c8e-9fe9-47c474bed4fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7165a3da-501a-4a8a-b6e6-98e236c7b5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c849667e-ac53-442a-9b37-f588c8fbf2ea",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a1611b0-7302-4d32-9485-8e205b9c5ee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe942cf-3038-4f8d-8904-ee56665ff0b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0e9a71-466f-4927-b6c3-9ca8d91f07e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2332d1f7-0376-4226-8142-3eea9dda34c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0222fcb-e710-49f3-b796-d0e38ac237f4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eb95497-a447-4e58-b043-20b232603f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b6a60e-78f8-4eb2-8030-fdadaf89a220"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d39c9ca-8183-4d7c-9107-543fd28d4862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2073ce55-0d47-476f-b88b-542291a9dec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254d84f4-ecce-4a71-9ad4-b2c3def2f632",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22ff9669-aa48-4019-9ba1-920874db8ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff195b3b-2831-47e7-8572-6ccd840f1df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2045182a-28bc-4f18-995d-9e581d347ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0230583b-a756-4cc6-a9bb-6ba703335947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ef213e-1cf5-4428-b087-f52bfed4d4ce",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e66114-6988-4290-bdde-2fb192c4d7b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb0efae-3bf2-493f-8f49-cd874a8484bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b511d0d1-0ee8-48bc-8d37-3b170272e70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1612219-1d75-4fba-8a22-fea66603616f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba11011-605b-4ed1-a00e-36cd0ad60692",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c58b93-2ba2-4949-90df-404b2e3572c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504b6539-9aef-4b17-bd72-1ed56bbc0107"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a327411e-80ab-4eaa-ba5e-d2498bf6b4bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104f8178-bba9-43c3-b029-0447edf2484c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad374f2c-dbb5-437b-b9bf-165eded7e357",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e6a4a5-f3c6-40aa-b5d8-0fc43bed0966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b31268-4042-4840-a3ae-c7495899ca2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9748fd1-082d-4905-a2a4-fec63c9bef34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488b8f25-fbc1-4077-b945-a3c580650593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad3a3ad-5030-400d-a41f-6763f23e7a2d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2cfa48b-7ac3-41fa-8b41-ade9313e2442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cdde33a-17fa-4528-87da-e8219d47754c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5847e08c-c722-445a-9dc3-4dee035f12b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73f51ae-87fb-48d6-a432-fed5fef98890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d5fa9cb-480e-4be1-b2bd-73ed0343df39",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676f9518-2cc7-48c9-a37e-ee56fbab18e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2eed131-6d5f-4f6f-8829-597f20e6d8c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5033bfdd-606f-4ef4-a0ca-798189b9990c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e8425d-281b-4db4-95a7-0db52515cf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25b96bc-3363-458f-86b7-4b7838db1f02",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fa6d986-8ca2-4ab2-ada7-562b11834759",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77da0666-bcfa-4348-acc2-f5a9fb5fd68e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82209eb7-1b7a-493d-97e0-5b54e207ef3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82379cf3-31f3-4a94-a871-a97f49d2f2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b58c59d4-364e-4539-83d8-f04074c06130",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f533ce14-2cff-4f86-8f46-508c5612b5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0371704-d5cf-4415-95d5-286f18aafc87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d38945-1a74-4b1d-abc0-fe6bb7a88788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0a2b4c-2eff-40d6-af31-9919eb0d371f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b665c102-b6b2-49db-b75b-3f9afcb34aae",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc474e8-0ba4-426d-a728-3cc0e85c33fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3cd4c3-3d0e-4c03-9a21-2c4fd9299225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7a0a20-75c1-40c2-b18b-0a19c1f18f7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fadf61e-0fa5-4c8e-a790-31bd09897e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7ffdbd-1158-4425-abc3-c9e982c6a563",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0881a962-9353-4c33-9644-28cdea83c171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17514e6a-a168-4d11-b9dd-cc639344016a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405823f2-9648-409e-8960-2aabdaec6ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "019d1a41-06a6-4f6f-abf0-ac27c57314f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7e3af9-fd58-4f8b-82db-990c2bb00763",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb50fda1-3611-41b0-a0ac-72de4bce678a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795e3251-f440-4be7-9656-8af750f33d45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a4b516-0ee1-492c-ba88-15f5f24ef84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34c528f-9ac1-47f2-abf0-029d9bf486e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09df9c7c-86b3-4dc5-b392-eb9fa028ce2e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc73a6dd-7832-418d-a1a0-af7284b82724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4bce40-999d-4727-91a5-e81b5ede42db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba11f95-05f0-4aad-96ab-4d75ed2a33f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71a25cb-347a-45a5-bb47-76db6ed11404"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00391c3c-fe5c-42da-b6b3-e259e6f29deb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c40722-5e87-4db4-8186-d1463c84a912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c7db497-a343-49e7-b495-b7d16d738b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac8473d4-b983-45df-b900-8ba5290fa7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e420ab75-17fd-4b9d-b4db-c2d9ef831c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22302fb-d6e2-4da5-82f4-d898bb7d9822",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a7ad94-f420-4617-bb36-832ce295027e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9c9ac55-3f4b-4706-aed6-a43dd54e4713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1227c946-21d1-4fc9-97d3-008e046f15bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ec956ba-3762-48df-bc1d-5bd08be8a97d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ddcc11f-e954-48a2-a65c-1134b6463167",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c723ba5-e2db-4bd1-a05c-b235aa1d36b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "208e6876-c5e8-4647-8dcb-4304ed8b98a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6b3832-cc07-4d4e-92e6-9f5075ba73cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82227615-4261-4bac-af6f-79e2537dd4c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bee7ee6-f1cd-413e-b2de-441bba32d307",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "952919fc-370e-4ec7-8419-51c800f43115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f10d0ad-2fde-4cbf-af2a-b319f2a1b965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65c727d-d1ef-4ef8-b4fd-a414ee32a5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f171ba07-f868-4393-9272-dfa24ed74ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10e745fd-bff5-40bc-a725-c5f3016ca984",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b95edd8-5430-430f-b997-b9b1d97b6462",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "466b9ab0-0eaf-43b5-90a3-7ebc5fcdf484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c4d0c5-e107-421c-b7a0-46f9287669a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b8d8cb-44b2-4e2b-91cb-5f438c44c387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4af6bfd-91fc-42d7-b59c-a7956529232a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07013854-e8cc-4ab6-8ff0-04bf4b72d18d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b8a34c6-bfea-46f6-a8cb-e81fd8fa8ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84260340-b86a-49ba-b9e4-0a3269190654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84eb314-4217-48b7-bcc2-846dd1037a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07798a4f-e1d9-40ad-a753-a171820b3730",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a83c07b6-c39b-432c-89a0-55c21a177d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04dedd35-544e-450e-a353-2c7ce839b560"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa813b38-7243-485d-a58b-4319e3b3f56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b534733-196e-43a1-9f85-2034c48bd824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c49121aa-4c34-44e9-85a4-f8e0f0128e42",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d463048e-bb69-49b3-a551-93c444bcf992",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32db1a01-3ccc-4b3f-8f34-005df165887d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "948d6110-1891-45bf-86b4-55b4cd4e3b99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37e15bf-f20e-414b-98c5-bcf2ccbb5db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ed4ef6-809f-4d4e-bba5-ab87f00b399c",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390a1614-6bd2-4797-af21-ddb88584a401",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8740331-12ff-4c1f-b687-b903f7bdf310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed1238bb-f0a0-4e93-9825-293721ef9c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b6cf9f-1afe-4ec7-9fca-cbc1f6f12c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94f926a-74fe-4769-8142-78ad511970a9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635b9811-711f-49b4-bb40-d69949988578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52866ba1-127e-436f-af02-853dfde1ba3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec36781-10d8-4269-b18d-232e9831fa73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c2d8c96-e170-4c2c-adc2-c2f7cabda41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89f2f51-1c38-4e28-a432-8ea9bd34fe01",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bdf632-cd09-48ec-94cb-7fc3e89c8465",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb5e09d4-7315-4da5-8641-a63bdf76c6d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa8ed0a-898f-40fd-b362-450fac45d63a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca1950a-ce90-46cc-aba4-4045854a51f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da94d3cc-7e76-4dcb-956b-6da82903a8bd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119e4f22-2f5a-4d79-a2ea-1ccc2777b40e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b278b09-f9bd-4863-98a6-f7b6644453cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db714a02-775d-42c0-a10a-174770f47ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ee0322-8e58-449c-9ad9-417c26c0101a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "817d79ff-0e5a-41ff-a3f1-777e717aefdf",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4a0da5-98c8-4c77-be5f-321de2cc724c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a33f1e24-979f-47ef-8b71-6102bec4c9c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "603e05b8-7051-47d7-82e3-c3f95e9d4e12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73da11a9-b729-48de-a4d7-9952e6bd63a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16b77ce-dfad-4168-87f0-f81f3f31ca7a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f726f916-dd31-4495-9c96-59534fd230e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f55c8652-f958-43a1-a6cc-cc74082728c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f19cdf5-c3d6-4f93-aacf-5e5ae79cfa1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8511589f-2042-4068-8811-2a496f379b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32474182-abfb-4942-b595-b300c2e260b8",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2508d8a2-8c89-42cd-b14a-dd34ae88af91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de5d6894-949b-4eba-bcfb-f2eb578e8ff2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64b728e-e284-46f6-850f-86d58ca8b36c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "577b2de0-f526-4e43-b1b8-76f3365e9f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebc5cc4-5e41-400b-b65b-d66af4b9801b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ee6f87-5cea-455d-a5e6-7e279baeea40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a68ef20c-cea3-41d8-87c2-4cc0051aad59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff3feac-faaf-4ad2-ae7e-c242a13dac0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4dccbb-f89b-4442-8473-bce6bf14cb12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd117e1e-65b9-4215-9dba-fc4a162c2109",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90568b8-d2f5-4c88-aa5e-2d5fb69cd2df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da70c641-d54f-443b-a9c6-1b583886dcc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b878796-a887-48fc-9713-94f82792f74b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b528d05d-4a31-40f1-ba86-a09352301ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a11f9d-6932-4ec1-9a10-5cc4a8ea0870",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd67dcaf-3b7a-4815-99b2-6f59cdd50dcd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9189fe8c-3183-4c22-99ff-406544cd14ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad7c063-0a76-4a27-b17e-eba3eb3e1fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27cfbb43-1bba-4cfc-b20e-d6339619dc06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8388966c-4273-4e2c-9aa4-acfc623038b4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19074919-3582-4531-aae2-5dd78e7cef0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f80e91db-9436-49d0-8ef9-90cba0341545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04d674d-cfae-40a0-8124-8afab8cc6881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03e21695-dc60-4049-9240-82095286afcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c89af6-2ac1-4b5c-ab34-616b6b88bf1b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30498d7a-69d3-42f3-a083-95d55657afca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fd090c2-6cee-4e85-abae-8cbc7e5cf5f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557775ee-9b72-476b-93ff-f5ac388b3a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d236f3af-4966-46cc-a4f5-ac6b09bbc596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "586ed0e6-3d3c-44bd-8b9a-401d882586c5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aee44c0-05ae-46d8-a1b5-d96d87c7f94b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "213ebd1a-9ee3-453d-aea5-4b39cd43b8df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "261b6777-c463-4aba-8e96-905eafc47b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f97df3f-de82-4568-9015-3f04c62786cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1613879-2dbd-4c98-bfb2-d3f5464f9911",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbdd2299-8426-4899-a319-c79096db1517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed28402b-bdb7-4fa3-a237-9dc7acda4758"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb0b27b3-1200-4ba4-865d-199b32182ed8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c8104aa-248f-447c-b2c2-e12508eb0490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "355dd5e1-a767-46f2-97a3-3c564e3911d4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3acf4ba8-5fd7-4d39-a65f-b785c661cef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59691d67-8245-4ed8-8856-184b5a1f4ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff2604d-6588-4be8-bccd-b41146f4ee51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0add098-7422-4f85-8074-fc04bff1f500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07abdbcf-3b29-475e-a062-8dabd5094b0d",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12f544f6-bc20-4849-8e8a-3ed83b44506c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa5c14e-ccb7-4255-9d4e-48dda0b886f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a226b133-6a0c-411e-9117-562efb981fe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171d8d75-188f-4be0-929c-556515a84308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca94c82-5a19-4da2-8828-0719489b872c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22dbeff5-f615-4edc-8311-98a260b8f4c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3380fc5-fce6-4589-a63f-8b4af5af2eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcc100c-d7af-42d4-abf5-089d58690728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80794e89-97ac-4d10-bc15-80c46909d1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5682c5fc-10c1-4b0e-8c45-a5dd216f7a98",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7276c027-57ee-4e99-8012-c9c7156051e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30326b9d-b74d-4fa6-80f2-4c101757308e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2feba83-fa06-4fdd-bede-6fa687af4ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19651368-a1d4-4a38-b45f-889c7c7fc26c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63839346-f49d-4e8e-b865-b3e25d1f6981",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa003aa8-309d-4508-b3ed-c203a0a891c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cdb2e12-8d96-426c-8362-4a0eabc21b1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe254465-540d-473d-8096-543042a6af5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "701d17b8-3da9-40d9-8cf1-8c21e4ef763f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1eaa0c5-3d98-441b-928a-ffa96c689f2e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215fde3e-f48b-4002-b5f8-8a8647100c97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86cdc94a-f883-4e89-8901-e1c9b20b0cba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db2bda2-2c25-42a2-9216-c7b166938608",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbee56f-02a2-43ab-8777-e9b9df5ae00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a3254c-ba97-4ab4-a0c7-71acca531fc7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5b9b148-ac34-4f10-99fa-d3d21fdfdd2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b6151ac-240b-48c1-bf44-c706d838e714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8ae44a-e9ba-4cb5-92a2-1c74a49d1be0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a0eddd-dbd6-478a-8323-f9e2f21733a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696b67c4-5f9f-4b5e-9749-7243f6146af7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0e20fd-3432-4caa-b58d-4d3104bc22ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e97fda09-beff-458e-a4d6-2ca380e6d4e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a39cc1-8d58-4937-841b-0fdf74594b74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5fcd87a-7868-4810-b2e7-269425f6b9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01306bd1-d88a-4033-ba74-b2e9337ad272",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59af4f96-0b54-425a-9157-7579abe1cf7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f31439f9-ef6f-47be-b4e4-5e6be1815457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84484919-2ca4-4eee-8b0a-9cebbca0e0f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c0c962-6a66-44e5-b114-a896d97c1034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8486ff6-cea2-4274-9fe6-aa966c42f615",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32818c8f-9fe2-4a61-b776-4c11c0046578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2913624d-6b2e-4cc7-8e27-f74daedd3fa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae0804c-1f1b-4817-aaaf-2e17bf9d7c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182faaee-ff32-4896-811d-b8a4cd511202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad46a29-9c60-4bd0-94c4-20a5ca353dcd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e740a505-5a0a-408d-a059-cd69091237e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec1453da-996c-4033-9b81-b2e03d62e88e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5237e0-4cf5-4341-a8f4-1e67f8af8982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9fb64a8-70b3-4673-934b-6bc66716fc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5df6cf3-180d-4c3f-8cb8-98c2f389aa9a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3b64ef-6936-490a-a9ec-1e3749090228",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38986b3-265e-4501-b68e-06ab01a3d0f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9364590c-320a-4eab-a97c-8f2012c259e2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3cffcea-ce57-4df8-a2e3-e9994130ae15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7ad0bf-be1f-4b2b-b968-d01cfb2357b5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd14629-1e88-41b3-90f3-8983ddb34162",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d70cad8-5d5f-4655-9827-3a85cec03f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758545a8-2b00-48c3-bec8-539992bb5743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df33629c-6187-4866-9592-2b009241c42a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba1bd07d-5583-4419-9f09-c98157311030",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d35e4395-3996-48d5-bca8-363bc3e7e16f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20b6c80d-15a4-4421-bb67-f27cd7318a4e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4bfff6f7-1310-46bf-82b1-514b6524d8cc"
                    }
                  }
                ]
              },
              {
                "id": "1feda343-3bd5-41c2-8b35-493bbbdb4043",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9b02586-0256-4733-bac0-0eb8f848c937",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e647caa2-8b95-46fc-a8c0-28d4973f2d5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "2f9707f0-43c5-4d2a-8444-d99d0498fcef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b30d1d-c4b8-400a-a8e5-05247b4b52be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "972fcaf2-c20a-4e10-9f87-a4360328a06c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8afe9b3-1836-4139-a7a0-24999166af20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86fa0cca-6caf-45eb-bca0-6b43b9ef7054"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9b66fc8-df5c-42b0-8381-40ff22a18119",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40c0fa1e-ba67-4f8f-98e6-9130f980408a"
                    }
                  }
                ]
              },
              {
                "id": "8a959280-acdb-4ced-9946-b8716682be91",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6f3fa588-0ce5-4b43-8448-4323b9e119fd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f38add10-ab59-4d16-8f2f-001ac81302af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f43fee68-b85d-4371-8365-b12c984ef9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2892619b-83ff-490f-9040-92a89ce6c551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85ba3956-e8e1-40e8-baf7-10a98564d7f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "74581ea8-7e64-4fdc-9883-71a7e0fdee50",
            "name": "Positive Testing",
            "item": [
              {
                "id": "03914288-c728-4920-917a-5f893b23ff0c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "12da2230-d44e-4409-8614-0f1e7802830f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9ce5e6c5-67b5-47f4-83dd-439a3a2ec033"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62669376-ad6c-43dc-9a5c-f339abdf5733",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e87169d7-918c-44ec-9283-078c326b2edd"
                    }
                  }
                ]
              },
              {
                "id": "cdd2c2e3-32d4-4210-9fb1-00c055a21337",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3be498b8-7d9c-4b75-9af7-f7af330f1a09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9a353263-4f0c-46ef-a9f5-b1e277136711"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d08a309-44cc-474d-8753-fc8ea371af45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "95847cf3-235e-4ac4-986b-e674b308e383"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7cd22fc-9e15-4d35-924e-e8fbb6d82ac7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f190c412-ba73-4803-a741-cdaebe2a6df2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "36d48bf2-4d11-41cf-93fd-99782684dd67",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97d556dc-8eb2-4173-803c-4c3d0a9fa9f7"
            }
          }
        ]
      },
      {
        "id": "236262d1-9dac-4102-b224-607a16593a81",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e7132a4a-50a4-4357-b6c6-0dd8bc84425a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4e52350e-0b03-44e8-813a-ad9b90524cc5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f00b69da-a0cb-4c8c-a92a-100f24dcd8f0",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f419a22d-2f55-4c6d-8343-bcc86c6c4c72",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "35148556-f4a9-4ef7-bef1-0d4aa8f76d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9567a4-8733-45a3-9eb4-e9d1667e6472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "34e4ff0b-9d58-4a12-b4ac-cedd7d600023"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92e8a89c-932d-4449-9c00-6896fddae99c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b91c9ac-c5aa-468a-8a75-d7d27fc99875"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "280a4ca7-f531-4d55-897a-106fd255ae70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b871052d-24e5-4f46-9494-3238dd51eead"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "96515d78-ffa4-42de-b051-3cc4889f80f4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c341825a-383e-4deb-91e1-90656bc39fcf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d1dc6ead-0da5-4796-8e9b-36ccf9bdb471",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5a1a4ab9-90a2-4ea9-88f2-e1a0bf8a332e"
            }
          }
        ]
      },
      {
        "id": "303f4607-353b-461d-8b00-1bcc040adbd9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "41055ae2-fa76-4cb0-bed3-f0fbd5e81b93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf0722da-4fa2-474f-a1f5-8bb74282d33e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "63ad41bd-2189-47a4-a7e3-491f8a1d981b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f7032f-c057-4352-a914-bc4aa1f20504",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2d147c4-e7af-4d31-a6dc-1a08ed25a9c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5f1ff1e-feac-4941-8b67-513bf9bc8c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ba1c1039-83d0-49ea-a557-24e1c3a3e5d2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9dee0c36-3b44-49fe-8029-c2199bedc8a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3ca7f9c2-906b-40a2-a8da-1438315d3b1a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3edc531c-272a-4266-a0b1-f9d7cc724c52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4802f47f-60dd-40da-8a3b-2608f746b272"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfc08e30-6432-43d1-aa18-f657fe1e5cf0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ee4183b7-6e59-4fd8-82f9-80c977c5f640"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0841e22-5e9f-4f8e-845d-35e44669f7aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "56b796b9-d60c-4905-ae83-88202c1dd5df"
            }
          }
        ]
      },
      {
        "id": "9beb5a44-aecf-4707-9f94-fe39afbde9f0",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1fe0e140-ac23-42d4-89f6-2e627b918cb7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b359fee-45a8-4295-9f39-976281d0d0e9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f308f8fd-ab57-4497-9897-f5b5d32c27bb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b5599d-4f82-46bf-9452-c173670d0396",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73074ddc-c111-4652-8c64-78746c0f8ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eebf1343-a177-4ce9-a425-0ccf7fd895c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbec2164-448c-480c-b613-7b6fc2bd6ebc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ca6fd2a-4389-4328-965a-77627773de6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "124f52a3-b2af-4f43-86d9-61663d097da9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b976bb6a-d514-42f6-a2a1-87546c4db06b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d2b1657-2dad-42a3-bc3d-9bf3224e4162"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5df6aa7b-4cfd-4a56-8e57-8c84a7fc1680",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dfd48a1d-26db-4c71-ab52-20396f4434d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac20d503-d918-4bcf-b607-6be362e80045",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b24f714f-0ad5-4e5a-b1ff-e33ea6dabeea"
            }
          }
        ]
      },
      {
        "id": "1da34c20-9e5f-4e49-92fb-d560443f30f1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c126410f-42df-4b0c-a8b6-a353dd965b57",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af371525-b8d4-4942-aafe-04025c259a5c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8fd205dc-cee0-4b09-bdcd-5963656fb520",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5a6a8996-a792-4236-aa0d-1a6eadc2dbe9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0fafe6c7-585d-4539-999d-377c8a4a82d2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 100.26334519572957,
      "responseMin": 20,
      "responseMax": 1403,
      "responseSd": 147.60224169202428,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1695947603181,
      "completed": 1695947643582
    },
    "executions": [
      {
        "id": "d1c635b0-f329-4f44-b5e9-2fd3a0b8313c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "30582c3c-5c59-46ef-b42c-ed178fe6a7c7",
          "httpRequestId": "5b42019c-36b9-4097-99ff-95034ca4a788"
        },
        "item": {
          "id": "d1c635b0-f329-4f44-b5e9-2fd3a0b8313c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "62bdf209-b046-4368-ba12-3d09092339de",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 0
        }
      },
      {
        "id": "4cb735a1-7da1-4976-9b60-2cd82190d309",
        "cursor": {
          "ref": "4ebc3f6e-1c46-413d-8a2e-a2100cfd7a08",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "71406c1b-56d6-47f1-a66f-7a0c59372e96"
        },
        "item": {
          "id": "4cb735a1-7da1-4976-9b60-2cd82190d309",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "13bfa464-c355-4778-ac5c-5759eca2f4fe",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "c8f9f9c3-2f54-4389-bd20-ab6da5ff4d3b",
        "cursor": {
          "ref": "9668be37-626b-4c30-8823-978ba1cdb6d8",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1a031d24-56d8-443c-9b7d-da1c65639111"
        },
        "item": {
          "id": "c8f9f9c3-2f54-4389-bd20-ab6da5ff4d3b",
          "name": "did_json"
        },
        "response": {
          "id": "ae1f0cd9-a6dc-448c-879a-c4a62d5eb0f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 691,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5b88b0-5420-4c84-bb57-4a1639fcab87",
        "cursor": {
          "ref": "e7dc8a13-bbe2-4ea6-aad6-7eb71de61996",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ba0fa10e-de82-4184-af60-9b027de18f5e"
        },
        "item": {
          "id": "1c5b88b0-5420-4c84-bb57-4a1639fcab87",
          "name": "did:invalid"
        },
        "response": {
          "id": "049fa2b2-6e75-45bd-a64e-04f0db62f030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5b88b0-5420-4c84-bb57-4a1639fcab87",
        "cursor": {
          "ref": "e7dc8a13-bbe2-4ea6-aad6-7eb71de61996",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ba0fa10e-de82-4184-af60-9b027de18f5e"
        },
        "item": {
          "id": "1c5b88b0-5420-4c84-bb57-4a1639fcab87",
          "name": "did:invalid"
        },
        "response": {
          "id": "049fa2b2-6e75-45bd-a64e-04f0db62f030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3b0625-764e-487c-86d6-6a5e01f3d25e",
        "cursor": {
          "ref": "3b9e702b-fc49-4f3e-be6e-fe8590bc1c4d",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "766b53a1-e675-4aa0-8900-7c45a1fb8172"
        },
        "item": {
          "id": "bb3b0625-764e-487c-86d6-6a5e01f3d25e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "deae105c-10d0-4a73-a6b5-d1c4b444f933",
          "status": "Not Found",
          "code": 404,
          "responseTime": 207,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee009a9-9d54-469a-a4df-f28cfc21b077",
        "cursor": {
          "ref": "1c16d5eb-076d-4c2a-925c-9222c7742f59",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "008a7b8e-01f2-4339-9de7-7d203b80bf3c"
        },
        "item": {
          "id": "6ee009a9-9d54-469a-a4df-f28cfc21b077",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "81f5e517-472a-4423-bef2-b16b4149c526",
          "status": "Not Found",
          "code": 404,
          "responseTime": 78,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7281fd1-2fc9-4b19-b736-e147024d56f8",
        "cursor": {
          "ref": "1accbf6d-2bde-4ab0-b3bc-ba3e2ef2ea41",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "610fce86-6ad8-44f3-be8c-65339debdde9"
        },
        "item": {
          "id": "d7281fd1-2fc9-4b19-b736-e147024d56f8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "beeacc62-4dad-490d-86f6-61728e11f4a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1fa6bff-8fd8-4d5d-839c-b41485bd9232",
        "cursor": {
          "ref": "9afacee0-ac8b-4e59-9883-e36227ccb2d1",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6f84176c-9dac-41f2-91ca-bf2f95137a6c"
        },
        "item": {
          "id": "b1fa6bff-8fd8-4d5d-839c-b41485bd9232",
          "name": "identifiers"
        },
        "response": {
          "id": "8765f820-5b90-41d7-a8f9-07f1daa55c1c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 111,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "781999ce-7446-4ccd-b2e4-1baa4f5d25ff",
        "cursor": {
          "ref": "77372dd4-8292-48cf-8378-13dc4ffe414e",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8481a923-4638-4d2a-afd7-a23e18c5177b"
        },
        "item": {
          "id": "781999ce-7446-4ccd-b2e4-1baa4f5d25ff",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "16b78621-0f38-491e-b354-6d9da72d7064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1deddbdb-6bbc-4ca6-9a7b-631535ee84e5",
        "cursor": {
          "ref": "fecacc6e-2c43-4b0c-bf50-c1d33e01c595",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e962a315-bfab-40de-a088-a248d8a46fc0"
        },
        "item": {
          "id": "1deddbdb-6bbc-4ca6-9a7b-631535ee84e5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "aa072477-9593-47de-a72a-b668e3f2c4ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68cd209f-dca3-4c2f-bf66-5147015bdc83",
        "cursor": {
          "ref": "c97414fe-9c9f-4966-a248-f3f840409631",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "31aa7bd2-77e0-4df2-a538-ccd7d5f368c6"
        },
        "item": {
          "id": "68cd209f-dca3-4c2f-bf66-5147015bdc83",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "59252586-ad5c-4e0d-a88e-aa1591344408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f141b2b-283c-4ac0-b404-67441ccc97d7",
        "cursor": {
          "ref": "2113f9d6-4842-4911-91d8-ddb0d058200c",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ec610122-ab70-489c-b46a-c1a44fa06b92"
        },
        "item": {
          "id": "2f141b2b-283c-4ac0-b404-67441ccc97d7",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c5f1684e-97f6-4c79-9912-89d86fde9d82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316f685f-1589-4263-9d7b-0f92ece6f94d",
        "cursor": {
          "ref": "3a9ee688-0790-4467-847b-04cf3e9f8548",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "102afd90-4fea-43bb-8dc7-e31e8073ccdd"
        },
        "item": {
          "id": "316f685f-1589-4263-9d7b-0f92ece6f94d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a81ec53b-3753-4f8d-b5ae-9aac24c8363c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5a634b-ab4a-4686-864b-171e0b249849",
        "cursor": {
          "ref": "3dd5ea33-1047-4c41-a05c-35a94c8a1e45",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d19c6e89-7e5b-4aad-8c67-d3c4fac6b092"
        },
        "item": {
          "id": "8a5a634b-ab4a-4686-864b-171e0b249849",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a69b4cbc-88a3-4400-96e4-190e4a672b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5749f0-a4dd-4b01-b5dd-fc799a7ba7f5",
        "cursor": {
          "ref": "638467f2-457f-457d-b5f8-e1f550480a15",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "51471f19-7222-44ed-859f-80a63318c1f9"
        },
        "item": {
          "id": "dc5749f0-a4dd-4b01-b5dd-fc799a7ba7f5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "75a46ab4-534a-4ea7-8c77-8e45f81b3267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec05d5a-2f7d-446a-8543-8ba927559c56",
        "cursor": {
          "ref": "1ac799c1-a6f9-4b38-9e63-16068dda476e",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a580fe9e-b4b6-4e5e-9f92-3567d310c71b"
        },
        "item": {
          "id": "0ec05d5a-2f7d-446a-8543-8ba927559c56",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "608f6aad-875f-471c-9f9d-45ed47402339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f972468-fdfb-49e2-9219-7d8575e5c722",
        "cursor": {
          "ref": "2efc3416-22ce-4927-b2d8-c92e5f1fd365",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "06365b72-afd6-4e81-bddc-d774a6c34af2"
        },
        "item": {
          "id": "7f972468-fdfb-49e2-9219-7d8575e5c722",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cc0e8b5c-596a-444c-8559-2111c7d0189d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38039d37-2c45-45a5-a953-c0facc2eddfd",
        "cursor": {
          "ref": "180d8a0d-2e1a-4058-86bd-f872aeeadc65",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e32d6cbb-b9d2-46c8-a45c-98f9780806bc"
        },
        "item": {
          "id": "38039d37-2c45-45a5-a953-c0facc2eddfd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e073d41d-1153-442e-94ce-f460f1a06504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3bdaad9-a99a-4074-adec-9ef982359df7",
        "cursor": {
          "ref": "0c7b6aa8-056a-47a2-a8c4-bb27f1cddfd6",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "942fc73c-bdef-42cb-973d-b105ba5c4355"
        },
        "item": {
          "id": "d3bdaad9-a99a-4074-adec-9ef982359df7",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a9c1b500-c7af-4d5b-8263-df5fb9e6182f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3569583e-6f70-4c44-97af-09ef3c1560b9",
        "cursor": {
          "ref": "300116d0-c736-48f3-97e2-945d80b12cd6",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4774b948-081b-47ae-8077-0054c8bc090d"
        },
        "item": {
          "id": "3569583e-6f70-4c44-97af-09ef3c1560b9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "be9cb99c-7cac-4720-857f-37b359c02d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b1144c-9f72-41d2-ac3c-9d2617bf1c6f",
        "cursor": {
          "ref": "1bf1f099-271e-4158-bf3d-a4f9766847dc",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "423d7fe3-4467-4d28-ab8f-acbf49200dd8"
        },
        "item": {
          "id": "33b1144c-9f72-41d2-ac3c-9d2617bf1c6f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e3ae4fab-35bf-419e-b7b8-9baa70f79925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fe1cc4-5bf2-4bd3-b594-973e5b9a5c11",
        "cursor": {
          "ref": "03877864-bbba-47c1-af49-f4d144e3f62a",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4c0b2925-5c60-47f2-ab3d-291d2909a7e9"
        },
        "item": {
          "id": "a4fe1cc4-5bf2-4bd3-b594-973e5b9a5c11",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "afa3d278-7119-4edd-863b-b00797d9c1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "716e2a17-1a47-4ebe-902b-739460d2564d",
        "cursor": {
          "ref": "ac3b04c1-00fb-4bad-b97c-4073700e925c",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b32e4386-6891-4aae-8656-b95cb50917b8"
        },
        "item": {
          "id": "716e2a17-1a47-4ebe-902b-739460d2564d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b18a2a85-377e-45b6-92f7-15ba1a27f42e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f98516-d7a8-4cb0-a80d-81f9ffc1283c",
        "cursor": {
          "ref": "f1ed3689-f004-4be0-8d4b-799b31cab6d5",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "7ba007ab-fb69-408f-9b54-ae1806031792"
        },
        "item": {
          "id": "a5f98516-d7a8-4cb0-a80d-81f9ffc1283c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7b0ccd37-b980-4e26-88e1-2023f221e25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d390cde4-e71b-4c73-ab64-0fc6a48a0951",
        "cursor": {
          "ref": "97c085b8-0028-4c25-b327-a962aa830c22",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9ab36a71-8d73-4ef7-9e64-b4c45197d826"
        },
        "item": {
          "id": "d390cde4-e71b-4c73-ab64-0fc6a48a0951",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2cbcbb30-c88f-4384-8fdb-e9df1dcaf523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d2a579-9b83-495b-9169-43c704a93a30",
        "cursor": {
          "ref": "9681c6b4-124a-42c0-b2e3-739f147dc6b8",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "61d3df49-dbdb-4e1c-9311-bc232d1cb18f"
        },
        "item": {
          "id": "c5d2a579-9b83-495b-9169-43c704a93a30",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "545ac93e-1407-4135-885b-c1d3e98b4ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27317ed4-5c73-45e5-9cf3-4c0db29378e6",
        "cursor": {
          "ref": "fcb17e20-1c40-4e74-aa56-9d667579dd53",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "6b49d584-b54e-467a-9ee8-fafe79e69b9b"
        },
        "item": {
          "id": "27317ed4-5c73-45e5-9cf3-4c0db29378e6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "33468a12-d657-42d0-a2c3-c645c4af3409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce52b5ab-3c59-46f9-8e9c-def27b12eccc",
        "cursor": {
          "ref": "058af59b-65ca-4da4-9c57-bfb1ebe61e3c",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c93acc78-b9c2-40a2-a2ae-60499693425c"
        },
        "item": {
          "id": "ce52b5ab-3c59-46f9-8e9c-def27b12eccc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "27bf03c7-43e6-4d97-97d6-94472d177a08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c33e8eed-a521-4e26-9da6-925a117829aa",
        "cursor": {
          "ref": "cb1b982d-d7d6-4cc0-ad0b-ae75d45d1d91",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "680f8a5d-f3c1-4f64-9aa4-8ad6188af103"
        },
        "item": {
          "id": "c33e8eed-a521-4e26-9da6-925a117829aa",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "57e335fd-acbb-41d3-80d8-d839cb4b397d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77fd91c0-351d-48d9-a100-41ba11969136",
        "cursor": {
          "ref": "ecfa6e03-d163-4a20-b0e1-eab4b9a53058",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a01436ab-8a24-4f7c-a7f8-c9ffb80e9bb5"
        },
        "item": {
          "id": "77fd91c0-351d-48d9-a100-41ba11969136",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f71c5c98-9c12-4288-9a1b-88c84ef4acc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44462bed-4a6d-4883-bcb7-889de18858d9",
        "cursor": {
          "ref": "fb41d5dd-312b-4543-bac2-c151d5bdb8f4",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2150037b-d0ff-459a-99aa-a706e5d0d39b"
        },
        "item": {
          "id": "44462bed-4a6d-4883-bcb7-889de18858d9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b494af0b-7be8-4b9e-882d-3118f0cff5c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fc87df2-36a5-4541-ac16-108511eff254",
        "cursor": {
          "ref": "4deb7c30-6533-4085-9535-cb88e4f8579b",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3fc04374-827d-4358-ac11-4b9579aa89b2"
        },
        "item": {
          "id": "4fc87df2-36a5-4541-ac16-108511eff254",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0170a91c-e4f7-491b-bc43-9cead1301c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c70487-48ab-4027-8405-9f5ab5fa278b",
        "cursor": {
          "ref": "b12588dd-f0b9-4e4b-a7df-73489883193e",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0084d529-86dd-4e26-95c7-dce68818ce7c"
        },
        "item": {
          "id": "b5c70487-48ab-4027-8405-9f5ab5fa278b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3fee7755-bf4f-4f7a-ba3c-ab404d3a566e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f826b3-414b-436b-898f-bf903784e966",
        "cursor": {
          "ref": "64c76833-554a-4a28-97f7-7605137e23be",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "08b174a9-366a-4804-964e-6273e196fa0f"
        },
        "item": {
          "id": "c4f826b3-414b-436b-898f-bf903784e966",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "302d4b0b-8454-48c8-8738-b2908357e5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88f6eb9-8607-47e2-81bd-b199db7d8c3c",
        "cursor": {
          "ref": "53f0306d-ed00-4929-8b2b-22458f81a865",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c4e2217d-e0fc-4d01-8334-877d38d38106"
        },
        "item": {
          "id": "d88f6eb9-8607-47e2-81bd-b199db7d8c3c",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "13421fa2-ed80-4109-a4a9-9860f0aa194d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03d36d5-0315-42df-82eb-80c480c35f5f",
        "cursor": {
          "ref": "d74556a5-c894-451e-8100-086fb85dc255",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9ae75815-640c-4bb8-aa40-16dbad75519d"
        },
        "item": {
          "id": "d03d36d5-0315-42df-82eb-80c480c35f5f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a0250bf1-1e8f-4801-bd5b-1db6458096b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df375c10-6fa4-4e7b-aeaf-bfffa44b2c03",
        "cursor": {
          "ref": "97ce3696-f14b-466c-bb7b-c7d32cc281e3",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "66a5d1aa-4848-4bf2-a8ae-b579442d7958"
        },
        "item": {
          "id": "df375c10-6fa4-4e7b-aeaf-bfffa44b2c03",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3529b663-aab7-4272-857d-de52a2235d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0799ce4c-b801-4a85-bdca-69efb16cefb2",
        "cursor": {
          "ref": "4599d27f-a594-41b9-9d5a-36b02b080974",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b58a9eaf-5d38-42a5-b4f5-07a1b01c82f9"
        },
        "item": {
          "id": "0799ce4c-b801-4a85-bdca-69efb16cefb2",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "88c377f0-857c-45aa-94b5-165b04c7432a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a3a053d-7b77-4d02-9398-d773420ab152",
        "cursor": {
          "ref": "3d369225-256f-4c72-b72b-afb2051dfb25",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "0f7082bf-9417-4e18-b7ac-48f91bf4dc5f"
        },
        "item": {
          "id": "9a3a053d-7b77-4d02-9398-d773420ab152",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0faa100c-8223-4b34-95d4-76d4f0ff2af0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "edd00bd7-8941-4a86-b451-4c85108d7881",
        "cursor": {
          "ref": "7466ed5a-e3c2-4e0e-97b8-c0a0406b2c21",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "cd6cea07-cb04-4542-964d-05e676ecf617"
        },
        "item": {
          "id": "edd00bd7-8941-4a86-b451-4c85108d7881",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f3228cf7-fd31-4ddf-8b25-955f173c2635",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ab6a64a0-ded6-4b5d-ba1f-fbb7ac65bae9",
        "cursor": {
          "ref": "bbaf94de-7b3f-462b-b02b-61dcf785f455",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1fb2d055-5da6-4b3e-bfd2-395755c21992"
        },
        "item": {
          "id": "ab6a64a0-ded6-4b5d-ba1f-fbb7ac65bae9",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1a0f3584-54b7-4f15-ae33-6dc7c4c0e8a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "b0505f93-5af8-4ab7-a82f-0264d9d52218",
        "cursor": {
          "ref": "32c3233c-0050-40e4-8ac3-9df3cf270969",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "533101d7-df98-4253-bd04-4a9ea3857ae8"
        },
        "item": {
          "id": "b0505f93-5af8-4ab7-a82f-0264d9d52218",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "49f3a554-7380-403d-b4bd-ba89dbba6bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3040c22-503f-4ed1-9d25-f6063fbbd868",
        "cursor": {
          "ref": "2464112f-a0a5-4974-a940-585d8918b1d7",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7697936b-2432-4b4b-bae6-eff81bde2400"
        },
        "item": {
          "id": "d3040c22-503f-4ed1-9d25-f6063fbbd868",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "159992d7-c7df-4a87-b6c8-547b5a39c4e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0fc3659c-2c60-4cad-8fb7-13a9e28af017",
        "cursor": {
          "ref": "ea99dc03-e85c-4f42-9040-21ec7ca443f2",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a10f7616-54d6-4eac-8a4f-18ebfbd84cc0"
        },
        "item": {
          "id": "0fc3659c-2c60-4cad-8fb7-13a9e28af017",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d4b5a230-7a21-4ca3-9a23-7de1d4e9443e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "27bf0366-e6af-4952-9dd9-fc9b5c1012dd",
        "cursor": {
          "ref": "19d0eeb0-a949-4143-8e28-80ad8f1f5189",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6826e7d5-5bbb-41bb-870e-1e7c316e2e4e"
        },
        "item": {
          "id": "27bf0366-e6af-4952-9dd9-fc9b5c1012dd",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "decf307b-d225-4035-ad08-e4ee93f9b65b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8dc081ae-e5df-4596-a80a-9308dff88943",
        "cursor": {
          "ref": "2d8e9fac-12b7-44db-b93c-363d3bdcc49b",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1472df34-758b-49ec-ad2a-5b28726dcf92"
        },
        "item": {
          "id": "8dc081ae-e5df-4596-a80a-9308dff88943",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ee482243-500f-4802-8bb0-4ede12c1d7d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "0b17979d-c000-4419-a661-a5a799440083",
        "cursor": {
          "ref": "1655c6dd-6a4f-4729-a303-6fc488a800b1",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b3f50ac9-dcd5-4633-a4e4-6f68421349d5"
        },
        "item": {
          "id": "0b17979d-c000-4419-a661-a5a799440083",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "36512de8-a089-437d-a88a-555eeb65df11",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b346908e-c427-4103-a3e5-a8025f65605c",
        "cursor": {
          "ref": "d3790dd5-8ca4-4ba4-9415-5a40c84e376d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e66f029b-f0a1-4895-a0c7-d8f7a5a5f5be"
        },
        "item": {
          "id": "b346908e-c427-4103-a3e5-a8025f65605c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9a1cf8c7-e737-48da-9151-b7903f25d9b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "50b85221-e026-4284-9e52-51599e244b5c",
        "cursor": {
          "ref": "a1d61f3e-8932-46de-8d96-990366c65020",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "87a8eda0-19ad-4f5b-bdcd-da7c8c9f9b6b"
        },
        "item": {
          "id": "50b85221-e026-4284-9e52-51599e244b5c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6ad3813f-2ce6-47ff-821e-d9d74c83e531",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "8b3b2793-bce4-425c-89f3-12aa540b5e92",
        "cursor": {
          "ref": "9ea71e53-8485-4c97-b601-9b6d22974566",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "10ea0d3d-8556-4193-a682-b8fe84d30744"
        },
        "item": {
          "id": "8b3b2793-bce4-425c-89f3-12aa540b5e92",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d2df42eb-3400-450d-b529-2bb61f7d4bd7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "bff66fd0-eaf2-4757-9e68-9570f2d72623",
        "cursor": {
          "ref": "b88bc19a-e67c-4ee6-93e9-32a0f512a66a",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7ac863c0-b3e4-48ec-9c68-7dc48adc5e25"
        },
        "item": {
          "id": "bff66fd0-eaf2-4757-9e68-9570f2d72623",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "27e144b0-1f29-4aa5-b795-3d00ccbea60c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "1c58ae92-d014-40e2-b68a-7955d04a911a",
        "cursor": {
          "ref": "0d1fa733-e3d3-4b73-b672-22672430305c",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9c6741e7-118e-4dcf-871a-c172985ea3ab"
        },
        "item": {
          "id": "1c58ae92-d014-40e2-b68a-7955d04a911a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f8837bd3-c0ec-4f9e-ab77-787c3a61aced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa19460e-2ad3-4659-b312-fd8207986afd",
        "cursor": {
          "ref": "97fdb92b-99cd-4b66-9732-5e90fb89cb2c",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c9dd2490-4ad2-4d0f-ad81-ea586aec819b"
        },
        "item": {
          "id": "aa19460e-2ad3-4659-b312-fd8207986afd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5406ab24-0d43-4481-ac29-a738aba37fa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f4d7d8-8523-48a4-a6ab-66442bacabac",
        "cursor": {
          "ref": "2e49edcd-2e98-4d94-97ff-e294d841bd24",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9450f040-4f53-476a-a390-d5d582c6567b"
        },
        "item": {
          "id": "75f4d7d8-8523-48a4-a6ab-66442bacabac",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "65182b09-4fee-40d3-b43f-0f6b33c1a164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68df9efc-578e-4492-acf8-d58182c0c5de",
        "cursor": {
          "ref": "24adc1e5-41aa-4d59-8400-6909d86b968b",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "941518f8-eeeb-4b85-8d94-eefa3674c242"
        },
        "item": {
          "id": "68df9efc-578e-4492-acf8-d58182c0c5de",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2a6fad5a-562f-4db6-80ff-2dc817a211cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a6365d-9dea-476d-b288-d5581285d340",
        "cursor": {
          "ref": "7e81182b-9ed9-421f-80f3-3bb039cc7814",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ca54bfe7-06f4-4b56-921c-247efa6c1bc7"
        },
        "item": {
          "id": "b2a6365d-9dea-476d-b288-d5581285d340",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ed17946e-d8d3-45b7-9c07-d2f0c71fa2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "132775d6-3837-4828-b992-b60fd1644606",
        "cursor": {
          "ref": "43e54360-afc7-4ef4-869a-36f03928683f",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6ce2b30f-4ef2-4ff0-8fcc-ebfb0f752f8b"
        },
        "item": {
          "id": "132775d6-3837-4828-b992-b60fd1644606",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3181d02c-21c2-4d99-82c9-e5bbec8c0bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "388f0c59-49bb-4422-884e-12c2c79a05ee",
        "cursor": {
          "ref": "684d38dc-d766-4687-bc32-4a6b60e1fdf8",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3faac07d-7901-464c-9bb4-f3b05bd610a4"
        },
        "item": {
          "id": "388f0c59-49bb-4422-884e-12c2c79a05ee",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cd06375f-2e07-44d2-b345-b37965605d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19156a04-5bd1-4c60-9559-874e99fc39ed",
        "cursor": {
          "ref": "c4db85d3-6e03-4714-8fda-d9d0240ad3cc",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "107d0ace-f9b1-4d42-b611-1830cdd2856e"
        },
        "item": {
          "id": "19156a04-5bd1-4c60-9559-874e99fc39ed",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "06049645-9f15-47cb-9012-953d2cbda86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582fa53e-82ff-44d2-aef1-d1c1cc977e6b",
        "cursor": {
          "ref": "7b9e967d-33e5-46c7-b6e4-60038a504196",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4e569737-c70e-47f4-9873-3f6e5fd01670"
        },
        "item": {
          "id": "582fa53e-82ff-44d2-aef1-d1c1cc977e6b",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9ded82ca-c897-43a3-b8b5-f81a4753d63c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f34a92a-6aba-471a-a02b-2a7075d0d24e",
        "cursor": {
          "ref": "092e02bc-2e2d-4ab6-b212-480e8d5421af",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "002661cc-258d-408a-b679-66720db9caa8"
        },
        "item": {
          "id": "3f34a92a-6aba-471a-a02b-2a7075d0d24e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8e1152ac-c57e-4092-b192-5fdd59d22bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17586a94-4dbe-4bb0-8007-06fcf5e62413",
        "cursor": {
          "ref": "520cd409-6e3a-4bea-a62f-7c9ef04f9ba3",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "716a38f8-8311-48cc-b678-e41dc8a9df80"
        },
        "item": {
          "id": "17586a94-4dbe-4bb0-8007-06fcf5e62413",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "262eea17-0343-4a58-8e85-ee8448565834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "802ae8e6-5341-4a90-87f1-27c5da448d01",
        "cursor": {
          "ref": "93471788-2cef-465c-97ff-c0a4765b3587",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e0b3a188-7ba0-40ea-a284-0f254fbdd8f4"
        },
        "item": {
          "id": "802ae8e6-5341-4a90-87f1-27c5da448d01",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "7d80577d-c6d5-49c4-b536-20506bcff3de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d41fa6-42ad-4e90-a707-37b1a1f7c0c7",
        "cursor": {
          "ref": "78deb494-c0b0-4c50-90c2-2caf70d8285c",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e15fc05c-b17d-4257-a756-46918b5b5ca3"
        },
        "item": {
          "id": "b8d41fa6-42ad-4e90-a707-37b1a1f7c0c7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7f40813c-60de-4284-9c61-893a20fd6004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc335000-23c9-43a4-b3f4-1270abaf3b23",
        "cursor": {
          "ref": "7239e012-032f-4434-bd56-ce67ad11785a",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7f8071ec-d593-4932-ae8f-a9baf05a3151"
        },
        "item": {
          "id": "bc335000-23c9-43a4-b3f4-1270abaf3b23",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "32b2f873-fe73-4c60-9317-b85c4b880bea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "4f6a1215-9e2f-417b-b0ec-7b9974420d1b",
        "cursor": {
          "ref": "3f76a5c0-a0d2-4e4e-a83c-c7959306cd1f",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "cbea11db-2cd9-4021-bcd2-1c01c799a768"
        },
        "item": {
          "id": "4f6a1215-9e2f-417b-b0ec-7b9974420d1b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "228dbfd4-d8a7-4a67-8423-f7f7ca38e1a2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e007c450-4e9f-46d1-9973-e1628995632a",
        "cursor": {
          "ref": "2330ccbb-3ea8-4327-8aef-5c36f7b03dca",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e4a3fa2f-33f1-4de4-9c3d-41249625ffc6"
        },
        "item": {
          "id": "e007c450-4e9f-46d1-9973-e1628995632a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2ed96124-84a3-45d0-869b-208485d6defa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d36136e9-72a2-40b9-92ed-bd0be71e0a9c",
        "cursor": {
          "ref": "fa78c875-5f7a-4d88-82f5-b2ae34cdf54c",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6b2c6422-053d-4e92-9b21-3844f7e7c2f9"
        },
        "item": {
          "id": "d36136e9-72a2-40b9-92ed-bd0be71e0a9c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1411c4f4-02a0-4c44-baa4-aadc195ed143",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ca0ccd4e-07e7-4db1-adff-ce45395b1872",
        "cursor": {
          "ref": "3fb65822-0b76-4c59-97b1-f15d6cc43cee",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "1fa6213f-9952-4793-a675-cc7381200dd5"
        },
        "item": {
          "id": "ca0ccd4e-07e7-4db1-adff-ce45395b1872",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9ceec851-18b1-4e36-8164-31742ef94ca1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c8d97509-e0f1-4d98-a206-d30b32b146e6",
        "cursor": {
          "ref": "a84910c7-1df2-4662-b673-1f432aba3839",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cf24682d-ae9c-42ee-8e7e-d544c4c95590"
        },
        "item": {
          "id": "c8d97509-e0f1-4d98-a206-d30b32b146e6",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c9c65db3-43e9-46f7-ac58-92f16bd1fce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1a6a0f-f242-4a58-846a-d5ddd3769a6a",
        "cursor": {
          "ref": "fbf7aa12-b807-43d1-ac8a-e0fa2f3d126a",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c6b96593-cfdb-4207-a629-0993520c9551"
        },
        "item": {
          "id": "2f1a6a0f-f242-4a58-846a-d5ddd3769a6a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9e3dc68f-775f-4da4-97ff-bd23080e317e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bbcd44-1ea8-4000-b20b-f7f925aed645",
        "cursor": {
          "ref": "b6e38a60-fdca-4003-bcd8-1e029f0d18d5",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6b1385d6-b64d-4e0e-9f35-47013611e8d1"
        },
        "item": {
          "id": "b5bbcd44-1ea8-4000-b20b-f7f925aed645",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "776e51db-488a-49d2-9843-07cf1bd5de99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c56081b-6dcd-4b37-8441-fd4e58ab13c0",
        "cursor": {
          "ref": "a8600458-f956-46ef-85ca-f47ebe778571",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "12147e02-8756-4c4e-bab4-8e34c06fb645"
        },
        "item": {
          "id": "9c56081b-6dcd-4b37-8441-fd4e58ab13c0",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0cbb8da1-394a-4520-a80d-92e794224fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c9efaca-7bfd-4ee5-8b39-c37dd4f1d6d5",
        "cursor": {
          "ref": "461ab9e9-e2fd-4ab2-96c7-ce7edf0d9f74",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a10baf75-d603-4a26-9ee5-d8486cb5cef1"
        },
        "item": {
          "id": "0c9efaca-7bfd-4ee5-8b39-c37dd4f1d6d5",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9d4f9301-7834-4243-9012-a0055abf23d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df70662-627a-4a21-95b5-0b9f84ec21cc",
        "cursor": {
          "ref": "e31b1cba-2892-4fb1-a016-49bdca69a07e",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fcba9502-7084-46ac-9e07-06cd5e60e159"
        },
        "item": {
          "id": "3df70662-627a-4a21-95b5-0b9f84ec21cc",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "2b073bb0-6986-4670-b871-85fbf931e4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265ceba0-336c-49ca-be2e-934357804fdf",
        "cursor": {
          "ref": "309ee73f-1833-4b29-b360-b2fffaf7aa5e",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5d5a24a0-4bc5-49dc-81ee-3003bbf3aabb"
        },
        "item": {
          "id": "265ceba0-336c-49ca-be2e-934357804fdf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4fe767f4-2be7-44de-8ce8-5770a90f8339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84d304c1-dc7b-46cb-907e-03d83b8378fd",
        "cursor": {
          "ref": "e067e175-0d8a-4392-a6c6-4de8b6422659",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "06ecda2a-a98f-4335-b618-9f59b2289385"
        },
        "item": {
          "id": "84d304c1-dc7b-46cb-907e-03d83b8378fd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a54e2fff-2cdb-4aa3-b9fd-0c70f3364fea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6de372d-06a0-47fa-b9ec-4a8ee51370ef",
        "cursor": {
          "ref": "59531e67-b7eb-4023-ac79-63637827493f",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "0825864e-6258-4d69-b57f-98e967d5a1d5"
        },
        "item": {
          "id": "f6de372d-06a0-47fa-b9ec-4a8ee51370ef",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "55b505fb-d5ee-4968-ae71-baa751c5cd7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6a63bc4-8bde-4e0c-a277-a6d258c453fc",
        "cursor": {
          "ref": "5f02e337-a969-427b-be18-3ef486977c89",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "31e9a641-f70c-4110-aa8d-e58b822bd088"
        },
        "item": {
          "id": "c6a63bc4-8bde-4e0c-a277-a6d258c453fc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "88d215e4-63a7-4042-9bbe-33598c852b18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39640a8b-773a-44d7-b0bc-e511d6213836",
        "cursor": {
          "ref": "843f9e89-f490-4631-aded-c87b1dd11783",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e6aa47a3-3f94-4403-8195-c64706335de9"
        },
        "item": {
          "id": "39640a8b-773a-44d7-b0bc-e511d6213836",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "69e9cffa-5dd5-46b6-b112-c00d10b67f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b066b0-09bc-4c46-b117-b597469324b7",
        "cursor": {
          "ref": "287ca62c-7cef-4112-8abd-3a8b29b6e00c",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6c900b38-104c-4c01-ba53-f41e9c7a784b"
        },
        "item": {
          "id": "39b066b0-09bc-4c46-b117-b597469324b7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ab2c3722-53e9-4de5-902d-537436a51583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682dfc3e-6f74-4e32-8554-560cb487749e",
        "cursor": {
          "ref": "7adf0dc3-90ef-46ea-a35b-b9b35f120dc9",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "42e119c6-5fc3-43d4-bcad-2b5579a36cd7"
        },
        "item": {
          "id": "682dfc3e-6f74-4e32-8554-560cb487749e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "e8de11ce-8538-44fb-95eb-243e9ee3c238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ff8225-ae17-473c-a67c-ffdb402588db",
        "cursor": {
          "ref": "7cc002a7-ebd9-4b50-89b0-a9bdc2c8de86",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f5fda466-8c23-4a5d-84ad-8abca84d2ea1"
        },
        "item": {
          "id": "76ff8225-ae17-473c-a67c-ffdb402588db",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "fcf780e4-433d-4e96-a45d-2610bb2f620d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35de670b-dfb7-43cc-9ed8-b9ec939c3ba4",
        "cursor": {
          "ref": "e7620344-fc7f-4f8c-aa4b-903148679ce7",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c6ac4299-ee45-4a14-bcfe-9fa9ff964d7f"
        },
        "item": {
          "id": "35de670b-dfb7-43cc-9ed8-b9ec939c3ba4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "ed9db85d-a8b2-4772-904b-6c5a9004c669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a34e7df7-55ad-49a0-a40f-1509e55918bd",
        "cursor": {
          "ref": "97f9ffbf-8b62-48e3-98d0-8707c928b2f1",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e721738f-8db6-498c-b38a-af43a2a5a280"
        },
        "item": {
          "id": "a34e7df7-55ad-49a0-a40f-1509e55918bd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c2f7d4b6-bfbb-4379-b6a0-a58e61fb5a4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a2cdc56-bbee-41e8-b627-d116498e56af",
        "cursor": {
          "ref": "e37146f9-57f7-4599-9207-7a6a829fa9a2",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "33ae9ecb-757f-4f20-97ca-51a693f97e5f"
        },
        "item": {
          "id": "4a2cdc56-bbee-41e8-b627-d116498e56af",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b038ad5a-2ef6-4274-9eaa-03a9ea0b978c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e2f1ea2-c9a8-406a-9659-cf0d55a892db",
        "cursor": {
          "ref": "3feba070-61d9-4239-8dfd-48a20b644fe4",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6743fd06-fe65-4254-a7af-e596d9ed6a4e"
        },
        "item": {
          "id": "6e2f1ea2-c9a8-406a-9659-cf0d55a892db",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e573698c-eef4-4c35-a923-385607c4d3a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf30c33-5004-4491-b1dc-f6b3ac184bb5",
        "cursor": {
          "ref": "affab198-9e0b-4e86-9f7d-7519ba2e9314",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "8a3ac6c9-a19e-4425-9df2-df03387b4b7f"
        },
        "item": {
          "id": "fcf30c33-5004-4491-b1dc-f6b3ac184bb5",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1ce22f99-a011-4669-af52-8e4d31e567ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "964abbf4-7b16-4cef-a742-be635729a306",
        "cursor": {
          "ref": "13f750f3-9b5a-4325-abc2-a8dc602324ab",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "94e64898-64fd-48ff-b5e0-2aa83d260779"
        },
        "item": {
          "id": "964abbf4-7b16-4cef-a742-be635729a306",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9e31fe2f-9619-4f6b-9921-9761d6ec095a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebde240e-3ac9-47e8-ab12-8b1d56aeac98",
        "cursor": {
          "ref": "20d2a264-df90-42e6-a0cc-49527198e6c1",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a16d2571-5ac6-4eb4-988e-e27c8a6b0b3f"
        },
        "item": {
          "id": "ebde240e-3ac9-47e8-ab12-8b1d56aeac98",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "fd327e38-a24b-47c8-b7f4-9ecf54269778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaa1a879-20d6-4ff1-a12d-5e9314e3e8d2",
        "cursor": {
          "ref": "767350e9-054a-4a9d-8980-7268a35a9b30",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "9a625844-6f55-4822-9819-9d7f34f8e3ac"
        },
        "item": {
          "id": "eaa1a879-20d6-4ff1-a12d-5e9314e3e8d2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "60d465f1-65b5-4a87-884e-9a3dd4c8f91b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a90284-c481-4cb5-8902-00592613773a",
        "cursor": {
          "ref": "9627772e-bbb2-43ae-9816-cf54659760ab",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2492c372-006e-4e0a-a1c4-a11f671b8650"
        },
        "item": {
          "id": "52a90284-c481-4cb5-8902-00592613773a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "75fbc166-03e6-455d-b921-09bbb2eaa89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3ec37da-786c-4a92-9502-f762b910f4aa",
        "cursor": {
          "ref": "16f69ed5-8aee-4b27-9ea2-d2a32f0f3e9b",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6c18360c-c271-4498-9d92-c3ddf9fccd3d"
        },
        "item": {
          "id": "b3ec37da-786c-4a92-9502-f762b910f4aa",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "531bf86c-a993-458a-89f5-bf0208e86727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b2a02a-66d6-4c32-804c-4ceebeed272a",
        "cursor": {
          "ref": "c788f4ff-8dbb-4337-ac12-a1d2e1150327",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4a8a7798-9b43-4f4d-a254-ed4a2165f4f2"
        },
        "item": {
          "id": "a6b2a02a-66d6-4c32-804c-4ceebeed272a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "6bcd9ed4-2095-4e43-ae30-43b83be4095d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705ec5ef-959f-49ee-96e3-a611ae62d586",
        "cursor": {
          "ref": "5b9f9ea4-c1ac-4472-b459-733f4c2b5c0c",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "dc29e42d-b860-4a1c-ad8c-8f2318a28f07"
        },
        "item": {
          "id": "705ec5ef-959f-49ee-96e3-a611ae62d586",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f999e5fe-cddf-402c-8abd-5eb0acac43e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da2b903-216c-4bc5-9a69-279284f844af",
        "cursor": {
          "ref": "96ff4079-be28-443b-9f47-da60a0b6f75b",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "10101817-f448-408c-a496-9e67da50e197"
        },
        "item": {
          "id": "0da2b903-216c-4bc5-9a69-279284f844af",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a66e9d4c-2457-4e33-b88a-c91d34c94300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b16213-5c25-49fd-8347-ec6c6e0995b6",
        "cursor": {
          "ref": "f51130de-227a-416b-92c0-501c51df0099",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "bfaa6164-2ede-4f08-898f-c1f8fd3d88f4"
        },
        "item": {
          "id": "82b16213-5c25-49fd-8347-ec6c6e0995b6",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "d1db5eb7-3f42-46e4-b739-14c9ca8bd38b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9718121a-9527-4d84-91b8-d2f327455235",
        "cursor": {
          "ref": "ef212a85-7ce6-4eca-adcb-014fbd7c1c05",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "97c18bba-4204-4ca9-a0c8-932e804f96b1"
        },
        "item": {
          "id": "9718121a-9527-4d84-91b8-d2f327455235",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "618c4003-7029-44cb-aa13-028c79df9819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a54ed4f2-679f-4a88-879d-d5caaa44e589",
        "cursor": {
          "ref": "3cc1994a-3db1-487c-a7f6-035d1ef0ad75",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9a776cb3-30d9-4c90-b978-65c08b7f5433"
        },
        "item": {
          "id": "a54ed4f2-679f-4a88-879d-d5caaa44e589",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b8acda6c-85c8-4120-b447-e491c65bcde3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dbf5989-8531-439d-bf65-181225befcb1",
        "cursor": {
          "ref": "446b83bc-d259-438f-8508-0e720d3890cd",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "e9a8e84c-2444-47ce-9601-c838181e04f3"
        },
        "item": {
          "id": "1dbf5989-8531-439d-bf65-181225befcb1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "abee05ac-4a93-40e0-a587-92774182f001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e88599c-ea49-4692-9b79-684ab5b4e8c2",
        "cursor": {
          "ref": "1793df6f-4afa-4fb9-9554-e505df333e83",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ac72784c-681a-444d-8a4b-38c61c01566b"
        },
        "item": {
          "id": "5e88599c-ea49-4692-9b79-684ab5b4e8c2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a6a18388-e47f-45e0-95dd-4eac6fd2714d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eff6fd1-8459-4878-b79b-7f26d9332f88",
        "cursor": {
          "ref": "29192a90-fd8e-4f16-bfae-8cdd2ddbe9c5",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d02f85cd-fc26-4241-8f72-119963f17ca1"
        },
        "item": {
          "id": "4eff6fd1-8459-4878-b79b-7f26d9332f88",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6baf2ea1-720e-409b-aba6-f7fc5b7b1f8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 85,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "100734ea-4e25-4f33-af71-b74432a47fb5",
        "cursor": {
          "ref": "8d564654-339a-443d-92e7-cfda66eecbc1",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3068b808-eb6b-46ca-95bf-06b72cd0a6c0"
        },
        "item": {
          "id": "100734ea-4e25-4f33-af71-b74432a47fb5",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "cc7e776a-b00b-4ec0-863f-6ebf57d7bb38",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "362af58a-b87d-449e-a6cf-91fc45c111dd",
        "cursor": {
          "ref": "f78a9735-643f-4466-bb2e-b3e5fea736bb",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "dbe53196-5881-415e-af04-033a75a65623"
        },
        "item": {
          "id": "362af58a-b87d-449e-a6cf-91fc45c111dd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "e3d73695-2ce8-4194-9c34-0d33005e529e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 91,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "9122a8be-ab35-4a2d-9bbd-72963d47a891",
        "cursor": {
          "ref": "1445e44f-af19-4e28-bfb0-6d172514c88a",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "586f75a0-561e-4499-85ed-b5e22284398e"
        },
        "item": {
          "id": "9122a8be-ab35-4a2d-9bbd-72963d47a891",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c8959ea7-4a17-4647-8ac9-0988fd822ecd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "9dbc208e-db77-4744-b4fe-0be8a3ea2b82",
        "cursor": {
          "ref": "ee79abc8-d271-4329-9a25-e02a9911e1b1",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d9010342-3455-4735-b949-2e715603e38b"
        },
        "item": {
          "id": "9dbc208e-db77-4744-b4fe-0be8a3ea2b82",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "46917dff-0bfb-46c5-96e1-ed41944a49f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "53ce878b-6692-46cb-a3c5-9ad6c507ac9d",
        "cursor": {
          "ref": "bca03222-9e45-4428-83b6-f92e3f9ba960",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "41ffcf5a-ae6e-4715-8d79-9e1ccd5814e0"
        },
        "item": {
          "id": "53ce878b-6692-46cb-a3c5-9ad6c507ac9d",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "67c4f8bf-c672-4388-9af2-0f9b3d994f1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "408d52e3-493c-457c-93b6-a5b2fdeaddbd",
        "cursor": {
          "ref": "9c65702b-f441-480a-a0ac-11a1e3a89ed1",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "517c3a14-cba9-436b-9743-2096c8143f92"
        },
        "item": {
          "id": "408d52e3-493c-457c-93b6-a5b2fdeaddbd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0650cd3b-a851-441e-9d02-525c0c056ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90bb9ba-4d0d-4d5e-aa30-674af75218f2",
        "cursor": {
          "ref": "e3137ff6-615b-4d6c-80d0-8352f87f69f7",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5566ff41-5701-4d79-abb6-254810b00364"
        },
        "item": {
          "id": "b90bb9ba-4d0d-4d5e-aa30-674af75218f2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fdd4975f-b328-42eb-845f-a458ce48ddfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccda03c6-2f4c-416a-824d-57c4bd600f10",
        "cursor": {
          "ref": "14e5319f-a476-4cef-951a-7e7394aba00d",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7c5fc94d-07d4-4d41-a3cb-e3624028df59"
        },
        "item": {
          "id": "ccda03c6-2f4c-416a-824d-57c4bd600f10",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "006e8681-c557-439f-a999-0f7386f34da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9708e71-9b54-4c7f-940f-88f57893405b",
        "cursor": {
          "ref": "623bb798-4579-4721-8ec1-41b1b1dcd15f",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ee2cda32-c8e6-407b-ba98-f91afe2b6fa9"
        },
        "item": {
          "id": "c9708e71-9b54-4c7f-940f-88f57893405b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0a37f27a-0eee-4ecf-b2bf-439612866a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305ecd8d-0e90-4c29-a6a3-f325b61fc47c",
        "cursor": {
          "ref": "13a2aadc-1111-4e3d-8905-0a9ded1f336d",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c2277f1c-6237-486f-b6f2-610c542256c2"
        },
        "item": {
          "id": "305ecd8d-0e90-4c29-a6a3-f325b61fc47c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c129ee9c-aafc-40b3-b920-b765add9a6f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76244660-9d34-499c-b3cf-f8b3c8189a13",
        "cursor": {
          "ref": "e4edf0d9-fe62-44f1-aa60-5f8ae8dd587f",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3d297013-27cc-47d1-932c-76a75d44715f"
        },
        "item": {
          "id": "76244660-9d34-499c-b3cf-f8b3c8189a13",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "633ea679-b9b9-4c4f-9f91-3538c4ae576b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc42404-aa25-4204-bce5-713af9c00050",
        "cursor": {
          "ref": "a5ea5f00-3fd1-4a08-b90c-259914deb45f",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f0f9229d-2db2-4423-9dd7-c3cbfd56e2f2"
        },
        "item": {
          "id": "adc42404-aa25-4204-bce5-713af9c00050",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "a8f308d9-47c2-4de5-b1b5-6007c69e5a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f5713a-258f-457f-893f-3ebdf75b56c6",
        "cursor": {
          "ref": "b11f5923-3a5b-4ebe-8d28-fd8566eedebd",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f470619d-ea1e-4c56-86bf-894d2c026383"
        },
        "item": {
          "id": "b5f5713a-258f-457f-893f-3ebdf75b56c6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "53ab4def-7f65-4360-8eaf-5c65514ba620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff10283c-fb57-4a8b-8234-262f5e68a008",
        "cursor": {
          "ref": "3f228a19-89ae-419c-a5a7-e1ac6dbbc67b",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "54cf736c-977e-4860-ad92-b22b4a96fc71"
        },
        "item": {
          "id": "ff10283c-fb57-4a8b-8234-262f5e68a008",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b0ba320c-4a5d-4003-aea5-c72c04779eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "814a4980-82ab-4d51-862e-34fc0693a2bb",
        "cursor": {
          "ref": "4314f528-7dfb-4037-abad-604486a49b3c",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "49c80243-e0de-4259-8b01-5d16d4e42d60"
        },
        "item": {
          "id": "814a4980-82ab-4d51-862e-34fc0693a2bb",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "bbef1af4-2c38-4496-9c62-0e7adec7faad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f42c56c-fdc0-47ec-8376-55b99d7d9e20",
        "cursor": {
          "ref": "a8b329d7-3474-4be0-ae01-0d7f7157f620",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2e7c0a4d-de92-4df6-9d89-bc8e10e85254"
        },
        "item": {
          "id": "7f42c56c-fdc0-47ec-8376-55b99d7d9e20",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e3168bdb-40e0-41e1-a231-aa815c0a7cee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e0318d4-c080-4b37-a9d5-24dfdde6d2b5",
        "cursor": {
          "ref": "0139c3ca-cfef-4711-b955-9c409f09b829",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "9e87ae5b-260f-4136-8957-a20151eb99e2"
        },
        "item": {
          "id": "5e0318d4-c080-4b37-a9d5-24dfdde6d2b5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6e165150-e079-4cd3-82e2-6e8c1b75286b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d16d73e-1438-4640-b2ef-8ed1b3c9a1f0",
        "cursor": {
          "ref": "c59ce9f4-32b7-4824-ba91-be56c880e043",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c86297ee-e63f-476e-b705-fe383cf8026b"
        },
        "item": {
          "id": "2d16d73e-1438-4640-b2ef-8ed1b3c9a1f0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0334c807-19cf-4bc7-8782-c9c29acd73a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a78a40-b9cc-41ed-a4ee-c0b27be1b69c",
        "cursor": {
          "ref": "8492fc77-1934-4afb-85e8-059b024d08f1",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "667a3493-5464-4e32-982c-27d837c43302"
        },
        "item": {
          "id": "f4a78a40-b9cc-41ed-a4ee-c0b27be1b69c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "1bda59de-bc66-41d1-a34b-0684e1be8f56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d4bc12-b5b3-4fe7-bd57-1f48251738c8",
        "cursor": {
          "ref": "76f80838-4afd-4fff-bd91-84217eee2369",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a1ab3017-1d81-4638-820f-c4c864ef7b72"
        },
        "item": {
          "id": "67d4bc12-b5b3-4fe7-bd57-1f48251738c8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4f7a7a29-f177-40ff-8a00-9d4cfad7ebb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c0953b-7f79-4b78-a1a5-bb7ac7cf0ed8",
        "cursor": {
          "ref": "a8e09208-1bd0-4499-95d8-d7497223ee22",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1d9392be-70e7-40fe-bbb3-ad45f37cfa4b"
        },
        "item": {
          "id": "a4c0953b-7f79-4b78-a1a5-bb7ac7cf0ed8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7d283f11-4492-4844-be1f-a57f03d4aace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "550305db-3988-42b7-8ebe-1370234c8471",
        "cursor": {
          "ref": "3445c3fc-1bd8-452c-a46d-a093e5a3940f",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "bc09d555-e3f2-422f-b38b-5cee6e8aa921"
        },
        "item": {
          "id": "550305db-3988-42b7-8ebe-1370234c8471",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "35afae9b-8879-448a-8319-44d0f2865055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ea1734-f4bd-4d67-be15-c5b5ef8f8b14",
        "cursor": {
          "ref": "03d5baa4-5935-4432-b40b-4c2f13d1d956",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "dee57ae8-5a3d-4c78-a94f-c69c7fa106c7"
        },
        "item": {
          "id": "77ea1734-f4bd-4d67-be15-c5b5ef8f8b14",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "20392e4d-fbd1-4ce5-a329-650e3d94f645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8250634a-e2e8-4d0e-ad5b-7821f4eae3c3",
        "cursor": {
          "ref": "1b595b74-1f34-4daf-8f4f-a32d5bceb7d6",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "40c31221-0d6a-4c29-8d92-74b69926c50d"
        },
        "item": {
          "id": "8250634a-e2e8-4d0e-ad5b-7821f4eae3c3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d5504466-3a0d-4b89-8ea9-0250637a94d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e45bf2f-3106-42d7-9e70-9f41930c70c0",
        "cursor": {
          "ref": "3f64b8df-bbd8-40c7-9908-d2e43ce7b114",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fd79a460-837b-4672-9a5b-c84838467f7a"
        },
        "item": {
          "id": "9e45bf2f-3106-42d7-9e70-9f41930c70c0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "06cd4178-487c-4bf7-bc05-4cbbedd4fc15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbb4468-ff5b-4fde-88a0-0fd61adf47cd",
        "cursor": {
          "ref": "9aa3126a-ed0d-4a2d-a6f0-c35b11795cd0",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e6ec4546-a08f-4c6f-aa74-e1f8ad22d075"
        },
        "item": {
          "id": "8bbb4468-ff5b-4fde-88a0-0fd61adf47cd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9393d76f-a668-411e-b49b-8ea59d85e4c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9707e50-565c-494a-b3eb-f2ebd5d769d9",
        "cursor": {
          "ref": "e55b1a40-2627-40d2-87eb-d528788a8c13",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "efd5efcd-5829-4d58-88b0-53bb8778adaa"
        },
        "item": {
          "id": "f9707e50-565c-494a-b3eb-f2ebd5d769d9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0ebb1024-2023-49f0-b490-54ed2ec71410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6ecc158-d7e6-4340-aa00-fa78f44d2bc3",
        "cursor": {
          "ref": "186090cc-e858-47a8-a148-eb5e1580585c",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "eb109a6b-272f-4e0e-bd64-407fb19b3a43"
        },
        "item": {
          "id": "f6ecc158-d7e6-4340-aa00-fa78f44d2bc3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "35419942-21e6-4335-930f-170eda1eb363",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aec7fbf-245b-4ffd-8d65-599bdea6ec6f",
        "cursor": {
          "ref": "9cd3b1c2-8460-4982-87f8-67d06b6c18bd",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "702c5e93-6838-43aa-8d7c-5be83753b34d"
        },
        "item": {
          "id": "9aec7fbf-245b-4ffd-8d65-599bdea6ec6f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "443f3359-ded3-42d3-9397-684c7ff87732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79906e18-1c4e-4734-b259-852eda9fbca4",
        "cursor": {
          "ref": "2fd3fcd7-546e-4271-9c6b-52d7366f41e1",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3d12f6fd-e56c-4dbc-8e23-aa5ae40da59f"
        },
        "item": {
          "id": "79906e18-1c4e-4734-b259-852eda9fbca4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fa55609c-c9b2-40d5-bd24-e1f86755dd0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83b43db-2129-4110-af4f-e888893f055a",
        "cursor": {
          "ref": "237bc9f0-0f2b-40db-832c-64c32cde5e44",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4529eb9c-fe0a-4ce8-b771-f81eb62c0fbd"
        },
        "item": {
          "id": "c83b43db-2129-4110-af4f-e888893f055a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "55bf488d-bcd3-4454-a6db-d5a34d64131c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3094793b-3c9f-4418-93d9-5f76f15d85d9",
        "cursor": {
          "ref": "640a362e-0c8b-45ea-aa2b-2fb63a1386b7",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7b1916c1-6b55-477b-afb9-84dd7b5e3018"
        },
        "item": {
          "id": "3094793b-3c9f-4418-93d9-5f76f15d85d9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b2a4bed5-13f4-4aee-b4e9-61dc4c461ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16ed1b5c-cd6e-4f90-bef4-b9ff5ca83c8f",
        "cursor": {
          "ref": "2d099e34-fb53-4aa5-880f-e2d6deaeadb7",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d4a75810-49ad-4748-b493-71d236a56206"
        },
        "item": {
          "id": "16ed1b5c-cd6e-4f90-bef4-b9ff5ca83c8f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3fe57bf7-89f1-48a4-bff4-4ac0e2e3a3e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bceb9792-1e76-42fc-bab8-325d06e0ac1d",
        "cursor": {
          "ref": "d80f5c84-5a81-411c-9b3a-111ee69e938f",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ab424d58-8c6c-4f17-95b6-fe5e25767bd1"
        },
        "item": {
          "id": "bceb9792-1e76-42fc-bab8-325d06e0ac1d",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "596c0d41-4a38-417b-869d-f211f796e10f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9bb647-36f5-4305-b8e9-6b7d97d210ac",
        "cursor": {
          "ref": "375be5bd-c877-4141-af7e-9018eaffdd3f",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a5f6c72d-894d-4afb-b016-5b5b61180d21"
        },
        "item": {
          "id": "db9bb647-36f5-4305-b8e9-6b7d97d210ac",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "fa2bc783-45e0-4403-b464-654b243356dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98ba61c-2f8d-43af-ad23-e10254cc2e22",
        "cursor": {
          "ref": "83c092e3-ebb5-4873-8871-2a1e6c60b3f0",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "abfc7aa0-9f3a-4188-9440-d2adab541680"
        },
        "item": {
          "id": "a98ba61c-2f8d-43af-ad23-e10254cc2e22",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1e360274-3a0c-42c7-a20d-e79d78596f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e2ad607-1da9-4841-a562-281c2e0d7686",
        "cursor": {
          "ref": "f075bb95-4880-4d42-8c22-16e54aff42bc",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "fd86ac06-1869-45a5-9b2a-7f664bf2e065"
        },
        "item": {
          "id": "2e2ad607-1da9-4841-a562-281c2e0d7686",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "9ce00c7c-76d8-42d0-92d4-625d5fc81a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a6cd66-fbce-41bb-afbc-1a335f9d6c5f",
        "cursor": {
          "ref": "7823ff2b-3597-4ce6-b8bc-6b2d95bf1da4",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a9aea05f-bb18-4be4-8926-be01d4cec216"
        },
        "item": {
          "id": "94a6cd66-fbce-41bb-afbc-1a335f9d6c5f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2b756ac5-fda0-49ed-9fa3-11bbfe279df1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46cef697-d9df-4d29-99a5-4283debd056f",
        "cursor": {
          "ref": "94e1b2e6-2386-405d-833c-1d28a3627725",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8f89ebea-6fa6-4937-b977-7ca997519030"
        },
        "item": {
          "id": "46cef697-d9df-4d29-99a5-4283debd056f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7bcecf4a-201c-4e6a-8955-deb6072bc0e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f53c69-f79c-419a-9ffb-012c51fc7770",
        "cursor": {
          "ref": "184cf42f-0bf7-4b97-995e-db514eb40986",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "10288d02-4bd7-4d25-82fe-3be817cd575b"
        },
        "item": {
          "id": "a9f53c69-f79c-419a-9ffb-012c51fc7770",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b6dd8fd2-76a7-46e7-9077-8ab2031ce601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cbf5f8d-1040-4db3-883f-3089261d1a87",
        "cursor": {
          "ref": "b0f69a33-ad27-41e3-b380-248ae4b198fb",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "181040d6-186d-4c9a-bcdd-7c12f6320bd1"
        },
        "item": {
          "id": "0cbf5f8d-1040-4db3-883f-3089261d1a87",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8a5c8334-34c8-4eed-80f1-06ee0a759ea3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65a80fd-12f2-4ec0-a5dd-05ecd558e0b0",
        "cursor": {
          "ref": "c228ecac-b1da-4bc0-a7f9-29a45f932869",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "974a3d2a-fdf7-4b72-b2b2-e7fe5a0f7d22"
        },
        "item": {
          "id": "e65a80fd-12f2-4ec0-a5dd-05ecd558e0b0",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "63f0072b-723c-4d45-aecc-36cd93fde908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9881b5-1e06-47a7-ac7a-8e898b11fe49",
        "cursor": {
          "ref": "fea76421-60ed-4086-b98c-e68111eeaee3",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "18ca4127-f6b1-45e5-be83-5ff99778230c"
        },
        "item": {
          "id": "3f9881b5-1e06-47a7-ac7a-8e898b11fe49",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a043bd72-57f4-4b89-8bc3-b0b2229581dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f392ee5f-e50f-4135-99cf-a84242d0b764",
        "cursor": {
          "ref": "e22fc051-0b6d-4882-9b36-ef0275339d4b",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d109dcf6-caa4-40ea-86eb-8cfd1d44feaa"
        },
        "item": {
          "id": "f392ee5f-e50f-4135-99cf-a84242d0b764",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "02f98474-adb2-448a-9a6b-4370e6fe0ba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9a3bd43-fb47-4bc1-9f82-8302bcde518a",
        "cursor": {
          "ref": "bc56fdc4-ed57-4007-96e3-f0c8bc00fba8",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f921c6a2-bdcb-4d16-9ef0-8bd6d9331706"
        },
        "item": {
          "id": "a9a3bd43-fb47-4bc1-9f82-8302bcde518a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5c32ae99-68ab-47c3-8f3a-5dd7b5823b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b995896-a754-4c7a-b666-49fea2cb9d01",
        "cursor": {
          "ref": "548afd39-89c2-4099-80b1-21202f37a487",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "50259dd1-f587-4c73-b072-2817a236da7f"
        },
        "item": {
          "id": "6b995896-a754-4c7a-b666-49fea2cb9d01",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2e63232c-418d-4102-9b38-18398f73570b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "321538a0-0a13-4669-a532-a13d9f6a3931",
        "cursor": {
          "ref": "e3a7c484-14bf-4d81-989c-8c84b42f8c21",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e2c5e076-bc66-487e-b372-01f562cbb1a5"
        },
        "item": {
          "id": "321538a0-0a13-4669-a532-a13d9f6a3931",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f30862f7-4f7e-402b-b09c-db73ad933307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a25fbd-3769-40f6-a6ed-18567dbbdadd",
        "cursor": {
          "ref": "75f97281-ab7d-47e9-977b-b4d3e7ef8d5e",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0fd4e3ed-aaa6-4fe6-a780-91ee73204dd4"
        },
        "item": {
          "id": "c7a25fbd-3769-40f6-a6ed-18567dbbdadd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "68d2e7be-5614-4df4-88e7-1bce621378f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24abac9-30d1-4f0f-bf88-9749500e5d7f",
        "cursor": {
          "ref": "4be31781-93dd-4248-81bc-3c8ef70a4239",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "97c7dc84-1000-4c00-9a58-ac90ea09fa89"
        },
        "item": {
          "id": "d24abac9-30d1-4f0f-bf88-9749500e5d7f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5a8cfe86-dd22-4abd-bed4-a5ed8e7f4dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "286be04f-e279-4c7b-85e2-6ef7098cff97",
        "cursor": {
          "ref": "3f32ee44-4c86-4c57-9773-bc864b2c60e8",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "651c2457-4f27-4d89-afc2-c5f23a36da3a"
        },
        "item": {
          "id": "286be04f-e279-4c7b-85e2-6ef7098cff97",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1e8dc7f9-9b32-4708-84c2-ac5efa095aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e1b08f6-8ce3-453b-97f1-91e94510d752",
        "cursor": {
          "ref": "39b01e61-0287-422a-b048-01337d9858c0",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9bae2b61-bfdd-4d34-b8b5-146b3bd12256"
        },
        "item": {
          "id": "8e1b08f6-8ce3-453b-97f1-91e94510d752",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4b64c826-a5a3-4af1-a68f-1c8bbd6bb205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "516d1a67-fe58-435d-9aa0-18ac8c09db71",
        "cursor": {
          "ref": "a54a0d42-9d8c-4ee2-b898-263b51cb2c79",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0e780438-edbe-4d47-9a01-6148c64183e8"
        },
        "item": {
          "id": "516d1a67-fe58-435d-9aa0-18ac8c09db71",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2f88ceee-5c40-4886-bbbe-eb51b469ee9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d6f9bf-681b-43d1-9b76-89e708c9b7be",
        "cursor": {
          "ref": "19dd04c4-aa18-4478-9474-0ebdf64b5633",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dc2bfab0-ae11-4728-bb63-e0c258c2b710"
        },
        "item": {
          "id": "28d6f9bf-681b-43d1-9b76-89e708c9b7be",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "69b7c34b-50af-4285-a4b1-0d10c0e9e103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dd3672-7f8a-4657-b925-188c10cf5e94",
        "cursor": {
          "ref": "6193f786-9d19-4200-b825-73f671f7b990",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f61518f2-675c-4d0e-be11-d640ae3a9f5a"
        },
        "item": {
          "id": "94dd3672-7f8a-4657-b925-188c10cf5e94",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "6068b5db-0f38-44c2-b773-2068e5e18a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6867cf-9287-4884-a71e-91d9bdff0e87",
        "cursor": {
          "ref": "8263c728-5f43-45f5-b1a3-9225fd5b6225",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "457e0d77-0f73-42fc-9b56-1027c82c7e44"
        },
        "item": {
          "id": "aa6867cf-9287-4884-a71e-91d9bdff0e87",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c207ce34-0a1a-42cc-ba17-e00330215ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e57ebd65-8525-49a9-8d27-332e8a1a0d8a",
        "cursor": {
          "ref": "04936a39-432c-4e22-9064-78d97f7bdf79",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "8006b4d3-b476-42c6-9ca8-87fbe43508c3"
        },
        "item": {
          "id": "e57ebd65-8525-49a9-8d27-332e8a1a0d8a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "35cbc239-cf1f-4f87-93fd-37503dc75b08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "293c4e0f-5858-4838-9604-e09f147c3606",
        "cursor": {
          "ref": "9e6cda65-1435-4d0a-b1e5-44b49949da0a",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ddd84945-0877-47f0-b21a-224cc8b9ca7e"
        },
        "item": {
          "id": "293c4e0f-5858-4838-9604-e09f147c3606",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a3b8f796-3332-48f3-aa03-f88039572582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7a6073-d4e1-42b4-8418-01edcd5b18c3",
        "cursor": {
          "ref": "d72bd3e0-93df-488d-b4c8-1d65e90f1cfa",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b9feebf3-ac0c-4a6a-8617-f40e6227dd41"
        },
        "item": {
          "id": "de7a6073-d4e1-42b4-8418-01edcd5b18c3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "c18a3c8b-4e93-4b30-9a3a-d7df89fbfacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fac79f-4add-48c6-acca-dcd6b693e10a",
        "cursor": {
          "ref": "7b5d97a9-aafe-4032-9368-8a92c9cc7a5b",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4c3f8db4-9256-4cb9-8120-4cb5db5f525a"
        },
        "item": {
          "id": "e2fac79f-4add-48c6-acca-dcd6b693e10a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fed44c6b-1a3a-4463-bff1-5d7e3dffc658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06f1a2d-7135-490e-b7af-206850eb10d0",
        "cursor": {
          "ref": "69ffa57b-a851-4fae-ba36-9204bc27ff76",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "d41b12d4-a25b-43ce-a4ad-1b35cfb7534a"
        },
        "item": {
          "id": "d06f1a2d-7135-490e-b7af-206850eb10d0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "67363beb-f33e-4d9b-ac06-285b2c26ce20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06f537b-a97c-4e4e-bc4c-492ec818991f",
        "cursor": {
          "ref": "31067b51-6d2f-44bc-bdba-ec07ca9a1588",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0cfe8d96-9d96-42ce-828d-1d64897c93c4"
        },
        "item": {
          "id": "b06f537b-a97c-4e4e-bc4c-492ec818991f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "4bd41846-edfd-462e-9597-2649591b6ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd9c0f3c-abc3-4f12-a874-e33598b06b8a",
        "cursor": {
          "ref": "5d85c8c2-d401-44ca-8b77-2f3614066eea",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6390a96b-0ada-489a-82c7-03b0f6c2d28a"
        },
        "item": {
          "id": "fd9c0f3c-abc3-4f12-a874-e33598b06b8a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b704f00b-262d-4b1b-b1a0-d8e9928c16ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad1109a-726e-497b-bc29-42909ce8a908",
        "cursor": {
          "ref": "f79dc0fc-c033-4868-8c34-ef529d73e597",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "347e5ae3-55e5-420c-b75a-1bf5540cb23b"
        },
        "item": {
          "id": "2ad1109a-726e-497b-bc29-42909ce8a908",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1002ca5b-aae3-438c-ae24-6c7ea643e6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816aea8d-f3b9-48e8-9f3f-98997a0543b7",
        "cursor": {
          "ref": "ac865b78-4824-4dbd-bff0-3312f19f8942",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9419318c-59a6-4536-ac5d-3304d863fdee"
        },
        "item": {
          "id": "816aea8d-f3b9-48e8-9f3f-98997a0543b7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "12d521e8-8c63-4651-906c-429a006b1789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5898102-92ee-43ab-99fa-7fd7c6bcd8de",
        "cursor": {
          "ref": "b924b0f5-1635-4b2a-80f8-62b1299bb5d4",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "61a838e6-28de-426a-97ef-237355a624f2"
        },
        "item": {
          "id": "f5898102-92ee-43ab-99fa-7fd7c6bcd8de",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "35f35512-f40b-4ba4-98c1-31674842163c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e821e53-63ff-4fee-9161-0b3f40603cf8",
        "cursor": {
          "ref": "a85400ee-092c-49ef-a8ec-d4d02e35f799",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "cf41eb7c-42e3-4901-8429-11cb603a979a"
        },
        "item": {
          "id": "1e821e53-63ff-4fee-9161-0b3f40603cf8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7b62c748-0a44-4d25-bb5a-b3038710ec6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfbac88-86af-4f32-a3b8-74cbf7b0bc44",
        "cursor": {
          "ref": "bf93364f-0076-4133-81ce-4a9596de048e",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d6f5c0c7-ee5d-45d5-9605-b96eff039540"
        },
        "item": {
          "id": "1cfbac88-86af-4f32-a3b8-74cbf7b0bc44",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "78e4964e-8520-48ee-843d-7bea43a54030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24165217-c771-41af-b19d-b4875a9352b8",
        "cursor": {
          "ref": "a2c5c156-7717-4939-bd26-557e6a53f3d0",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "34f4f9c1-faf7-4b40-971d-2003002503a1"
        },
        "item": {
          "id": "24165217-c771-41af-b19d-b4875a9352b8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2f6f6f2d-692c-440c-89b7-3fb81f9b6b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0e6439-7781-417d-8873-3df218f57660",
        "cursor": {
          "ref": "8d1aa147-d9da-44a7-b52e-d45fcca05f0b",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e3578dff-6e23-444b-8395-988bcbc93de1"
        },
        "item": {
          "id": "9c0e6439-7781-417d-8873-3df218f57660",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ce2c4ff0-672f-4418-8379-37d7bce5809d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cec403-96f0-40d9-849b-a91a4786cf3c",
        "cursor": {
          "ref": "e1289065-f431-4506-8963-f3aa5003fdfb",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "243bf062-322f-4364-a38f-e205bf4114ee"
        },
        "item": {
          "id": "93cec403-96f0-40d9-849b-a91a4786cf3c",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "2357daa3-2023-4765-b575-9a9b7c78139f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6195932-b8d7-4739-a99b-f0115737c1ea",
        "cursor": {
          "ref": "ce23c1d2-252c-4aca-9311-04f702ca793e",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "79cf5b23-7ac3-4ba9-8296-739bff941765"
        },
        "item": {
          "id": "c6195932-b8d7-4739-a99b-f0115737c1ea",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "ece3230f-b591-453e-804d-9ff06bfb6cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff799c18-af68-431e-905d-107f01e9af64",
        "cursor": {
          "ref": "d2110b28-89e8-4106-897d-cf122dcc6bcb",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9b5ec8d1-2d2e-4a79-8b64-ff1283a7f599"
        },
        "item": {
          "id": "ff799c18-af68-431e-905d-107f01e9af64",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f83613c4-9897-445d-924e-dab2e0a18e7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ad1718-d00e-4772-b978-46d72c5b1208",
        "cursor": {
          "ref": "ae92be02-c583-4b95-b8fd-c735947e0f69",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "a2303826-d773-4e2e-9561-2830327d8c81"
        },
        "item": {
          "id": "21ad1718-d00e-4772-b978-46d72c5b1208",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "285a9dab-bd2d-4161-ba8b-48248d731893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a4e47c-b9ce-463e-9b7d-78da489ca26f",
        "cursor": {
          "ref": "c605a2fa-28ea-4ecf-9c3c-8b23cf403297",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "3906d7db-75a9-48f1-a07f-c2e3a28fffbf"
        },
        "item": {
          "id": "60a4e47c-b9ce-463e-9b7d-78da489ca26f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "6eb6a65f-c5ea-45ed-af27-1ee7164f73bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e4c8ec-0751-4701-948f-4e16d17e7ed9",
        "cursor": {
          "ref": "2c8cf7f5-def6-4567-8b7c-18b880d9ad0f",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "6e6aa781-bb38-43d9-8f8f-705f46fdb5f3"
        },
        "item": {
          "id": "51e4c8ec-0751-4701-948f-4e16d17e7ed9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "bb8f3d4d-5887-4097-87c6-0e0bbac7db38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b74bc5-51b0-4c5b-a40e-c60958f131e4",
        "cursor": {
          "ref": "85bf7845-5929-4827-96b0-ff23b2b24906",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "db8b338f-0ae2-4914-83c4-bdcf06dda8c5"
        },
        "item": {
          "id": "27b74bc5-51b0-4c5b-a40e-c60958f131e4",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "39ed92cb-ae0b-440d-8a20-42292bf6e409",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03226b91-3319-403d-912f-9d5994a771a8",
        "cursor": {
          "ref": "2dff7af3-313b-42e3-aace-48f554248d95",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "88b975d6-052a-40a3-bd65-527a54dc9cf3"
        },
        "item": {
          "id": "03226b91-3319-403d-912f-9d5994a771a8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d0913b63-8402-4b21-a2b7-b9cbd4ee3e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ca495dd-c293-4aba-a3fb-d0bdc243af7d",
        "cursor": {
          "ref": "63bade4f-cb0d-42de-a6b9-5e9164ddee39",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1d4aeb98-9b7f-4774-b94b-e04043bee608"
        },
        "item": {
          "id": "9ca495dd-c293-4aba-a3fb-d0bdc243af7d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5a34f16c-2bb8-42b4-bcf8-6c1d0b31f693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44153a76-1e49-4604-b133-72f67c23748b",
        "cursor": {
          "ref": "5a50b066-4945-48ff-bce7-ef531cfe7301",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "69011b88-631f-475e-951e-b031ee37f229"
        },
        "item": {
          "id": "44153a76-1e49-4604-b133-72f67c23748b",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b36d4cec-1621-4617-bf8b-539a11801d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc08bdf7-6366-4b20-a2c5-ff971388f18f",
        "cursor": {
          "ref": "a41ff903-2d5a-4142-b5df-455e5b9f028c",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "f72f088e-59ab-49c8-801b-11a70965893d"
        },
        "item": {
          "id": "cc08bdf7-6366-4b20-a2c5-ff971388f18f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b015156a-8e06-4421-a75f-ae126ceb4b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09aedc78-cfa6-4585-8602-a77449896b8a",
        "cursor": {
          "ref": "cf70d85b-31b9-4bb0-9522-20c8fb53ec53",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b82115d9-0a08-452e-a823-ee59ef887da9"
        },
        "item": {
          "id": "09aedc78-cfa6-4585-8602-a77449896b8a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ef712e28-4021-4aa4-8698-fcb720043db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ec3edd-617e-49ca-af22-75451c30fc23",
        "cursor": {
          "ref": "2c8883fd-1b5d-4958-80a4-9e4faf64cd05",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a3a3db93-5caf-47f5-b5b9-fd59b49b7885"
        },
        "item": {
          "id": "05ec3edd-617e-49ca-af22-75451c30fc23",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b39a4aba-83bc-4f52-b32f-b3453213e1e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "55189095-796b-4bb5-ae50-292725c953d0",
        "cursor": {
          "ref": "a884367e-3c82-4c0b-a6d1-606027791a96",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "efacdc26-f0d1-456f-887c-e2569a8651d0"
        },
        "item": {
          "id": "55189095-796b-4bb5-ae50-292725c953d0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "83d98b0d-7464-4342-9102-3d2ffe5182c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dbae457-3d0d-40d5-a88a-f4b214dd04ff",
        "cursor": {
          "ref": "ad974f4b-bcde-485c-84b9-4e6110f44af5",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c715bd4d-b8cd-4b16-9d4f-715c798a214a"
        },
        "item": {
          "id": "2dbae457-3d0d-40d5-a88a-f4b214dd04ff",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d1af18c5-e487-4419-b4c1-80b9342f92b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7195cc3-5e68-427c-9f02-645d85e4564c",
        "cursor": {
          "ref": "2ce29526-d513-4e45-a868-3d40a4080805",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9bd9dfd5-3fca-4b4e-bbce-5f17e52441c0"
        },
        "item": {
          "id": "c7195cc3-5e68-427c-9f02-645d85e4564c",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "437d5f60-1d53-4b96-ba5f-429799b78e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324ba6f1-29f3-42cf-a6e2-3a765fcf0ad6",
        "cursor": {
          "ref": "eab03e65-e335-48db-a663-bbd4b83e4f7e",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "367cecf7-95cf-4caa-b6d2-b85241a0ddd5"
        },
        "item": {
          "id": "324ba6f1-29f3-42cf-a6e2-3a765fcf0ad6",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f281dd7d-66a1-4d0f-a5b6-23e3d8e569e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efdacad-a22f-4f55-8218-c23b0ba95f08",
        "cursor": {
          "ref": "a35d7566-a067-4569-a44c-67b297f260a8",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "80b24fda-50c7-4d17-944b-8731fa321902"
        },
        "item": {
          "id": "6efdacad-a22f-4f55-8218-c23b0ba95f08",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "75dd3cc6-9320-411f-8c5f-b458b79079c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "276bda51-afa3-4c31-9625-439c4c6cff28",
        "cursor": {
          "ref": "373b71d3-9330-4ef6-a0c3-11d7745013bf",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "907b5f0b-ee91-4c3d-a33a-2c1e3e3f4a51"
        },
        "item": {
          "id": "276bda51-afa3-4c31-9625-439c4c6cff28",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7f8d6ece-af4e-4cd6-9a42-4715a0e6f532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be548171-70ab-4bde-aaaf-4179b653f253",
        "cursor": {
          "ref": "9b0255f5-0722-431f-a36b-77d8deb72a5f",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "74dc5807-184a-4853-843c-5399e7440acc"
        },
        "item": {
          "id": "be548171-70ab-4bde-aaaf-4179b653f253",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7d958223-67d3-42fa-9e49-f70f80935e86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "379a00d7-ecb8-488f-bc84-cdedd3760958",
        "cursor": {
          "ref": "b203a409-bd12-468d-9143-c75e00b77ae9",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fce10cb9-b56c-48ab-92c7-337256791a0e"
        },
        "item": {
          "id": "379a00d7-ecb8-488f-bc84-cdedd3760958",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "941a80f0-67eb-472e-9aaf-fce2729249f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929003e9-3eb8-49fd-bab0-3e7513247a2f",
        "cursor": {
          "ref": "4c766c5b-b23a-4fef-a0ec-3a078dcc1464",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7b98ec69-cd1f-46b9-8421-fa5a870555b7"
        },
        "item": {
          "id": "929003e9-3eb8-49fd-bab0-3e7513247a2f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f60faaaa-e90e-422a-8b9a-46f65f22f070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c0fd56-0813-42fa-a8ab-131200d56783",
        "cursor": {
          "ref": "85fb0d5e-eb09-48a9-aa54-6f0c6fdb9f75",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "9d777e2d-3cac-4988-a990-434357a55b30"
        },
        "item": {
          "id": "d3c0fd56-0813-42fa-a8ab-131200d56783",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2dab9659-deb6-46fd-9185-db04a28501af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd1dd77-ecda-45ef-80c0-73bd8a8c6316",
        "cursor": {
          "ref": "375baed1-bbd9-405c-8d6f-b3943dc20aea",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9e15cec2-5bb6-4aeb-ad7d-4af9d7f2d77e"
        },
        "item": {
          "id": "8cd1dd77-ecda-45ef-80c0-73bd8a8c6316",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bb68ec9d-caa2-434f-a323-a49899eb8cdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c494b3fa-e81a-4982-a73d-ee01479a3961",
        "cursor": {
          "ref": "9e2ff7b3-bbce-40a1-b99f-b34870717396",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ab886433-1259-4fc4-9def-66dd41902de9"
        },
        "item": {
          "id": "c494b3fa-e81a-4982-a73d-ee01479a3961",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "beac23d9-69e7-4439-88c7-00e01e1b3f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ce7068-000c-4812-8058-5dc3960b3d3c",
        "cursor": {
          "ref": "45bef269-b1c0-4de0-8bcf-6de036fcbee4",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "fd65bfed-5744-4aad-a822-5168c388abd5"
        },
        "item": {
          "id": "64ce7068-000c-4812-8058-5dc3960b3d3c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9896d582-77e4-4249-a9d1-a599fa9a436f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a77ca88-8be2-4d72-888b-2ee33d3d84e0",
        "cursor": {
          "ref": "6607e6ff-e1a6-440d-8894-61ff44ecfe80",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "98731134-33aa-4d0c-86ff-c9c72a2de4c6"
        },
        "item": {
          "id": "0a77ca88-8be2-4d72-888b-2ee33d3d84e0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ca9aedc2-fc29-4a04-914a-f0db536b6fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09047ac-97fd-47f9-aa4a-8ab59e762189",
        "cursor": {
          "ref": "88a14808-1ff1-46c7-9dcd-226183080cb2",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b659015e-2b8a-4991-847d-baaa1555bf01"
        },
        "item": {
          "id": "a09047ac-97fd-47f9-aa4a-8ab59e762189",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "96f36a4b-6e3e-47a8-8e72-c208c0ffeb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9d0602-c243-470f-a222-236e1d89dcfe",
        "cursor": {
          "ref": "94a55f14-1e28-44b3-b7a7-24b7703f93aa",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4cf9f62a-c05c-47a1-8220-50d32303b65c"
        },
        "item": {
          "id": "6e9d0602-c243-470f-a222-236e1d89dcfe",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "4a5c3423-f53e-43de-be81-97b9c10dceeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68c6440-898d-497c-a531-d5a2e7cfffc6",
        "cursor": {
          "ref": "8d7c8cf0-f3eb-4dfa-a67f-32bf0a5a7580",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "59f20639-c9af-4e2e-a809-642524a18ea7"
        },
        "item": {
          "id": "e68c6440-898d-497c-a531-d5a2e7cfffc6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "514a218d-033c-4881-affe-b63a78731bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce800afd-2a8d-4ff7-9eeb-be6dbbd6252e",
        "cursor": {
          "ref": "55837d51-584a-466d-bced-55e121fabcf0",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "696a9cb1-833d-4922-abd5-c61702d5eced"
        },
        "item": {
          "id": "ce800afd-2a8d-4ff7-9eeb-be6dbbd6252e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6c312ff3-1fb7-4208-857d-3bceb5d6498c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37655aa1-4fee-4e42-8cef-a3a507f2d836",
        "cursor": {
          "ref": "3772d74d-0ebb-4a46-b416-140033e7d7cc",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7685f07f-805a-4088-bb19-56629ff24a34"
        },
        "item": {
          "id": "37655aa1-4fee-4e42-8cef-a3a507f2d836",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7b76b1cb-5583-4fc2-95ff-6bd21f0af951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807c2f29-db58-4162-8f26-14009bf5dd2e",
        "cursor": {
          "ref": "5cea8f8c-47bf-4e11-a999-d1d4dbc1baf6",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "01508041-5f18-47dd-bea7-872d37612173"
        },
        "item": {
          "id": "807c2f29-db58-4162-8f26-14009bf5dd2e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "1b1bd23b-b466-4d95-8a35-b1b625719446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0e42183-077b-4d05-b3ce-e81e5d5d9c99",
        "cursor": {
          "ref": "8d78e3e9-f667-4734-90fe-b334c358f313",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "96626551-02dc-413e-b257-1e392d505d75"
        },
        "item": {
          "id": "d0e42183-077b-4d05-b3ce-e81e5d5d9c99",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6105b28e-fc50-4c6c-b361-9b171726ca97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f72d62b-4ae1-4f15-915c-5670725272d6",
        "cursor": {
          "ref": "14ea44f0-6c2e-408e-9613-dc4d0562f754",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c65c7838-3b78-4f4e-96de-d230ac6f76d2"
        },
        "item": {
          "id": "7f72d62b-4ae1-4f15-915c-5670725272d6",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6cfc94b2-b26f-41fd-80ef-55637c71e544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e895e4ea-51d2-4951-baea-c137bd70727c",
        "cursor": {
          "ref": "6a10ba8e-716e-408c-b040-ac67f9b4d11e",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d2f49df4-a5ac-4a8f-a411-c672126ebd7d"
        },
        "item": {
          "id": "e895e4ea-51d2-4951-baea-c137bd70727c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "cdb805f2-43c8-4fb7-be2e-d7fce44dcec0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f3a0d0-0b57-4d3f-ae51-77a0c6c4a285",
        "cursor": {
          "ref": "04c403ca-9a1a-461c-bb43-d5c7bd105e89",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f6a77a28-08b4-4b29-a2f1-1201bad083ab"
        },
        "item": {
          "id": "e9f3a0d0-0b57-4d3f-ae51-77a0c6c4a285",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "774d8afa-8a51-4891-a89c-7eb5d18779b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fc2b42c-bddd-4d42-a378-1765e0b2228a",
        "cursor": {
          "ref": "b1141e46-c8cf-4375-882b-bccc73d0eeb0",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6550f6ce-cba1-4892-8e1a-5afda358f1b5"
        },
        "item": {
          "id": "1fc2b42c-bddd-4d42-a378-1765e0b2228a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "fe1c0ac4-4644-4733-a787-6548578cecf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed7c5545-85a9-45d5-861e-615d1e322cf9",
        "cursor": {
          "ref": "6e45bbf3-0700-4e49-952a-6e21ab3bb45d",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6ed32395-bdec-4c56-bc2f-f122d1897f50"
        },
        "item": {
          "id": "ed7c5545-85a9-45d5-861e-615d1e322cf9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f4db66cf-7e7b-4359-8133-52b0ee6deabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e9f97e-1ee6-491e-90de-b815c23ff4f3",
        "cursor": {
          "ref": "1a36a884-bf89-420b-9495-7ccf065a66d4",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2aa2d8f7-243b-404e-90d8-ff42f5b4b3c7"
        },
        "item": {
          "id": "10e9f97e-1ee6-491e-90de-b815c23ff4f3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "c924d679-efc9-4820-872c-9e850cef3ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0bc4536-87fc-42ec-bd48-9e4f4896a50c",
        "cursor": {
          "ref": "363223e3-f78c-4941-9ed7-35a457f132d6",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6830d2a7-77fb-4c51-81bb-964c3b8c48df"
        },
        "item": {
          "id": "d0bc4536-87fc-42ec-bd48-9e4f4896a50c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3cf67fb0-046c-4383-87bc-4bbcee2e1183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b54e76-63d4-4720-91cd-f92978ef8682",
        "cursor": {
          "ref": "867e93fd-77e7-47b4-ae39-ab9656cc8e53",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5eaf77c3-33e2-4866-a24d-d0b70d828218"
        },
        "item": {
          "id": "62b54e76-63d4-4720-91cd-f92978ef8682",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5a87fec3-ce7b-486c-9b91-cb27ecd105dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623cce8e-5321-4dc3-bcea-84818820583f",
        "cursor": {
          "ref": "eb92dbe6-ad39-47b9-b292-e79027a9c5b0",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "08a4eaf2-7161-4a5f-8473-24526805d6ef"
        },
        "item": {
          "id": "623cce8e-5321-4dc3-bcea-84818820583f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ebeb40df-3ddd-4ab7-81ba-546bb796ae10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "043987f1-37c1-430d-9868-7b1672f17cd7",
        "cursor": {
          "ref": "cd8d4b82-ea49-4377-94fc-987a9dfcd086",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "dd2e4105-5a6e-467d-943b-e83ea8e222f8"
        },
        "item": {
          "id": "043987f1-37c1-430d-9868-7b1672f17cd7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5acc0d4c-47cf-4807-ab3a-29c445f0f84a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "410bd6bc-0bca-4132-ac77-72fdbb6e3e85",
        "cursor": {
          "ref": "e820f367-67fd-4010-94e7-1f1dc0773363",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a90bd092-6a7f-4b98-b100-af9f2d5fdc82"
        },
        "item": {
          "id": "410bd6bc-0bca-4132-ac77-72fdbb6e3e85",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "1e5c1fb4-2d04-4a7e-addb-cc60f68194d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5cd4c112-8a62-4bef-ae54-377206761792",
        "cursor": {
          "ref": "d3e54eb6-3b7c-4271-8003-a29cae71cd75",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "937a2fd9-333f-4c89-b078-eeedfff1631c"
        },
        "item": {
          "id": "5cd4c112-8a62-4bef-ae54-377206761792",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a7393236-3ef8-4cfe-bbff-341cabf87dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51cdd199-2d9b-4e5a-8d53-233fe9ce297f",
        "cursor": {
          "ref": "d19994f2-b910-402f-88fb-d232db786091",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6ecfd5d9-543f-4b60-827e-78e5b36d41f1"
        },
        "item": {
          "id": "51cdd199-2d9b-4e5a-8d53-233fe9ce297f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7615cdd4-c825-4089-b187-8551f36bcd94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "e1899a94-676c-42b8-8450-490f24173b49",
        "cursor": {
          "ref": "ce90fb8c-a4bd-41ee-9af7-aee41a10ef81",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8ce2aed5-cd7f-4dbc-a330-85b649ec7679"
        },
        "item": {
          "id": "e1899a94-676c-42b8-8450-490f24173b49",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "e8eea3de-783c-4fed-a339-2dc2f75e0b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1403,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "da009ed1-9483-442a-94ef-c411037f512d",
        "cursor": {
          "ref": "630e1026-3d2f-461b-9663-7f63e0dc9a5c",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "12323777-2725-4eb8-a034-a929c4fe4501"
        },
        "item": {
          "id": "da009ed1-9483-442a-94ef-c411037f512d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4f036e45-c69f-4868-ac6a-b68290d4797c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ef7a4a7d-c771-4b2b-974c-dc9175b2f7d1",
        "cursor": {
          "ref": "2b376d7d-c5f4-41e3-ad5f-a7afaf0b121c",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6223f292-c040-41be-aa17-4e68f9c2da51"
        },
        "item": {
          "id": "ef7a4a7d-c771-4b2b-974c-dc9175b2f7d1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "167f6ff9-744d-4c93-9528-50b9e98a5463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7cf8cced-39e0-4e67-92c7-91124f73b69d",
        "cursor": {
          "ref": "83255e75-d690-47cc-bb76-1d0783969bd4",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4b3b7f6b-80f5-4d4e-a881-c695e8e97386"
        },
        "item": {
          "id": "7cf8cced-39e0-4e67-92c7-91124f73b69d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "af0834cd-2ee0-4bbe-823c-86432369a0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c28c5b67-eb51-473f-8376-3c1eb1dd9887",
        "cursor": {
          "ref": "88890793-0455-4528-9bd8-c0bf350ec24a",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "97236dc6-bf97-44ce-98de-10841f03e1b9"
        },
        "item": {
          "id": "c28c5b67-eb51-473f-8376-3c1eb1dd9887",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "55769b37-d09c-4687-8f01-8ac4277f948b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ab79799d-e411-4a77-a682-f3a650653093",
        "cursor": {
          "ref": "a0772b05-159e-4d98-bfb5-e8eda3fc83f6",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "0ef22cf1-cfbf-4a93-a65d-594efcc9b00d"
        },
        "item": {
          "id": "ab79799d-e411-4a77-a682-f3a650653093",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "74b4a91c-0340-48dc-b0a5-258ae40e76c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00cce99-8516-4e84-abdc-51f083ce7d7d",
        "cursor": {
          "ref": "19b70e77-2a8f-4474-b482-8f80003c6e23",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e998b6f0-7ea3-4d85-a142-df61646f608a"
        },
        "item": {
          "id": "c00cce99-8516-4e84-abdc-51f083ce7d7d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "dbd6f023-cf2b-4063-b726-9fe5270ebe85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f9d14ae-84c7-4b6b-b65e-bf40d27210fe",
        "cursor": {
          "ref": "dc99aac1-1a90-44d2-8abb-bf5e94645ed8",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "ab3c5698-1b91-49cf-8a5b-8344555985d1"
        },
        "item": {
          "id": "7f9d14ae-84c7-4b6b-b65e-bf40d27210fe",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9cd8d32c-9b54-4067-8526-becd13fa1ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c849667e-ac53-442a-9b37-f588c8fbf2ea",
        "cursor": {
          "ref": "d04e0ed5-7acc-4aac-8d1f-094884c10345",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a38e598e-f084-46eb-b38f-d73eac381ad6"
        },
        "item": {
          "id": "c849667e-ac53-442a-9b37-f588c8fbf2ea",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7ba9ec93-2aa0-4e34-a6a1-a889a0d7b96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0222fcb-e710-49f3-b796-d0e38ac237f4",
        "cursor": {
          "ref": "3e492578-e0ee-40ef-af9d-c88c055e4859",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "aefc1560-0046-4df4-b35a-67963e8d192d"
        },
        "item": {
          "id": "a0222fcb-e710-49f3-b796-d0e38ac237f4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "9b0c1a99-6f2c-40f2-b922-5b6cd9f640c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254d84f4-ecce-4a71-9ad4-b2c3def2f632",
        "cursor": {
          "ref": "05ec319f-ada7-4437-ae23-2e8a7473e121",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "341d7223-d353-4ae9-8746-25ae2f72f3be"
        },
        "item": {
          "id": "254d84f4-ecce-4a71-9ad4-b2c3def2f632",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e35f607c-6991-440d-96b6-eb5dc7df5b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ef213e-1cf5-4428-b087-f52bfed4d4ce",
        "cursor": {
          "ref": "8223b23b-b612-407d-929e-acf854d21262",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6e97d76a-1736-47a4-8484-353f0de25086"
        },
        "item": {
          "id": "c4ef213e-1cf5-4428-b087-f52bfed4d4ce",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "3165a56d-181b-4964-920a-2f4b5998dd7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba11011-605b-4ed1-a00e-36cd0ad60692",
        "cursor": {
          "ref": "efa26f1e-436e-4212-8097-9751a4b6755c",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "839729eb-5865-46b2-b5e9-eba4052ba71b"
        },
        "item": {
          "id": "4ba11011-605b-4ed1-a00e-36cd0ad60692",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c3c65148-a9a0-45d4-be8f-f9f3f58e295f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad374f2c-dbb5-437b-b9bf-165eded7e357",
        "cursor": {
          "ref": "d35cc245-f9ab-4720-8511-6a9cdcd9330b",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "db4ff481-19ed-40f3-bda0-894d7bc697fa"
        },
        "item": {
          "id": "ad374f2c-dbb5-437b-b9bf-165eded7e357",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a1d3a1c3-015f-4189-8bed-5c92e3a9c1bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ad3a3ad-5030-400d-a41f-6763f23e7a2d",
        "cursor": {
          "ref": "2b7e862e-8871-44a2-bf85-f8fca58f5560",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "05186b86-8e55-4452-9a82-e635250ffbcb"
        },
        "item": {
          "id": "2ad3a3ad-5030-400d-a41f-6763f23e7a2d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "e95df511-effc-4dc7-8f4b-e4c7f79d2360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d5fa9cb-480e-4be1-b2bd-73ed0343df39",
        "cursor": {
          "ref": "914b70fc-4123-4a82-8b91-3a6bd5df8311",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "302eb0f7-bf05-4294-b302-bbf063c2c507"
        },
        "item": {
          "id": "8d5fa9cb-480e-4be1-b2bd-73ed0343df39",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "7da0ccc7-f977-4f00-aa43-3f5916287243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25b96bc-3363-458f-86b7-4b7838db1f02",
        "cursor": {
          "ref": "a90e4d47-b26a-42d3-9dab-11ad88c04e21",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "6c958072-acb0-469e-92f8-012ced36147d"
        },
        "item": {
          "id": "d25b96bc-3363-458f-86b7-4b7838db1f02",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d9e5ca92-076b-4432-b582-5da3fc3edb3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b58c59d4-364e-4539-83d8-f04074c06130",
        "cursor": {
          "ref": "13231c23-2b6a-4f22-bf48-352ab686237f",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0eabcb70-6615-4410-97f7-0edbe167b0d9"
        },
        "item": {
          "id": "b58c59d4-364e-4539-83d8-f04074c06130",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "313fe61e-ec1f-4124-9340-0a357b4997ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b665c102-b6b2-49db-b75b-3f9afcb34aae",
        "cursor": {
          "ref": "0034fcd3-e56f-4fa8-b191-b38e12a02caa",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "87967794-2eef-48bd-82bd-bff86a9d9b2d"
        },
        "item": {
          "id": "b665c102-b6b2-49db-b75b-3f9afcb34aae",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ff00ea5c-0c4c-4a76-a717-3e01cfcb41df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1306,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "aa7ffdbd-1158-4425-abc3-c9e982c6a563",
        "cursor": {
          "ref": "a4404ace-7bf9-49b9-8389-296c224aafd8",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "71ce09ab-37a0-4c7a-85de-ec8ffe039c11"
        },
        "item": {
          "id": "aa7ffdbd-1158-4425-abc3-c9e982c6a563",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8b5aefb0-8805-4dc3-a70d-90521622efcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 765,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5e7e3af9-fd58-4f8b-82db-990c2bb00763",
        "cursor": {
          "ref": "ba573f55-34d7-4e95-b2ce-4cd4fbc8df84",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "efb30e54-b2e0-4dd6-9270-920fb5c18b19"
        },
        "item": {
          "id": "5e7e3af9-fd58-4f8b-82db-990c2bb00763",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "999732ef-ba1d-462c-8f65-3367f9c751e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "09df9c7c-86b3-4dc5-b392-eb9fa028ce2e",
        "cursor": {
          "ref": "86480271-870d-4bc2-a62a-d8712b163ca4",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "470f4001-44bb-45f2-adb0-68a511249492"
        },
        "item": {
          "id": "09df9c7c-86b3-4dc5-b392-eb9fa028ce2e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "64273339-b7b1-43fc-afe9-2a21300c33b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 803,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "00391c3c-fe5c-42da-b6b3-e259e6f29deb",
        "cursor": {
          "ref": "bdd63a1c-eb50-4643-8bfd-bea8b60da15e",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "067e6060-967f-456a-a6ff-1448b28877b9"
        },
        "item": {
          "id": "00391c3c-fe5c-42da-b6b3-e259e6f29deb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1f3e5ce8-3299-405f-963d-54791e2c0746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c22302fb-d6e2-4da5-82f4-d898bb7d9822",
        "cursor": {
          "ref": "a88eb4d0-29f3-4a23-9430-1628921dd36d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ac1ba8e9-9d78-41ce-8724-1eddb4e1009f"
        },
        "item": {
          "id": "c22302fb-d6e2-4da5-82f4-d898bb7d9822",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7a900e35-33c9-4512-84f3-7e2005a659a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ddcc11f-e954-48a2-a65c-1134b6463167",
        "cursor": {
          "ref": "c4787777-fc64-4127-8eca-8232b04ab95d",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "4142f35a-2201-49fa-b1e1-8d86055aabae"
        },
        "item": {
          "id": "8ddcc11f-e954-48a2-a65c-1134b6463167",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5ebde5ee-9ae9-4bc5-80f7-f6e640f531b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bee7ee6-f1cd-413e-b2de-441bba32d307",
        "cursor": {
          "ref": "efe77992-d85b-452b-8f29-e2bbcf506dfc",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fce3f9c0-f3d4-47c8-a235-cf067c9e5635"
        },
        "item": {
          "id": "3bee7ee6-f1cd-413e-b2de-441bba32d307",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d95b1f1b-a38d-4c77-a219-41071cbf7d7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10e745fd-bff5-40bc-a725-c5f3016ca984",
        "cursor": {
          "ref": "5b0d3acc-b937-400c-9287-af426265ca12",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ac565b63-1e80-4dc9-83a7-c7cb1450f5f1"
        },
        "item": {
          "id": "10e745fd-bff5-40bc-a725-c5f3016ca984",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b01b73df-e681-4fa7-b0d1-5a97bc03c0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4af6bfd-91fc-42d7-b59c-a7956529232a",
        "cursor": {
          "ref": "1585f2f3-8f6f-4ea5-b19c-6775804ca68a",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "767936b5-4432-4a89-bc37-b5a4f0c8a48e"
        },
        "item": {
          "id": "a4af6bfd-91fc-42d7-b59c-a7956529232a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "81cd1c16-1630-4920-8569-629d5d66c603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07798a4f-e1d9-40ad-a753-a171820b3730",
        "cursor": {
          "ref": "3f840fe7-6344-4d94-8407-2ddb4cd9e577",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "f5c235ef-9a1d-44f2-bab3-f9bcf74d566c"
        },
        "item": {
          "id": "07798a4f-e1d9-40ad-a753-a171820b3730",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "974233f7-9fa6-4a60-8346-2f629e75bbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c49121aa-4c34-44e9-85a4-f8e0f0128e42",
        "cursor": {
          "ref": "2d3bb917-c4f1-44bf-a5c9-98e9a852be8f",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2b7a4b02-9a6e-4130-b48d-f739aa6075b0"
        },
        "item": {
          "id": "c49121aa-4c34-44e9-85a4-f8e0f0128e42",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "097a8c1b-4065-4194-9497-cb67eae79d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ed4ef6-809f-4d4e-bba5-ab87f00b399c",
        "cursor": {
          "ref": "293757fe-e84d-4e5f-9ce9-2150a66b5c37",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c2296de2-32a4-41fa-aca2-5238391231af"
        },
        "item": {
          "id": "b2ed4ef6-809f-4d4e-bba5-ab87f00b399c",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3dfd93b9-4701-4644-8f56-ad288a36f606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94f926a-74fe-4769-8142-78ad511970a9",
        "cursor": {
          "ref": "fb8af8a4-e92e-4cc0-8e8a-3dcdbbf0bddf",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1461a628-35df-4071-aac8-7f4f4c204355"
        },
        "item": {
          "id": "b94f926a-74fe-4769-8142-78ad511970a9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "03a5bd9d-7374-45ea-8d1d-ffcb3a25708e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89f2f51-1c38-4e28-a432-8ea9bd34fe01",
        "cursor": {
          "ref": "35fd6efc-f033-4360-916c-b2c4f9c441c1",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "851be1c1-f378-432f-b4be-1e45b8c85e36"
        },
        "item": {
          "id": "e89f2f51-1c38-4e28-a432-8ea9bd34fe01",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "eb108fba-e98a-4a76-b66d-487e787dfb00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da94d3cc-7e76-4dcb-956b-6da82903a8bd",
        "cursor": {
          "ref": "0bcc5248-666c-4dd5-a75e-c600e4f2e96a",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "eb46651d-ab6c-4a2e-b820-56e82cff382b"
        },
        "item": {
          "id": "da94d3cc-7e76-4dcb-956b-6da82903a8bd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "07c76311-5caf-41c8-b40e-9b47c8423fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817d79ff-0e5a-41ff-a3f1-777e717aefdf",
        "cursor": {
          "ref": "eb835dbf-cb84-4582-93d5-739a6accdc07",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7834cac2-08e7-4b66-be3f-e279d95d5702"
        },
        "item": {
          "id": "817d79ff-0e5a-41ff-a3f1-777e717aefdf",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a2fe4d16-7d16-4f8d-895d-6916a3fe79da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d16b77ce-dfad-4168-87f0-f81f3f31ca7a",
        "cursor": {
          "ref": "617cef7c-388b-4ce6-979d-717e810a3aa2",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "92fa5983-4676-40cd-aa73-47fff7c21ced"
        },
        "item": {
          "id": "d16b77ce-dfad-4168-87f0-f81f3f31ca7a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "dd3724ec-393a-4dcb-a1c3-69aaa53090c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32474182-abfb-4942-b595-b300c2e260b8",
        "cursor": {
          "ref": "b1d773e8-bf25-4b60-be8a-863153c85db3",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "3eea4dcc-b191-439c-8308-22250cdb2c0e"
        },
        "item": {
          "id": "32474182-abfb-4942-b595-b300c2e260b8",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "752aa144-1f65-4de8-b1c4-851eaef78d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebc5cc4-5e41-400b-b65b-d66af4b9801b",
        "cursor": {
          "ref": "c0e5b427-82bc-40e1-8b7e-5ff2302c894c",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "e9cfa779-46a0-4669-b9ee-a9c891dcce57"
        },
        "item": {
          "id": "8ebc5cc4-5e41-400b-b65b-d66af4b9801b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "4e15732f-fb08-460b-b3ae-1def340e8c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd117e1e-65b9-4215-9dba-fc4a162c2109",
        "cursor": {
          "ref": "a8b87e30-cea2-4fd2-ba4b-54ebff9a5e48",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c843d40b-abb0-4d2b-8e39-8ec19495ea03"
        },
        "item": {
          "id": "fd117e1e-65b9-4215-9dba-fc4a162c2109",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b0d15fa0-7cab-4842-a9d0-5e44bde6eae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a11f9d-6932-4ec1-9a10-5cc4a8ea0870",
        "cursor": {
          "ref": "d0646cea-6c99-4a81-9c7f-0542c74ae8e6",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ea8fb443-547e-490b-bf61-36d31e17c874"
        },
        "item": {
          "id": "44a11f9d-6932-4ec1-9a10-5cc4a8ea0870",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d8950e6d-036d-468d-805a-febfb167c745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8388966c-4273-4e2c-9aa4-acfc623038b4",
        "cursor": {
          "ref": "57be0b05-66ab-4aaf-8a8a-053178028ff3",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "2dd50896-3d7f-47bd-8030-be9f70564e3f"
        },
        "item": {
          "id": "8388966c-4273-4e2c-9aa4-acfc623038b4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0b9b10ff-8bdb-45fe-a5d9-07f60be5b0a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c89af6-2ac1-4b5c-ab34-616b6b88bf1b",
        "cursor": {
          "ref": "fe6119aa-7185-4c92-a486-de27cd7b86bf",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "876edffb-332c-4112-8282-d8d6ed85cc3c"
        },
        "item": {
          "id": "27c89af6-2ac1-4b5c-ab34-616b6b88bf1b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b8320c14-47f7-4d1a-acb4-363fa735103c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "586ed0e6-3d3c-44bd-8b9a-401d882586c5",
        "cursor": {
          "ref": "d6afd22f-8098-4f54-9657-39622e41faf6",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9013d75b-2ec0-43c0-bc15-152464a5268f"
        },
        "item": {
          "id": "586ed0e6-3d3c-44bd-8b9a-401d882586c5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6f1bd077-61a4-473b-9c0b-86c30e7fcb73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1613879-2dbd-4c98-bfb2-d3f5464f9911",
        "cursor": {
          "ref": "99a33582-ca48-4769-bc27-22b9f8240177",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "49457229-f360-4ea2-9af9-5b01531649cc"
        },
        "item": {
          "id": "f1613879-2dbd-4c98-bfb2-d3f5464f9911",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "df857989-2d11-4aaa-a145-bd2b4498bad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "355dd5e1-a767-46f2-97a3-3c564e3911d4",
        "cursor": {
          "ref": "e6b7c8ea-556a-4fe4-8473-d43229cac64f",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "6e4a3807-70fc-4e1f-b63b-0cdb97eb4cd6"
        },
        "item": {
          "id": "355dd5e1-a767-46f2-97a3-3c564e3911d4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "2753f707-2709-4a94-be0a-321a00439ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07abdbcf-3b29-475e-a062-8dabd5094b0d",
        "cursor": {
          "ref": "74b01b36-b63e-4ddd-ade0-8d0bd37d8233",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "4fe4f06d-39b9-4436-ade5-0e870c9c42ea"
        },
        "item": {
          "id": "07abdbcf-3b29-475e-a062-8dabd5094b0d",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "39f119ad-f20f-435d-844f-c3b8dd10b218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca94c82-5a19-4da2-8828-0719489b872c",
        "cursor": {
          "ref": "3b030b91-bf25-494d-b501-1ccc61bf0f56",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a48a67b0-b9fb-4c3b-8157-fcef1f7e1dfa"
        },
        "item": {
          "id": "2ca94c82-5a19-4da2-8828-0719489b872c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c86f4d68-739f-4a34-81a4-69c26c1482bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5682c5fc-10c1-4b0e-8c45-a5dd216f7a98",
        "cursor": {
          "ref": "6e2489ea-43a3-4391-87b5-08bffcec4128",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "eafad01e-c544-4f0e-af03-bfefb69a0a78"
        },
        "item": {
          "id": "5682c5fc-10c1-4b0e-8c45-a5dd216f7a98",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1274bb39-9962-4810-8cc2-fee4d996e71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63839346-f49d-4e8e-b865-b3e25d1f6981",
        "cursor": {
          "ref": "ab135b52-888a-4704-93bb-e0ab4d37927d",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "6aa75680-0f6a-417b-afab-53fe924ffd46"
        },
        "item": {
          "id": "63839346-f49d-4e8e-b865-b3e25d1f6981",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "8f069f31-a9c2-4979-8c7f-d00008f08d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1eaa0c5-3d98-441b-928a-ffa96c689f2e",
        "cursor": {
          "ref": "65e57495-1315-411a-951f-48dbd98d7da7",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "12de20df-e72e-471c-bd91-d2be655251ad"
        },
        "item": {
          "id": "f1eaa0c5-3d98-441b-928a-ffa96c689f2e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "005d841e-0536-4e48-97fb-618a0da946b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a3254c-ba97-4ab4-a0c7-71acca531fc7",
        "cursor": {
          "ref": "33ee620a-98c6-47ba-95a0-650b4fa842e0",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "1cbd051f-89c4-49d7-9a4d-01eda35977e4"
        },
        "item": {
          "id": "d2a3254c-ba97-4ab4-a0c7-71acca531fc7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "63fd531d-8615-4e93-8dd6-50d9fa019db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "696b67c4-5f9f-4b5e-9749-7243f6146af7",
        "cursor": {
          "ref": "77be8040-6c85-4464-a154-b1b4422edbaa",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "4973ffba-134d-4bc2-988c-ab41a7ac40a5"
        },
        "item": {
          "id": "696b67c4-5f9f-4b5e-9749-7243f6146af7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "377f5315-3cfc-4cf5-9866-4d0ace531427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01306bd1-d88a-4033-ba74-b2e9337ad272",
        "cursor": {
          "ref": "f423033c-044d-4104-ab2b-a043111f78bd",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "bd48898b-fb1d-4595-a629-06e91756565d"
        },
        "item": {
          "id": "01306bd1-d88a-4033-ba74-b2e9337ad272",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2a9510ff-01d9-4887-a7cd-4cc151b310ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8486ff6-cea2-4274-9fe6-aa966c42f615",
        "cursor": {
          "ref": "0e2ec42b-7aad-49ca-bc77-5ebf5b872787",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "a1c3debd-b65c-4d69-9014-f3c09fc66c2d"
        },
        "item": {
          "id": "d8486ff6-cea2-4274-9fe6-aa966c42f615",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b6599cbc-78dc-4f66-b85e-989945699b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad46a29-9c60-4bd0-94c4-20a5ca353dcd",
        "cursor": {
          "ref": "49570f8b-ed5d-4b2d-9cbf-b4f93857af67",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f5f401a8-3f7d-4544-8115-d20f4309a5e7"
        },
        "item": {
          "id": "bad46a29-9c60-4bd0-94c4-20a5ca353dcd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "815b6d77-78e2-4053-be3b-f5221787fad0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5df6cf3-180d-4c3f-8cb8-98c2f389aa9a",
        "cursor": {
          "ref": "8556c5e4-9347-4221-99c1-42374cacb1fe",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4bdf79e5-f69b-461d-89b2-c0b2a217314d"
        },
        "item": {
          "id": "f5df6cf3-180d-4c3f-8cb8-98c2f389aa9a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "065fe956-0825-47b4-b4d6-26127d76c948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7ad0bf-be1f-4b2b-b968-d01cfb2357b5",
        "cursor": {
          "ref": "d028db1a-7e30-42fd-9412-8736660b4124",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "45000818-02aa-4b41-9c86-3478d15d9b5a"
        },
        "item": {
          "id": "5d7ad0bf-be1f-4b2b-b968-d01cfb2357b5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3c684660-fcc6-468f-a9f2-ee508c333f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b02586-0256-4733-bac0-0eb8f848c937",
        "cursor": {
          "ref": "de1a642d-d905-4107-bf04-c0f9a1560330",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "08068404-f1b5-47be-b8f6-0d8e03801e0e"
        },
        "item": {
          "id": "d9b02586-0256-4733-bac0-0eb8f848c937",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "acb8aedb-e0e4-48f1-8539-0445ca758c62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 60,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3fa588-0ce5-4b43-8448-4323b9e119fd",
        "cursor": {
          "ref": "d52cb32a-bb9a-4c9c-afd8-eaf831965363",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "abbc9445-be10-4cd8-9e27-616eec12133f"
        },
        "item": {
          "id": "6f3fa588-0ce5-4b43-8448-4323b9e119fd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d9347ab7-52a2-4dc3-8bbf-020cbd99c00f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "03914288-c728-4920-917a-5f893b23ff0c",
        "cursor": {
          "ref": "8885da75-da26-4998-b64b-9f88f3929863",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8539fedc-86c9-414a-960f-c325738092bd"
        },
        "item": {
          "id": "03914288-c728-4920-917a-5f893b23ff0c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "40b105f7-e029-4001-84fa-895168342757",
          "status": "OK",
          "code": 200,
          "responseTime": 955,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd2c2e3-32d4-4210-9fb1-00c055a21337",
        "cursor": {
          "ref": "f27ca030-b818-48fb-9d4b-8770a6961bc2",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b68b7829-27a3-4a07-914e-a485d65b3936"
        },
        "item": {
          "id": "cdd2c2e3-32d4-4210-9fb1-00c055a21337",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b062c310-5e3d-4c67-a5e4-bac87aa8839d",
          "status": "OK",
          "code": 200,
          "responseTime": 962,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00b69da-a0cb-4c8c-a92a-100f24dcd8f0",
        "cursor": {
          "ref": "f672ac44-70e2-4578-83b1-4e1425aec195",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f9093a24-ef9a-4592-aa71-f13d72d9f0df"
        },
        "item": {
          "id": "f00b69da-a0cb-4c8c-a92a-100f24dcd8f0",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "f00b69da-a0cb-4c8c-a92a-100f24dcd8f0",
        "cursor": {
          "ref": "f672ac44-70e2-4578-83b1-4e1425aec195",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "f9093a24-ef9a-4592-aa71-f13d72d9f0df"
        },
        "item": {
          "id": "f00b69da-a0cb-4c8c-a92a-100f24dcd8f0",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "63ad41bd-2189-47a4-a7e3-491f8a1d981b",
        "cursor": {
          "ref": "4448799c-6547-48a5-b742-20e4ca27e221",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "cc03cb81-affc-4254-aa80-9573a35ffc40"
        },
        "item": {
          "id": "63ad41bd-2189-47a4-a7e3-491f8a1d981b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "f308f8fd-ab57-4497-9897-f5b5d32c27bb",
        "cursor": {
          "ref": "b9ae080d-3cdf-41e4-8415-a5f639ccd865",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b36b1067-ad28-4167-8ded-5fa4e5e93a96"
        },
        "item": {
          "id": "f308f8fd-ab57-4497-9897-f5b5d32c27bb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}