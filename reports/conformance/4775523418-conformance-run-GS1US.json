{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "1938579d-0581-4889-ba48-33d657135159",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b1a04b42-e4c4-462f-ba20-69d104771d24",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d917e8e6-ea7f-4f4f-b337-cb00446ccb09",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "488e4071-beb4-4ba3-b66c-a2fa3a71b79e"
                }
              }
            ]
          },
          {
            "id": "96ccf7bb-5171-48f2-a2e3-57cac3d50040",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0543d286-6863-4273-85b2-73600aa7c999",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c79fd905-07ae-4d65-95e0-45e5b04efb38"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e3f00b19-be41-42e5-b6c3-188354beaa8a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9811f442-ee60-45c8-806d-5492e5af3186",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6921df4-4b37-40ca-8e87-e74e74a9c1f2",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9b5b089-aca2-4e6f-acd9-e00df89ff393",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "85ad8fe9-a3eb-44ff-819a-f50da4070c6f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "16a9f485-d559-4bd2-adfd-0eb1515cf736",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf5212a1-c20f-4eb7-90bd-7d42682f023d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3f7be340-052c-44f7-93bb-bc0bfe041a84",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ccee3eaf-8915-4d87-8e97-a1d6f4b27ac2"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70cd11d4-bd80-49c5-bae0-70511e44e47c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7769ed03-1871-4701-83bc-625c6f5b9a28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d132e889-b7f3-4625-b487-7d1720db2cbb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "daf4b0ee-8394-4011-b8a2-2defca8a2131"
            }
          }
        ]
      },
      {
        "id": "b1266e7d-4bb0-4fca-855c-250eea7c43b7",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9feefd9c-a31c-46df-935f-29dbfe4af937",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0852d465-9440-421f-9f65-8fee57a8d204",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "03c5fb66-4046-4012-bf3d-f0f6f75c18ee",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6378973b-d818-44a8-aa00-8cdf982bb61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "986dbe08-74e0-4c73-a62d-ddd0f4b60e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d112a78-ca8f-4a68-a293-0da94fc51952",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b9268e0-24d2-40e8-a4ca-6a9a94f6c6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9f1c708d-56af-42f5-a25e-66a9cc4e21d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d3becf-0be1-4e6b-96bb-36e30b36ec74",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941c3cf1-ba5e-409e-b890-473297380414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a59a0055-7580-4506-82c5-93669f295353"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "15dd468d-69d2-4a76-8ed3-977f46199155",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6f27141f-ca1d-4b31-bc87-7115b787f930",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a73bf3-f31c-4b92-9c7d-27e638d9d8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30089c09-1d83-4ad1-b2c2-6a88af5fc332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa70f872-3e61-44ad-82ed-271cb7cf0857",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03b4a88f-112a-4267-aae0-06f6711a9a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85af3de-9af4-46d4-8dab-2b2e3b6ab89e",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87f7521-e05c-43ca-a636-0cbf1e147872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "160cf820-024f-4da0-a4d5-17ceadb137a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e6f2eb-5446-4e2a-9a95-24d753880514",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "740c964b-d8bb-431b-8726-eb6d8d104c60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "761483f6-3eff-448a-a405-f86b237372f2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ebce4c27-98ec-47e9-a796-4c5746792de0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37e696b9-df9d-4b6e-952b-f325fd650576",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f16f1904-efa4-4e13-9518-68e567294af3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9a99dab7-3836-4436-9548-5e6b4925aa8d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7cf7d6ec-cc6d-4b2f-9d89-c4442c9f7ad4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8002f5ff-458c-4169-92d9-880a26c7bce7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1b6b71e-a923-480c-97c4-668b9e08d45e"
            }
          }
        ]
      },
      {
        "id": "7969bf22-7dc2-4222-a47a-4cbd4db1666c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c6a50dc7-b761-4266-9076-1766f06141de",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d0cd30aa-e720-4d22-a0e5-e56653a7085a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1f4ab3f2-8ddd-4e07-a6ef-f81736986ff2",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d448fe-b04e-4853-860a-70a52a7505af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f83df89-9cbf-462c-a8d4-c4c49a4c23a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3465ab75-6494-4285-acd1-eafd9d76e679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4982cb2-ecb2-461b-b088-b370a635d368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7eeb8e-5df2-44e6-8966-ab048c215b05",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2a4b8e-e397-47c8-8e3a-df679f4cec55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d669dd-f664-470f-b57d-d6515306a1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f30d39f-4e28-43b2-827e-9ea9e6c0e5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d4ee066-4575-42ba-8ec0-e1cd58f5d563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f513396-fb68-4a38-871e-85e538e93f8f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c714d727-5c12-4ada-bbeb-111c1a243c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca226a67-03ab-4c89-af35-be2e1391a514"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de79753-37fb-4081-a4ce-7da505273b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "982eee79-2a7f-47fc-8e1c-503653fb3750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ebdd7c7-293b-43d0-872e-0e9bd99a4ced",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b1e706c-7089-40ad-a2fc-2a66fef91720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b870a02-fad2-407f-a2ae-46e3afc50316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77616b05-74da-4836-b17e-a4bad26b364d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37bed8b7-4b13-4eee-895d-25e4f0ea487e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012ba732-840d-4410-ae5a-f40298e06e80",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "298377cb-c610-42cf-ae16-2c56e9e7a89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fd28a2d-72ba-4681-b0c9-6d9f4f9dd3a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930849fb-a421-4f93-8dd7-53972b25cf7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a23961c0-ad6c-46b4-bf68-05f7994813c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb91b9dd-b67f-444c-b6a3-e88a850a3107",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bed805-7b6f-4420-acc9-7ba0dcce18d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9cb3f42-7d26-4600-96c9-aafb1f7f923b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ede080e6-440f-496b-8cda-af1d702eb45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e928d959-e0c0-49db-96a3-d5163dea4473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efd8cc3-57df-4562-ba03-e3fb07117987",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37bedd76-494d-4e7a-834a-1182d7b6ca05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc4ef60-631a-45bc-a519-03b2486b1bf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c21549-440f-4bbe-a326-7f83305fee43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2a8c072-7208-497b-808f-e24a79e57188"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fccbf2ca-70d5-49c0-9a25-979bbcd20c34",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e13a11-1456-4262-a3f4-8c7be9d4bf2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e611a5-a5b9-4512-b91b-99b68c4fb653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "844543c6-dd4a-418a-b5bb-196c81c155ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5edb097-8083-40e5-a9f6-b2b9026c9752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0dda457-ffcc-4085-8e8a-a4a80cb1322b",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "589a7157-8a7f-4804-b220-c9b4305ed04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f142db7e-0fbf-407b-bcb3-75aa0c14e880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ccbbd6-1ef0-47d4-8007-36e392f7d92d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74c21864-ab1c-4286-a39c-39e51b436d4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842d593b-b314-4523-bf49-97802fe1357e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f282ac7-887f-400c-b82f-8f61ee227c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a36219da-ed46-46fd-bb62-2ce466e31f53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "012d75f7-682b-449d-967d-cb3b1d0b28a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "da12360f-58c3-4a87-bf28-535e71ed68b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111312f1-47cb-40df-9ee3-291cc0c2e95f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11c1b03-1241-480b-9e0a-04fe7af605a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a62fd026-ca29-4a6b-8045-52d0c15fa7dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14007c2c-1d77-44f1-a22e-c0530581b943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80d93eed-7349-4fd6-a011-20a587450741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac608904-b7b4-4cb7-8ff9-cf24e53f048e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57644ae8-ce69-44a4-8bc5-f90a7423f769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c0c54f-4225-4cc3-9571-00f7269162cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8ad8e5-0ba2-439e-97b7-8b63cb069526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5043b1df-5648-45fa-89e4-ccfaebdebdf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaaa2ed-fcba-44d2-a1ae-e18d5615bc9b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9af0179-2333-46de-9706-b768e297ec77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604457bf-973f-45f6-a21e-a9b0fd52d624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20909c96-f886-4bde-a344-a46ca64fb183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "49ecf0ea-f1bc-4da4-8e43-56c46f34902a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02323282-1db7-4be4-aa64-14e6300e80a8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5a600e-891e-479b-9c01-468b3046432f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bb2a681-592e-4989-afa9-6aa75262bda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86802d07-3e03-413c-8a49-e046984a2d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e2b12dd-af78-4df8-843f-c0cf08aeecbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd60d8ba-ebb2-43a0-ba86-bedee0c46baf",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee7527b-673c-4d7b-af05-31ed119ad729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27113d7f-1308-4920-953f-dea3fbde20a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153641c1-92f1-487b-a16f-c42a76e667f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "be4c0b9a-85b9-4987-8eca-3350fd155f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d405a3e0-d5be-4c34-a8e2-5e9e9f6cfd2a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095710f8-b29e-4946-bd54-aea9fe6e0b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9721a2ce-1bdc-4633-bc85-98135d87cb5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d8628c-4e25-4491-bd7c-4054f608c075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edb33581-5cf2-408a-8ad5-88dfae633606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d4463e-cfd8-49ae-a221-91d15d00a547",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292cc18d-8ab7-4fa3-99f3-8cfbbb4e64e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca69454c-8d6e-4b1c-a2c4-db10fc2cee76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c2255b-d1b8-4990-85bd-37f9ef955d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8a67fad7-8199-4451-9cec-30b2650d9b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a4ac60-8e5f-43ea-8e5f-cb33c680a1df",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0238c562-0539-4658-9982-e8870673b9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89c1963-3a1e-46fe-9de9-f204f5d7d2c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626bf0c2-369f-4c18-8b8c-025efcaf7951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b434c51-1643-4c5c-8257-29d06ff582dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb9019b-f121-42c3-a9af-4f8ecad2a674",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d33e90-9e93-49e6-a6cb-32879378648a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c9081e-6a02-4b14-bf09-043f72dfa038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb9b378-99bc-4272-9100-c47af8b41f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "057ead89-1a1d-495c-addf-ea3be12802b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce3fffe-da4c-42f5-a753-f15a36ed87b5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b52026-e78f-481b-b3b1-beadddba2eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01748dd-1dfd-4c1a-bba8-4f37c2a322be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4776d95-015e-49ba-916c-105fbeaa18f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0a847c-1532-4d85-ab50-a404c48ec474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43de581a-d1cf-4967-9337-4449fa28f669",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f419f82-21b6-460e-8bf6-6e69be290040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c3bc95-d58d-4df1-9e4c-60f3decac13c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09c3aae1-d521-47ff-b3c6-9ce0ed02a021",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7943601-16f3-4635-801e-83c873c3a82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9eec3a3-b16e-4d20-9da1-5084a6447c40",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c234fad5-8f82-4127-a90d-b341113fc246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b05eb28d-b66b-4ba1-a5cb-59f5c72ffef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b09f1a-f211-461a-897b-d7c6edd5943d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "63ec672c-a73e-4aee-b556-c193ea56181e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1414a9-6f89-4962-aaa1-76a07b6cce10",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ad0605-a5a2-4373-be4e-0c3652376278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbdca988-433b-4087-bf8e-6c823aa478ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc686f8-2bdb-415d-93fd-b65227c31c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5a7030b8-87ce-451c-9cc9-6a872a250a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80c7bd6d-c378-418f-a243-52b179f28066",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf35c84-cc57-4a02-a72d-1f450337f6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c4f1dc-bb04-4fdd-ab24-5c4dc3369b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "324469ed-afff-4d69-952e-2aaf85e0e854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9fe3850-ba83-446f-b948-9115c594c1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6100ded-3b9a-4184-aabc-6f3632ff049f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9419b8-2dd7-4f1b-83a5-74224dccfbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a76dea-d675-4b72-a693-d830705195d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf70887-48dd-46c4-80b6-677a17ff9419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef729879-02be-4701-9640-f8c2e431cdf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca0c569-fccf-49fe-b25f-6c88ed889d01",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c41d048b-0e4b-4675-98f9-e2cb55797543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad9e38c9-08ad-45c8-afd6-e9b2fc2e21b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b472a7b-59a7-49b5-8a72-3256c4cd7b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbd4fa8-87bd-46d4-808e-8f8ef962a0e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66b7b57-3ee8-442c-ae3a-9c18537fd7e5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c271233-1596-448a-b09c-b7ba0d4a81b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be0494c5-aaa8-42d6-a16f-a12602dc3d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0135e762-afa7-4eb9-b698-d700aeb3467e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "12fd093d-6a69-4ab8-bab4-c60fca2d67e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da5f1f4-733b-4aee-8387-788590f15e6a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecf7d88-857e-4110-8ba7-5f691d4205e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11d3382e-bd80-4731-83a3-ee16f8a2f90d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae95d5e-a509-4ec6-8bb2-62b723b735dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "af2a1931-681f-4e83-9316-54b7e97554fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98344a23-90b8-4877-93eb-97bd10b7976b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0243a1a0-631c-4882-a599-50e78cc03614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79617ea6-9831-4eec-8743-e383a0ede36a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3460ee07-a0fa-455b-9868-84faedc018fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e5058c6-21e5-4be7-917a-a9f1c8991a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd53a0ee-ef6f-4f64-bfca-25907e99442f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f60bdc5-2996-4ffa-a915-a9d1ee8ae309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "528f982d-4185-46c9-84b1-d77d1d923cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d70a7d1-4a92-4898-bafb-ee73bf8fd724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f497906-6be1-44a4-9805-5fcaeebbace9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb957491-f818-4723-9901-55d27377c759",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8c2903-b59b-47fb-8322-c2d08fd592e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbaf156b-65d1-4718-a772-5bcffc23e68c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d0c049-1a69-4be8-93b4-3391354dfcdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2a3f85-f8f5-4501-9138-6fed7cfd442a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5daa395-ee35-46f6-a032-371cd45c52de",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "133fedd0-d3a7-4e8e-b99f-fa698b3aac6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f8029da-3449-4385-9aae-0a030eefab8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc2d05b-3ebb-451f-8cdb-38dcc2fc831f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc742062-08c3-4300-8251-bdb2b5722708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d66ee8-0024-44fa-8ba2-853704339a22",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff94697-5bcf-48e3-819d-e88aea3cee4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97b713b1-7e21-4e0f-b2b7-a1f7ee3161ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23da60cf-55c2-45ad-9cf4-92659b190d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b00307f-7b43-4c31-be3c-b0d38c2bf186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a4cee72-c9da-4078-9085-e2634ac81f10",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae3601e-730b-421c-b839-9121eb673aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1a981e-e86e-429a-9dd5-79991d8821d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5785338c-cbd9-4c92-a75c-b42671b67c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd64106a-169a-4130-afac-31ddb9c172dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce23c33-6ee3-413b-9033-0731afadc78a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd689a1d-760c-47eb-81c9-02b79577f86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9825f518-06cc-43aa-bec7-30dc2b19bcaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3be35d5a-a7cd-4105-b953-603eade1a20c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "adc539a1-c647-4e1a-9721-235e9d5f4262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96f5002-bfcb-4cbc-a9bb-3d75798fb8e1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52ec250-f196-44d4-ad4c-47a94f766a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c6ae135-dee5-4a0d-bfc4-c3e1c280b699"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c446ff6-a219-4a82-9ae1-1028797dd98c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71817a97-5e6d-4101-bf48-aba39d3b03ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def30549-9d3f-4b05-8b0d-ab997cc6fce4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a20eead4-5d81-48d7-9ffa-295ae5e8593b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fee23e16-db32-45f8-9f02-c42ea609b338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3150f977-03e5-4d90-a35c-1b67194e8897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8af23a8f-626b-4b64-9d86-447bd9348cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cddbab0-8c11-45c9-933e-fb010b5ef6a4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "865fb31a-c242-4922-bedc-9ea900e8372b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a0a3e57-de04-41b6-84fa-97fcf25a8ffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e62f3b0-6901-47a0-98e3-05c6c6aa8ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4066fe-5db7-4da0-a4dd-bd96514cf84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b1425c-45d2-4931-b338-cc757dab19b8",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e09317d-bde0-4d26-93a8-83b6a0d33846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "315bac12-67be-4d99-9e8f-35a72501e351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "576f0565-d437-4026-b54b-f57c1095de54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "56072759-7ea8-45b5-9295-848578f4a765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f176a5e9-76f9-42d3-b65f-22e23f81c5cb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86cf4e8-c0ef-42c7-bfa1-5f59e7ea80a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8262fe5-3c12-44f4-b311-e7def902a9a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4560dc97-4681-4b66-8e0d-a64a63353ed2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e160c9af-f704-48b1-a94d-3d00952c95a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14281349-7eb1-4b16-aee7-d950fa3fe1c4",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9b3e41-298a-4b6b-8dbe-fbc03422ba73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d417db38-9bf9-4166-a446-6569e633ce6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b03d611d-c458-4adf-8cc4-f31e3cdbf135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9184f433-d548-471d-81dc-22e70f83d3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97afb445-0f18-4e00-8391-0f62cecf0f8d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0b35a7-434a-4afb-92f0-2d63b65e2bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450f5f52-9858-40d4-a899-a46f79e7c1a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d54b71-5669-4c28-a040-ac0159cee379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d540fa33-6559-4260-8d02-93ea1b30fe69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5855cbd-8e7a-4346-9552-99e3e673b789",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712f714e-7444-410d-ae52-70f76f96d594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a34b666-94e7-4eb3-b288-4cc59f76e0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071374c3-aaff-404d-90d7-63186f489463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "973a1ea6-d10d-4d7a-8abb-9c401415e41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953b9e24-63bd-4f88-80c4-7de8e5a3085a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e879e50f-8fa3-44d3-a042-bbaaee50f1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6c634bd-1e40-43bd-8d9a-0aabb02c0d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe2b798-dd6c-4c61-8d69-1bafbd9379ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "71ec52aa-4708-4c1e-bb40-b0f3beae9829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8582df1-8c59-4f98-b468-32f3175268d9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ba76cc-766f-40d5-bc5a-e2c78fb06b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e652492f-de12-4a43-a69d-59a7f2f9cc8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "477a9a14-3fee-4553-9ad5-261ea1c29b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d66d833-125a-45ff-96c5-f8c1a90d9a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cba6b7-b9e4-46de-8c82-8ba33965a103",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2490dfac-af43-4a86-acb0-15fc88c95945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c30382f7-31af-4b3a-b101-ebb4ade3f894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75c6614-3c9f-444d-ab1a-5e3a09685a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a9129a5-73f3-4edb-983c-3ed7619c6b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdb2e897-98f7-42e7-a88d-311c5ca19216",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91662e4f-6069-4d98-9848-33edb434e1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20dae3d9-605c-4958-a86e-b85b393ed822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a21bbb67-337f-4151-a2ce-b880bae1eaa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "874a4feb-31ca-4729-802b-fda7b84a318f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30b0ac9-db13-44a4-aae3-084d202b4912",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a8a497-483a-4049-a04b-758800efb4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21831593-5e30-46ee-a473-164667d2f2a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3a7b22-a928-4595-86fe-4777d1748610",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb70053-16d3-4af4-b8b6-0c20685193cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131318c3-a2c7-4b48-ab60-cce84b8d0d67",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09dcab08-d050-4494-a53d-ce5af6653e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f33fa3-7cae-4e52-af02-b7dafbaa38d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0de0691-8b8d-419d-997f-69206343f4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "406b8b50-2252-4ad2-b590-40b9938ad79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73805c9a-5db8-421d-af9b-945c30dd0c17",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14249b4a-decf-46d3-8bb1-a9c022ae69ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb627f6-c6da-46ae-a7e1-cdb22235bfc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38286ad-f2c0-491f-99da-8a84e44c1425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4411ce4b-7a89-4e60-8304-e2093398d33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d6694d4-4eac-4a4b-8409-3af7dc6ef1b3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfc3a19-f3f6-421c-8023-d499a889a436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b904dcb-42d2-441f-aa9d-68d092810aa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23587fe2-4e5e-4cf2-9358-bee220821c7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "112a0387-f8db-4294-b454-1e1e39b91fed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9b671b-a74f-4042-bcab-4656df92ae91",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82546981-56bf-44c6-92c6-e3309428363d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bfb7fac-5728-4b94-8860-9eeba67e5f5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf8b6f4-af51-430e-803f-db42098e6984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e3f43d-85af-4f9b-a344-1e7e73eb822a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f761ee-8ee7-48b4-8b42-fe363bd1c138",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9b75831-1966-481b-b118-396603c69adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8087f2a0-381a-432c-8780-9640be32faa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7263c992-b792-4517-aab7-41706cfe1e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1371aafb-1a92-4e6d-8cc3-2337d8320b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ab0af8-a381-430c-911d-61fa3069b0a6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772b3a24-1822-4455-a8e4-64af88f3ddf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "403bffaa-18bf-46be-9942-f0590e87dc34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1725bc4f-2c74-4c3d-a596-3e8eff7ae346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "843f7e6c-4ae6-4114-8b5a-2b9079203ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb53a7fe-d709-48cf-aa76-0943aef49260",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce46a2c-3bbf-4b2b-843c-662b5c1e0d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2268885a-fd86-4358-9d89-e6db49f93828"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db9b522-bd05-4604-9b47-34ab29877de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca775b85-cad5-4135-b0b9-649b527b9888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4adaf0-8ab4-44e0-bd4c-24f20737a868",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1009e6d7-8188-4375-a888-d90f3a3d3341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "307d7527-cbe6-4a9d-a78a-a93a6a698d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a925e8c-f826-4782-bdd3-cc99ade2c6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "3d651c08-e086-4784-9819-70ff4be73e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe7f250-d745-43be-a611-262a799c1fdb",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fca39e5-b299-46e9-84c1-a25b423e4de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d99bcc38-7ab5-40fe-b9e3-b13db904d8ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3204be-8108-4f82-8ecf-078ea48bfb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c44d965-4138-4035-95b8-5f3f90ba9fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2e35afe-480b-42fc-8dd0-afceb9309855",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d8209d5-8093-4a9f-990b-ed434c0e26e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10517fe-d137-4fee-be79-796384f36e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1209b64-a3d9-4200-9cb6-10c3c848c9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b41f8a24-c7ad-4e0f-af0b-b13c6caef1d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1532d0c0-6e18-45d9-bfc0-45a500de15fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59be1c7b-bde0-48d7-b2e4-31dd1cf5febf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bece15fd-3d4e-45bd-8a37-007b38b89a0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e8767b-4809-4c34-9e9e-9216280d4cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "662a3135-4d56-48e0-b23d-c3166542938d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa03464-3ca2-49c6-8454-25dcaa6751e4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ca078d-37f7-4007-a8f6-bb811de8884e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90091597-66d1-490f-a42c-9632f2319fc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eac3077-2480-493f-b3b3-bd81c54bfe2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "877d7369-13cc-4ba2-adff-310f1b211437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8d574a-ba82-43d0-a803-514b7dcb01cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa88577-b687-4a5a-9c0d-daf35a093a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fade57-f2f9-49ea-9db4-3f4e494f7be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658246b4-bf9b-456a-8a58-0714812d079b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e8ceaf-e9d2-4de1-befd-5e755382789d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9df6b15-2287-4b4b-8146-830e431c1cea",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06aab513-dc65-4e91-88bf-45d0c8ede10a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba37f3f7-6df1-48e3-ab57-b233e1f2fa25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457c7091-83a8-468e-b259-17bbb6fc9336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6a364b9-bb3e-4025-87be-33bdbfcf8313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddfce87-1aee-4d99-b912-a7922863c837",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b533e74-6984-416d-afc6-3bab2e5dec9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4ce9d65-ece1-45f8-bf00-f11d8b51038a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "391db16c-106e-439b-b97e-cb3f8723e18c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "82ab7476-0579-47f8-b823-30a27ff3d2e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8701126-2a05-4cf1-b6bd-9889af27dd38",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa42a377-b8f9-415c-9316-53dc3da62343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d6cc4e-c470-4730-90d7-f4f15f081c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267ea930-a8e6-45ad-885c-5e42b1484ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fea3762-ccde-4149-967a-f1dbd8cd4b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c241681-b6fc-4344-a12e-9a4c0f3ab4c4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135cbd55-a8ba-43ea-b2eb-5fabd8b5b3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9c6586-7435-4f5a-8da5-6a8249f861c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9a7b19-b582-4fdf-85c2-28d22a1f4631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86cde318-c7e9-458a-ae7d-7d3edc365752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609a9106-6990-4611-b415-68cd1203116b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8ab073-1a20-41aa-aa5c-cb429f80219a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fb1fb8f-110f-42c2-a99a-677e4b121519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e3a7cb-0567-4620-8fd5-3df523421fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f5e6db-cbda-4e89-b76e-9c73155198df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f7b211-6975-4e79-94ef-8b9cf92779c9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6cc7e4-3273-451c-81c6-b3736faa4dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181259aa-6d7c-4981-8e08-2f4f5fb00c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64821b6-3f63-4dc8-b2d2-c24a2e464348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cb94acc3-0851-4b27-9bdf-09636c9a0132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfa81a3-d55d-4452-a6ca-60424144a510",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d8c1c4-db68-41ae-bffb-b94b8d3f68f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07708704-510f-4268-aba3-cef8abf135e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7853a8b-04ca-4676-a004-c5f67580be62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f770ba-1347-4093-8bea-135699ecf9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f54ddd8-7abc-4c66-8412-22cf1691e196",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bfc12e-abae-43ee-bce9-61d45ae40617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27dbbc1e-fe3f-4e2b-8452-f93247f37aa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b03c3a8-c2ff-4218-8745-53ded9021764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a88bea47-fff9-4ba0-884c-5c0b2a76440c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2691e700-009e-4c71-9a85-06260374fe65",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a866a1-6e22-4836-a018-5901d04821aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74665caf-4fee-4ca7-a48f-0131599d505d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e819478-0a28-4360-a3e5-72e313b99f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15de80a1-0014-49a8-919b-cb435be472a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e86a443-f3ec-44cc-8128-efd0bf9473e0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb5b6176-0c64-4a90-bb41-31ac770bc524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ea97ee2-6d88-4e84-9f08-0e80eaf2c8d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58fc043-a6a2-4b41-8e9b-237ec557ec85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdafb232-359e-4804-9bf6-3152a8928e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e906b5d-f1a4-4ee9-9315-058a089c469a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c8a45f3-0115-476c-9593-72702e2788a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b1df81-1d1d-49d2-b523-ac1cd9967098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "417b78db-3946-4cb3-9517-3b7acaf78d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c59a488-7b33-477f-af81-fbedd030cb44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb27cf45-b39b-4f96-af26-89c7e651523e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c0b32a-33c9-461c-bbf6-643fe6bf68a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e550bfb1-7187-467d-8e19-421ae815ca69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5d317e-be65-4544-800e-19d848112a2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2815bc9f-f8b3-4089-bea3-782df86d5cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac651ab-16aa-440d-99dd-5876bee6fa9d",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b928869-16db-47a9-ac61-88867da73c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8be741-4817-4ad3-bc62-6b6823013289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0bafb43-0424-42ef-bc48-062e6498534c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "31efe4cb-c0a2-4d41-9a01-59deca60035d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6096e9c2-727d-4e40-9ccd-da326acb5802",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c126d9-c14e-4349-9719-edc81a7a5887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6481d003-2917-45b5-85f5-651eb2557aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6d72b6-34e1-4485-8b48-e2b379edbdb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dc3954c-2c88-41e0-bc1a-fc750b2b9cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca471d83-c08a-4f70-9f0a-af0423748225",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b1f928-855b-415f-a308-00f09517b07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93605807-f2d2-4f8e-bd9f-597e4b437265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb30eda-fd32-4fbf-b4ce-342ce5d8c18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8dcdc0e-6a72-405b-81f5-c96382724965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a7877e-7ad7-41c7-a87a-a82b1500158d",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c326b4-95d0-4ce3-9f04-8a89379cd9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b62e1af-c2bf-49c6-9b58-c9ca2614c378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510ea925-cc23-474a-b58b-f47fcf1c42f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db181014-b48c-4d75-9bbb-d033398a7ac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d97207c-ff96-4e94-8f67-47d5bd81a9dc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b35498-531c-4a3e-957b-4643b2591815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00b137cb-9327-4dbc-8b05-dbf8cd938ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de370911-d76f-4298-b874-c3b5605de961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5202bccd-6639-4f9b-a5dc-7a81d9ad267c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a6bb4c-cf78-4a2b-887a-0062ec17cd89",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ae2652-2d09-4fe2-8fca-90aa5d50406e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dbc39aa-8516-414f-93ad-cebabba8e7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b4b655-3fda-4ebc-98fd-433e3de76ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c90b077-4d47-489d-84aa-833ba4e1c9b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f20c38-4917-40ca-b39f-6d5062b9c9e7",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f6a40a-781e-49c3-b05c-8bb588726d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "551de684-f3b5-419f-a4d5-6b519c37c67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b3ae9b-17e5-47e1-a01f-aad23a01fa1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08d53f00-5b9c-4316-8d45-f91fb19e8246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a41a9f85-758d-480c-bdd2-784e20bb0d51",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b359e6-8d11-4965-a4cd-043a82489995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac5e47f-a951-4216-b664-9442cbf1b195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d3db1c5-1ddd-4e36-80f7-7ce6e539faed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "29893c26-ead5-4bd0-8444-9a01a1135158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e674bde-92c8-4a70-ad28-31a6101e899f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e2a35d-08a9-480a-95f3-b1044b96146d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a23d0ebd-f327-4702-9b40-472d5b9b220b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39156e3c-fea1-429d-be28-7652ae60f49b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ef0028-722f-4f8f-9931-cdc5a232cbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a4dd94-0cb7-425d-8e0b-9bf10eb4193e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5ce54a-39e9-43bd-9a38-d8f61e6db6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1afdb966-ca7a-49b1-9703-c8030853501a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf393d4-4541-43b9-88e5-865d010190ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5299f6a-f4a9-4363-85f6-443782405da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3149fab1-38e8-4db4-84a7-5899f9542360",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73002c7e-2ac5-4e6f-bb2d-ef38cb5631ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b90a60-f6ee-458d-bb88-457de76c96ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7ff155-4395-437f-8e6f-a240a4a6676f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "302b1966-0eec-4721-a4bd-6a64f1aa6ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3220ce62-1c31-4b84-828e-414984f508ec",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fc67f4b-2714-477b-9f25-5ef85247da62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e45c11b-4197-4e42-bc5d-cf7c5c4c841f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78dd4b69-94fc-430b-9ed3-c5682bc8f282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1325cdf-9116-4c3f-9b24-ffed79e5e3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3589bea2-59b7-4fdc-a92f-fd766745d31f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d857cff2-8922-4aed-be38-4cd97330fa79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8932ed-16b5-4a19-b803-a40a0c97f9db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2402b74f-1a1f-4522-b310-c01d9c1c8689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f981b1a9-6543-4ef1-bc09-791f70bc6a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb2fc4e-d8e9-48b9-b4d6-6f03e551aef3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6a9570-f58b-4fa0-a7c0-d01ea286669b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d668ca-1434-4847-b744-43d5914b8797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f29adf-8f07-41de-8a5f-e53fdfef5b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9848f113-b99c-43fd-b264-dc2e23bc20d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4bf5fc-3225-4bcb-a633-6fb8de1df28a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a57cda4-ecc3-44f3-9fa0-6adab355a9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4ac39e-8c6f-48df-946f-61c1b3abec1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7a07b0-595f-4dd8-b594-7225bcbe162d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6fab36d-6188-4730-b002-b6091ebb0657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "142f0080-a95d-40aa-bab1-bdc827f5c304",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28650ed-9d77-4170-90f6-d5f86c082755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a98a6093-736d-4fc5-b5a3-02e4931f098a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b4b1448-7bb5-49d5-891a-f17ce701d2d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d21e6df3-7940-4225-96c7-9ee9174693e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864ece5b-b3c9-4764-8953-c8479d268238",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0438ebee-7705-4c02-a9e5-88f15f9cb68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67afd879-95f3-441f-9b78-da821c473afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9354eb1-db62-4ffe-bb20-34e67f7d7342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "967883e6-b8b7-41f0-9554-f716bf88add2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebd928d-ce3a-4182-9415-edae6f209d7e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f56bb2-c225-41bb-94e0-3d0335124a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1ff5c5-05c5-4a16-bad0-273fd8968492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bf69fa-7f35-441e-a03d-0a2b9a7d33c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf55c550-7741-4af4-8efa-b057d3453c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d12d4b-34e9-46aa-ab92-19eccdd98aa7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac245a7-cba4-445a-8e31-9192804e800e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "51277033-68fc-4e3a-aa35-22446c352361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36138ce8-1cf1-48a4-a71b-1de17abec946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "82168870-f9fb-4e59-9030-5311328cdeae"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "33554824-18ac-4052-8cc6-474211dc2923",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0219c2b1-480c-44c1-b5c6-6b98570c7486",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eff0e28-8831-47d1-989a-3a64d88ba658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc41e4a8-a0c8-4360-811d-a88d6928e208"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9348067-9af0-4fd3-b11f-1334f98743d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e75af7b1-8377-4d37-b139-3cdce5a5225f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1ad833-25eb-461a-bbba-3fd4a5deeda1",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23d63072-fe1f-4d8b-a770-d6a5fa5394fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2ca6a58-2253-4853-84bb-6e0b2a6363dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4b8384-75d3-4f4b-82cb-bc94021eaa90",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2921d918-0c28-44b6-bc7c-66e42c3d9233"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45182e18-7b3b-49c6-8743-7c00a374e8aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea4d0bef-ab8f-46c2-a854-b486fe4f5b6c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28a4af0c-787b-4e1f-9fb4-e3230544edb1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff1e0125-5e4e-4b25-99e9-2f4a0cfbb23b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6c481ff-6f39-495c-ac01-81a34fce027b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f6bb5349-42e2-48e3-b335-f88c855a3eb1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "34e343be-e3b8-444f-8457-4c8991d0973e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af15b287-6a81-4ec6-a7e1-82ddbaaa906c"
                }
              }
            ]
          },
          {
            "id": "f56b803c-1e19-44cc-99d9-6f3954a0d12b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "add787a2-a0cb-4990-a5a5-a6c5b5a4a336",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "633794ec-c65b-472f-936f-cc5fc1bf6364",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0ab3844-de19-4d99-b402-90dca848a5e6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "901ff944-cb91-40f1-8762-e1334396af4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bfc29134-0520-4c77-bdcf-169133dc31d2"
                    }
                  }
                ]
              },
              {
                "id": "fe9e083f-0f1a-4163-83b1-86b786d564b9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6f4484a-56e5-44b1-b61a-328b405b076f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "eb73f526-6dca-495a-82c8-d4039c214473"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a73b064-bb72-477c-abf0-2140943edda5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "67a1b1ef-6c66-4c74-abfc-7b83bec1e4ae"
                    }
                  }
                ]
              },
              {
                "id": "1701249e-b125-4b65-8444-230875d6161b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8f6f8570-885f-43f2-8a96-b5013261f6e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31191f38-57e8-44f3-aecb-381c0fb123fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5358a2cd-5042-4a2e-9dbb-1871f41bca81",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b995ec92-4384-43f2-9097-58725d262d9e"
                    }
                  }
                ]
              },
              {
                "id": "828274e7-9a74-4a6c-9345-a5723410f3de",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86316d59-8261-4dd1-a335-e6b0795458e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55410aca-fde7-4a80-b1dd-b2792dca65d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "853133f1-71e4-4f73-8fa5-367485db8bbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "cd113a58-d272-4982-8bd8-4aabfead00ac"
                    }
                  }
                ]
              },
              {
                "id": "ea55be5e-3486-4112-b510-72ea043bf049",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cde9731b-26cf-445d-8822-faafdc2578d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a77c273-f86c-40ce-a0e9-673818661167"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80254348-8294-4b79-b71b-eb82cfc78e0c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "35046ddf-fda8-4ea8-90a3-20a838e23eff"
                    }
                  }
                ]
              },
              {
                "id": "2e5f8e78-9a41-48b5-a13e-82790eabe70a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19b0c25f-8764-4d8e-b462-bdc49edbb7a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f961e01a-3841-49af-9cf6-ce8adfb8c100"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "71dd5c5e-4295-4efd-b8f9-b031adc49941",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0e9a2215-cb41-473b-9a59-aed9f9307373"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a351722e-4cd4-496e-ae1e-486d0d2b3464",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2cc6318-009f-4b7c-88ce-d7602760df27"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e5cbd8cb-e369-4133-bf7d-705cbfb4bc8c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c6364e7-5b13-468f-8bd7-b4dadcda3503"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98237af6-3ec7-461f-95ea-83bd35fa2527",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "eaa72564-4301-4d7f-82c7-0e39061be622"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1baf9a4d-827d-4a3d-ae04-17068e01bf2c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d89453a3-7de3-4551-8e85-bf524e0ef8aa"
            }
          }
        ]
      },
      {
        "id": "d3e3d028-c6e6-4be1-8fef-1edbf06b8033",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a2ce5c55-0f61-48df-a032-aad59399a6e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43dcf465-5e66-454a-90b0-0fa3d38ec600",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "885b3789-084c-4e87-a442-a929a4b0ca07",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebc1127-3516-4eed-a97b-d56d113c9a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e8fd4d8-ea4b-429e-86f7-08119af1bf50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f805b1e5-876c-42e2-8a51-535ebc995329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec923ff4-b8fa-4016-9dbc-1b87991dd3dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da672630-f6e8-4565-b972-d0455085fece",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "321792b1-145d-452d-b0d9-fdc78c6d7a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac67c91-880c-414c-9283-0bdc98942b1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f818a5-b50f-4311-a290-2c3c9c9d214f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0d8c00-160c-44d4-8deb-5391a5406394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ef26e4-8c6e-487a-b55f-5185f6d1183b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa49dfd2-ea1a-4d66-a7b6-4f8e056146fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61db3e0a-a7ef-4182-a537-68eb3d476d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d4b5fe-8bcc-4f13-a372-a732801d3955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b83f22d6-ced0-4744-8816-f9e3293585e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd73bfe6-1abd-4e26-9043-71f3ca9b6134",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdb2fae-a2f8-4735-8ddf-345f97f08332",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d33bfc-ec59-4e84-8cc0-a3eb6adc32e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c02294-30b2-4a9c-8506-d6563052bdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b4360cc-fefa-47c2-9fc2-afb44b5095d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a08a10-aef2-405b-b7bb-cf9baf0de0ad",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74178ba-2129-4f28-bd26-8414c5720a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767eedd3-6939-4c61-8d66-c8bb5268d56d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d6a66d-7b66-442d-9019-8263ecd48e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d9d7a98-6d26-4a21-a555-f44c0772296d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6100c21-3840-463e-99e4-860e342549eb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d25fe76-5c58-40e9-845f-bd5920dd02c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140a0689-d57c-42e2-be1a-76fbedaec9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7df32d71-17fb-43e6-88a3-d0c9cf3a24cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "163e62f9-b285-4942-b261-76b95e5a1175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d5fbfe-11b6-440c-9477-d15925182ff8",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4671b79-e4ea-4731-b155-3230cf5b039e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "becbaf15-45ee-4366-82b9-d21971dba180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a67ef4b-a53c-4118-aa35-fe48e01a9dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7aa88aa-3e52-4e1a-996b-972461d39773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893256bc-6609-41ac-bb89-278a50c5033e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b0fecb-46d4-421f-a416-bc6c9284dcc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeecdb25-3525-434e-aa2c-a2b91e0f0e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8d4832-6b29-4702-b900-2cb4bfb43022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f72cbad-b2ae-49bb-83a0-4879a43a42e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9f02fc-fafd-452f-9fbf-e04c3baeb78d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a726e8c0-f654-45b1-b3ca-4323c7ec127d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bdfbbec-7489-4b7f-9942-5362133ffb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eff58eb-0c34-412a-b948-9ac1fc7506cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2fd8a5e-280a-4247-be78-f0a4502c404f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40a7d67-f2cf-49d2-a715-f103695e0e3e",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5776915-7358-438f-820e-1e2af84b50d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea52f70-fc89-47e7-b141-d6c6964978fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9929f865-d776-4f90-9aed-f87025fa166b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12166914-29ed-4111-af32-57112de7b527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f732df-5a3f-45f4-ab1f-ae157f38be91",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c70fee0-7b6f-4932-944b-c510fb019f31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a37f302c-fb65-413a-9931-138d986567e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c288c03-de52-4355-94fc-b5d82342342c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b554096a-ca9a-4a29-9230-411a60335b02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4369494b-06f5-4d0c-bdcb-84c8b2ffa9d7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be22ed80-d183-475a-aaef-0c5acb8e00f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97fcc150-aed5-4571-be4e-4390cbfece7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3023f0-3bc6-4d7b-90be-16830388a0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "570e127e-5428-4261-89e4-83e557eb4bdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8522f09a-9615-42ed-8837-d2d7edbdc8aa",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4fe8cf-4e28-49ea-a3dc-57aee44a0fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c0d9d1-fc38-4dc8-9456-a2f876cf27ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55820172-dc02-4914-b3b6-41fe018091c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf7ec43-549f-4635-b2df-768c1369da69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b507144-1182-4732-9863-17d7a67888b6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e58d0a0-2b0e-43e4-8fe9-1f936b50f850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "627986b3-72f5-414f-ab29-4d13ae2a20b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432dfe32-b789-4b0e-b13e-be77789b06dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "63720c6e-4812-4ef0-9ae8-c6bf50ccaccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c656137d-ede7-4159-8d82-68b7ffebb80b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1cbd0d7-df48-4f2a-a9fe-521c841a5229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f41da3b-7f0e-47b8-9058-895ff91b4e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60eeb9d5-a9ff-4a89-ada3-96030067a8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "655c22c0-06ed-41e6-af06-826d923f7a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f188387e-c63f-4aff-9068-5ae1ff967227",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a91a4b-aebb-4f5c-bfc4-b5ecc3b53b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53302f84-254f-4b0e-a36d-fc6e15593358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6044b7-0c95-4cb5-9653-7940c8d215a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8324b968-d3a3-4509-96cb-121401e68aa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f97d55-fff6-4919-b2e4-662c2e44c9cb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae397d0-4e3d-48d9-be1b-13f6365dfc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef15eed0-87c9-4978-a5ad-ae2a6f7482f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315e8f27-54d3-4b80-97cf-eaa4baabfc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f86f0d2-733c-4531-b8d1-767bb2fef389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c4dc95-c9f0-4d07-8b51-bbfd24e15396",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620a7e0d-46a9-467e-bdca-94e0cc750a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2927a4-43d3-400c-8cd5-be4b224061e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97eb4bc2-fdf9-4eaf-ab59-cbab526405d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "91eee73f-2c90-4f8a-8b60-dc9524db8e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ad1278-3894-4345-871c-8d96ba6cf334",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bfa80e1-e3d5-4c88-a3d1-5568523949ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a815089b-7c0c-4cfa-a593-57b3a961f2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba63685-6340-43b3-8f4d-df9c56937e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44dfdacf-5680-458e-8f8c-5199337ceb26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db226302-e4d6-4cb8-a677-ffb876d308de",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac10665-5121-4020-9660-8094abd7fc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ead45e-cd41-42ae-ae3a-5a10e19f73b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8198048d-3448-4bf6-ba8c-81bfb64b3675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0cc344-13dd-4f64-b17c-29e0024d2d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904e099e-89eb-4616-a1e6-d498a4080fbc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622dff05-7d99-4cfd-88b9-fe3b5ab850fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "286859f7-093a-4924-aa70-74478fbc9809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfb8408-4be7-4cf7-8c3a-d5215ce6c46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c16f99b1-64d8-4069-b303-abc119bfb69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77893df4-2513-4176-bd19-70a0eaad8825",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867e95ae-4d0e-4302-b2de-bd349e44f6fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee811b3-9c32-45a6-ba47-87748a11ab4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07df2e2c-8563-4a4e-ac63-4fd389d64cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85d58868-b815-4d57-b807-7f3d477d5fb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a59f131-b165-4a50-9f2b-466cd11068ef",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0234fdac-c9f0-4dfe-8399-4ef8aed9201a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a31a86e-4d82-43fb-9e7c-aeca25eac420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a570600-7bbc-4f2f-a79b-0185f7c17176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bffce827-3779-4427-96e8-6d4112cc63d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fba4a99-b06f-4f4d-a80a-b28329ffb48b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9be2ecd-c09e-4c63-9d4d-a17b49d4393b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "756ab0aa-aba1-45bf-ba5b-9ad3e0c878a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc169ac-92e4-47d3-ad7d-aa0eff8c57ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bed81a6-1925-4b5e-8970-5792ff36ef0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32988617-86b8-492d-ac13-17ac1747b0fc",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ec620a-7052-4d30-a546-6bce6e0429c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43492683-7312-43ec-a01b-53a576bff9f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90e7b1c-7a3c-43e1-aa24-b4e9736e70c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5da3059c-3866-4980-9c9e-6be3cdafdc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c828ca-cdc0-46f2-a86a-eb52abe3c7e0",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0317e0d1-e204-458f-acfd-6dc69d1fc3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3441bdf7-d269-4b90-a9b7-d55f2dee9bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe20a72b-0a29-4008-ba77-2b99f6f22aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22de8e8d-b8fe-4f92-8a2f-55b0ffe8b7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "294745c8-482d-4556-bed1-a5328633fc18",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9464be37-ca6f-45c0-aae9-a58bcab75c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecaa0199-e95c-4839-b5f4-27d924d4e265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc71727-8984-4ce1-90d5-57fee9445654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4da02b66-2b6a-4258-903c-46bcaa84467a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9644b035-edec-4799-a2be-f1260afec69d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "466039ab-2c39-44bb-91c2-631dad15ed2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba93182c-ef2d-493d-839d-41cdf52a86ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1353974-b947-4770-a9e1-4dab6798b1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db9b59e-4298-45dc-9509-e4f82e50dee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae8db7fa-9a7a-44b6-9fe2-264658efca34",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452640ae-f8f5-468a-8256-7c1c79e07ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6a56e5e-669d-4f54-94c6-2e29401abf72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8278d4cd-d356-454e-9e49-9eaf9ca5b2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fb2927c-a947-40a1-a99d-63f841fc9da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "832b254c-d3c8-4c83-991b-bc28000a73b8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9136f4a5-ad4c-4e8d-a11c-4a61cd96bdce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8c0e69-247a-4e6d-bb5f-40c67ce10b04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07337799-d63d-4930-b9e9-0d17f2658103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b72a13b-caa1-4844-b2b4-0f8567480995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829993f2-cdce-46d2-b3a8-24592b6f64ef",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccecbf18-aee4-49f9-927c-9a8d5c3a8cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ec6fd7-1f18-43bd-83d2-9756c38c44c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bffae6-42ef-4834-bf15-17e33ebab3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dcc2250-b794-46a7-b9fa-f538bbe53a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eded778c-dd53-4255-a31f-537d1c9fb99c",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15b55e0-836d-4e60-abad-20748ef7ca7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e08be38-746e-42ff-bad8-ab21f8f94903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa10d0e-771f-4939-9c8e-3d11917720b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc837c82-8eff-43f5-9b61-d9d22c634c9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "92b7142a-ddc8-41e3-92f7-9110b68d4f63",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e216064e-723c-439c-bad7-090fe75237ab",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fcade0b-7b77-4f92-8c38-41aa4c96bc87",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c675aaf5-fdb7-48ea-99ab-ef5599ccc71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9b8249-2deb-4302-8f66-f05fb7faa053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9abe8397-9c37-4cf4-ade1-aab9e39a7866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11273176-47a1-4248-b2e6-105ade5e864a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c325fec6-71f4-46fd-ad73-04bbd1a89b8c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c7064b50-37f2-4e1f-9c90-dd5a8834d862"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d4cf56-ac91-4c12-bee5-3597ce2a78cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8f0311d-d940-4bcb-b987-bbc87d3679fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe21c8cc-d6f5-43ef-be83-ed44ecc273e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "073a743f-e024-4205-a6b8-adb29e3ee6f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98aa119c-5c44-4bc2-815b-b614794b4467",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86e93306-c1c9-49ce-acfc-11e096b0977d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ff95deb-478b-4b32-8da8-0e7594aee59f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9af317ec-8fce-4910-a2a5-1849be2fd1eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61c8c2bc-85d5-493c-a2f7-2869255c2a9c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e0b25b4-69b5-4473-85d1-a9aeba644f9b"
            }
          }
        ]
      },
      {
        "id": "ef4dd86a-434d-4ff7-a74f-b0af3d283ed4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c85aea0e-a137-4888-83bf-bbd581a4b5e5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "488f18dd-e9d0-40e4-a48f-9cd4d065bffc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0e1edb8a-fe70-4cdf-9db7-9ad594803871",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81db3370-6ec7-4917-980c-839fec2b7f54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95bee33-9454-4ec8-9847-b93bd4d351e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a75693-c6d6-4f7e-bd3b-70a58761fa8b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1aa0c14-5eca-44ea-b801-37b9fd52088f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b4e2ed-5f70-4866-bce7-d57f5ef97076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a4ff5e-4978-473e-969e-6f5955bcef76",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f58676-f438-4eee-8c80-cd7270531838",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af6ed0cb-d015-42a2-98e5-dad638a3d67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "475d8be4-8820-46cb-8603-529882dff64f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23a9c1d-43af-491d-9119-e9d75ce71aab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f661e82c-9d54-40e5-aeaa-3bea50d87cb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244e18aa-dbd0-406e-8b21-22e2d9b5198c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db55a85b-304e-4b67-9d23-0d308348f3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3ae69ce-a615-49aa-8b6c-e17c4593da48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa3befe-0258-4d9f-be76-e90cc138769e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1875d6a-4358-4ab7-855c-6b228d649ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2539845-f0e7-47ba-b505-203b657de0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba309fa-6fc4-41cf-9caf-96e651df3982",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71179203-1dea-4b40-865d-bfee8ea9e113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d00157-e543-4036-8540-86efe031a846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e47f326-b96a-4c8a-a932-0764373996e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72eb1013-c8ae-4c4b-9022-0d34bca9700d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09479e55-6a2e-4164-ab82-b6e8f4040c38",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b47283-939b-471d-946d-45cfc4ff9f39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06de4547-c01d-4a66-a84e-e481303eaa89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8818a834-dd4a-43b4-9555-8cbb278ecbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113a10eb-017f-4983-8a43-19d0c7036207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90d05a3-c47e-485b-ad91-c5ae601db363",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923ab1c9-178f-456f-8998-b63e7ae7ad04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "693c8b7b-b9d4-4b60-b658-474cfd41e352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15eb572f-ea60-41aa-8aa2-63415d017c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f904c905-5d0f-4fe2-8b69-23528ac806a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d44634-d97e-4cbe-ab7c-d189dfed3103",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156555d8-9b81-4c61-9f1c-e25110935f13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "294f065c-0e32-44f4-9cb1-dde938ac30c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1433d46e-808b-4366-b375-3b9f2102b782",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbeb91c-6b5e-44d8-9749-626edb539336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53beb52c-9224-4a7d-aea4-70b5345bbc1a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5331c49c-139f-4f45-bb30-11191652a8df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77a8854-46b7-42a8-95f6-43fc69172c2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e0dab8-efbf-4500-942e-39d9817be6bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71efb734-a79a-4f68-82ac-c7f427758929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f656da-f61b-41a8-971b-0a2404a0196b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f725ed8b-2637-48c0-a507-45209695e553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671fc94e-6ead-4dff-a5f9-2afb886628ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca2a917-0dd3-4185-babd-72f7a2de34dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae11ba96-fb14-4482-92ab-b8291bc6b30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e0a61c-7390-465a-8216-707113c1d237",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ae90ce-3728-4d84-932a-2b05583d8a4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fad5a3b-0f99-48ff-8b91-0f56a305b08d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76685238-9ba0-4b05-a00e-81822728e711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b286a6c-6e06-458d-81f5-5bce42dedd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1531d6-9639-4ef3-bfe1-d51ce572e392",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bf6e86-8be3-4971-9452-e85bd73f9ccd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea9f5bd2-b8f6-485b-9122-f1f8174be696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab535f36-8cc7-455a-8975-37af51778a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5fa8904-f173-4e3a-a14b-72797cfe81c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1129f4d1-a307-4c5b-948e-fa3dcceaed39",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b2e2c0-3a18-4840-bffb-d59e3faaa44a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34f57818-100c-4922-a814-23a90b454145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61acc752-8aaa-4363-944d-fb49c6391a9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac00dff-0711-4345-9ea0-8ba877c84b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf644eb-d789-483f-a275-c6e1d5fcd76b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d723f8-ba24-4ac5-b513-63093317a446",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94c52070-dc7b-4083-ab28-290d7c325bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f708e48-82f1-4e05-908e-8862332cf20d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce89fcf4-0510-420f-92de-1429b21c6427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb2fd37-3d1e-4430-835a-f40d437f6a7a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e746e3c-791a-4b00-97ec-4fea1fbf7e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1ba629-b65e-4952-82ce-5f7779ab375c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b7cf7e-67ca-4935-8322-9dbc0f3d876c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1f32f1-8da2-4bc5-a74c-7b711ac03ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cde5647-adff-45a2-a287-542593f4dfb7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "129d43cb-a5d2-4b7c-91f8-ba316080a64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be6f19c9-de83-42cf-be2c-e1868ed3a21f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ae340f-98d6-43f1-9acb-7d28420b2967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e17ceb-d373-4156-870f-5d4dbd1f3ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e355b6-cb5b-46b9-b79f-17de593e5a3e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a14224d-a270-48dc-9a91-020a38ec3d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec9647e5-9d5c-4c60-8773-79a536db24e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f173845-5804-4501-b91f-cfb6dc8fd8ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d42b535b-e3ef-415e-a244-0b485c6656fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ede41c-f89d-4db3-af1a-e461faacf152",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a7f093-f22a-4985-83b3-30f37c9e035f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670602c3-08da-4f50-bdd3-9954d2c98969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02f5439d-f44b-4bc6-856f-164e014ab2db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8065bdaa-1370-4098-8fb2-e7c6996c1353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e35f14c-0fa0-4499-ae57-fc1e79b5a9fe",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d729e916-e10b-44b1-8432-57149c6632fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65438d4e-cb6b-4d7d-b785-d09cc5e02b92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5e2f8d-af15-4840-a335-fd9e767667cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fc9941-2688-40d9-be91-0119106bc173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d61042-3c80-4c79-aa2e-4956d5c98849",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619f10c6-d76d-474f-bf9d-84c71b1baeb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941ed57c-94e9-45af-af1b-765e782becd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a7115b-f4b3-4122-af0d-ac013cacd85d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6493a5b7-5617-4b95-87a1-219311bcd151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a78402-d616-4fdf-ae1d-183c7cab2621",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd1fa1b-3b3d-4655-96dd-fa300f66163b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f589a03a-5996-4b38-9422-0cbd9fe5fbe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad6d406-c01a-43f5-bb8a-b8beb3609b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaf58c11-9bb0-480e-9d8c-c4db79149442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a00ca19-d31c-4d7f-ad46-701b32d2f839",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce52ce2-18c5-4ea5-8b7d-10cdf5aba76c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "200854ae-866c-4c14-9556-d38bb82687c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c953731d-8aed-412c-bf94-3a4486406fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2262085f-b1ab-4402-aefa-52d4b2ae2b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d4f24d-6f37-47e8-ab5c-169847310126",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1daa433-7170-4be7-9c95-218ba5ea7e2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04653be0-2d7f-4b0b-a257-cb72c6f70259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed725dd-55e4-4f4d-89bd-6b38f5097150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2046c944-a82a-4c84-babf-d304259a8b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69624c55-26a7-47db-8c49-c5ef96505532",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b876c5af-a91d-4c5d-b7be-4228e43d44ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "684d7705-808b-44bb-b122-32884786e057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0c11d2-3c7b-492d-ade2-b68526ecad1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2899b9-34c6-4bf4-8dc3-00123a924b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88cceec6-7d0f-4b13-a54a-9a0a0a7f4336",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ace8478-81c9-4173-87bf-e871ab8a51c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ba932ad-7491-4536-924c-0cb14628c595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4f335ba-e99d-4b19-894f-01b92a5cffe5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eafd542b-7aa7-4209-b692-d1495bd9b386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4667ce-7ddc-46c4-9fa7-4a10d4d61ad8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b506b0c-df69-4b5b-8aac-427b00da8af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376a49a5-c760-4bef-97ab-5027be288271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8388eb0d-1143-477e-9a18-072c0e975d51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6476a8f5-94ed-4691-96c9-33ca7478b5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59144b9-f221-4552-bbdc-64ebd17c1b36",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555d0a91-c295-4bf1-b002-17df02a637ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8dfdcfc-ec73-4cc7-8366-80427f5dfa3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20815eab-bd81-4597-a33c-d10f7253d86c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d29e13cf-edf4-4e7a-84ad-758f6a409c40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f6bfe0-def8-4d28-9843-94e2b4cd5463",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee59f532-ddc3-4cae-89c0-d672a5f7a4c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "685b52d2-6217-444f-9f73-5c52fdcb5d41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6181da7-6bbd-48f3-b2ea-9faf47a489e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c6be8f-140c-4c6d-8350-1589e52307dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "575f4483-4de6-4304-b974-3c2840975d41",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3acbefb-cc63-4578-949c-bb4ee7b4fa1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48a2049b-8afa-4a68-8ce3-e3b359d901ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "492e84d4-d95b-4950-a918-9494e22a584d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48e27845-5df4-4327-afa3-d43cc0e9671b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3082ad72-1171-4f1d-8c64-bc9b7b879bff",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f14146-e376-487a-8449-b94412a8a3d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f99b3f1b-0c77-4b33-a56b-cbdca796793f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4640ca4-fe95-4880-95bc-08ce6ae837f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9194cd67-6c22-457c-95aa-0d18c1e7e4f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee17286-f888-49e9-adc2-26c2f76116c3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368a67de-93c8-44d5-9cd6-2e22619b1485",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "700dc870-395b-4b55-b49e-714fbc74a33b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d64510b8-e6b0-49b4-89ae-d2642fb3b48b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0bd5658-2be5-4c98-a7aa-a53a77c98925"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6f7d004-24c7-43d8-b131-0ea128c8410a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7212dfd-cb4a-4abd-b3b4-06077b080cf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e664f5c-e9c9-4301-926b-2feccd552dd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca30c13-50a1-4f15-8eff-ae6c3975cc47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d36a1ad-d039-4f9a-9eea-02812711f16e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d5965b-5587-48a0-882d-929b04c871b8",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae643c6-a79b-469b-9675-2a6423aaf5e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b30ef0-1410-4dd2-a0a6-c83e58efd07c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c5fed1-3a4b-4cc0-b079-7de6125c4f04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73632c89-1aed-497f-a1cc-8a05a954979b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d419214e-4f46-4ffc-ba48-84a7518e3029",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d862c988-a21a-4a1f-ac2c-689efe048f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb56a167-4467-4885-bf34-aa6fa8eebcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff554dcc-cf5b-49db-bd07-d94085c8a4d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e3334e-34ad-466c-97cc-f8fb5cea583a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8edf3f20-2678-4786-8bf2-dd514a69742d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafdeaeb-96b9-40dc-886b-950039bc271b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e02a45d-2d30-47b7-b72c-6b625a2a2d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6563259-bea6-4ddc-bb84-d65350969fee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064f748f-ca9c-47aa-8786-b2e823946baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d518cd41-3785-4598-87cb-f2ed825d905f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d39084c-c042-4593-9cc8-e5c9f56d9654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13297d32-24ef-4507-a0dd-b480f4301313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d1606f-f89e-48c4-9258-d9a7a86c4cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a52bc9d7-e389-4d19-9b0d-741099e638ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567cbf4c-d36f-4f4e-935c-db8aa44b3b97",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23ae142-6800-433b-88e2-abf1350fd557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158cb08f-02c1-443c-a1f2-d78cb260c27d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0553e7ee-0f3b-4a53-841c-73c2e339864a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b005ca-3cad-4af3-8724-958cb71347cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec0401d-ce15-43cb-b702-0f630b8b8845",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba9e59c-18d0-4e62-aa25-52f501e014d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1bc0756-6ff8-4320-a48e-9bcd12987a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95da79a5-73c2-433e-9dbe-ef2d44cc6109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b9c807-3277-40a4-aa38-dae3e4d939c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a598df8d-b3db-4a53-8976-88d38f323723",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba916538-5236-4aa2-8b44-60589661aaca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e1bfac-e357-45f7-ae46-4a8a814477c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e56ab5-65af-47b2-a4e1-f8b869ff89cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "320482e0-0861-4fdc-b23b-09c7083a277f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4a639a-876f-471c-b05e-ade5cf852b74",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91904562-50c4-4b9b-811c-498739ef47d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5357a7a1-839c-485c-8df2-e4c31df9c0eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9965a87-613a-41f4-a2ff-8f6c1ffb445d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af7751a3-75e2-49f0-a1df-218aceb1632d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041c43b3-f2e8-48f5-8504-b3a4530f012e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa11e6bf-5848-491c-9663-a601dd5a66d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46942d3-a07e-4746-b2d5-ca434f7af377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9d5c90-398a-4da9-8af3-fea16d6f266d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eb95c12-5219-477f-8369-f9210af037dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7c58ce2-a970-48ba-a34e-9cfd5d473379",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e001d8-35df-45c4-bdba-7fdc48a62386",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f8370fe-54b5-45a2-b2eb-3150693bf4ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6c8fed-6584-4fe0-9cb1-def982e5f3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fb191dc-a2d2-4a77-b76a-ea133ac6568d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e93e9ab1-a906-41f3-8e44-ab5b635979e8",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885d2011-74dc-4499-9848-ab86f0c7d5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87dc83d-3d6d-4f3e-9bf1-c41b4c381aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edd5444-fa0d-4c57-8bf5-68be37e99e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01fbe89c-4af3-413f-8771-db8440c6fc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a74316-60eb-4450-bf81-db5830911715",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eea1aee-1605-4597-8160-dad2826a12c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "084761a3-3763-4398-88e1-44053be35514"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505f5574-29ed-4c58-80e3-10ac9fd21391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48a1873-c041-4d36-891b-ddecb5ea60c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c933caf5-e8a1-4af9-bbb4-3d139cafddc9",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d594e3f7-4f09-429e-bb2e-e7c7f8b0d218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8b6bee-e0c4-4ad6-8cf9-4938db4bfebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4956592-fb12-46f3-888c-80a3d14c9e1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4ec5be-8615-44d7-a761-6553d1d7f91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab8a29fb-e73e-4320-aeac-376eed2dec54",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefd75c6-671a-4d95-a070-881c912dfb60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a744e6cf-1b1c-41cb-a069-cc4516d27ff1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4eb347-acb3-49b8-8b28-17e30bfcc128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ce1539-560f-44e8-9fe9-2a08827e4792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969c3b82-ade9-433a-9eed-eed58a88fe46",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec437d3-a861-4b72-9427-09ee562b60eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7fa4691-43d3-4fe0-bc90-07b46d2f23d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29755839-6e1a-4292-b697-24f949a0fa80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7806f511-c7a3-491b-b213-6af1f4430c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35f2eda-7dff-4160-bee4-ca5ceb466519",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c8261e-7464-400b-8d46-e9fa701109c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4dcd82-1ce3-466c-be00-ea72f759639c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e636aaf-45f9-431c-ab33-fb5989bb53fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e095c8d0-0eee-4c43-8ff7-cd9fcb372ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eda8606-d72d-4857-8fe1-7cb89ba7af64",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4b0efc-9adc-4fe9-a7a9-d981b8730486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d94e54a-be2b-4bd3-8a45-d7f0b3e3715b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f146ed93-a2ec-47ce-a1d2-8067373fec29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8cf4dbb-77fd-44f8-9338-48eea0c9bf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2618ea7c-a98d-4ee1-9817-36c0f36719ba",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f10a4406-aee5-4f54-9aad-80ac8aa50f81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07c0f13-0189-4140-961e-835bd7556f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63dc03e-ed4e-4afe-9f62-335dc8bbd8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77182e61-af8f-404b-b371-2fc318ed960c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf2332f-ade4-409f-aa83-f664c9361e51",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a520cb6b-8f0f-42f5-999e-0c0da679291a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e8867a-daa1-4042-acad-bd87de501baf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7574c7-e32c-4b05-bc9d-6c58ee1e9b63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14975403-3df5-40b5-b01f-1ed618c0f22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e086c6-b43c-4dc4-9036-3d0f0326c2ea",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "381da5b8-65af-4ce0-b628-816efdaa4100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "788582fa-d54e-44f7-a65e-f007040cfb58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1428e42b-2a7d-4920-9be9-3b7bf5c554ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cf12cd-e37a-4abc-91fe-f3e318a0a6dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83541a5-a3c6-4177-a21d-0c5bc6ccdcfd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ecbca66-4ce5-4a56-81e4-6d99c94c0524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ec5d72-420f-417f-91de-8aaa9cd8bffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "424e06cd-4a19-4c80-bdf1-3f6d544341f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e461601-9b48-4060-a1eb-dc74c9fa7c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef135383-5584-4518-a5fa-9991326e8647",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ee9894-4ef3-4f11-827b-b5943bf541be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e662fcf-2e2c-4813-be71-fc51cc52129a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebd7097-2e2b-4096-92de-18380bba8ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f804feb6-67b7-4c27-8813-a5848be43f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9728cbef-a678-468a-9f53-0c1cbd9994ed",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e70959-13db-48e9-979a-5e2206a89a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "456b1da2-6005-46d3-8ea5-98ecae097a05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "182f5f2a-7692-4785-9361-bfca76f36aa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80a601e2-7a50-49ad-88b5-c79cae0a6cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38292e2-1565-4b88-8c29-407e5bc39b4a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619eb91e-534b-4282-bf69-2d733402158c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee17ad3-0da2-4a34-b676-0a4c3e3a0afd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc7318b9-1c3c-4953-a0d8-7289a5812725",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0f1d61-3f69-4564-92d1-0289ec1782b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d66dc7-b849-4751-86d4-87a454efb4e7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0fabfb-3e5d-4264-80a6-9acce14de915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcf0cc88-3f52-4a67-83fa-fc5d9ca3a0ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aade53dc-ef93-4a89-9b9b-ce14468e00a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735cd937-a621-49be-9ada-423417c04bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2ad256d-49a0-425f-a0a3-9dfbf878bb2d",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e0ebd9a-3987-4610-b7a5-e3ed655d1ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79e98455-4ec6-49d3-8931-4e0811860319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff9b033-b755-4082-a667-63b4d06cd589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0aba5f2-d680-4e5d-a2a8-011828567cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e9c4aa-9a8e-454b-a1c3-56a02f8be903",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c752957-ec91-42af-a7cb-ec2401cbd87c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08130105-9b7e-4c14-8919-569c55f92922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5726f5cd-9690-474a-9f00-1784a84828d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e67bfee7-418e-4800-aeee-3dd386ce1a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0ba300-36c9-4981-a073-3293f0f54455",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c202c8c-d0c8-4e4a-9242-c6778f0520b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df87cde4-c4f7-4b79-807b-43b3efa4adfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3fd8c66-955c-4c47-b4ca-cfd5f2c90d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8dd752-3fba-4b69-a88c-78c81eeb5bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab972359-f2dc-4b65-acae-93b41e81b960",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab6ef38-b8a0-4668-8651-bb013b6bf9aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90de8b29-a457-4b85-8827-e0c73b2cb084"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bb53ea-3fb9-427b-9e1b-5893a6f1c4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0114debe-2053-47f7-8eb2-54bd2203083d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a081457-9cf2-498d-8a54-2467ae8360b4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9238c89-7c03-4505-96e5-2d2abc81262f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cc1f0ca-9f30-4169-95ab-093ab20c6332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec69d12-119f-4cbd-87ee-1eb722135225",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a27476c-845b-449e-9158-ba5ff60ff825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b71a203-f3dc-4e79-9d6c-34f128813fbc",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47678e7f-6fc7-4b76-92ba-eb7fa66a9a07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d22f60f-dfba-4499-a23e-8f13a3312c52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb94e738-3358-4488-a4b1-4da77c9b1fe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7613408-8ed9-4fc8-92b3-275d577db894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50be1435-04a3-4467-a04a-89d471575db9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362af4e5-0897-4f34-9b9e-06786a6baa55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b5a1ab8-f4cf-430f-b908-52595159bcec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60c8f1b-d6d6-4094-9a3f-5cfd3df823d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a6ed28c-9270-4aa5-a879-d8eef2a0177f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c67c01-5d3e-4647-a4f0-ff7ee1e50a53",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6b7288-c1ba-4109-89bb-508f9ba98d3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f264c49-35cc-48fc-a5ff-16dc827147c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db01b64-e05a-4de6-9ee4-d916a4fbdbfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47add269-b1c2-4476-a932-898119605b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c22a35dc-b60e-4307-8c64-88fa3136f712",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df7bfdf-44cc-44e3-bf03-892391ad0b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "605dbf3d-234f-4852-b438-5c762dce15e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fcea095-cec8-417d-99f0-b73e542c0133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2def4d0d-3402-4d8f-ada2-4532e4c64611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27b8d37-1ec0-4eed-aa9f-8098eb741587",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228b9f53-20ca-4e7b-a37b-e6a6b3b375b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "952f0603-2386-4e94-9d80-401539f12da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "901ad9fb-fba8-4db4-9d26-6ea0b582acec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e438c8-eef1-4313-ac2e-2bc3099c99d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22d4305e-591d-4ff4-a827-ecc56b1111ec",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12043c2-fc82-4ed7-be24-e1347e33c955",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d8f633b-4101-4283-bd22-c39f21892256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f8890d-4e5d-4802-8b16-5e4d859a237a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8186d703-dfbc-4ec3-96b7-a665780a51a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70b36f7-110c-4498-87a0-8f70e920f140",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc1cff2-a279-4be8-803f-b0c7a15de2db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e635e68-816f-452c-b803-d8926b319d01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a408af3-c468-42ac-99e6-e0621c3c1429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443a4d9a-4161-461e-94dc-fd6f90ed5778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7b84a6-85c4-401d-a194-ed1cef4a28be",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213e7ad8-df32-4b42-9f8a-0ca055b95529",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d3a3b16-6d8f-40a4-9504-5080abc1af3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbff7f8-48f9-458b-8ce6-c966b80cbd5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b7fde1-bd6f-4582-a05d-2f71a62e0832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28dc100-299d-493f-8d1a-c76c295bfb3a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f1ccc6-e88b-4649-9190-e460b3ff5d1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ae942d3-55cf-4fd4-8e1a-ad41ac0d35be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7f4184-dac0-49b2-9e83-21d3302f04f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ad018e-4134-4a69-99d0-0cc06fc06fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b168ea-bf84-46ce-bfba-cc40dfc6047b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49c3413-6a67-4fff-80b6-d4329f80cff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb63ffde-740c-43db-b37d-5616db919713"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff420b68-da80-4f31-8d35-ef8de75b0a6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49ff81b4-e2ab-46cc-9199-b9da8ffa0b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5453cc2-a9f5-4a23-a0d8-f9a65adbbe83",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26df26c9-73c7-410b-b0e4-00bd9e8ebbf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62d4477d-d613-4331-b4bc-da429cfc295e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac12ada-47ad-4e1a-a5d6-3a1a794efc05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec68c2d-417a-4c45-8702-e164d607346f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1079ee6-7d37-419f-ab80-0d8652229b42",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7222e09-cb5c-4d0c-885d-416f880a1de8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b20eae9-213c-4bc8-9459-8e95227adfb5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15253cb3-a07c-45cb-a68f-a794d6b4d5a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c443ba45-b7ce-46ef-b69e-6e29b686a3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06b93fe-3390-4b04-9898-927aed814c87",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c85a6bb-72b2-4cb1-994c-fa69950ae1a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9266a31-f33e-4bf9-b93f-8b6f0dcc37fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "275b630b-41ef-4ae4-b741-ce7979505271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801bf274-bd6e-473f-b792-a5772e75027c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1a29b2-b565-479c-bfb1-e51abecd6b8b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbf62ae-f489-4c02-844d-ac54ac78d42e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38d5a083-0e2c-4d62-9fbc-d060089028fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e12711a-032d-49b3-826a-7e2c4ec42f13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45b62fcc-047d-4033-b7ac-0361e155258f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92e94bc-e50e-409f-80a0-4ef40281ea9d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7afecc-d8fb-4211-bb68-27db9d44ada2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68d0e34e-505b-4b40-8062-dfffd2a2f8f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f3b184-5d8f-406a-aa5f-6b282051ce8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13ebbe4-a62c-4d16-87cc-cc55ed0509b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b8c2029-5c35-4c20-990e-6835d1aabde1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f77bf1-549c-4972-8f63-96fcee1b6b04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e457d11-bf6b-40b0-a0f2-7fee7f6f0790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0dd5fa-a953-4ae1-8471-f67db5621e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5cc8a07-85aa-4517-ae15-d982a2729148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "153b10bf-4301-4086-ae0c-d198b4f37319",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf5b9b2-adf1-4064-840f-d98b19b38046",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6889789-0319-444b-abf5-2ee0b1aff197"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f152d924-00c7-414a-8f4c-a8d26eaf05d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10486f88-0401-4370-8522-8cca672e6e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca7f5425-adef-4d7a-9869-50b4f247d2cc",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba141a5-0889-4e51-9a32-ae37b0bdb379",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dd3467a-52da-472a-b1a0-7181814e80e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2e1dd8-f2c1-4b8b-a1e8-124690e4ed69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151cf3ee-7bb7-4850-b421-2a9258ff39ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "521b014c-f194-4211-a180-e496c24c06f6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860357d0-f996-49fe-9c31-dcb19a3a8a90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a671589f-bdb3-4755-8556-f39513a9a0fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec3e928-bc0c-4a3d-a747-7fc9ef5046d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e76707-cb64-4a15-b88c-017b9be5f9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d415a9f8-5aef-48d2-ae32-f4896f8f455d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33ea8a17-a0c8-4118-b4eb-0b203bebc74e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c610712-81e2-44d6-aa74-b19c6e4f2d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96303907-032a-43e5-9c55-217c3550977d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db2c98d-32b6-46f4-95b0-32295957c180"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595715d5-8dbe-4fc7-9260-72a1fd2205e5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "018bea2c-845d-44d9-bbb3-a1e10a13b2cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d869a779-50dd-4f44-80b7-df1024f04359"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c3541d-ca06-46d2-9ef2-ac8951e0702a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "006101cf-ee8d-4487-aa7e-ad633a659762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6ac518-2829-483f-889d-e78b3fc8b642",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37e9efce-0677-42af-a8a3-6b2d91d16455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b56370f5-3a9e-4b9d-84cc-47844eddfdd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "092400b4-b53e-4874-a084-6e61db6dc84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf07744-b123-4e05-bc50-7ba34ef221b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101fbded-fd8a-4f8d-8d49-4219df450872",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aece53ea-348c-430e-9305-58851de30e44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32245c9a-3729-4240-88a5-ba7df1c47e50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86366ce2-6c48-4341-aaf8-ca6e10182278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41ec257e-6a1e-4456-8c60-6abe7c9b8c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e188528e-ffbf-4f36-8f5d-e2d931a51360",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41933722-a08d-445c-8afd-8af5f9c9095f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bbf60aeb-a2ec-4da3-91c8-51fd9ef67dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3798e0a-e125-44fb-9ca7-d74ac5eb28f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc050ea-bff5-4d6d-a1c5-c52b01d6ead5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96312425-57e4-4ac9-ba8f-289b8141b191",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef936cd6-847d-49b6-bc7b-32d35b416854",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "256c78b8-71fe-4463-9eed-2e5dd70ef78f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06bb7672-24f6-40c3-ae08-7570892c47ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3842fd26-b569-4e61-9efa-6bbce4683a3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcd5f87-52b1-46ee-a5b2-636324a56e35",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b91aa8b-ed57-4385-86f7-bc99359d794d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20417d72-3ff5-4786-b74c-b4044825c2a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d71a223-c67f-4802-9bfa-b27d9b934442",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71e93035-1fb7-47c2-8feb-6cb6f8c073ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5f5d43-8cc8-4a2a-ac23-18619c06ac13",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575830fa-4004-4052-8c89-d2a1667a29ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f98d98e-17ca-409f-9b76-8fd81001e81c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ee5fda-a7cc-4c42-88ca-aa0c4ae40570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f435c04-eedd-4696-9da6-6f6b0510b421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa83011-b78c-4fb0-97d4-53d9be9429d6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f8f9cd-719a-4bc6-a9e8-c32777ae6620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38107b0-46a4-4c67-8050-d80361f0ec72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9a889e-a1b0-44b5-b5c9-f00640760bf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bdfa924-a134-4fec-bd5d-f90edcbc13eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2f41fd2-ca10-4627-9b59-85fbce02f0a3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1644d7-4818-47d2-af5a-d6674d42faa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "623f8eb9-58b9-440c-92cd-35269540e5bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "816d090d-8ea4-43f4-b60d-6bee17de1b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea3c5b17-bdea-4bbe-96b2-5a60039bd291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cbffa0-2f77-4a14-8b21-eeadfffb6710",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3fedb1-2395-4a23-bed9-677ee64de23e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daab3ccb-cd68-4207-b5f8-c81aa3139505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd70c36-f637-4e44-9633-3eccf0cf5abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "180f885d-352a-4626-aaaf-87ca204eea3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4f0292e-4803-4d00-bc67-321fe8f5e2ef",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89eb3e39-e0b7-442a-80e8-557c91194241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "278e0214-3169-4313-83a1-ebb46e933a64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01c941a-d359-43fc-9bb6-099171882f70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594032c8-6fe1-4007-834e-b693476067d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bb8869-a380-4b47-833e-86e7474b932b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689e7407-acf6-423d-933b-ea48f04521df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e62879a6-08c1-43f1-aaa9-e9ac332011d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136ab349-dc78-483a-bb1a-24213a3ff78a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3355f82-f6a0-458b-9a45-d98343cdfad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703d4071-1976-4a64-a91d-11f3b2f1e61a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d1a70f6-ae0d-4615-b08d-a241a2bae819",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e7d0bc6-049c-4332-9362-ae09b6288834"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69403a2-6c53-4908-bc16-b50bf41d8b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1656039-c38a-49b7-917d-7c85328d1b4d"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff00cbdf-835e-4c9a-873c-a94591ebc77f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7a2d2b8-6bf4-459b-8509-b423429d1beb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe75c231-5f01-464e-96b8-39cd9e40d135",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "75b14d95-8f3f-48e7-b946-e9546258603d"
                    }
                  }
                ]
              },
              {
                "id": "0f0b0e86-6ddc-4d0b-bf1d-ee38fc5cd835",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "71c2d929-29ee-4aa2-83c3-da9ec15a78d4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1a562f-1791-4a80-ae8f-b9e97a34728c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "76d5e785-cdcc-4bf1-9cd1-b2d1fa87ae8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fe3ecc5-30a0-43a5-9aa1-4780df156040",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b7b421d-f11b-4af8-a977-30ecf007c67b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4182b3-2ad0-40d9-b654-e32d4429e359",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f17e02-1bf2-4fc2-9a78-dda7439becf9",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "310b0683-ec98-4526-8b6c-109da08808b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "193cde24-7d96-4d9a-bd3e-575288cef406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6093edf6-700a-4dfb-b36a-626c93832c81"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8582bd8f-6d43-4945-88ed-e665ed94009f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee10605b-6ab8-43ba-9822-70c35810a2e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "45804bd2-6c2d-45ca-89b4-328c4cf3fc85",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86c27647-847e-4413-ac6e-4a3ab74f5418"
                    }
                  }
                ]
              },
              {
                "id": "ffed7538-7152-4bba-bc90-fee5e3bf8dd1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "96c6b689-fb80-4984-82bf-2ef0b83e3ee1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c20473-08e6-4b8a-b7fa-cdc166d594fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "945024da-ed38-4152-b44c-a7e2407b9c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6133fda-c6b2-4e9f-b320-ac3dfe5b6278",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9684b96-7594-4fec-9ec6-a2d3789793ac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4cda887b-b3bc-44f5-bdb0-0b5645f9ad3a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "41a6b032-8e60-4753-9939-d24c8e03bf20",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fb28b8a0-2f7c-483e-957a-a0f267e1d282",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f48dd88e-4645-499e-98c0-28b438fd4d05"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f15a7e6-9a4a-4b8a-b7df-bc4b75e526c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "add93f3a-352c-472e-a439-9d1136f4eb47"
                    }
                  }
                ]
              },
              {
                "id": "c1d070b3-a608-4387-903f-b2561268ec74",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2e80539-a43a-42b2-a097-b364f7145fe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a3cb8026-4774-47ae-95e9-cce068c7396a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59800e09-605e-4023-b767-ff190c31a4e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb6c9973-2690-45d9-a968-2793bbf1bac3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f59351ea-71c6-4f2c-8218-2be7b257959b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0734233e-89e1-472a-b450-8c3d2ebb8de6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf7be52a-895b-470b-8265-bb1bc521150d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9a2d688c-4ff1-4fde-ba58-8763244c5de5"
            }
          }
        ]
      },
      {
        "id": "1fff9f8e-8867-4bd5-a3b0-3cedb91c0c3c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "939c0cdd-9143-4611-9313-e598b441ec66",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8dfdf104-7350-450b-8761-7db526067768",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "83fe155e-ce0a-4b0f-a936-4f0f53fbbdca",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea432fdb-866c-486d-aca4-1f1b356793ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "261068c5-2023-4a92-ad34-5f0a218c8fe5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99593328-96c9-48cf-869b-b179f3f0df6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c197a93e-1d14-4822-8ce7-f9627f7d3326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bf1616d-2cf1-4bc2-8868-708132ede156",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8426d1-793f-4648-9f72-f8b7937f4725",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "dd559802-6b02-4dcb-8bdc-350a6f2181b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb2ddf2-3277-4d49-b8a8-b38676ef4058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a97402f-87a1-4087-9689-a1fc89361a68"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64587524-d5ae-41fe-9a48-d84a037afaa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d966fcf-f659-4e07-98cf-dc4259edb939"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fa58c12f-5e14-4c86-bbaa-6be6edd18e5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb242067-b988-491d-a55f-37e333f7534a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "562b3fe1-836c-40ca-aa1a-d40bf963b282",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9d8e9e1d-debd-4d65-b65e-b8bd2f5b55e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c8ad3e97-3e67-4fe4-9e46-f16d5fe07b9d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c6326aa3-a01b-496e-82cc-a9ca330b1e57"
            }
          }
        ]
      },
      {
        "id": "c8b577a6-cf79-4ffd-a1e6-3db215bffe6a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "84c3c729-8ec3-45eb-97b5-cbb56a035aba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b1348b4-2d16-481d-8dd3-43abd0b16e7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "600fa51e-ce09-4236-85f5-5138f7383185",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34771383-f121-4669-b1e3-237b198fe91c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f96b1ae-6570-49d5-b918-e46d2a118fba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1282a535-1d28-4173-9610-d5d3c6a0f634",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f88a6231-b85a-4823-b2d0-c4579db0bbdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cd79f7-521a-4555-b23b-7a2902f7a262",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4f9e0b-a808-40e5-a116-49752abcfe20",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b2025e66-8c38-456b-8976-faee86be97f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1564bee0-f0f1-49a6-8292-603b01197dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8980a34b-4505-4b4c-8fa7-75ddf37a8e16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "837e2249-c681-4f1b-ab6d-1a471469c9c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b486df06-6771-45ef-a46b-2ebc86a8d215"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c5ccb3f-b2db-40ff-a914-a4b853cd6636",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "819b1c53-3dda-45da-80bd-ba56d08a78ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5823a98c-8b09-4f8b-ae49-09f3505091c4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c25362bc-7c5a-46c1-b2fe-79ea9081e66c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed86d127-0f55-49a6-8bb0-57487e50ae28",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d7cc2ccc-97ac-4a25-9954-af315a85224e"
            }
          }
        ]
      },
      {
        "id": "e7db61b8-ee1c-4c8d-9dcb-ca6d8fa7e2e9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0a4f6809-0de5-4843-af95-7a13a3967856",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a48b0eb-c926-4119-85bf-7ad83db6544c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9ff4d146-6fc4-4921-a668-fe69880caade",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ea98581-f6ff-44d7-9566-c65ac6b186de",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "04ba0d66-6ee7-4c90-aa90-3a9d122f4d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dba7fe-5ee3-4d73-afae-558d5c07a69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a253b6df-2c3b-4455-bdb3-8dc404a7e7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed158a2-c15d-4758-a936-d158e216fb3b",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0934d9f-60a0-4e52-939c-91e6d955b213",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3a36b0-ee6e-4ab6-adcf-339af690053a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44197cb9-50a7-49e4-bb90-7706fa12dff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "684b5153-ccbe-459f-94e3-0999601e9a32"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8a263d70-4f57-48c8-a9d8-6df9e9edc8fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aef8a00e-da9e-43c5-9d79-42cb2d85b2f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78fc62c3-3a05-4136-8080-9e756d9a8781",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9343241a-894d-4873-abad-14408ae08163"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cefb2e8e-b313-40f4-8e54-c6a37f9581e0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "afa6305e-532c-4e72-9d3b-f6d4042bdbf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bbddcc0-4783-4327-87a5-2a5a1eee87c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81c5cb38-d688-4fea-9ff5-3a9eb604e75b"
            }
          }
        ]
      },
      {
        "id": "c2a6831c-0e1d-454e-b911-9c219d7c7c97",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09279391-85c2-49fd-a03d-a20f30a11a5e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9e72cd4-d4c1-42e4-b2fb-0e9d1dcd7ccc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6005776c-540f-40f5-951e-0ae8d5dcce09",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abc4d675-6742-4267-9b3a-961d7003b7f7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68c15675-24d7-4e1e-8009-4040d8e862ae",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 318.1307692307692,
      "responseMin": 6,
      "responseMax": 10393,
      "responseSd": 1115.357444523171,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1682210399137,
      "completed": 1682210492644
    },
    "executions": [
      {
        "id": "b1a04b42-e4c4-462f-ba20-69d104771d24",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "97a9bee5-6b14-4fdd-a4a6-fef222d8100b",
          "httpRequestId": "63a6ae14-7aec-4a1f-a75e-b7bfa515301b"
        },
        "item": {
          "id": "b1a04b42-e4c4-462f-ba20-69d104771d24",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "70a82cba-4d6b-4a19-873e-14f18d3d4a9f",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "96ccf7bb-5171-48f2-a2e3-57cac3d50040",
        "cursor": {
          "ref": "eb19e035-4bfb-42a4-86f0-6c827050ebe4",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "406e1525-25d2-4a7a-b379-49d23a8ef0ac"
        },
        "item": {
          "id": "96ccf7bb-5171-48f2-a2e3-57cac3d50040",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "83a6af6a-9632-4707-9720-2e7bcd36e0e1",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "f6921df4-4b37-40ca-8e87-e74e74a9c1f2",
        "cursor": {
          "ref": "1ee1df53-e165-47af-8f48-d1c78b5b672b",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ce2247e2-a15e-4463-b7a8-8938510ba565"
        },
        "item": {
          "id": "f6921df4-4b37-40ca-8e87-e74e74a9c1f2",
          "name": "did_json"
        },
        "response": {
          "id": "55d8105c-5fb4-4459-adc9-31c234758bfd",
          "status": "OK",
          "code": 200,
          "responseTime": 591,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03c5fb66-4046-4012-bf3d-f0f6f75c18ee",
        "cursor": {
          "ref": "cc053643-b39b-4738-be82-fee4a1b8f60a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "abe3175e-f953-4fe1-bf55-8d1ed62edaea"
        },
        "item": {
          "id": "03c5fb66-4046-4012-bf3d-f0f6f75c18ee",
          "name": "did:invalid"
        },
        "response": {
          "id": "86e71e7b-aa45-4550-98f3-dc71821709ec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 943,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "03c5fb66-4046-4012-bf3d-f0f6f75c18ee",
        "cursor": {
          "ref": "cc053643-b39b-4738-be82-fee4a1b8f60a",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "abe3175e-f953-4fe1-bf55-8d1ed62edaea"
        },
        "item": {
          "id": "03c5fb66-4046-4012-bf3d-f0f6f75c18ee",
          "name": "did:invalid"
        },
        "response": {
          "id": "86e71e7b-aa45-4550-98f3-dc71821709ec",
          "status": "Not Found",
          "code": 404,
          "responseTime": 943,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5d112a78-ca8f-4a68-a293-0da94fc51952",
        "cursor": {
          "ref": "5c337570-6360-4628-9af3-9e76c3442d83",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4eaabef7-568a-4041-9e25-3ebeefbd283e"
        },
        "item": {
          "id": "5d112a78-ca8f-4a68-a293-0da94fc51952",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "e6d641c7-30ea-47e8-9e14-e87f860d1920",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d3becf-0be1-4e6b-96bb-36e30b36ec74",
        "cursor": {
          "ref": "1b379bb2-a571-4c1f-a672-edce96b23cc7",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "aeb9896f-37be-44f5-9052-33ee1f468c5c"
        },
        "item": {
          "id": "22d3becf-0be1-4e6b-96bb-36e30b36ec74",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "14e7d5d9-3fc9-45bd-b9ed-e1da224bf59a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f27141f-ca1d-4b31-bc87-7115b787f930",
        "cursor": {
          "ref": "7db7a262-9e2d-4deb-b73c-1b78550a9695",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "502ce1dc-52fa-41c2-8482-8eaf5172ef43"
        },
        "item": {
          "id": "6f27141f-ca1d-4b31-bc87-7115b787f930",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bd76c9de-5398-49fd-87dc-8251b736c77b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b85af3de-9af4-46d4-8dab-2b2e3b6ab89e",
        "cursor": {
          "ref": "ab2e68b1-f357-4877-a1a8-1e7d0ae18362",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f085be74-694a-472b-90e2-cd71dfe08753"
        },
        "item": {
          "id": "b85af3de-9af4-46d4-8dab-2b2e3b6ab89e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1bc2f017-d4e8-48e1-8083-f952a3400a56",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b85af3de-9af4-46d4-8dab-2b2e3b6ab89e",
        "cursor": {
          "ref": "ab2e68b1-f357-4877-a1a8-1e7d0ae18362",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f085be74-694a-472b-90e2-cd71dfe08753"
        },
        "item": {
          "id": "b85af3de-9af4-46d4-8dab-2b2e3b6ab89e",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1bc2f017-d4e8-48e1-8083-f952a3400a56",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "ebce4c27-98ec-47e9-a796-4c5746792de0",
        "cursor": {
          "ref": "09edb6c4-f2a3-41ae-a538-5cb42e73ed57",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "68ac5a7f-402f-46e3-9289-8fde8d7448c5"
        },
        "item": {
          "id": "ebce4c27-98ec-47e9-a796-4c5746792de0",
          "name": "identifiers"
        },
        "response": {
          "id": "18dc0f07-fb6d-4ed1-afc5-dafae7bba895",
          "status": "OK",
          "code": 200,
          "responseTime": 261,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4ab3f2-8ddd-4e07-a6ef-f81736986ff2",
        "cursor": {
          "ref": "1ed92927-c21c-42f0-a697-f64bf0e66470",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "de386d2e-b468-4316-b672-8b42bcd8eb7e"
        },
        "item": {
          "id": "1f4ab3f2-8ddd-4e07-a6ef-f81736986ff2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "096c3426-c53d-43c1-9abf-9282248556d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f4ab3f2-8ddd-4e07-a6ef-f81736986ff2",
        "cursor": {
          "ref": "1ed92927-c21c-42f0-a697-f64bf0e66470",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "de386d2e-b468-4316-b672-8b42bcd8eb7e"
        },
        "item": {
          "id": "1f4ab3f2-8ddd-4e07-a6ef-f81736986ff2",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "096c3426-c53d-43c1-9abf-9282248556d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7eeb8e-5df2-44e6-8966-ab048c215b05",
        "cursor": {
          "ref": "240de4e5-64e6-4f80-b053-a068d2be05f4",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "00e132b5-f4c4-4662-be61-02192a96a89d"
        },
        "item": {
          "id": "3d7eeb8e-5df2-44e6-8966-ab048c215b05",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5863df22-c31e-45c9-bb43-508263eab9fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f513396-fb68-4a38-871e-85e538e93f8f",
        "cursor": {
          "ref": "c60072cf-208e-4eaf-9a83-1e28c50ebc3f",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4b4f8658-41f1-42c0-9afa-a81b105ae337"
        },
        "item": {
          "id": "1f513396-fb68-4a38-871e-85e538e93f8f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "184f0ef4-7a07-477c-8c5a-a6479cbf294b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ebdd7c7-293b-43d0-872e-0e9bd99a4ced",
        "cursor": {
          "ref": "267d2253-61a6-49c5-85a8-84953fbe8d78",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f868c0cd-40de-437f-bcf4-16f96e2a293a"
        },
        "item": {
          "id": "0ebdd7c7-293b-43d0-872e-0e9bd99a4ced",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "678f77dc-b047-4262-ab77-545b44690336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 385,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012ba732-840d-4410-ae5a-f40298e06e80",
        "cursor": {
          "ref": "f4d629a2-df0c-49b5-8989-a3966b41eab8",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b55545e5-5067-45f4-b7c0-65629d6443a3"
        },
        "item": {
          "id": "012ba732-840d-4410-ae5a-f40298e06e80",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4062290b-e06c-471e-b0b2-24bedf64fc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb91b9dd-b67f-444c-b6a3-e88a850a3107",
        "cursor": {
          "ref": "49f427b6-891f-4719-b045-a632394120c0",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "ba155268-c100-4981-9b85-ba8a37935cc6"
        },
        "item": {
          "id": "fb91b9dd-b67f-444c-b6a3-e88a850a3107",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3fd55ebd-209d-407a-9ed2-98c699e9da78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efd8cc3-57df-4562-ba03-e3fb07117987",
        "cursor": {
          "ref": "13bbe3a9-b67b-4ce3-954d-514e2665b4cb",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b4346938-fb82-4f0f-8e2c-e6daa91173e9"
        },
        "item": {
          "id": "4efd8cc3-57df-4562-ba03-e3fb07117987",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7102957c-d72a-437b-9d8e-c726921bd82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fccbf2ca-70d5-49c0-9a25-979bbcd20c34",
        "cursor": {
          "ref": "32a472d9-b2d2-44e7-8178-51139438e083",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "aba7b15f-4954-4b8a-83c9-28130dabfb2a"
        },
        "item": {
          "id": "fccbf2ca-70d5-49c0-9a25-979bbcd20c34",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "40901603-240c-4684-b454-c5240fa01781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0dda457-ffcc-4085-8e8a-a4a80cb1322b",
        "cursor": {
          "ref": "a542c703-2498-4584-b4ac-dbd85131e74a",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8a7efcf5-0031-4c85-99a6-53b404103762"
        },
        "item": {
          "id": "b0dda457-ffcc-4085-8e8a-a4a80cb1322b",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "ab66c755-94f7-4005-ae36-95ad2de4a052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842d593b-b314-4523-bf49-97802fe1357e",
        "cursor": {
          "ref": "df82dbb6-0a31-4d46-96c2-8d2438b200b5",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2d10ab6e-8b15-4912-92b2-f5f531337f59"
        },
        "item": {
          "id": "842d593b-b314-4523-bf49-97802fe1357e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "88628dfc-3ba7-4ace-864e-bd9242ed5893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111312f1-47cb-40df-9ee3-291cc0c2e95f",
        "cursor": {
          "ref": "643914df-479c-40a0-ab3f-6b25765d2083",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "238db43c-edb5-4748-8ef1-9fdebb24dea7"
        },
        "item": {
          "id": "111312f1-47cb-40df-9ee3-291cc0c2e95f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ef6e28f8-fdb2-41f8-9e9e-4734d12f7e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac608904-b7b4-4cb7-8ff9-cf24e53f048e",
        "cursor": {
          "ref": "27c5b487-2d9e-4c62-a1d6-f24eceafb585",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9a10753d-44a9-4594-8068-84e74f8d7f61"
        },
        "item": {
          "id": "ac608904-b7b4-4cb7-8ff9-cf24e53f048e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "b2075f50-8d94-4d6b-bcfc-4630b86a7ce8",
          "status": "Created",
          "code": 201,
          "responseTime": 10393,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "edaaa2ed-fcba-44d2-a1ae-e18d5615bc9b",
        "cursor": {
          "ref": "498706de-a8ac-4f9f-bc9a-9af4d81399f5",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ae4597e3-bd68-4cb6-8833-26529af7089a"
        },
        "item": {
          "id": "edaaa2ed-fcba-44d2-a1ae-e18d5615bc9b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "8bbc7f9b-8101-4c1a-8019-4829e0e71178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3431,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02323282-1db7-4be4-aa64-14e6300e80a8",
        "cursor": {
          "ref": "1f20ef01-b669-41bc-bc24-a08124bd1a25",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "be9b8d4c-1590-4d02-9a9c-a36e40ac9bf4"
        },
        "item": {
          "id": "02323282-1db7-4be4-aa64-14e6300e80a8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7a069bf3-5d8d-42dc-be59-7520ca5759dd",
          "status": "Created",
          "code": 201,
          "responseTime": 9518,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "fd60d8ba-ebb2-43a0-ba86-bedee0c46baf",
        "cursor": {
          "ref": "ffc3b547-232f-4763-8bfa-998d3e6e0781",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "001d010b-b7e0-4912-a121-9c41ce269116"
        },
        "item": {
          "id": "fd60d8ba-ebb2-43a0-ba86-bedee0c46baf",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "645a760d-8918-4cf3-b9d0-bfda122aaf11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d405a3e0-d5be-4c34-a8e2-5e9e9f6cfd2a",
        "cursor": {
          "ref": "00129ae2-f34e-4199-9ad9-4c3ea41c3ea1",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ec0d34da-bcb6-4fc8-ac10-0e9300ed2b4f"
        },
        "item": {
          "id": "d405a3e0-d5be-4c34-a8e2-5e9e9f6cfd2a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "511620ff-6519-4beb-ba7c-ab5631e752c1",
          "status": "Created",
          "code": 201,
          "responseTime": 6238,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f3d4463e-cfd8-49ae-a221-91d15d00a547",
        "cursor": {
          "ref": "feaf42cf-4c7b-44c8-a652-125ed2b1b5df",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5504c070-7494-4786-8dd4-78e2e8ed7f70"
        },
        "item": {
          "id": "f3d4463e-cfd8-49ae-a221-91d15d00a547",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9666fab8-2aef-4200-9f53-6783447b84d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8a4ac60-8e5f-43ea-8e5f-cb33c680a1df",
        "cursor": {
          "ref": "9eeace57-1054-4475-8df0-e47ecf1ca11e",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "198b78ca-4c47-4aee-b0df-0f27c9e01150"
        },
        "item": {
          "id": "e8a4ac60-8e5f-43ea-8e5f-cb33c680a1df",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "eb6cb2ab-a184-4c51-b139-2584d782ab8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb9019b-f121-42c3-a9af-4f8ecad2a674",
        "cursor": {
          "ref": "8e97e198-eff4-432c-be66-a5c5e4d3f5db",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "af056b81-ee9b-4765-ae07-a07925bc44d5"
        },
        "item": {
          "id": "2bb9019b-f121-42c3-a9af-4f8ecad2a674",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "da34b020-d7f5-4100-92d2-0733bfe233d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce3fffe-da4c-42f5-a753-f15a36ed87b5",
        "cursor": {
          "ref": "867ee2ae-1126-4b87-aa02-7d79161fe707",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "8538a716-3252-4cf3-a235-2a61625fbc9b"
        },
        "item": {
          "id": "1ce3fffe-da4c-42f5-a753-f15a36ed87b5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "452f9548-910c-4e10-8ec8-9fe5fac80d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43de581a-d1cf-4967-9337-4449fa28f669",
        "cursor": {
          "ref": "3b1c39b3-5025-46c4-b6f1-1d802a51251d",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a86bcb18-aa88-46fc-b25a-4721f6fd94af"
        },
        "item": {
          "id": "43de581a-d1cf-4967-9337-4449fa28f669",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "8e95aab5-2409-45c1-ba6a-eb8d213d5ca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9eec3a3-b16e-4d20-9da1-5084a6447c40",
        "cursor": {
          "ref": "70c814e6-3d50-4e00-a2ce-cbd1e4ae450f",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4a4ce668-20c3-4ce0-926d-a657625605a3"
        },
        "item": {
          "id": "c9eec3a3-b16e-4d20-9da1-5084a6447c40",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1a176c60-4711-45c0-ae01-680d04909d81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f1414a9-6f89-4962-aaa1-76a07b6cce10",
        "cursor": {
          "ref": "1cc06319-b63a-49f8-9660-7e27efc15235",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e8a17b43-7a5b-479b-87dd-7f587feb569f"
        },
        "item": {
          "id": "8f1414a9-6f89-4962-aaa1-76a07b6cce10",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b2279661-6e58-415e-9923-7a5fba6d85fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80c7bd6d-c378-418f-a243-52b179f28066",
        "cursor": {
          "ref": "2cee3e6f-5847-495c-bc38-f4dd95d78a60",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "887c4a3c-a799-4705-a732-b096c56d0ee5"
        },
        "item": {
          "id": "80c7bd6d-c378-418f-a243-52b179f28066",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "de425dd3-9081-442a-9d21-aa5d400d4bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6100ded-3b9a-4184-aabc-6f3632ff049f",
        "cursor": {
          "ref": "5e112be3-8cdd-4c85-ab55-e53120355b63",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "95271012-e4cf-44cf-8d00-6e8af83b041b"
        },
        "item": {
          "id": "c6100ded-3b9a-4184-aabc-6f3632ff049f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d2a3dc8f-8e70-46b5-b8e5-f4a3ded2560c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca0c569-fccf-49fe-b25f-6c88ed889d01",
        "cursor": {
          "ref": "ee9d0851-bb6a-4214-b42b-1bc1d45c9864",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5437dfd5-5746-48e6-9a17-ec57ef1cfa67"
        },
        "item": {
          "id": "aca0c569-fccf-49fe-b25f-6c88ed889d01",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1841a2f2-39c3-4046-8420-4220ec79c6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66b7b57-3ee8-442c-ae3a-9c18537fd7e5",
        "cursor": {
          "ref": "baae9959-3d2d-49cc-bcaa-627a0d83e88f",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3a4e90b2-ca20-434d-80f1-4fe2fdbb35ad"
        },
        "item": {
          "id": "a66b7b57-3ee8-442c-ae3a-9c18537fd7e5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "65d33788-36bf-42bc-8ec2-e7eeab72a588",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da5f1f4-733b-4aee-8387-788590f15e6a",
        "cursor": {
          "ref": "86daf535-af00-4655-90b5-77db9b5db580",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "fa6dad07-9846-4cd6-b657-7269c919e63b"
        },
        "item": {
          "id": "2da5f1f4-733b-4aee-8387-788590f15e6a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "410f9fe0-61e7-4806-a839-c1882fbb5708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98344a23-90b8-4877-93eb-97bd10b7976b",
        "cursor": {
          "ref": "1ff2e1e3-fd96-4124-a404-82ee16af81c9",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "01bf5231-7f5c-45b1-bc39-951e6c40ff36"
        },
        "item": {
          "id": "98344a23-90b8-4877-93eb-97bd10b7976b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f8f47c19-0d4a-4c64-b2d9-6cfdff3a9eaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd53a0ee-ef6f-4f64-bfca-25907e99442f",
        "cursor": {
          "ref": "28d277a2-38a9-4d79-ac10-cb6999103b7d",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "bafa2555-9466-47ef-8517-f6113959c475"
        },
        "item": {
          "id": "fd53a0ee-ef6f-4f64-bfca-25907e99442f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9a1833c7-f8fc-4856-ae12-c1ec59256fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb957491-f818-4723-9901-55d27377c759",
        "cursor": {
          "ref": "9aaa9907-91d4-4bd5-be62-56aeafe40b05",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "f6b5646b-c5d1-42e7-a05b-0f3661bae10d"
        },
        "item": {
          "id": "bb957491-f818-4723-9901-55d27377c759",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "614863bc-6ad5-454f-99d2-51b5017d7c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5daa395-ee35-46f6-a032-371cd45c52de",
        "cursor": {
          "ref": "a654eb86-f426-46a9-8f0d-17be1445a200",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "1783f699-d39a-478e-a612-3eae70e6cde8"
        },
        "item": {
          "id": "c5daa395-ee35-46f6-a032-371cd45c52de",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "368b805a-f4ef-4efa-a009-ce7cafa29888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d66ee8-0024-44fa-8ba2-853704339a22",
        "cursor": {
          "ref": "3bdd1e0b-d151-4aae-86de-0d5d90f277ba",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5e4cf2b4-f8cd-4cee-b7b6-1fa133156834"
        },
        "item": {
          "id": "89d66ee8-0024-44fa-8ba2-853704339a22",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "042b26f8-f470-47a0-b198-0dc0b7295384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a4cee72-c9da-4078-9085-e2634ac81f10",
        "cursor": {
          "ref": "7eced53e-8404-4ec4-a97c-61970f8c1cfa",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a689f672-0da7-4fa6-99a0-2330f20dc381"
        },
        "item": {
          "id": "5a4cee72-c9da-4078-9085-e2634ac81f10",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "4204cfda-ebd3-4c98-a10c-1fcf01026d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce23c33-6ee3-413b-9033-0731afadc78a",
        "cursor": {
          "ref": "c3417271-c626-4ef9-a5dd-509b252404b3",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c25077ad-fa09-4408-8aca-7bfc49145517"
        },
        "item": {
          "id": "9ce23c33-6ee3-413b-9033-0731afadc78a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "86b979f3-c390-4eb6-8295-25702783c5eb",
          "status": "Created",
          "code": 201,
          "responseTime": 2417,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "f96f5002-bfcb-4cbc-a9bb-3d75798fb8e1",
        "cursor": {
          "ref": "c7d4ae66-063d-43c6-bcfd-0e35f7ba8dfe",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1ae57a59-d604-4ac4-98b2-f1a5c452c514"
        },
        "item": {
          "id": "f96f5002-bfcb-4cbc-a9bb-3d75798fb8e1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c403ffdc-c255-4354-b823-241b989e9a5f",
          "status": "Created",
          "code": 201,
          "responseTime": 2212,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "def30549-9d3f-4b05-8b0d-ab997cc6fce4",
        "cursor": {
          "ref": "1f5ba52c-48e6-471c-a65d-1e345672f561",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "b16b64ef-21d1-48c9-b03a-b96648276bb9"
        },
        "item": {
          "id": "def30549-9d3f-4b05-8b0d-ab997cc6fce4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "03b6a535-27d2-434e-87d6-01f2e027d600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cddbab0-8c11-45c9-933e-fb010b5ef6a4",
        "cursor": {
          "ref": "3609b591-6917-44a1-a7ac-c2b88cba6463",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2d3614ee-1f40-4737-bb43-58c4f0014e48"
        },
        "item": {
          "id": "1cddbab0-8c11-45c9-933e-fb010b5ef6a4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3a3f7374-00cc-4603-8446-4bea317acaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b1425c-45d2-4931-b338-cc757dab19b8",
        "cursor": {
          "ref": "275d01f0-87d5-42a5-84eb-d852671f5dce",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "98da9663-6b2e-4422-8c5e-5bda33ba242b"
        },
        "item": {
          "id": "20b1425c-45d2-4931-b338-cc757dab19b8",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "80727f20-ff75-4b8c-aaaa-3f48a71c3b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f176a5e9-76f9-42d3-b65f-22e23f81c5cb",
        "cursor": {
          "ref": "6f0070ec-d35f-4bc6-b98b-eb5f041fbc19",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "eb115c41-2840-4d81-a884-a5d2900abc58"
        },
        "item": {
          "id": "f176a5e9-76f9-42d3-b65f-22e23f81c5cb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1289f3d5-d1d1-4e6f-b850-61c889f37bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14281349-7eb1-4b16-aee7-d950fa3fe1c4",
        "cursor": {
          "ref": "5759e02a-0429-4107-805b-f32c6783c9a6",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "becffc12-d38a-47a8-8689-0dc194f47aca"
        },
        "item": {
          "id": "14281349-7eb1-4b16-aee7-d950fa3fe1c4",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "246d4366-1ff9-4ae2-851e-294605166306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97afb445-0f18-4e00-8391-0f62cecf0f8d",
        "cursor": {
          "ref": "58d9afd7-1ba8-47dd-b8a5-56f6c9aa662f",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f8d836e7-8a7a-442c-9ea6-f635b6ca40e1"
        },
        "item": {
          "id": "97afb445-0f18-4e00-8391-0f62cecf0f8d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2227ba01-5d0f-4d84-a716-0b7d00fd60af",
          "status": "Created",
          "code": 201,
          "responseTime": 2535,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b5855cbd-8e7a-4346-9552-99e3e673b789",
        "cursor": {
          "ref": "351348fc-ef23-4ada-a72c-04219da58328",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1ef20688-11c0-4c43-8827-fa35f481ca47"
        },
        "item": {
          "id": "b5855cbd-8e7a-4346-9552-99e3e673b789",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "8042244f-edfd-425a-b50b-8474a46f2dbd",
          "status": "Created",
          "code": 201,
          "responseTime": 2137,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "953b9e24-63bd-4f88-80c4-7de8e5a3085a",
        "cursor": {
          "ref": "92658bcf-f587-4044-8265-63b0bc64f4b5",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5c4663fd-286c-4071-8ce9-a191d99c134c"
        },
        "item": {
          "id": "953b9e24-63bd-4f88-80c4-7de8e5a3085a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "421c0a4a-356b-4f25-a465-6c66d0fc7977",
          "status": "Created",
          "code": 201,
          "responseTime": 3153,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e8582df1-8c59-4f98-b468-32f3175268d9",
        "cursor": {
          "ref": "ae99c663-6055-4d28-839b-ef2b8b8adb1d",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9f24c70b-a2c8-4322-ab64-17f0df39f0c2"
        },
        "item": {
          "id": "e8582df1-8c59-4f98-b468-32f3175268d9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "2d9a1069-f1b3-4435-b7a7-7518bf7ae770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cba6b7-b9e4-46de-8c82-8ba33965a103",
        "cursor": {
          "ref": "bc9059ad-b8f4-46ab-9107-ae3fab699665",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "cd9d6a80-e502-4178-8be9-1df52a9c9b23"
        },
        "item": {
          "id": "e2cba6b7-b9e4-46de-8c82-8ba33965a103",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b260b1f7-818e-4812-90d5-0fbc09c99dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdb2e897-98f7-42e7-a88d-311c5ca19216",
        "cursor": {
          "ref": "480cf572-9159-4d83-96f6-c7cf387e4d1a",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7539149b-180f-414b-b9a9-c7fbf5981462"
        },
        "item": {
          "id": "bdb2e897-98f7-42e7-a88d-311c5ca19216",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "91e1cb9b-2c27-4f29-850a-373ab86df62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30b0ac9-db13-44a4-aae3-084d202b4912",
        "cursor": {
          "ref": "a406e727-36ee-40a7-b1b3-b8c721d5201c",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "dfd7609c-3dfa-4e65-989f-879c89fc9aa2"
        },
        "item": {
          "id": "c30b0ac9-db13-44a4-aae3-084d202b4912",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c8e77bd1-4eb6-40a8-8fe1-23e4cfb949a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131318c3-a2c7-4b48-ab60-cce84b8d0d67",
        "cursor": {
          "ref": "b442c947-c9c9-4ad5-b6f7-d6fe3d078d9a",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c84f6899-246d-4507-ab30-9a2ca8a559ca"
        },
        "item": {
          "id": "131318c3-a2c7-4b48-ab60-cce84b8d0d67",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5fe7c040-4ef4-43cf-99da-94b94aaa12ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73805c9a-5db8-421d-af9b-945c30dd0c17",
        "cursor": {
          "ref": "734af760-f444-496f-af42-d01b0bce0223",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2b9f9c55-1861-4ab7-97aa-6d4f54fc806e"
        },
        "item": {
          "id": "73805c9a-5db8-421d-af9b-945c30dd0c17",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "57f6d2b1-672c-45a4-a46b-d6a74f9b6940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d6694d4-4eac-4a4b-8409-3af7dc6ef1b3",
        "cursor": {
          "ref": "c18a6933-0e88-43a0-849a-9050c5554e49",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2e8cf53b-f2bf-4953-8f88-17f60eef4e02"
        },
        "item": {
          "id": "6d6694d4-4eac-4a4b-8409-3af7dc6ef1b3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "e1ec884f-8b75-48d4-b3f3-89094ba1f486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9b671b-a74f-4042-bcab-4656df92ae91",
        "cursor": {
          "ref": "c5394d1d-d262-4b75-ac83-7eca69ccd21f",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c60be887-08bb-4f6e-9f27-502e7a66d71c"
        },
        "item": {
          "id": "bb9b671b-a74f-4042-bcab-4656df92ae91",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a2e59ef1-afbf-4622-8769-20ad0ca446ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f761ee-8ee7-48b4-8b42-fe363bd1c138",
        "cursor": {
          "ref": "de000ecd-40c8-40ca-99b8-723ba199f4bd",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0b197ba7-47f5-4bae-af1c-939d850b910b"
        },
        "item": {
          "id": "97f761ee-8ee7-48b4-8b42-fe363bd1c138",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "09d7c187-d159-4198-b6bb-cf810153686e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ab0af8-a381-430c-911d-61fa3069b0a6",
        "cursor": {
          "ref": "ed6d8e62-eb76-4d1f-b9bd-b45e22dd55c4",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ba10f936-bde7-49a3-bd4b-801d71ba1179"
        },
        "item": {
          "id": "11ab0af8-a381-430c-911d-61fa3069b0a6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "99025555-99f7-4370-974f-20e777b0a824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb53a7fe-d709-48cf-aa76-0943aef49260",
        "cursor": {
          "ref": "bbf930c1-e714-481d-bb2b-aace0f4449d1",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f426bc84-7ad3-41dd-be0c-dbeec86c6775"
        },
        "item": {
          "id": "bb53a7fe-d709-48cf-aa76-0943aef49260",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "06827433-4b87-4ee8-be9d-44a471cee985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4adaf0-8ab4-44e0-bd4c-24f20737a868",
        "cursor": {
          "ref": "ed066a51-f1fe-4bf3-afbd-74774bc1061b",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "411beaa7-be01-4ec9-8db6-16a62c64d8ea"
        },
        "item": {
          "id": "bf4adaf0-8ab4-44e0-bd4c-24f20737a868",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a5bb1ea3-ffd0-4f27-8eff-69cee218d719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe7f250-d745-43be-a611-262a799c1fdb",
        "cursor": {
          "ref": "9a008231-7606-48fd-81d6-6772f6ab1773",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9b9abe15-6c79-4c85-8b53-8e29bfd313cb"
        },
        "item": {
          "id": "6fe7f250-d745-43be-a611-262a799c1fdb",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "0b7f761c-aa74-4f90-90b7-56f228e0cbea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2e35afe-480b-42fc-8dd0-afceb9309855",
        "cursor": {
          "ref": "8700d563-ba6e-471a-b9dc-23c9d860d3a0",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "053b455d-38e0-41be-91c2-a131e7cba695"
        },
        "item": {
          "id": "a2e35afe-480b-42fc-8dd0-afceb9309855",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5cf4a7d3-e649-4343-b8f7-1c87105ac771",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1532d0c0-6e18-45d9-bfc0-45a500de15fa",
        "cursor": {
          "ref": "b7b52e56-c603-4603-ae4d-1096f9044f5b",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d9cc5981-ba6a-4509-af31-100be5efd7d4"
        },
        "item": {
          "id": "1532d0c0-6e18-45d9-bfc0-45a500de15fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a1797828-2c6e-43bf-bc1f-ca2cdf12944f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa03464-3ca2-49c6-8454-25dcaa6751e4",
        "cursor": {
          "ref": "dcf07982-b4ea-439b-937d-1c4cbf1c9e0c",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "974796ca-b102-487b-bfb6-c765a7a4547c"
        },
        "item": {
          "id": "6fa03464-3ca2-49c6-8454-25dcaa6751e4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "51a20cd9-9218-4d6d-a912-7bbc1be3c7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8d574a-ba82-43d0-a803-514b7dcb01cc",
        "cursor": {
          "ref": "31f51053-ec54-4fe2-b95e-cd444de9358e",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "86d7fcab-a83a-4d1b-ab64-c0503bf40504"
        },
        "item": {
          "id": "ca8d574a-ba82-43d0-a803-514b7dcb01cc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "229692f9-4feb-430d-89c3-ea4302b3b917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9df6b15-2287-4b4b-8146-830e431c1cea",
        "cursor": {
          "ref": "6072c2ed-c62b-40e0-beb9-9a04e64e49cd",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "61493bac-60de-4b32-a789-89dff6d2df16"
        },
        "item": {
          "id": "d9df6b15-2287-4b4b-8146-830e431c1cea",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ea96f4af-43af-4082-a0fb-19110c775f40",
          "status": "Created",
          "code": 201,
          "responseTime": 2753,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7ddfce87-1aee-4d99-b912-a7922863c837",
        "cursor": {
          "ref": "ce8e9458-12a9-4d6b-a72b-d11b4510a130",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6c0a5048-7c1e-4579-ad19-39aa7c3b0b92"
        },
        "item": {
          "id": "7ddfce87-1aee-4d99-b912-a7922863c837",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "228926f9-4ef0-4350-813c-bf83634f11ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8701126-2a05-4cf1-b6bd-9889af27dd38",
        "cursor": {
          "ref": "3f45056e-c3d8-4707-b9d4-44a0ac9fa75e",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1767f3ca-39c8-42d4-8351-82cfa939db22"
        },
        "item": {
          "id": "d8701126-2a05-4cf1-b6bd-9889af27dd38",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2e3cbdef-82f6-4c3a-9d10-6686c39f1926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c241681-b6fc-4344-a12e-9a4c0f3ab4c4",
        "cursor": {
          "ref": "b33c1fd2-65c0-43df-9527-1400f3d3c4d2",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1f6e0df3-6cf9-4165-aafe-13665e44d9ff"
        },
        "item": {
          "id": "8c241681-b6fc-4344-a12e-9a4c0f3ab4c4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "4875f9fb-a45b-4a90-9dbc-ff215489e6b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609a9106-6990-4611-b415-68cd1203116b",
        "cursor": {
          "ref": "555af8ac-5172-4c6e-bbb4-6329941254c1",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "460e4430-8710-4e59-b522-c2c0d7b618f5"
        },
        "item": {
          "id": "609a9106-6990-4611-b415-68cd1203116b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "49d8163f-e4c3-43bd-bb2c-fe4651538a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f7b211-6975-4e79-94ef-8b9cf92779c9",
        "cursor": {
          "ref": "8945cc80-0006-473b-bbd4-7eec0ca154ad",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "d8259bcf-9b2e-495d-bf04-308d57fb05a0"
        },
        "item": {
          "id": "97f7b211-6975-4e79-94ef-8b9cf92779c9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "33f8c201-7ad0-4ad7-af4d-42e06df11810",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cfa81a3-d55d-4452-a6ca-60424144a510",
        "cursor": {
          "ref": "4e2d9a4c-994b-4a05-b497-aad9f8ec66d1",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "6cc1f86c-2bb4-403b-93b8-f65eafd2124e"
        },
        "item": {
          "id": "4cfa81a3-d55d-4452-a6ca-60424144a510",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7ae9606b-2879-47f4-90c0-ba2d74b34e74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f54ddd8-7abc-4c66-8412-22cf1691e196",
        "cursor": {
          "ref": "1382641d-53c2-4087-be8b-14825c583b4b",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "ffe5a02a-9f5f-43c5-bcf0-2375abbc4db1"
        },
        "item": {
          "id": "4f54ddd8-7abc-4c66-8412-22cf1691e196",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d08962a8-cb94-4c8a-bf06-47705e74a5ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2691e700-009e-4c71-9a85-06260374fe65",
        "cursor": {
          "ref": "142f34d3-3c2f-4a73-8bda-b0c758716f78",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "22b0222a-a9a8-4db3-8005-92cd7063fcd3"
        },
        "item": {
          "id": "2691e700-009e-4c71-9a85-06260374fe65",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "943b5e3d-c654-432b-bf9b-e2c56f8e2e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e86a443-f3ec-44cc-8128-efd0bf9473e0",
        "cursor": {
          "ref": "f6549437-213b-4645-96dd-b684e8f74c85",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2afa4440-e272-4b54-922b-ae7170ebb4a6"
        },
        "item": {
          "id": "4e86a443-f3ec-44cc-8128-efd0bf9473e0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bc7c7937-77c7-48ca-9166-e6442fef6934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e906b5d-f1a4-4ee9-9315-058a089c469a",
        "cursor": {
          "ref": "85b127ef-ae59-4820-a4ee-2d654e574936",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b84d3d8e-b76e-4268-be5e-d0b64f7a9456"
        },
        "item": {
          "id": "1e906b5d-f1a4-4ee9-9315-058a089c469a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "3c5cdda2-55f7-4390-99e2-4d9f86d7435c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb27cf45-b39b-4f96-af26-89c7e651523e",
        "cursor": {
          "ref": "f022bf11-8e02-4d54-aadf-715d3e200dd2",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e0dd801c-399b-475c-aa2c-a2fffd669fbf"
        },
        "item": {
          "id": "eb27cf45-b39b-4f96-af26-89c7e651523e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b6cd2ed2-004e-4cf6-9587-77b7689252d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac651ab-16aa-440d-99dd-5876bee6fa9d",
        "cursor": {
          "ref": "f3e70910-56f9-4c7c-85e2-b454d716793c",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c817b893-f17d-47f3-b328-a29f4c5a9db8"
        },
        "item": {
          "id": "9ac651ab-16aa-440d-99dd-5876bee6fa9d",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fa761d6b-97d0-4b8d-8b64-777952d5231a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6096e9c2-727d-4e40-9ccd-da326acb5802",
        "cursor": {
          "ref": "7a95ce14-c1bd-45ed-9242-31151e1fad07",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e26cac5c-b79e-4bde-be6a-5c3470ba22f5"
        },
        "item": {
          "id": "6096e9c2-727d-4e40-9ccd-da326acb5802",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2ce57ae6-a7d5-4109-99be-2b04127290ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca471d83-c08a-4f70-9f0a-af0423748225",
        "cursor": {
          "ref": "b7a878f6-44b8-4870-930c-17519987a1ed",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1e3436b2-824f-4949-abda-6c47c39a71ed"
        },
        "item": {
          "id": "ca471d83-c08a-4f70-9f0a-af0423748225",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b8db5af3-a632-47b5-a367-f55ffd593e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a7877e-7ad7-41c7-a87a-a82b1500158d",
        "cursor": {
          "ref": "fc1d00be-2118-4c5f-9fba-87d2f8c88e18",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a8882a97-ba52-4956-a8ee-17edba12e59a"
        },
        "item": {
          "id": "48a7877e-7ad7-41c7-a87a-a82b1500158d",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5d9e2c37-912a-4a5e-93a6-3e22d8a78202",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d97207c-ff96-4e94-8f67-47d5bd81a9dc",
        "cursor": {
          "ref": "05f93424-9c05-4c2a-a7f6-7448c6950347",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a518030c-96c4-4a04-9a50-7a851bedd48b"
        },
        "item": {
          "id": "6d97207c-ff96-4e94-8f67-47d5bd81a9dc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "506825eb-8b56-4011-9669-8f74912f622b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a6bb4c-cf78-4a2b-887a-0062ec17cd89",
        "cursor": {
          "ref": "6142fdd4-b744-4eef-9d0d-af213e68ac2c",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3fe686a2-79b7-44c2-ba6a-47898a2ee4b4"
        },
        "item": {
          "id": "a7a6bb4c-cf78-4a2b-887a-0062ec17cd89",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5fbf7216-6c7b-452f-909f-a6cd4d24ec93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f20c38-4917-40ca-b39f-6d5062b9c9e7",
        "cursor": {
          "ref": "99b80531-896b-4a48-b5ba-a796abbdbb73",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4cf8116c-2ffd-4492-b7e7-efa3b7fb1691"
        },
        "item": {
          "id": "21f20c38-4917-40ca-b39f-6d5062b9c9e7",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "87e001c5-4e01-4203-a993-07e2df16eb10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a41a9f85-758d-480c-bdd2-784e20bb0d51",
        "cursor": {
          "ref": "e4e81b24-6fca-4c66-a275-785015caf256",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bb0401bf-519b-49f4-9b1c-246511d55e8e"
        },
        "item": {
          "id": "a41a9f85-758d-480c-bdd2-784e20bb0d51",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "29ab2e51-d9d6-48f5-8dd7-d0a7c4bf7f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e674bde-92c8-4a70-ad28-31a6101e899f",
        "cursor": {
          "ref": "9b2e940f-bc7d-4364-b481-ed20d9cd0149",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "53a6d5ab-a3ec-4355-9995-16385c0e399c"
        },
        "item": {
          "id": "5e674bde-92c8-4a70-ad28-31a6101e899f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "1c49dda2-f610-44c5-a1eb-7037230ae736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a4dd94-0cb7-425d-8e0b-9bf10eb4193e",
        "cursor": {
          "ref": "fc28f82c-75d5-4f4c-b8cc-663a4a04d621",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "2e20bfac-1d0b-4e3f-bfe0-5beae232e19e"
        },
        "item": {
          "id": "a5a4dd94-0cb7-425d-8e0b-9bf10eb4193e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "64008e6e-3b71-45f6-8f2e-030d05c466a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3149fab1-38e8-4db4-84a7-5899f9542360",
        "cursor": {
          "ref": "a7daba84-9a5e-46c1-b2b4-5a444757c764",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "1ce4afe5-837a-4cca-adb0-819c843fc54f"
        },
        "item": {
          "id": "3149fab1-38e8-4db4-84a7-5899f9542360",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ad932455-2c44-4c8c-b3d5-9084fb40d7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3220ce62-1c31-4b84-828e-414984f508ec",
        "cursor": {
          "ref": "f1c962fd-6a66-4ef0-8ec5-4392c5965e38",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fe985f79-bd29-4851-9fdb-eaf2cb5a58c8"
        },
        "item": {
          "id": "3220ce62-1c31-4b84-828e-414984f508ec",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "474e33f7-b376-4b70-93bf-744020f64ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3589bea2-59b7-4fdc-a92f-fd766745d31f",
        "cursor": {
          "ref": "dd164b08-aeb9-44db-b689-3a1945abcbc0",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a833bbcc-0a74-4e3c-b77a-a304fd58ac19"
        },
        "item": {
          "id": "3589bea2-59b7-4fdc-a92f-fd766745d31f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f49791ba-512d-4b73-bc8d-7f53f497d1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb2fc4e-d8e9-48b9-b4d6-6f03e551aef3",
        "cursor": {
          "ref": "c680b650-b2ed-4c21-b07f-5786700b374a",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "b7358a8b-8dd5-4515-81e6-a7615b4bce60"
        },
        "item": {
          "id": "8eb2fc4e-d8e9-48b9-b4d6-6f03e551aef3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7dd5dbc5-1276-43dc-87d8-2a5202a8ff09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4bf5fc-3225-4bcb-a633-6fb8de1df28a",
        "cursor": {
          "ref": "35d31805-32cb-40c6-900e-8b817b4c3b22",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7167212c-6312-4725-80d6-a448be2bbbcc"
        },
        "item": {
          "id": "bb4bf5fc-3225-4bcb-a633-6fb8de1df28a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "2bcdf4a0-b22d-4764-b6c7-d3d5cec44bd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "142f0080-a95d-40aa-bab1-bdc827f5c304",
        "cursor": {
          "ref": "7c18df1f-67cc-482a-b6bd-34976b5af9c4",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "0f604162-d411-49df-bbd0-e514f130e49c"
        },
        "item": {
          "id": "142f0080-a95d-40aa-bab1-bdc827f5c304",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ecae4873-d1f7-412b-a39e-78ec09cf9e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864ece5b-b3c9-4764-8953-c8479d268238",
        "cursor": {
          "ref": "aeb034a3-3960-48bf-8c17-2ab2d65b767d",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1412ac98-4604-4b07-96a6-39eebd6f10f3"
        },
        "item": {
          "id": "864ece5b-b3c9-4764-8953-c8479d268238",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "1d7e865c-fee0-4170-a2ce-cb6b30a69ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ebd928d-ce3a-4182-9415-edae6f209d7e",
        "cursor": {
          "ref": "8b1b76cc-f496-49cd-8409-817fd34ced2d",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "d2396175-edc1-47fc-a520-7027b53fc998"
        },
        "item": {
          "id": "1ebd928d-ce3a-4182-9415-edae6f209d7e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a06cf298-7fa2-4cad-bbbf-35c16db9152f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d12d4b-34e9-46aa-ab92-19eccdd98aa7",
        "cursor": {
          "ref": "7035d18a-e0a2-44fb-93d0-036227ec0e82",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "185298ee-f9e2-425b-86e9-57761a3b9444"
        },
        "item": {
          "id": "52d12d4b-34e9-46aa-ab92-19eccdd98aa7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "5b7c7339-2742-4a3b-80fa-12900dea0140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0219c2b1-480c-44c1-b5c6-6b98570c7486",
        "cursor": {
          "ref": "d3d552c1-aa26-4d78-b4ec-d32cf89bb40f",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "48034c09-6cdf-4164-bf11-77a366d1ee28"
        },
        "item": {
          "id": "0219c2b1-480c-44c1-b5c6-6b98570c7486",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8a502f65-5750-4389-8920-fcd311df17aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "ae1ad833-25eb-461a-bbba-3fd4a5deeda1",
        "cursor": {
          "ref": "31fe790f-cae7-4a02-b544-3d447a15d805",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d54b309a-0388-4cf3-8da6-7f12bd7b0f89"
        },
        "item": {
          "id": "ae1ad833-25eb-461a-bbba-3fd4a5deeda1",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "219c4000-5088-43fc-ae3a-164e78473ac0",
          "status": "Created",
          "code": 201,
          "responseTime": 2583,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "add787a2-a0cb-4990-a5a5-a6c5b5a4a336",
        "cursor": {
          "ref": "ad1e87ed-7248-4bcb-8561-f23e088d7acb",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5f5cbac5-871f-43ba-9a38-91e47a9f12a8"
        },
        "item": {
          "id": "add787a2-a0cb-4990-a5a5-a6c5b5a4a336",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1f5c92d5-a12c-4c20-adb2-a169b0410ddf",
          "status": "Created",
          "code": 201,
          "responseTime": 2696,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9e083f-0f1a-4163-83b1-86b786d564b9",
        "cursor": {
          "ref": "a8110d80-cb30-46be-bc38-4f761b548170",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ab7f34df-c132-40f9-9384-7132d284fa25"
        },
        "item": {
          "id": "fe9e083f-0f1a-4163-83b1-86b786d564b9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "42719bf7-ec1a-4986-9ba6-14c93badc79f",
          "status": "Created",
          "code": 201,
          "responseTime": 3070,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1701249e-b125-4b65-8444-230875d6161b",
        "cursor": {
          "ref": "819922f7-2b4d-4c14-822d-44fb8a3fd67e",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4d34df57-099d-4c8b-a535-ef2fb9f04bea"
        },
        "item": {
          "id": "1701249e-b125-4b65-8444-230875d6161b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "895788dd-b0f0-49d7-a0a7-932ca0d89116",
          "status": "Created",
          "code": 201,
          "responseTime": 2572,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "828274e7-9a74-4a6c-9345-a5723410f3de",
        "cursor": {
          "ref": "bb36e9de-00da-4893-af05-98afe2a4a442",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7e18cafe-0d39-4025-86e6-128513e2e3b8"
        },
        "item": {
          "id": "828274e7-9a74-4a6c-9345-a5723410f3de",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d407ac8d-e001-424a-8c97-23543a32f0e2",
          "status": "Created",
          "code": 201,
          "responseTime": 2186,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea55be5e-3486-4112-b510-72ea043bf049",
        "cursor": {
          "ref": "f1e5f715-20a5-4c41-a056-b6045a073d1e",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "c1346596-15b6-4d2e-a190-6701327fb455"
        },
        "item": {
          "id": "ea55be5e-3486-4112-b510-72ea043bf049",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "66b6a022-81ed-452b-9c63-48705c9b196f",
          "status": "Created",
          "code": 201,
          "responseTime": 2189,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-23T00:41:12Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-23T00:41:12Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "2e5f8e78-9a41-48b5-a13e-82790eabe70a",
        "cursor": {
          "ref": "a39f4740-629b-4a7a-80cb-78962622c518",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b139cb24-7b03-4e85-90f2-0f14d2d6377b"
        },
        "item": {
          "id": "2e5f8e78-9a41-48b5-a13e-82790eabe70a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "51942704-dc51-4672-8be8-8ce3b2dfa05f",
          "status": "Created",
          "code": 201,
          "responseTime": 2384,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885b3789-084c-4e87-a442-a929a4b0ca07",
        "cursor": {
          "ref": "081ddebe-8fbe-435b-a2a6-d8c48e6d0e50",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7db6070d-0dae-4f8a-8f3e-efcd1b1ebc77"
        },
        "item": {
          "id": "885b3789-084c-4e87-a442-a929a4b0ca07",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "528b9e8e-e2c5-494f-aeff-101e810b9eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885b3789-084c-4e87-a442-a929a4b0ca07",
        "cursor": {
          "ref": "081ddebe-8fbe-435b-a2a6-d8c48e6d0e50",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7db6070d-0dae-4f8a-8f3e-efcd1b1ebc77"
        },
        "item": {
          "id": "885b3789-084c-4e87-a442-a929a4b0ca07",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "528b9e8e-e2c5-494f-aeff-101e810b9eb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da672630-f6e8-4565-b972-d0455085fece",
        "cursor": {
          "ref": "1dc36d37-e1ac-4190-9581-1c4bc35c190c",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "62ae5acd-2ec6-4571-8659-aab03dbbae79"
        },
        "item": {
          "id": "da672630-f6e8-4565-b972-d0455085fece",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d917bf57-b6fe-4ab6-9356-f08f31761a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ef26e4-8c6e-487a-b55f-5185f6d1183b",
        "cursor": {
          "ref": "0cca0386-1d0b-45f4-9bdc-ef45c86b1830",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c005a78a-18c4-4b96-88d6-d897e6d67489"
        },
        "item": {
          "id": "f8ef26e4-8c6e-487a-b55f-5185f6d1183b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ecbfc9af-2c7e-413a-8639-0a8847f14d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd73bfe6-1abd-4e26-9043-71f3ca9b6134",
        "cursor": {
          "ref": "3d96204b-1ee4-4cd9-96ad-00f66e19f3e9",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "586d6e63-ca1c-4cd1-9abf-a9f326217952"
        },
        "item": {
          "id": "dd73bfe6-1abd-4e26-9043-71f3ca9b6134",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "173b6b98-81b6-4510-93cd-3e965c216e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a08a10-aef2-405b-b7bb-cf9baf0de0ad",
        "cursor": {
          "ref": "d7e15c41-1130-40b8-9eb5-a1aa046a6b61",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5c26831e-1036-400a-be0f-7cc60fb62db5"
        },
        "item": {
          "id": "f9a08a10-aef2-405b-b7bb-cf9baf0de0ad",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "34997e35-245d-4977-8479-43483b1ecf79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6100c21-3840-463e-99e4-860e342549eb",
        "cursor": {
          "ref": "9e3a9472-1755-45c2-a95c-e090abf24ab0",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4e674cfb-e87f-4df0-beb4-4d74ab2fd06f"
        },
        "item": {
          "id": "b6100c21-3840-463e-99e4-860e342549eb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "51ef0862-5cd9-4ff9-b3da-50b06b1675b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d5fbfe-11b6-440c-9477-d15925182ff8",
        "cursor": {
          "ref": "702192ba-8ec2-46eb-adab-11c8c4ea4901",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c1bd447a-89c2-498d-b599-f47fdd25f511"
        },
        "item": {
          "id": "f8d5fbfe-11b6-440c-9477-d15925182ff8",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "914d0774-080c-43df-a7cb-a4a58348e8f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "893256bc-6609-41ac-bb89-278a50c5033e",
        "cursor": {
          "ref": "dd4e067f-f9fe-4bb8-93ba-90c7916b0f06",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "69f3923b-11ea-4d52-9a30-8a6fd8d1da4f"
        },
        "item": {
          "id": "893256bc-6609-41ac-bb89-278a50c5033e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4e78c84b-66ee-4cdd-ac63-094aa0a93475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9f02fc-fafd-452f-9fbf-e04c3baeb78d",
        "cursor": {
          "ref": "2b38f104-24d6-4f88-99d6-cbe98e3ab418",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "853031d8-0948-4088-868c-54ef1a74d6be"
        },
        "item": {
          "id": "dd9f02fc-fafd-452f-9fbf-e04c3baeb78d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a6913407-5103-420b-837b-a79932c60157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40a7d67-f2cf-49d2-a715-f103695e0e3e",
        "cursor": {
          "ref": "295ae8f7-e6a9-4eb4-aaf5-757792ec07ee",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "228c6e2d-266a-4e39-bbc1-6d4ddca45697"
        },
        "item": {
          "id": "a40a7d67-f2cf-49d2-a715-f103695e0e3e",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e6884068-306b-4820-9868-33a0e1e30536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91f732df-5a3f-45f4-ab1f-ae157f38be91",
        "cursor": {
          "ref": "4c6e9b4e-3acc-4b2b-9646-1421af22d850",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "5e986296-598c-4362-b3af-de0770bfd10f"
        },
        "item": {
          "id": "91f732df-5a3f-45f4-ab1f-ae157f38be91",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "098ca2c9-57b6-4908-9cd6-c947a298f50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4369494b-06f5-4d0c-bdcb-84c8b2ffa9d7",
        "cursor": {
          "ref": "67f5af51-a680-4875-894b-9a5e6d30a173",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "38aefddc-1e33-4919-af38-09c0287efaa3"
        },
        "item": {
          "id": "4369494b-06f5-4d0c-bdcb-84c8b2ffa9d7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cd5e5a4a-9904-4ae2-a65a-fdfc43cb16d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8522f09a-9615-42ed-8837-d2d7edbdc8aa",
        "cursor": {
          "ref": "f4fc3445-d4b6-4d6d-aea0-5d143c608980",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ef0919c6-823e-427f-a67d-41e42e165bcc"
        },
        "item": {
          "id": "8522f09a-9615-42ed-8837-d2d7edbdc8aa",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "41f1c61e-2116-46a5-9b6c-6406444a2298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b507144-1182-4732-9863-17d7a67888b6",
        "cursor": {
          "ref": "6773ac30-26ff-47d0-807a-7a104e28a16a",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f393c418-b323-421d-b24b-7377275311da"
        },
        "item": {
          "id": "2b507144-1182-4732-9863-17d7a67888b6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "55ac1cf5-be41-4773-93b2-0884ace189b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c656137d-ede7-4159-8d82-68b7ffebb80b",
        "cursor": {
          "ref": "7aa618f1-26ad-47b8-b63e-74405fdae7d7",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "436eae97-bfd1-4aeb-bbef-cddb73cc7619"
        },
        "item": {
          "id": "c656137d-ede7-4159-8d82-68b7ffebb80b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6e20d0d1-6435-467c-b3ab-de8a057f9ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f188387e-c63f-4aff-9068-5ae1ff967227",
        "cursor": {
          "ref": "42a8a67d-5aa8-4c39-81fe-84da10e670f6",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3d037fa5-3f2d-4ee6-a9f9-095afdde9975"
        },
        "item": {
          "id": "f188387e-c63f-4aff-9068-5ae1ff967227",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a6a102fa-ff74-431a-8924-faf562a494d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f97d55-fff6-4919-b2e4-662c2e44c9cb",
        "cursor": {
          "ref": "ce1f680b-d166-447c-ad70-39e55bd65d3c",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "e3660948-7dea-4a0c-b682-66f25b20b105"
        },
        "item": {
          "id": "f6f97d55-fff6-4919-b2e4-662c2e44c9cb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "18ed0279-bbe8-4f63-8230-35a9703ad4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c4dc95-c9f0-4d07-8b51-bbfd24e15396",
        "cursor": {
          "ref": "b9627b35-bddc-4897-b3d1-74ee03f78644",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "99296d15-6ffd-4cfb-b318-c1c58f348672"
        },
        "item": {
          "id": "d1c4dc95-c9f0-4d07-8b51-bbfd24e15396",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "29d49c89-583d-474f-afa6-3ee28f33188f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ad1278-3894-4345-871c-8d96ba6cf334",
        "cursor": {
          "ref": "58702c8c-4f07-4416-bd44-0aa30d85abaf",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c6bd30cf-ba6b-4283-8ab9-2d330023e920"
        },
        "item": {
          "id": "85ad1278-3894-4345-871c-8d96ba6cf334",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4e38c3ac-58f7-4b97-ac0d-f8074e7d8815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db226302-e4d6-4cb8-a677-ffb876d308de",
        "cursor": {
          "ref": "4e1ece6d-360c-43ff-bf3b-a58aba900f4d",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2d9016c1-7236-4ab8-9eda-c00634c1d09d"
        },
        "item": {
          "id": "db226302-e4d6-4cb8-a677-ffb876d308de",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "01a81bfe-c5b5-44e7-9eeb-aa606cd6cf65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904e099e-89eb-4616-a1e6-d498a4080fbc",
        "cursor": {
          "ref": "5d0c708a-6997-4093-afda-0e09f7e3728d",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d6a36795-e13b-4bbc-b392-66c6c0efbb1d"
        },
        "item": {
          "id": "904e099e-89eb-4616-a1e6-d498a4080fbc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d4becb16-eff1-4c7a-b7cb-6ff384221ce0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77893df4-2513-4176-bd19-70a0eaad8825",
        "cursor": {
          "ref": "8cdf0bc3-5cd0-4146-91a5-75860eba958d",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f7c76b01-e287-403b-a613-20aba998a905"
        },
        "item": {
          "id": "77893df4-2513-4176-bd19-70a0eaad8825",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f3231c25-f311-4ddf-b181-d78cbb86e05a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a59f131-b165-4a50-9f2b-466cd11068ef",
        "cursor": {
          "ref": "fe899094-d4b6-450d-94f8-cf57a2679b1d",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8f749362-dc95-4e1e-bde5-1c8b3f4a94b3"
        },
        "item": {
          "id": "1a59f131-b165-4a50-9f2b-466cd11068ef",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8b436ef0-246a-4d0d-87e2-f21daf8dd715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fba4a99-b06f-4f4d-a80a-b28329ffb48b",
        "cursor": {
          "ref": "857bd286-ddc5-4f3d-a2f9-8246394a4145",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "89d9170c-e395-4c75-ac3e-f2667e5e0532"
        },
        "item": {
          "id": "5fba4a99-b06f-4f4d-a80a-b28329ffb48b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "02c3237d-6a50-4b03-b844-137b2440365d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32988617-86b8-492d-ac13-17ac1747b0fc",
        "cursor": {
          "ref": "ca8cbe2c-c039-476f-9222-e8e8c347e241",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a619a8a0-e5bd-406b-835c-92e2823c82cc"
        },
        "item": {
          "id": "32988617-86b8-492d-ac13-17ac1747b0fc",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2f609122-242d-41d3-b55a-0c59a3ca7262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c828ca-cdc0-46f2-a86a-eb52abe3c7e0",
        "cursor": {
          "ref": "e7d3bee0-8e13-4e0e-9dc4-26a594d61542",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "15a4dda6-0783-4c05-93fb-0770cc0654c7"
        },
        "item": {
          "id": "49c828ca-cdc0-46f2-a86a-eb52abe3c7e0",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8027d390-3584-43aa-a27d-3eacde33cc97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "294745c8-482d-4556-bed1-a5328633fc18",
        "cursor": {
          "ref": "437b76a2-1c99-4a30-9302-38064af7c1af",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ab8bc01d-acd8-40be-aa41-34ed3455d8c2"
        },
        "item": {
          "id": "294745c8-482d-4556-bed1-a5328633fc18",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "42c9fae7-a630-46f0-837a-1ee69e124a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9644b035-edec-4799-a2be-f1260afec69d",
        "cursor": {
          "ref": "6527ad12-3502-40a4-8c28-98b94e9bc98e",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "c59f6cd6-608b-4610-993c-804333fabd86"
        },
        "item": {
          "id": "9644b035-edec-4799-a2be-f1260afec69d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "73190621-5bb9-4747-bc86-5480d89f7358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae8db7fa-9a7a-44b6-9fe2-264658efca34",
        "cursor": {
          "ref": "b2931387-4730-471a-a971-43b3ecfcceaf",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "29fc2293-1372-488a-bc0f-8d8c010c67cc"
        },
        "item": {
          "id": "ae8db7fa-9a7a-44b6-9fe2-264658efca34",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6da72962-381a-48cf-8369-0db5bf10fc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "832b254c-d3c8-4c83-991b-bc28000a73b8",
        "cursor": {
          "ref": "ca92e5cc-4273-4485-a7dc-cc9c03e7b7ff",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "019bdc6f-e956-4946-ab39-2c17827a460b"
        },
        "item": {
          "id": "832b254c-d3c8-4c83-991b-bc28000a73b8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "79d55c0f-5be4-4213-a4e4-0218f8259647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829993f2-cdce-46d2-b3a8-24592b6f64ef",
        "cursor": {
          "ref": "630d4aaf-82e4-4d91-82a0-e0c5932783bd",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "170451ef-be6a-47e4-8d05-6082a2676fcb"
        },
        "item": {
          "id": "829993f2-cdce-46d2-b3a8-24592b6f64ef",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "94991697-53e1-41f8-b975-767b9eb8704f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eded778c-dd53-4255-a31f-537d1c9fb99c",
        "cursor": {
          "ref": "2a9d2af5-c8ac-4fbd-9cad-72df97074584",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "94c4f9e1-a8bd-41c4-bd79-b7e15d4d7a51"
        },
        "item": {
          "id": "eded778c-dd53-4255-a31f-537d1c9fb99c",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "42126e13-6fa2-47f3-ac20-63e208a752d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e216064e-723c-439c-bad7-090fe75237ab",
        "cursor": {
          "ref": "2f25626a-d104-4c1d-9fec-426393d6bcc4",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "68ddc744-79ca-4074-85ec-eb0fa917cc7a"
        },
        "item": {
          "id": "e216064e-723c-439c-bad7-090fe75237ab",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8cf717d8-93c5-4b80-81bd-494681e1449d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "11273176-47a1-4248-b2e6-105ade5e864a",
        "cursor": {
          "ref": "f1af7b71-4cd7-4873-936d-5b0f8d856b71",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "8d8ed0c4-a153-4044-bf17-ce3fbb427102"
        },
        "item": {
          "id": "11273176-47a1-4248-b2e6-105ade5e864a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "25972f92-6447-4356-b645-baf9ea735681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0e1edb8a-fe70-4cdf-9db7-9ad594803871",
        "cursor": {
          "ref": "e7f551b7-273e-4390-924f-77a607e0e913",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3647a19b-8742-42e2-92fb-d83a5da386ce"
        },
        "item": {
          "id": "0e1edb8a-fe70-4cdf-9db7-9ad594803871",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "59dcf176-5415-4d52-a365-b114cc47e343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e1edb8a-fe70-4cdf-9db7-9ad594803871",
        "cursor": {
          "ref": "e7f551b7-273e-4390-924f-77a607e0e913",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3647a19b-8742-42e2-92fb-d83a5da386ce"
        },
        "item": {
          "id": "0e1edb8a-fe70-4cdf-9db7-9ad594803871",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "59dcf176-5415-4d52-a365-b114cc47e343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a75693-c6d6-4f7e-bd3b-70a58761fa8b",
        "cursor": {
          "ref": "ced6a30a-217b-4a8d-ad4e-d0437ae9e5ca",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f55f51ce-3545-4b2c-8509-2916f6af9c60"
        },
        "item": {
          "id": "08a75693-c6d6-4f7e-bd3b-70a58761fa8b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8a9c92c5-2799-4eab-a883-de890e4dc187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a4ff5e-4978-473e-969e-6f5955bcef76",
        "cursor": {
          "ref": "70b44958-83fe-4eea-82d4-4265231512af",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4efd8971-7fb1-4330-b915-a5bdba8af3ce"
        },
        "item": {
          "id": "57a4ff5e-4978-473e-969e-6f5955bcef76",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "14550956-cf03-4547-abef-19fcc8720a0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "475d8be4-8820-46cb-8603-529882dff64f",
        "cursor": {
          "ref": "5bdd0af6-95d8-40fe-be03-dc14ba58b8cb",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "db32d9e9-7fda-4051-96cf-5731bd4625e9"
        },
        "item": {
          "id": "475d8be4-8820-46cb-8603-529882dff64f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7945fe8d-a355-45eb-90af-f51c7ccf7382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "244e18aa-dbd0-406e-8b21-22e2d9b5198c",
        "cursor": {
          "ref": "c9621c54-713c-47d9-bd3e-2c020f58c46c",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "5cb94bf4-246b-4794-8424-b384bc9bcc59"
        },
        "item": {
          "id": "244e18aa-dbd0-406e-8b21-22e2d9b5198c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "664bb935-5998-43c0-8eb9-f079fb4c43af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa3befe-0258-4d9f-be76-e90cc138769e",
        "cursor": {
          "ref": "55f1ad35-818e-40dc-8fb6-19588eb6b4e6",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dc45b4fb-845f-42c4-9889-e122b2374b98"
        },
        "item": {
          "id": "0fa3befe-0258-4d9f-be76-e90cc138769e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cf40984e-1ff9-499c-a7d1-5f4e77c6e932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba309fa-6fc4-41cf-9caf-96e651df3982",
        "cursor": {
          "ref": "9fbac044-7be3-43cf-8a71-f16d1e03e725",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "83b04c9b-e2c4-44b8-9d40-768fe590baf7"
        },
        "item": {
          "id": "cba309fa-6fc4-41cf-9caf-96e651df3982",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "43b852f0-0ccf-436d-b9e1-3370f6e922f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09479e55-6a2e-4164-ab82-b6e8f4040c38",
        "cursor": {
          "ref": "f3eea3bb-34c6-4e00-bdd0-38b960c0f0f2",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b82b9268-2aec-43de-91f5-712cd4bb5b0b"
        },
        "item": {
          "id": "09479e55-6a2e-4164-ab82-b6e8f4040c38",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4a4b8d36-446f-4b13-91be-1ca4cbccc778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90d05a3-c47e-485b-ad91-c5ae601db363",
        "cursor": {
          "ref": "9cf6e161-84ce-48df-a296-ec9561fd4163",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1b4cb551-bd84-4d84-be34-01a976c648ce"
        },
        "item": {
          "id": "e90d05a3-c47e-485b-ad91-c5ae601db363",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6637c137-4355-4e4b-af48-a942f9b49a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d44634-d97e-4cbe-ab7c-d189dfed3103",
        "cursor": {
          "ref": "5df8d479-2740-4894-b9db-3bf9b430be9a",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e2ade619-93bf-4e63-8926-b0e2ea6ffb17"
        },
        "item": {
          "id": "90d44634-d97e-4cbe-ab7c-d189dfed3103",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d6e0baf9-3d3f-49f9-b8b6-e7e0c01279fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53beb52c-9224-4a7d-aea4-70b5345bbc1a",
        "cursor": {
          "ref": "4fb328e6-db0f-4d52-94e1-1c74a35a49ba",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a819e85a-c151-4814-a4f5-a8865bf4f307"
        },
        "item": {
          "id": "53beb52c-9224-4a7d-aea4-70b5345bbc1a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f2d887bf-b9db-41be-989f-7ea2c6cc53ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f656da-f61b-41a8-971b-0a2404a0196b",
        "cursor": {
          "ref": "24e4c326-ac95-49c2-817d-63650e23560d",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b7c03df5-f9d0-4c96-8af6-2105bbd7851b"
        },
        "item": {
          "id": "f1f656da-f61b-41a8-971b-0a2404a0196b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7556b05d-fb86-4897-8053-1097245405b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e0a61c-7390-465a-8216-707113c1d237",
        "cursor": {
          "ref": "0ba74a43-c700-41df-b196-2aa932347a6c",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "efa5ab3f-fb07-4e17-87a8-4548543efad1"
        },
        "item": {
          "id": "66e0a61c-7390-465a-8216-707113c1d237",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "47976171-54e3-4476-874b-3564f93cd1cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f1531d6-9639-4ef3-bfe1-d51ce572e392",
        "cursor": {
          "ref": "73ff8432-3233-43a7-b298-3414e95bf585",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "c78dea6d-526f-4b8d-b039-6f807adb5227"
        },
        "item": {
          "id": "6f1531d6-9639-4ef3-bfe1-d51ce572e392",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b3d2fa7e-5097-4562-bde0-776cda440a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1129f4d1-a307-4c5b-948e-fa3dcceaed39",
        "cursor": {
          "ref": "e7cabec1-73c5-4f87-8434-5a164bb2c149",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "84b3bec4-327c-4291-9d81-35d2670d8d42"
        },
        "item": {
          "id": "1129f4d1-a307-4c5b-948e-fa3dcceaed39",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a5418f2c-1b7a-4d7d-ae71-fa4cccf9bcb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf644eb-d789-483f-a275-c6e1d5fcd76b",
        "cursor": {
          "ref": "cefffe51-4d3d-4440-9e9d-a02f58ba605d",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "b75420a4-e391-426b-bbc8-be0cf224a08b"
        },
        "item": {
          "id": "bdf644eb-d789-483f-a275-c6e1d5fcd76b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "50baa09c-8301-442c-b016-6b01b4e87a13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb2fd37-3d1e-4430-835a-f40d437f6a7a",
        "cursor": {
          "ref": "a5eb4d93-ec60-4df7-af1f-2a9b03bf1974",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "08b57a84-62c6-4793-8db9-c115dd238d1c"
        },
        "item": {
          "id": "cfb2fd37-3d1e-4430-835a-f40d437f6a7a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7be504f5-9023-4623-a981-d5ed1a750249",
          "status": "OK",
          "code": 200,
          "responseTime": 184,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "3cde5647-adff-45a2-a287-542593f4dfb7",
        "cursor": {
          "ref": "51689e73-ed96-4344-a147-d6803874ff8a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "4f19d984-09a6-4d6a-b70d-53754a4a6aee"
        },
        "item": {
          "id": "3cde5647-adff-45a2-a287-542593f4dfb7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "547afba0-401f-4be2-9497-9b630a05d6ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24e355b6-cb5b-46b9-b79f-17de593e5a3e",
        "cursor": {
          "ref": "20f835c6-193d-488c-b988-c8ebe6e37632",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f326e30f-9c77-4257-b94d-a737be79da0f"
        },
        "item": {
          "id": "24e355b6-cb5b-46b9-b79f-17de593e5a3e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "2a6d8125-f52a-4904-8d6b-652fa635e0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3ede41c-f89d-4db3-af1a-e461faacf152",
        "cursor": {
          "ref": "92f47387-2a95-4bdf-82aa-1c7984c2fa34",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4bc615ab-a471-4b7e-a3b1-cfbd34eb3033"
        },
        "item": {
          "id": "c3ede41c-f89d-4db3-af1a-e461faacf152",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7c17f11e-cab2-4a1d-b715-ef85b73758d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e35f14c-0fa0-4499-ae57-fc1e79b5a9fe",
        "cursor": {
          "ref": "c2ca62fc-22dc-4d2a-8794-e66b3cfda228",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "3c6fdefd-1766-4af1-accd-03f5801613e1"
        },
        "item": {
          "id": "0e35f14c-0fa0-4499-ae57-fc1e79b5a9fe",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ca964086-7c94-4dc0-a9b2-00603ad8a5a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d61042-3c80-4c79-aa2e-4956d5c98849",
        "cursor": {
          "ref": "05495eae-24f2-485a-be4e-d7d44a8d6ba3",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "39115b15-ec93-4365-a803-04c29ac0591a"
        },
        "item": {
          "id": "72d61042-3c80-4c79-aa2e-4956d5c98849",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "e14f095d-d39c-444a-92ba-08587007daf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a78402-d616-4fdf-ae1d-183c7cab2621",
        "cursor": {
          "ref": "3f4ca0a6-e154-4bb5-988d-0ee0eb6a3450",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "29a4904a-d9ba-4479-ac5c-b4ecfdf5ced0"
        },
        "item": {
          "id": "38a78402-d616-4fdf-ae1d-183c7cab2621",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "13c38eb7-706b-4112-8933-17f512c31a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a00ca19-d31c-4d7f-ad46-701b32d2f839",
        "cursor": {
          "ref": "c44aab2b-bf13-47e1-bff3-8af04248b9f3",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c798a85b-eaf4-4f3f-aee8-af4a159f6053"
        },
        "item": {
          "id": "7a00ca19-d31c-4d7f-ad46-701b32d2f839",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "00196484-e58c-4f25-ab05-5b67aaa3c510",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d4f24d-6f37-47e8-ab5c-169847310126",
        "cursor": {
          "ref": "e9d9cc11-3981-4330-a75b-d65fd58ad8c0",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e3e3d2bb-f171-4909-a1ab-1b755e5e3c1a"
        },
        "item": {
          "id": "e2d4f24d-6f37-47e8-ab5c-169847310126",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fd6cf862-5118-47af-86d3-b5ec2e6161d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69624c55-26a7-47db-8c49-c5ef96505532",
        "cursor": {
          "ref": "5bac5df6-1b1c-4d85-9bc0-3edbc8636379",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "feafed70-a02f-4d08-8f04-62a790eb8963"
        },
        "item": {
          "id": "69624c55-26a7-47db-8c49-c5ef96505532",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "fdbe5b21-187e-45b9-97d5-f5267db90e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cceec6-7d0f-4b13-a54a-9a0a0a7f4336",
        "cursor": {
          "ref": "1f53cf66-6c75-4dbe-ae14-dc6b94f31cfb",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "b5b0f0bc-534e-4d97-b20a-89459876e0f9"
        },
        "item": {
          "id": "88cceec6-7d0f-4b13-a54a-9a0a0a7f4336",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "a95a2e7b-0fde-4b74-ab81-8706eef247cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4667ce-7ddc-46c4-9fa7-4a10d4d61ad8",
        "cursor": {
          "ref": "5ce0797f-629e-48f7-8dd5-2cd97b2bb56d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d0c1adab-996a-44d2-a28c-ee890fc19b8e"
        },
        "item": {
          "id": "ac4667ce-7ddc-46c4-9fa7-4a10d4d61ad8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "fe7e5b54-92c4-4518-9182-28e684384949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59144b9-f221-4552-bbdc-64ebd17c1b36",
        "cursor": {
          "ref": "08a2aa57-7d48-4adc-bc39-642c5cadf903",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0291f2e1-a2a7-4603-8e7e-79cbb5993928"
        },
        "item": {
          "id": "d59144b9-f221-4552-bbdc-64ebd17c1b36",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "6138c32b-be43-4e85-ae1c-31652ce85464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f6bfe0-def8-4d28-9843-94e2b4cd5463",
        "cursor": {
          "ref": "ff95b5e4-1a95-443b-a60b-a90ee268796c",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a11a9023-ebb9-477d-b3e4-a2e216e5e4d8"
        },
        "item": {
          "id": "82f6bfe0-def8-4d28-9843-94e2b4cd5463",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "262ba5a1-e509-43c5-a341-6fde36abbc1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "575f4483-4de6-4304-b974-3c2840975d41",
        "cursor": {
          "ref": "7db2abe8-afa7-48af-bcc4-a0bacb43dac1",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2bbe89b0-eee3-47c5-81d7-6b0dad407046"
        },
        "item": {
          "id": "575f4483-4de6-4304-b974-3c2840975d41",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3c6e90bc-2f68-448f-9055-028d43be48d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3082ad72-1171-4f1d-8c64-bc9b7b879bff",
        "cursor": {
          "ref": "4d8f0e58-f334-4272-be03-e3118ea1af90",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0b15dae0-f22b-4400-8ef7-3f7dccc0b0aa"
        },
        "item": {
          "id": "3082ad72-1171-4f1d-8c64-bc9b7b879bff",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "02f7a86e-90eb-4201-9c2f-9b15b92f9053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee17286-f888-49e9-adc2-26c2f76116c3",
        "cursor": {
          "ref": "5a8293a6-5088-4b06-b0a1-14a106f1dcbf",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "098f2037-5d13-461f-831a-0e2a149c30f0"
        },
        "item": {
          "id": "1ee17286-f888-49e9-adc2-26c2f76116c3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "bf40f957-25ea-458d-9eaf-b15af6231779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6f7d004-24c7-43d8-b131-0ea128c8410a",
        "cursor": {
          "ref": "476ed55e-1dd5-49a6-a4e1-3c6a7bef8353",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fec66cad-ea9a-401f-b00a-d7166cf7447b"
        },
        "item": {
          "id": "e6f7d004-24c7-43d8-b131-0ea128c8410a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "dad938f1-349d-4a62-b355-aa63f887529e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d5965b-5587-48a0-882d-929b04c871b8",
        "cursor": {
          "ref": "feecdf6e-ef67-4b86-afbc-8390b7d493b7",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "70c53104-090d-42b7-8353-0f82c3c0fed3"
        },
        "item": {
          "id": "69d5965b-5587-48a0-882d-929b04c871b8",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ca1f4a50-a77f-4f0e-bb35-18d9889acc90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d419214e-4f46-4ffc-ba48-84a7518e3029",
        "cursor": {
          "ref": "c0927625-8e3a-453b-ab8e-1087d28f3228",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9ca027f1-bd73-4ec5-ac64-03e080b7c6c1"
        },
        "item": {
          "id": "d419214e-4f46-4ffc-ba48-84a7518e3029",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3ec2e62b-bcbd-4443-a7e6-bde3f9646b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8edf3f20-2678-4786-8bf2-dd514a69742d",
        "cursor": {
          "ref": "63895dfe-606d-4984-b0ee-3627b063b350",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "69ef3680-998e-4665-827c-e5035f4cf4ed"
        },
        "item": {
          "id": "8edf3f20-2678-4786-8bf2-dd514a69742d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "65d6a16a-6b2a-433b-a33a-4ec4ac1a214e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d518cd41-3785-4598-87cb-f2ed825d905f",
        "cursor": {
          "ref": "4dba5186-9a58-4c0e-8395-ff2c3bdcf0b5",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2f8dc504-9c54-4ba3-95c7-313159236228"
        },
        "item": {
          "id": "d518cd41-3785-4598-87cb-f2ed825d905f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "6bd7a604-95a5-4193-8551-fa5c4a2f5a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567cbf4c-d36f-4f4e-935c-db8aa44b3b97",
        "cursor": {
          "ref": "6a74b552-1074-4240-9fe7-2fdb7caf0fbc",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d15c9578-5ddb-4dc5-91fd-cfb6bac21e2e"
        },
        "item": {
          "id": "567cbf4c-d36f-4f4e-935c-db8aa44b3b97",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "06aa0f38-3531-410c-9ea8-dcce98d6ed25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec0401d-ce15-43cb-b702-0f630b8b8845",
        "cursor": {
          "ref": "bd8b3ac0-d6b7-49d7-9642-2c03098a286d",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e4a6a1c5-2bc6-4b40-8a39-c2c646e927ce"
        },
        "item": {
          "id": "dec0401d-ce15-43cb-b702-0f630b8b8845",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7136a32b-ec59-43dd-93b3-9860fdbecaf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a598df8d-b3db-4a53-8976-88d38f323723",
        "cursor": {
          "ref": "a64ecf57-475b-4ecd-b3bd-2aba16b8ee91",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a8b5188d-8d78-4dc0-9511-19c3fd13dacd"
        },
        "item": {
          "id": "a598df8d-b3db-4a53-8976-88d38f323723",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "89e34aba-5c5a-4769-aeae-76efc0984167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4a639a-876f-471c-b05e-ade5cf852b74",
        "cursor": {
          "ref": "341eec9f-ea47-4c74-87c8-dd596d8db61c",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "aa20a7ba-8be0-4eee-a6a3-aec86f10e132"
        },
        "item": {
          "id": "0b4a639a-876f-471c-b05e-ade5cf852b74",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "db94c57f-c065-4660-98d4-6e0b12ca5356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041c43b3-f2e8-48f5-8504-b3a4530f012e",
        "cursor": {
          "ref": "58354177-7163-4cbe-856e-cc76a8fe6716",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c0a2774e-711d-4831-b6f9-4713008962d8"
        },
        "item": {
          "id": "041c43b3-f2e8-48f5-8504-b3a4530f012e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d0036e0a-6e8a-429d-b10a-27378437a3eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7c58ce2-a970-48ba-a34e-9cfd5d473379",
        "cursor": {
          "ref": "35c42474-67c0-4e5d-82f3-15f54c4d0e5d",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b829fd91-2efb-4c68-8a6f-e53b0d8857ba"
        },
        "item": {
          "id": "a7c58ce2-a970-48ba-a34e-9cfd5d473379",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e93154ba-5b50-4d99-8430-46b0e6bd24a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e93e9ab1-a906-41f3-8e44-ab5b635979e8",
        "cursor": {
          "ref": "62e2f0ae-ba2f-486b-86e3-43f9268902c5",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "21d67273-6dff-47de-81ed-3de842f42b16"
        },
        "item": {
          "id": "e93e9ab1-a906-41f3-8e44-ab5b635979e8",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9c2f69fe-d7e6-4c4a-9182-085564e2df24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a74316-60eb-4450-bf81-db5830911715",
        "cursor": {
          "ref": "ae506e99-aa51-45e4-ac4b-50eb44ea976b",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7a6325af-f766-4075-aa09-971f4c3f9886"
        },
        "item": {
          "id": "56a74316-60eb-4450-bf81-db5830911715",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "37185524-275e-4362-9aeb-fda15d77a6fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c933caf5-e8a1-4af9-bbb4-3d139cafddc9",
        "cursor": {
          "ref": "3f313d43-4577-4e76-b0d2-827bf5f72428",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "31bcee6e-2506-4693-a0cb-fcae0eff66f1"
        },
        "item": {
          "id": "c933caf5-e8a1-4af9-bbb4-3d139cafddc9",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "935aa340-9977-4a52-8266-22a8982735a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab8a29fb-e73e-4320-aeac-376eed2dec54",
        "cursor": {
          "ref": "393ea502-664a-47e8-b3f3-0f3365108283",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4adf0e4e-cf8d-46dc-a413-393695755c46"
        },
        "item": {
          "id": "ab8a29fb-e73e-4320-aeac-376eed2dec54",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a335c177-e88e-4edb-aa9c-a361e0798f17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969c3b82-ade9-433a-9eed-eed58a88fe46",
        "cursor": {
          "ref": "757ff9bf-f10c-4b49-b10a-7fdfd877568e",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "fecd2a8c-470a-462e-a4d4-df9dbf7f5fb7"
        },
        "item": {
          "id": "969c3b82-ade9-433a-9eed-eed58a88fe46",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "960a676c-5042-4b13-a413-d91e3ebe6860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35f2eda-7dff-4160-bee4-ca5ceb466519",
        "cursor": {
          "ref": "80306549-f14d-4fff-a18b-3be94d4460b2",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "bf95911f-9f79-4341-adf0-d2caff7de1b4"
        },
        "item": {
          "id": "d35f2eda-7dff-4160-bee4-ca5ceb466519",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "aee0c4d4-aaa0-41af-9619-68580f7fcc48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eda8606-d72d-4857-8fe1-7cb89ba7af64",
        "cursor": {
          "ref": "d20e9bcf-dfae-4242-ad67-6f73251dcae6",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "64d25b0b-d4bf-44f0-a86d-0ded6d547315"
        },
        "item": {
          "id": "5eda8606-d72d-4857-8fe1-7cb89ba7af64",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "683f0bb9-cfa5-4fa0-a583-e4aef3b20a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2618ea7c-a98d-4ee1-9817-36c0f36719ba",
        "cursor": {
          "ref": "55735106-ffb2-47e6-86fe-3151679e4c6d",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "01e7f6b7-f101-4140-bc59-2aff4c9af096"
        },
        "item": {
          "id": "2618ea7c-a98d-4ee1-9817-36c0f36719ba",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1818e3c7-83cf-4dad-9456-56cc46766985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecf2332f-ade4-409f-aa83-f664c9361e51",
        "cursor": {
          "ref": "8b280e30-cd10-4506-ae76-d486f0138b91",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "0f1370f7-a607-46cf-a130-4499b5eb2af7"
        },
        "item": {
          "id": "ecf2332f-ade4-409f-aa83-f664c9361e51",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b3d4b3ec-9e25-43ad-8500-e291a7de464d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e086c6-b43c-4dc4-9036-3d0f0326c2ea",
        "cursor": {
          "ref": "c4a149ff-667e-444e-a873-e62abfc95093",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6f28a0ad-a4fd-4c5f-b192-967ee5669db4"
        },
        "item": {
          "id": "16e086c6-b43c-4dc4-9036-3d0f0326c2ea",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a74deaf8-593a-42e5-b778-9a87b78fd360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83541a5-a3c6-4177-a21d-0c5bc6ccdcfd",
        "cursor": {
          "ref": "3c58868d-305b-4b49-bbd5-2f6f8e04d2ef",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dd513614-a535-44f5-ad15-b6c9b326d6a6"
        },
        "item": {
          "id": "b83541a5-a3c6-4177-a21d-0c5bc6ccdcfd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "37f39ebe-fb05-42e6-a10e-89f31c4ba787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef135383-5584-4518-a5fa-9991326e8647",
        "cursor": {
          "ref": "f75833d7-99e8-4ac6-870d-21c249273482",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "cecc67c4-88c2-41e8-bbc7-f731829b61e4"
        },
        "item": {
          "id": "ef135383-5584-4518-a5fa-9991326e8647",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3fe12729-0583-4c5f-ae5d-6a63c577273e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9728cbef-a678-468a-9f53-0c1cbd9994ed",
        "cursor": {
          "ref": "c3c457f2-5717-499f-8d43-2def32043daa",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9485ec0e-1104-49d8-bbc5-cca762de68e3"
        },
        "item": {
          "id": "9728cbef-a678-468a-9f53-0c1cbd9994ed",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "318d47c9-67e7-4c57-b4a2-0d4f84d3b25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38292e2-1565-4b88-8c29-407e5bc39b4a",
        "cursor": {
          "ref": "72911c65-ac32-4b27-b505-69b118927517",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "4c598b09-802a-4793-8131-0dd07bc8b777"
        },
        "item": {
          "id": "a38292e2-1565-4b88-8c29-407e5bc39b4a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a5d8e6a0-048b-4d6d-b0fe-ab884a7b62a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d66dc7-b849-4751-86d4-87a454efb4e7",
        "cursor": {
          "ref": "5f63ff51-7ece-4f31-89f0-005c570c0ee4",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c725562a-2855-4588-9089-2bffeaedce0d"
        },
        "item": {
          "id": "20d66dc7-b849-4751-86d4-87a454efb4e7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d5afeeac-6f1c-4467-9085-eb8dbd3699f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2ad256d-49a0-425f-a0a3-9dfbf878bb2d",
        "cursor": {
          "ref": "1ae2bd4d-06f8-436e-9671-019b46d73b82",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4fbecec3-9a5c-4b81-b7d6-061b66754370"
        },
        "item": {
          "id": "f2ad256d-49a0-425f-a0a3-9dfbf878bb2d",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "445fdcb9-5059-4558-adbe-4f7c90169027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e9c4aa-9a8e-454b-a1c3-56a02f8be903",
        "cursor": {
          "ref": "30e68e75-a60d-4f13-b1d7-a61069c23c96",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "79e71b3b-cb74-4963-b919-cc6a2b1b3c28"
        },
        "item": {
          "id": "f2e9c4aa-9a8e-454b-a1c3-56a02f8be903",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "07740350-8e08-48f7-8c38-6da27bb94f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0ba300-36c9-4981-a073-3293f0f54455",
        "cursor": {
          "ref": "df0e2fde-4435-4f4d-adb6-c0f97adc767d",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6b9662f4-f875-4395-9436-04f9b7e054c0"
        },
        "item": {
          "id": "1b0ba300-36c9-4981-a073-3293f0f54455",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b493484b-1ef5-4282-a635-c9510f863cf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab972359-f2dc-4b65-acae-93b41e81b960",
        "cursor": {
          "ref": "acd97573-26a2-4f6d-9b83-356e9a8736d5",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e220731c-737a-42cf-af5a-fadd60ba25ca"
        },
        "item": {
          "id": "ab972359-f2dc-4b65-acae-93b41e81b960",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "174ccdff-571e-4afa-9699-975cee9670a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a081457-9cf2-498d-8a54-2467ae8360b4",
        "cursor": {
          "ref": "fb029765-9b15-41b5-b365-99cbf0d8b0fd",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1b8c14c3-d137-46e0-87a9-d5d8cfa46a3e"
        },
        "item": {
          "id": "0a081457-9cf2-498d-8a54-2467ae8360b4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "05231658-2ccb-472a-b19f-ec9ab5d35872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b71a203-f3dc-4e79-9d6c-34f128813fbc",
        "cursor": {
          "ref": "2ba22098-c5de-4819-91c5-77e03bca1d90",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "04d7a4e9-e030-4884-80b3-354edae326bd"
        },
        "item": {
          "id": "1b71a203-f3dc-4e79-9d6c-34f128813fbc",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "320b2885-af1f-4047-9d4d-a1f94b67c785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50be1435-04a3-4467-a04a-89d471575db9",
        "cursor": {
          "ref": "54766709-02e9-49c2-b25a-09607e18cc71",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1f9576f0-be4a-4bdc-8549-a603580fc44c"
        },
        "item": {
          "id": "50be1435-04a3-4467-a04a-89d471575db9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5d7a73ef-565e-4721-a195-bd87809906f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c67c01-5d3e-4647-a4f0-ff7ee1e50a53",
        "cursor": {
          "ref": "998c3790-0a4c-4268-ad83-a635aafd3ad8",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "235877c5-b65b-4bde-b958-739f4b9be670"
        },
        "item": {
          "id": "f5c67c01-5d3e-4647-a4f0-ff7ee1e50a53",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ba0342f4-0893-4c45-b4b6-e5fac52b3e0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c22a35dc-b60e-4307-8c64-88fa3136f712",
        "cursor": {
          "ref": "a808d4fa-0f81-4ea4-881f-48606279e1ac",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "39912370-c74a-419a-976a-5a664fa64c29"
        },
        "item": {
          "id": "c22a35dc-b60e-4307-8c64-88fa3136f712",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "91c6f21a-9784-4238-bc45-aad5cfb61bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27b8d37-1ec0-4eed-aa9f-8098eb741587",
        "cursor": {
          "ref": "b11decd2-1f6e-48fa-b8ac-3251411638ba",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f1abb153-b65f-496d-a066-0045420ed9f7"
        },
        "item": {
          "id": "d27b8d37-1ec0-4eed-aa9f-8098eb741587",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d80d3777-9047-4397-a735-1b707ed9553b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22d4305e-591d-4ff4-a827-ecc56b1111ec",
        "cursor": {
          "ref": "6dc1cc54-2977-49a3-af5f-7f0544359080",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e6d709a9-4df4-4ada-80fb-b4756d6077f7"
        },
        "item": {
          "id": "22d4305e-591d-4ff4-a827-ecc56b1111ec",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "688fbc0c-3574-4c02-9ad7-08664ece7d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70b36f7-110c-4498-87a0-8f70e920f140",
        "cursor": {
          "ref": "21599efe-94ba-4be9-8601-bf9df2cb1d44",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "28704bb3-5dbb-4e9b-aaf7-3b16317b1241"
        },
        "item": {
          "id": "b70b36f7-110c-4498-87a0-8f70e920f140",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7c1a834f-6c4b-4eed-9379-2a749f429c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7b84a6-85c4-401d-a194-ed1cef4a28be",
        "cursor": {
          "ref": "c329f209-0dde-4631-a184-0be916f4e23a",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "64785110-0ef4-453e-9a47-0d980792e4da"
        },
        "item": {
          "id": "ec7b84a6-85c4-401d-a194-ed1cef4a28be",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3a6fc212-269d-49f3-806c-d7851d1ed30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28dc100-299d-493f-8d1a-c76c295bfb3a",
        "cursor": {
          "ref": "93b06634-df00-440c-b5da-4fd8efc98b48",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ffeff5b4-c172-4969-b86d-c945ba2c562d"
        },
        "item": {
          "id": "c28dc100-299d-493f-8d1a-c76c295bfb3a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9893fdd7-e337-4ff8-8caa-65b6ba8308d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48b168ea-bf84-46ce-bfba-cc40dfc6047b",
        "cursor": {
          "ref": "d0342f8f-7ef9-4ca4-b2f2-c6a27d412a0e",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "e0367805-36b3-4aca-aaa3-945e697620ab"
        },
        "item": {
          "id": "48b168ea-bf84-46ce-bfba-cc40dfc6047b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "07dc688f-6225-48ee-a2f5-b14520a8024b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5453cc2-a9f5-4a23-a0d8-f9a65adbbe83",
        "cursor": {
          "ref": "35566d41-c128-444d-9553-7ed84d890009",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1ca8e349-8517-451c-8802-4c07061ae48e"
        },
        "item": {
          "id": "c5453cc2-a9f5-4a23-a0d8-f9a65adbbe83",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e12e5ada-5727-425f-bad4-82d29be2679e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1079ee6-7d37-419f-ab80-0d8652229b42",
        "cursor": {
          "ref": "52635894-df51-4070-ab13-ad56d85495ab",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "779c0b5e-6e54-46c5-b2c3-403e34529637"
        },
        "item": {
          "id": "b1079ee6-7d37-419f-ab80-0d8652229b42",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "076f421a-1b4b-4430-8273-7082b10ad0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06b93fe-3390-4b04-9898-927aed814c87",
        "cursor": {
          "ref": "c8ffcce5-fcd1-4bbe-a04e-93d237b7b875",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "947fcbee-6cfe-4d97-8d11-1fadd70166da"
        },
        "item": {
          "id": "b06b93fe-3390-4b04-9898-927aed814c87",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c7094e47-a1c0-4029-b976-d9573dc9167d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1a29b2-b565-479c-bfb1-e51abecd6b8b",
        "cursor": {
          "ref": "cad1b96e-03a2-48cb-a094-3129d133ca5b",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f7362ea1-6b8c-4086-a9d7-ea3e9f8ac0da"
        },
        "item": {
          "id": "1b1a29b2-b565-479c-bfb1-e51abecd6b8b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "edbc31d9-b35a-4e0b-8443-c45e79fa6904",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92e94bc-e50e-409f-80a0-4ef40281ea9d",
        "cursor": {
          "ref": "fc5bfee7-1b90-43b0-b58b-df077e781739",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8ab769d8-35e9-4ba9-83d2-a2b44863b545"
        },
        "item": {
          "id": "e92e94bc-e50e-409f-80a0-4ef40281ea9d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b21b3985-997b-4b15-9c85-c9f99b4d43f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b8c2029-5c35-4c20-990e-6835d1aabde1",
        "cursor": {
          "ref": "d5900c18-cfdb-4abc-85e1-39284029afc7",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f27c810f-abd7-46ed-8a3a-1a3b162f8030"
        },
        "item": {
          "id": "9b8c2029-5c35-4c20-990e-6835d1aabde1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b026e1a9-9b7f-47cc-afd9-821cf4fc9981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "153b10bf-4301-4086-ae0c-d198b4f37319",
        "cursor": {
          "ref": "9e459c01-4730-4ee6-96c0-c8dd6e7c3371",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d86aa9e0-0a8d-4fcc-8f9a-7d1c97879d4e"
        },
        "item": {
          "id": "153b10bf-4301-4086-ae0c-d198b4f37319",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "14e4b26c-a523-4782-9a28-67dddb5df29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca7f5425-adef-4d7a-9869-50b4f247d2cc",
        "cursor": {
          "ref": "057eb647-b6e1-499e-a054-0925427b0743",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ac55ea0d-c18a-4d32-a782-982bc0b2ded2"
        },
        "item": {
          "id": "ca7f5425-adef-4d7a-9869-50b4f247d2cc",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d1ed843e-2d05-4464-8ffe-c7f216c50ade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "521b014c-f194-4211-a180-e496c24c06f6",
        "cursor": {
          "ref": "a471a315-1c70-48da-96f3-99cc98bf6030",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "33ae2d4e-cb6e-478e-8990-c67e880aec16"
        },
        "item": {
          "id": "521b014c-f194-4211-a180-e496c24c06f6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f00914a1-e4ac-4d35-a5c4-1607265646d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d415a9f8-5aef-48d2-ae32-f4896f8f455d",
        "cursor": {
          "ref": "ae95b4ce-b6bb-4afa-9bfc-4ed2997902fa",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c3244c9a-dc53-49a3-a7cc-4e62bef159fc"
        },
        "item": {
          "id": "d415a9f8-5aef-48d2-ae32-f4896f8f455d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5ef46ab7-a0d0-4509-aa3a-a1e5b80639d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595715d5-8dbe-4fc7-9260-72a1fd2205e5",
        "cursor": {
          "ref": "8ce814bc-d0a9-4379-a494-ad8e9533b5fa",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ee2a4f65-fe6c-48c5-8bea-ddb12a0056c4"
        },
        "item": {
          "id": "595715d5-8dbe-4fc7-9260-72a1fd2205e5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "71600ca8-b120-470e-ba73-4ccc0809ea1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6ac518-2829-483f-889d-e78b3fc8b642",
        "cursor": {
          "ref": "9b5711b4-ece3-4709-9873-e38965325825",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "321b49c8-0128-4333-9c71-079727e090d2"
        },
        "item": {
          "id": "ec6ac518-2829-483f-889d-e78b3fc8b642",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ac29c0c1-245e-4339-8635-180f1e70c89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101fbded-fd8a-4f8d-8d49-4219df450872",
        "cursor": {
          "ref": "35c7d194-ec31-45e4-9f9b-f1616ba8818f",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "076109f8-0729-46c1-aedf-b2eda7d681c3"
        },
        "item": {
          "id": "101fbded-fd8a-4f8d-8d49-4219df450872",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c75c6744-2374-42c9-ac3a-9206f78c6036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e188528e-ffbf-4f36-8f5d-e2d931a51360",
        "cursor": {
          "ref": "1fae3a49-9d9f-41e7-9715-48b9c9b02736",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f1d8cfb1-3f25-447e-b0c8-e70302406e9f"
        },
        "item": {
          "id": "e188528e-ffbf-4f36-8f5d-e2d931a51360",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b6d63682-a68a-45b3-af91-2051e3f03e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96312425-57e4-4ac9-ba8f-289b8141b191",
        "cursor": {
          "ref": "a29f5324-0613-47b7-8333-79e903b5c4cf",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0e68d698-9ccb-49b3-b54f-f5ebff940db4"
        },
        "item": {
          "id": "96312425-57e4-4ac9-ba8f-289b8141b191",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "da2ac8d8-466e-40b6-9288-356e008dc009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcd5f87-52b1-46ee-a5b2-636324a56e35",
        "cursor": {
          "ref": "cadebcdc-ab9f-4b03-a835-31a3c0d94494",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ae32f4fc-7028-48c2-93bf-f1577e017413"
        },
        "item": {
          "id": "9fcd5f87-52b1-46ee-a5b2-636324a56e35",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "12b04ea9-567a-4b36-9807-fa65ce4e4d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5f5d43-8cc8-4a2a-ac23-18619c06ac13",
        "cursor": {
          "ref": "6deede9f-a476-453b-ad0d-33644ec8d01c",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1fc9917a-8e13-4ed6-9850-cc523fe8085d"
        },
        "item": {
          "id": "ad5f5d43-8cc8-4a2a-ac23-18619c06ac13",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4839ac78-bed0-4123-8344-8eb05d68a9c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fa83011-b78c-4fb0-97d4-53d9be9429d6",
        "cursor": {
          "ref": "6a62c53f-d888-41eb-9ab1-5928af6a8fdd",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "56498d61-54c4-4692-bf70-f031db1dd683"
        },
        "item": {
          "id": "2fa83011-b78c-4fb0-97d4-53d9be9429d6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "442dd4e8-7b7a-44b8-9bd6-73df913077f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2f41fd2-ca10-4627-9b59-85fbce02f0a3",
        "cursor": {
          "ref": "1562b5b7-49b6-4b87-bae7-26c5fab4d6a6",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "58e8f19f-00bb-4557-a5e7-759faaf35ea1"
        },
        "item": {
          "id": "c2f41fd2-ca10-4627-9b59-85fbce02f0a3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b2985246-1144-43c1-9a74-bf42e88f8f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cbffa0-2f77-4a14-8b21-eeadfffb6710",
        "cursor": {
          "ref": "77efcdd0-91a9-4174-bb73-acb03913ce74",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "07aa86bd-c118-47d5-a769-615b89af0282"
        },
        "item": {
          "id": "93cbffa0-2f77-4a14-8b21-eeadfffb6710",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "57b9275f-0347-4744-9ce0-8d1f5fe829f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4f0292e-4803-4d00-bc67-321fe8f5e2ef",
        "cursor": {
          "ref": "f55262a5-c3e6-48b2-a579-9bbbde829181",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e27b45a8-0db1-4ea2-99b7-6d7283b45a0a"
        },
        "item": {
          "id": "f4f0292e-4803-4d00-bc67-321fe8f5e2ef",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6be5a99c-8ee4-4e3a-9bb8-988f207584d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bb8869-a380-4b47-833e-86e7474b932b",
        "cursor": {
          "ref": "e27e2449-dc17-4617-81c2-189f4efc3993",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "6711b33d-a503-4785-9b88-385ec23a3b8f"
        },
        "item": {
          "id": "94bb8869-a380-4b47-833e-86e7474b932b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ca0d8823-69e4-42fb-b2e1-f85a1049d3c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703d4071-1976-4a64-a91d-11f3b2f1e61a",
        "cursor": {
          "ref": "2db7264b-6d9f-4d76-9888-b227e59e0f10",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "d4c9d801-0062-40f0-b010-2cbe1a6125de"
        },
        "item": {
          "id": "703d4071-1976-4a64-a91d-11f3b2f1e61a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "39c8fe8e-e83e-4325-938c-30ce972ab87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c2d929-29ee-4aa2-83c3-da9ec15a78d4",
        "cursor": {
          "ref": "b2ba9a15-242c-42be-91f9-c1eddd57feb4",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f82189a1-2aa1-4742-add7-50378bf100ac"
        },
        "item": {
          "id": "71c2d929-29ee-4aa2-83c3-da9ec15a78d4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "61914812-11ac-47f4-870d-01da3d7f9a4a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "3a4182b3-2ad0-40d9-b654-e32d4429e359",
        "cursor": {
          "ref": "f1b6668e-3963-4b73-97cb-74d8bf44edb4",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4f1816e5-5f75-4166-8d42-b772b85d2afd"
        },
        "item": {
          "id": "3a4182b3-2ad0-40d9-b654-e32d4429e359",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "31102652-de77-4c53-a78c-dbafee498a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "96c6b689-fb80-4984-82bf-2ef0b83e3ee1",
        "cursor": {
          "ref": "7eea49d5-8779-4bb7-a87e-88545b1eae20",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "eab340be-d23b-414d-aec0-90c37f90dc24"
        },
        "item": {
          "id": "96c6b689-fb80-4984-82bf-2ef0b83e3ee1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "1a3d6d94-78be-42ca-94f2-a5abbb6ed144",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "41a6b032-8e60-4753-9939-d24c8e03bf20",
        "cursor": {
          "ref": "40f40d54-e734-4612-b7d2-19b13cb2eaf5",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "fc6fe218-8062-4440-873c-55e585fe5fed"
        },
        "item": {
          "id": "41a6b032-8e60-4753-9939-d24c8e03bf20",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ab53888c-fdb9-4d5f-bcb2-05789eb2aeb7",
          "status": "OK",
          "code": 200,
          "responseTime": 1861,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d070b3-a608-4387-903f-b2561268ec74",
        "cursor": {
          "ref": "8d01a200-5fc0-4871-addb-4883dbf4611c",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "42e7444c-d883-4a0e-96d0-6e88164bc1da"
        },
        "item": {
          "id": "c1d070b3-a608-4387-903f-b2561268ec74",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "7b11e3a0-2049-4c9c-bb6b-b44baca8fd0d",
          "status": "OK",
          "code": 200,
          "responseTime": 2139,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fe155e-ce0a-4b0f-a936-4f0f53fbbdca",
        "cursor": {
          "ref": "a090f1bd-f13c-495a-a488-0dfe8984920f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8c970e46-2afe-4f9d-b3df-ad534da972a1"
        },
        "item": {
          "id": "83fe155e-ce0a-4b0f-a936-4f0f53fbbdca",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e5b6df1-9f90-48ba-8833-1e543bf387cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "83fe155e-ce0a-4b0f-a936-4f0f53fbbdca",
        "cursor": {
          "ref": "a090f1bd-f13c-495a-a488-0dfe8984920f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8c970e46-2afe-4f9d-b3df-ad534da972a1"
        },
        "item": {
          "id": "83fe155e-ce0a-4b0f-a936-4f0f53fbbdca",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e5b6df1-9f90-48ba-8833-1e543bf387cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "83fe155e-ce0a-4b0f-a936-4f0f53fbbdca",
        "cursor": {
          "ref": "a090f1bd-f13c-495a-a488-0dfe8984920f",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8c970e46-2afe-4f9d-b3df-ad534da972a1"
        },
        "item": {
          "id": "83fe155e-ce0a-4b0f-a936-4f0f53fbbdca",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e5b6df1-9f90-48ba-8833-1e543bf387cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "7bf1616d-2cf1-4bc2-8868-708132ede156",
        "cursor": {
          "ref": "030848bf-8bf4-4705-b713-5c5d8e53cc8d",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c25987d6-ea75-4d76-a584-02e9404f8c7c"
        },
        "item": {
          "id": "7bf1616d-2cf1-4bc2-8868-708132ede156",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "6e8bd9f6-9c94-4b73-bb11-599e5d0c665e",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "600fa51e-ce09-4236-85f5-5138f7383185",
        "cursor": {
          "ref": "7fa0b87c-2637-45d0-9530-e43d2b260948",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "101857bf-67fd-4dde-9346-b8c3fd3d058f"
        },
        "item": {
          "id": "600fa51e-ce09-4236-85f5-5138f7383185",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "289f9c8a-dbdd-4e5a-b16f-7222708b6584",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "600fa51e-ce09-4236-85f5-5138f7383185",
        "cursor": {
          "ref": "7fa0b87c-2637-45d0-9530-e43d2b260948",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "101857bf-67fd-4dde-9346-b8c3fd3d058f"
        },
        "item": {
          "id": "600fa51e-ce09-4236-85f5-5138f7383185",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "289f9c8a-dbdd-4e5a-b16f-7222708b6584",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "22cd79f7-521a-4555-b23b-7a2902f7a262",
        "cursor": {
          "ref": "dbd150c0-3cb3-48db-9ddf-f8ec2b3cdee6",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6bd6e3a4-b613-4d54-98a0-6f6d9d0cee0c"
        },
        "item": {
          "id": "22cd79f7-521a-4555-b23b-7a2902f7a262",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "4cd583a7-d037-4914-959b-3dbf11943183",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 139,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "9ff4d146-6fc4-4921-a668-fe69880caade",
        "cursor": {
          "ref": "8554476e-0ffc-4904-9bbb-6d7ee3b8bda4",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "78928396-33a4-41a9-9e65-5560809826ce"
        },
        "item": {
          "id": "9ff4d146-6fc4-4921-a668-fe69880caade",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69f7b518-6ea1-49f5-9cc0-b3359ead5944",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9ff4d146-6fc4-4921-a668-fe69880caade",
        "cursor": {
          "ref": "8554476e-0ffc-4904-9bbb-6d7ee3b8bda4",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "78928396-33a4-41a9-9e65-5560809826ce"
        },
        "item": {
          "id": "9ff4d146-6fc4-4921-a668-fe69880caade",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69f7b518-6ea1-49f5-9cc0-b3359ead5944",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "0ed158a2-c15d-4758-a936-d158e216fb3b",
        "cursor": {
          "ref": "5899dff0-9dba-46c1-8952-266d3ffb77a4",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c7e5c9e5-b063-4108-a394-92676c426d34"
        },
        "item": {
          "id": "0ed158a2-c15d-4758-a936-d158e216fb3b",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "76647327-7b6f-4430-864c-70805bd7d7ad",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}